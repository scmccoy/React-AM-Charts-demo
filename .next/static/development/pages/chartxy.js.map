{"version":3,"file":"static/development/pages/chartxy.js","sources":["webpack:///./components/XY.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/Chart.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/Legend.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/axes/Axis.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisBreak.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisFill.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisFillCircular.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisLabel.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisLabelCircular.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisLine.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisRenderer.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisRendererCircular.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisRendererRadial.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisRendererX.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisRendererX3D.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisRendererY.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisRendererY3D.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisTick.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/axes/CategoryAxis.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/axes/CategoryAxisBreak.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/axes/DateAxis.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/axes/DateAxisBreak.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/axes/DurationAxis.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/axes/Grid.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/axes/GridCircular.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/axes/ValueAxis.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/axes/ValueAxisBreak.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/cursors/Cursor.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/cursors/RadarCursor.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/cursors/XYCursor.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/Bullet.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/Candlestick.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/ChordLink.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/ChordNode.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/CircleBullet.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/ClockHand.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/Column.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/Column3D.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/ConeColumn.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/CurvedColumn.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/ErrorBullet.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/FlowDiagramLink.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/FlowDiagramNode.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/FunnelSlice.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/FunnelTick.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/HeatLegend.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/LabelBullet.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/NavigationBar.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/OHLC.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/PieTick.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/RadarColumn.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/SankeyLink.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/SankeyNode.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/Tick.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/elements/XYChartScrollbar.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/map/MapSeries.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/series/CandlestickSeries.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/series/ColumnSeries.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/series/ColumnSeries3D.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/series/ConeSeries.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/series/CurvedColumnSeries.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/series/FunnelSeries.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/series/LineSeries.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/series/LineSeriesSegment.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/series/OHLCSeries.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/series/PercentSeries.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/series/PictorialStackedSeries.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/series/PieSeries.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/series/PieSeries3D.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/series/PyramidSeries.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/series/RadarColumnSeries.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/series/RadarSeries.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/series/Series.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/series/StepLineSeries.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/series/StepLineSeriesSegment.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/series/TreeMapSeries.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/series/XYSeries.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/types/ChordDiagram.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/types/FlowDiagram.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/types/GaugeChart.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/types/PercentChart.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/types/PieChart.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/types/PieChart3D.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/types/RadarChart.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/types/SankeyDiagram.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/types/SerialChart.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/types/SlicedChart.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/types/TreeMap.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/types/XYChart.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/charts/types/XYChart3D.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/Base.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/Component.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/Container.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/DataItem.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/Options.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/Registry.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/Sprite.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/SpriteEvents.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/SpriteState.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/System.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/data/CSVParser.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/data/DataLoader.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/data/DataParser.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/data/DataSource.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/data/JSONParser.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/defs/SVGDefaults.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/3d/Cone.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/3d/Rectangle3D.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/3d/Slice3D.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/AmChartsLogo.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/Button.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/Circle.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/Ellipse.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/Image.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/Label.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/Line.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/Modal.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/PlayButton.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/PointedRectangle.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/PointedShape.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/Polyarc.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/Polygon.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/Polyline.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/Polyspline.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/Popup.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/PopupCSS.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/Preloader.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/QuadraticCurve.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/Rectangle.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/ResizeButton.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/RoundedRectangle.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/Scrollbar.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/Slice.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/Slider.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/TextLink.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/Tooltip.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/Trapezoid.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/Triangle.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/WavedCircle.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/WavedLine.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/WavedRectangle.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/elements/ZoomOutButton.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/export/Export.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/export/ExportCSS.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/export/ExportMenu.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/formatters/DateFormatter.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/formatters/DurationFormatter.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/formatters/NumberFormatter.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/formatters/TextFormatter.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/interaction/Inertia.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/interaction/Interaction.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/interaction/InteractionKeyboardObject.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/interaction/InteractionObject.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/interaction/InteractionObjectEvents.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/interaction/Mouse.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/rendering/AMElement.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/rendering/Group.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/rendering/Paper.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/rendering/Path.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/rendering/SVGContainer.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/rendering/Smoothing.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/ColorModifier.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/GradientModifier.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/LinePattern.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/LinearGradient.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/LinearGradientModifier.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/Pattern.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/RadialGradient.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/RadialGradientModifier.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/RectPattern.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/BlurFilter.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/ColorizeFilter.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/DesaturateFilter.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/DropShadowFilter.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/Filter.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/FocusFilter.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/rendering/filters/LightenFilter.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/responsive/Responsive.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Adapter.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Animation.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/AsyncPending.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Cache.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Color.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/ColorSet.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Colors.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/DOM.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Dictionary.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Ease.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/EventDispatcher.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Instance.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/InterfaceColorSet.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Iterator.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Keyboard.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Language.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/List.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Morpher.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Net.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Number.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Order.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Percent.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/SortedList.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/String.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Strings.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Time.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Utils.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/core/utils/Validatable.js","webpack:///./node_modules/@amcharts/amcharts4/.internal/themes/animated.js","webpack:///./node_modules/@amcharts/amcharts4/charts.js","webpack:///./node_modules/@amcharts/amcharts4/core.js","webpack:///./node_modules/@amcharts/amcharts4/lang/en.js","webpack:///./node_modules/@amcharts/amcharts4/themes/animated.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/array/is-array.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/get-iterator.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/json/stringify.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/assign.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/create.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/define-property.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/get-own-property-descriptor.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/get-own-property-symbols.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/get-prototype-of.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/keys.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/object/set-prototype-of.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/promise.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/reflect/construct.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/set.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/symbol.js","webpack:///./node_modules/@babel/runtime-corejs2/core-js/symbol/iterator.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/assertThisInitialized.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/asyncToGenerator.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/classCallCheck.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/construct.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/createClass.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/defineProperty.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/getPrototypeOf.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/inherits.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/interopRequireDefault.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/interopRequireWildcard.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/iterableToArrayLimit.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/nonIterableRest.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/objectSpread.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/possibleConstructorReturn.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/setPrototypeOf.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/slicedToArray.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/typeof.js","webpack:///./node_modules/@babel/runtime-corejs2/regenerator/index.js","webpack:///./node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js","webpack:///./node_modules/@emotion/memoize/dist/memoize.browser.esm.js","webpack:///./node_modules/@emotion/unitless/dist/unitless.browser.esm.js","webpack:///./node_modules/core-js/library/fn/array/is-array.js","webpack:///./node_modules/core-js/library/fn/get-iterator.js","webpack:///./node_modules/core-js/library/fn/json/stringify.js","webpack:///./node_modules/core-js/library/fn/object/assign.js","webpack:///./node_modules/core-js/library/fn/object/create.js","webpack:///./node_modules/core-js/library/fn/object/define-property.js","webpack:///./node_modules/core-js/library/fn/object/get-own-property-descriptor.js","webpack:///./node_modules/core-js/library/fn/object/get-own-property-symbols.js","webpack:///./node_modules/core-js/library/fn/object/get-prototype-of.js","webpack:///./node_modules/core-js/library/fn/object/keys.js","webpack:///./node_modules/core-js/library/fn/object/set-prototype-of.js","webpack:///./node_modules/core-js/library/fn/promise.js","webpack:///./node_modules/core-js/library/fn/reflect/construct.js","webpack:///./node_modules/core-js/library/fn/set.js","webpack:///./node_modules/core-js/library/fn/symbol/index.js","webpack:///./node_modules/core-js/library/fn/symbol/iterator.js","webpack:///./node_modules/core-js/library/modules/_a-function.js","webpack:///./node_modules/core-js/library/modules/_add-to-unscopables.js","webpack:///./node_modules/core-js/library/modules/_an-instance.js","webpack:///./node_modules/core-js/library/modules/_an-object.js","webpack:///./node_modules/core-js/library/modules/_array-from-iterable.js","webpack:///./node_modules/core-js/library/modules/_array-includes.js","webpack:///./node_modules/core-js/library/modules/_array-methods.js","webpack:///./node_modules/core-js/library/modules/_array-species-constructor.js","webpack:///./node_modules/core-js/library/modules/_array-species-create.js","webpack:///./node_modules/core-js/library/modules/_bind.js","webpack:///./node_modules/core-js/library/modules/_classof.js","webpack:///./node_modules/core-js/library/modules/_cof.js","webpack:///./node_modules/core-js/library/modules/_collection-strong.js","webpack:///./node_modules/core-js/library/modules/_collection-to-json.js","webpack:///./node_modules/core-js/library/modules/_collection.js","webpack:///./node_modules/core-js/library/modules/_core.js","webpack:///./node_modules/core-js/library/modules/_ctx.js","webpack:///./node_modules/core-js/library/modules/_defined.js","webpack:///./node_modules/core-js/library/modules/_descriptors.js","webpack:///./node_modules/core-js/library/modules/_dom-create.js","webpack:///./node_modules/core-js/library/modules/_enum-bug-keys.js","webpack:///./node_modules/core-js/library/modules/_enum-keys.js","webpack:///./node_modules/core-js/library/modules/_export.js","webpack:///./node_modules/core-js/library/modules/_fails.js","webpack:///./node_modules/core-js/library/modules/_for-of.js","webpack:///./node_modules/core-js/library/modules/_global.js","webpack:///./node_modules/core-js/library/modules/_has.js","webpack:///./node_modules/core-js/library/modules/_hide.js","webpack:///./node_modules/core-js/library/modules/_html.js","webpack:///./node_modules/core-js/library/modules/_ie8-dom-define.js","webpack:///./node_modules/core-js/library/modules/_invoke.js","webpack:///./node_modules/core-js/library/modules/_iobject.js","webpack:///./node_modules/core-js/library/modules/_is-array-iter.js","webpack:///./node_modules/core-js/library/modules/_is-array.js","webpack:///./node_modules/core-js/library/modules/_is-object.js","webpack:///./node_modules/core-js/library/modules/_iter-call.js","webpack:///./node_modules/core-js/library/modules/_iter-create.js","webpack:///./node_modules/core-js/library/modules/_iter-define.js","webpack:///./node_modules/core-js/library/modules/_iter-detect.js","webpack:///./node_modules/core-js/library/modules/_iter-step.js","webpack:///./node_modules/core-js/library/modules/_iterators.js","webpack:///./node_modules/core-js/library/modules/_library.js","webpack:///./node_modules/core-js/library/modules/_meta.js","webpack:///./node_modules/core-js/library/modules/_microtask.js","webpack:///./node_modules/core-js/library/modules/_new-promise-capability.js","webpack:///./node_modules/core-js/library/modules/_object-assign.js","webpack:///./node_modules/core-js/library/modules/_object-create.js","webpack:///./node_modules/core-js/library/modules/_object-dp.js","webpack:///./node_modules/core-js/library/modules/_object-dps.js","webpack:///./node_modules/core-js/library/modules/_object-gopd.js","webpack:///./node_modules/core-js/library/modules/_object-gopn-ext.js","webpack:///./node_modules/core-js/library/modules/_object-gopn.js","webpack:///./node_modules/core-js/library/modules/_object-gops.js","webpack:///./node_modules/core-js/library/modules/_object-gpo.js","webpack:///./node_modules/core-js/library/modules/_object-keys-internal.js","webpack:///./node_modules/core-js/library/modules/_object-keys.js","webpack:///./node_modules/core-js/library/modules/_object-pie.js","webpack:///./node_modules/core-js/library/modules/_object-sap.js","webpack:///./node_modules/core-js/library/modules/_perform.js","webpack:///./node_modules/core-js/library/modules/_promise-resolve.js","webpack:///./node_modules/core-js/library/modules/_property-desc.js","webpack:///./node_modules/core-js/library/modules/_redefine-all.js","webpack:///./node_modules/core-js/library/modules/_redefine.js","webpack:///./node_modules/core-js/library/modules/_set-collection-from.js","webpack:///./node_modules/core-js/library/modules/_set-collection-of.js","webpack:///./node_modules/core-js/library/modules/_set-proto.js","webpack:///./node_modules/core-js/library/modules/_set-species.js","webpack:///./node_modules/core-js/library/modules/_set-to-string-tag.js","webpack:///./node_modules/core-js/library/modules/_shared-key.js","webpack:///./node_modules/core-js/library/modules/_shared.js","webpack:///./node_modules/core-js/library/modules/_species-constructor.js","webpack:///./node_modules/core-js/library/modules/_string-at.js","webpack:///./node_modules/core-js/library/modules/_task.js","webpack:///./node_modules/core-js/library/modules/_to-absolute-index.js","webpack:///./node_modules/core-js/library/modules/_to-integer.js","webpack:///./node_modules/core-js/library/modules/_to-iobject.js","webpack:///./node_modules/core-js/library/modules/_to-length.js","webpack:///./node_modules/core-js/library/modules/_to-object.js","webpack:///./node_modules/core-js/library/modules/_to-primitive.js","webpack:///./node_modules/core-js/library/modules/_uid.js","webpack:///./node_modules/core-js/library/modules/_user-agent.js","webpack:///./node_modules/core-js/library/modules/_validate-collection.js","webpack:///./node_modules/core-js/library/modules/_wks-define.js","webpack:///./node_modules/core-js/library/modules/_wks-ext.js","webpack:///./node_modules/core-js/library/modules/_wks.js","webpack:///./node_modules/core-js/library/modules/core.get-iterator-method.js","webpack:///./node_modules/core-js/library/modules/core.get-iterator.js","webpack:///./node_modules/core-js/library/modules/es6.array.is-array.js","webpack:///./node_modules/core-js/library/modules/es6.array.iterator.js","webpack:///./node_modules/core-js/library/modules/es6.object.assign.js","webpack:///./node_modules/core-js/library/modules/es6.object.create.js","webpack:///./node_modules/core-js/library/modules/es6.object.define-property.js","webpack:///./node_modules/core-js/library/modules/es6.object.get-own-property-descriptor.js","webpack:///./node_modules/core-js/library/modules/es6.object.get-prototype-of.js","webpack:///./node_modules/core-js/library/modules/es6.object.keys.js","webpack:///./node_modules/core-js/library/modules/es6.object.set-prototype-of.js","webpack:///./node_modules/core-js/library/modules/es6.promise.js","webpack:///./node_modules/core-js/library/modules/es6.reflect.construct.js","webpack:///./node_modules/core-js/library/modules/es6.set.js","webpack:///./node_modules/core-js/library/modules/es6.string.iterator.js","webpack:///./node_modules/core-js/library/modules/es6.symbol.js","webpack:///./node_modules/core-js/library/modules/es7.promise.finally.js","webpack:///./node_modules/core-js/library/modules/es7.promise.try.js","webpack:///./node_modules/core-js/library/modules/es7.set.from.js","webpack:///./node_modules/core-js/library/modules/es7.set.of.js","webpack:///./node_modules/core-js/library/modules/es7.set.to-json.js","webpack:///./node_modules/core-js/library/modules/es7.symbol.async-iterator.js","webpack:///./node_modules/core-js/library/modules/es7.symbol.observable.js","webpack:///./node_modules/core-js/library/modules/web.dom.iterable.js","webpack:///./node_modules/css-element-queries/src/ResizeSensor.js","webpack:///./node_modules/define-properties/index.js","webpack:///./node_modules/function-bind/implementation.js","webpack:///./node_modules/function-bind/index.js","webpack:///./node_modules/has-symbols/shams.js","webpack:///./node_modules/has/src/index.js","webpack:///./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js","webpack:///./node_modules/memoize-one/dist/memoize-one.esm.js","webpack:///./node_modules/next/dist/lib/EventEmitter.js","webpack:///./node_modules/next/dist/lib/link.js","webpack:///./node_modules/next/dist/lib/p-queue.js","webpack:///./node_modules/next/dist/lib/router/index.js","webpack:///./node_modules/next/dist/lib/router/router.js","webpack:///./node_modules/next/dist/lib/router/with-router.js","webpack:///./node_modules/next/dist/lib/shallow-equals.js","webpack:///./node_modules/next/dist/lib/utils.js","webpack:///./node_modules/next/link.js","webpack:///./node_modules/node-libs-browser/node_modules/punycode/punycode.js","webpack:///delegated ./node_modules/object-assign/index.js from dll-reference dll_831a3634f66cb1dada0c","webpack:///./node_modules/object-keys/index.js","webpack:///./node_modules/object-keys/isArguments.js","webpack:///./node_modules/object.assign/implementation.js","webpack:///./node_modules/object.assign/index.js","webpack:///./node_modules/object.assign/polyfill.js","webpack:///./node_modules/object.assign/shim.js","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/prop-types-exact/build/helpers/isPlainObject.js","webpack:///./node_modules/prop-types-exact/build/index.js","webpack:///delegated ./node_modules/prop-types/checkPropTypes.js from dll-reference dll_831a3634f66cb1dada0c","webpack:///./node_modules/prop-types/factoryWithTypeCheckers.js","webpack:///./node_modules/prop-types/index.js","webpack:///delegated ./node_modules/prop-types/lib/ReactPropTypesSecret.js from dll-reference dll_831a3634f66cb1dada0c","webpack:///./node_modules/querystring-es3/decode.js","webpack:///./node_modules/querystring-es3/encode.js","webpack:///./node_modules/querystring-es3/index.js","webpack:///delegated ./node_modules/react-dom/index.js from dll-reference dll_831a3634f66cb1dada0c","webpack:///./node_modules/react-is/cjs/react-is.development.js","webpack:///./node_modules/react-is/index.js","webpack:///delegated ./node_modules/react/index.js from dll-reference dll_831a3634f66cb1dada0c","webpack:///./node_modules/regenerator-runtime/runtime-module.js","webpack:///./node_modules/regenerator-runtime/runtime.js","webpack:///./node_modules/styled-components/dist/styled-components.browser.esm.js","webpack:///./node_modules/stylis-rule-sheet/index.js","webpack:///./node_modules/stylis/stylis.min.js","webpack:///./node_modules/tslib/tslib.es6.js","webpack:///./node_modules/url/url.js","webpack:///./node_modules/url/util.js","webpack:///delegated ./node_modules/webpack/buildin/global.js from dll-reference dll_831a3634f66cb1dada0c","webpack:///(webpack)/buildin/harmony-module.js","webpack:///(webpack)/buildin/module.js","webpack:///./pages/chartxy.js","webpack:///external \"dll_831a3634f66cb1dada0c\""],"sourcesContent":["import React, { Component } from \"react\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\nam4core.useTheme(am4themes_animated);\n\nclass ChartXY extends Component {\n  componentDidMount() {\n    let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\n\n    chart.paddingRight = 20;\n\n    let data = [];\n    let visits = 10;\n    for (let i = 1; i < 366; i++) {\n      visits += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 10);\n      data.push({\n        date: new Date(2018, 0, i),\n        name: \"name\" + i,\n        value: visits\n      });\n    }\n\n    chart.data = data;\n\n    let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n    dateAxis.renderer.grid.template.location = 0;\n\n    let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n    valueAxis.tooltip.disabled = true;\n    valueAxis.renderer.minWidth = 35;\n\n    let series = chart.series.push(new am4charts.LineSeries());\n    series.dataFields.dateX = \"date\";\n    series.dataFields.valueY = \"value\";\n\n    series.tooltipText = \"{valueY.value}\";\n    chart.cursor = new am4charts.XYCursor();\n\n    let scrollbarX = new am4charts.XYChartScrollbar();\n    scrollbarX.series.push(series);\n    chart.scrollbarX = scrollbarX;\n\n    this.chart = chart;\n  }\n\n  componentDidUpdate(oldProps) {\n    if (oldProps.paddingRight !== this.props.paddingRight) {\n      this.chart.paddingRight = this.props.paddingRight;\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }} />\n      </div>\n    );\n  }\n}\n\nexport default ChartXY;\n","/**\r\n * [[Chart]] class provides base functionality for all chart types to inherit.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component } from \"../core/Component\";\r\nimport { MutableValueDisposer } from \"../core/utils/Disposer\";\r\nimport { ListTemplate, ListDisposer } from \"../core/utils/List\";\r\nimport { Container } from \"../core/Container\";\r\nimport { Label } from \"../core/elements/Label\";\r\nimport { DataItem } from \"../core/DataItem\";\r\nimport { percent } from \"../core/utils/Percent\";\r\nimport * as $iter from \"../core/utils/Iterator\";\r\nimport * as $type from \"../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[Chart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar ChartDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ChartDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ChartDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ChartDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return ChartDataItem;\r\n}(DataItem));\r\nexport { ChartDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A base class for all Charts.\r\n *\r\n * @see {@link IChartEvents} for a list of available Events\r\n * @see {@link IChartAdapters} for a list of available Adapters\r\n */\r\nvar Chart = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Chart, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Chart() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * A reference to chart's [[Legend]].\r\n         * @ignore\r\n         * @type {Legend}\r\n         */\r\n        _this._legend = new MutableValueDisposer();\r\n        _this.className = \"Chart\";\r\n        // Create a list of titles\r\n        var template = new Label();\r\n        _this.titles = new ListTemplate(template);\r\n        _this._disposers.push(new ListDisposer(_this.titles));\r\n        _this._disposers.push(template);\r\n        // Chart component is also a container. it holds _chartAndLegendCont and titles\r\n        _this.width = percent(100);\r\n        _this.height = percent(100);\r\n        _this.layout = \"vertical\";\r\n        // Chart and legend\r\n        var chartAndLegendContainer = _this.createChild(Container);\r\n        chartAndLegendContainer.shouldClone = false;\r\n        chartAndLegendContainer.layout = \"vertical\";\r\n        chartAndLegendContainer.width = percent(100);\r\n        chartAndLegendContainer.height = percent(100);\r\n        _this.chartAndLegendContainer = chartAndLegendContainer;\r\n        // Chart container holds all the elements of a chart, extept titles and legend\r\n        var chartContainer = chartAndLegendContainer.createChild(Container);\r\n        chartContainer.shouldClone = false;\r\n        chartContainer.width = percent(100);\r\n        chartContainer.height = percent(100);\r\n        _this.chartContainer = chartContainer;\r\n        _this.showOnInit = true;\r\n        _this._disposers.push(_this._legend);\r\n        // Add title list events to apply certain formatting options and to make\r\n        // the chart reference them as accessible screen reader labels\r\n        _this.titles.events.on(\"inserted\", function (label) {\r\n            _this.processTitle(label);\r\n            _this.updateReaderTitleReferences();\r\n        }, _this, false);\r\n        _this.titles.events.on(\"removed\", function (label) {\r\n            _this.updateReaderTitleReferences();\r\n        }, _this, false);\r\n        // Accessibility\r\n        // It seems we can't set focusable on the whole chart because it seems to\r\n        // mess up the whole focus event system - getting a focus on an inside\r\n        // object also trigger focus on parent\r\n        //this.focusable = true;\r\n        _this.role = \"region\";\r\n        _this.defaultState.transitionDuration = 1;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    Chart.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Chart\");\r\n        }\r\n    };\r\n    /**\r\n     * Initiates drawing of the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Chart.prototype.draw = function () {\r\n        this.fixLayout();\r\n        _super.prototype.draw.call(this);\r\n    };\r\n    /**\r\n     * Updates legend's hierarchy based on the position.\r\n     */\r\n    Chart.prototype.fixLayout = function () {\r\n        var legend = this.legend;\r\n        if (legend) {\r\n            var chartAndLegendContainer = this.chartAndLegendContainer;\r\n            var chartContainer = this.chartContainer;\r\n            chartContainer.x = undefined;\r\n            chartContainer.y = undefined;\r\n            legend.x = undefined;\r\n            legend.y = undefined;\r\n            switch (legend.position) {\r\n                case \"left\":\r\n                    chartAndLegendContainer.layout = \"horizontal\";\r\n                    if (!$type.isNumber(legend.width)) {\r\n                        legend.width = 200;\r\n                    }\r\n                    //legend.maxWidth = legend.width;\r\n                    legend.toBack();\r\n                    break;\r\n                case \"right\":\r\n                    chartAndLegendContainer.layout = \"horizontal\";\r\n                    if (!$type.isNumber(legend.width)) {\r\n                        legend.width = 200;\r\n                    }\r\n                    //legend.maxWidth = legend.width;\r\n                    legend.toFront();\r\n                    break;\r\n                case \"top\":\r\n                    chartAndLegendContainer.layout = \"vertical\";\r\n                    legend.maxWidth = undefined;\r\n                    legend.width = percent(100);\r\n                    legend.toBack();\r\n                    break;\r\n                case \"bottom\":\r\n                    chartAndLegendContainer.layout = \"vertical\";\r\n                    legend.maxWidth = undefined;\r\n                    legend.width = percent(100);\r\n                    legend.toFront();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Setups the legend to use the chart's data.\r\n     */\r\n    Chart.prototype.feedLegend = function () {\r\n        // Nothing here. This method is provided only as a \"placeholder\" for\r\n        // extending classes to override\r\n    };\r\n    /**\r\n     * Adds a new title to the chart when it is inserted into chart's titles\r\n     * list.\r\n     * @param  {IListEvents<Label>[\"inserted\"]}  event  An event object which is triggered when inserting into titles list\r\n     * @return {Label}                               Label object\r\n     */\r\n    Chart.prototype.processTitle = function (event) {\r\n        var title = event.newValue;\r\n        title.parent = this;\r\n        title.toBack();\r\n        title.shouldClone = false;\r\n        title.align = \"center\";\r\n        // Need to explicitly apply the `id` attribute so it can be referenced by\r\n        // `aria-labelledby`\r\n        title.uidAttr();\r\n        return title;\r\n    };\r\n    /**\r\n     * Checks if chart has any title elements. If it does, we will use them in an\r\n     * `aria-labelledby` attribute so that screen readers can use them to properly\r\n     * describe the chart when it is focused or hovered.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Chart.prototype.updateReaderTitleReferences = function () {\r\n        if (this.titles.length) {\r\n            var titleIds_1 = [];\r\n            $iter.each(this.titles.iterator(), function (title) {\r\n                titleIds_1.push(title.uid);\r\n            });\r\n            this.setSVGAttribute({ \"aria-labelledby\": titleIds_1.join(\" \") });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-labelledby\");\r\n        }\r\n    };\r\n    Object.defineProperty(Chart.prototype, \"legend\", {\r\n        /**\r\n         * @return {Legend} Legend\r\n         */\r\n        get: function () {\r\n            return this._legend.get();\r\n        },\r\n        /**\r\n         * Holds the instance of chart's [[Leged]].\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/legend/} for more information about legends\r\n         * @param {Legend} Legend\r\n         */\r\n        set: function (legend) {\r\n            this.setLegend(legend);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Prepares the legend instance for use in this chart.\r\n     *\r\n     * @param {Legend}  legend  Legend\r\n     */\r\n    Chart.prototype.setLegend = function (legend) {\r\n        var _this = this;\r\n        if (this._legend.get() !== legend) {\r\n            if (legend) {\r\n                // Set legend options\r\n                legend.parent = this.chartAndLegendContainer;\r\n                this._legend.set(legend, legend.events.on(\"propertychanged\", function (event) {\r\n                    if (event.property == \"position\" || event.property == \"width\") {\r\n                        _this.fixLayout();\r\n                    }\r\n                }, undefined, false));\r\n            }\r\n            else {\r\n                this._legend.reset();\r\n            }\r\n            this.feedLegend();\r\n        }\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {object}  config  Config\r\n     */\r\n    Chart.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Set up legend\r\n            if ($type.hasValue(config.legend) && !$type.hasValue(config.legend.type)) {\r\n                config.legend.type = \"Legend\";\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    /**\r\n     * Copies all properties from another instance of [[Series]].\r\n     *\r\n     * @param {Series}  source  Source series\r\n     */\r\n    Chart.prototype.copyFrom = function (source) {\r\n        this.titles.copyFrom(source.titles);\r\n        if (source.legend) {\r\n            this.legend = source.legend.clone();\r\n        }\r\n        _super.prototype.copyFrom.call(this, source);\r\n    };\r\n    return Chart;\r\n}(Component));\r\nexport { Chart };\r\n//# sourceMappingURL=Chart.js.map","/**\r\n * Legend-related functionality.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component } from \"../core/Component\";\r\nimport { DataItem } from \"../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../core/utils/List\";\r\nimport { RoundedRectangle } from \"../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../core/Container\";\r\nimport { Label } from \"../core/elements/Label\";\r\nimport { keyboard } from \"../core/utils/Keyboard\";\r\nimport { registry } from \"../core/Registry\";\r\nimport { getInteraction } from \"../core/interaction/Interaction\";\r\nimport { percent } from \"../core/utils/Percent\";\r\nimport { InterfaceColorSet } from \"../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../core/utils/Type\";\r\nimport { Sprite } from \"../core/Sprite\";\r\nimport { Disposer } from \"../core/utils/Disposer\";\r\nimport { MouseCursorStyle } from \"../core/interaction/Mouse\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[Legend]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar LegendDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(LegendDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function LegendDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.childrenCreated = false;\r\n        _this.className = \"LegendDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(LegendDataItem.prototype, \"label\", {\r\n        /**\r\n         * A legend item's [[Label]] element.\r\n         *\r\n         * @return {Label} Label\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._label) {\r\n                var label_1 = this.component.labels.create();\r\n                this._label = label_1;\r\n                this.addSprite(label_1);\r\n                this._disposers.push(label_1);\r\n                label_1.parent = this.itemContainer;\r\n                this._disposers.push(new Disposer(function () {\r\n                    if ($type.hasValue(_this.component)) {\r\n                        _this.component.labels.removeValue(label_1);\r\n                    }\r\n                }));\r\n            }\r\n            return this._label;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LegendDataItem.prototype, \"color\", {\r\n        /**\r\n         * @return {Color | Pattern | LinearGradient | RadialGradient} Main color\r\n         */\r\n        get: function () {\r\n            return this.properties.color;\r\n        },\r\n        /**\r\n         * Main color of legend data item.\r\n         *\r\n         * This is set by the target element this legend item represents, like\r\n         * a Series or a Slice.\r\n         *\r\n         * It can be used to derive a color in legend's sub-items, like label:\r\n         *\r\n         * ```TypeScript\r\n         * chart.legend.labels.template.text = \"[{color}]{name}[/]\";\r\n         * ```\r\n         * ```JavaScript\r\n         * chart.legend.labels.template.text = \"[{color}]{name}[/]\";\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"legend\": {\r\n         *     // ...\r\n         *     \"labels\": {\r\n         *       \"text\": \"[{color}]{name}[/]\"\r\n         *     }\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/legend/#Legend_labels} For more information about configuring legend labels.\r\n         * @param {Color | Pattern | LinearGradient | RadialGradient}  value  Main color\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"color\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LegendDataItem.prototype, \"valueLabel\", {\r\n        /**\r\n         * A legend item's [[Label]] element for \"value label\".\r\n         *\r\n         * @return {Label} Label\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._valueLabel) {\r\n                var valueLabel_1 = this.component.valueLabels.create();\r\n                this._valueLabel = valueLabel_1;\r\n                this.addSprite(valueLabel_1);\r\n                this._disposers.push(valueLabel_1);\r\n                valueLabel_1.parent = this.itemContainer;\r\n                this._disposers.push(new Disposer(function () {\r\n                    if ($type.hasValue(_this.component)) {\r\n                        _this.component.valueLabels.removeValue(valueLabel_1);\r\n                    }\r\n                }));\r\n            }\r\n            return this._valueLabel;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LegendDataItem.prototype, \"itemContainer\", {\r\n        /**\r\n         * A reference to the main [[Container]] that holds legend item's elements:\r\n         * marker and labels.\r\n         *\r\n         * @return {Container} Item container\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._itemContainer) {\r\n                var itemContainer_1 = this.component.itemContainers.create();\r\n                this._itemContainer = itemContainer_1;\r\n                this.addSprite(itemContainer_1);\r\n                this._disposers.push(itemContainer_1);\r\n                this._disposers.push(new Disposer(function () {\r\n                    if ($type.hasValue(_this.component)) {\r\n                        _this.component.itemContainers.removeValue(itemContainer_1);\r\n                    }\r\n                }));\r\n                if (this.dataContext.uidAttr) {\r\n                    itemContainer_1.readerControls = this.dataContext.uidAttr();\r\n                    itemContainer_1.readerLabelledBy = this.dataContext.uidAttr();\r\n                }\r\n                var sprite = this.dataContext;\r\n                if (sprite instanceof DataItem || sprite instanceof Sprite) {\r\n                    itemContainer_1.addDisposer(sprite.events.on(\"visibilitychanged\", function (ev) {\r\n                        itemContainer_1.readerChecked = ev.visible;\r\n                        itemContainer_1.events.disableType(\"toggled\");\r\n                        itemContainer_1.isActive = !ev.visible;\r\n                        itemContainer_1.events.enableType(\"toggled\");\r\n                    }, undefined, false));\r\n                    sprite.addDisposer(new Disposer(function () {\r\n                        if (_this.component) {\r\n                            _this.component.dataItems.remove(_this);\r\n                        }\r\n                    }));\r\n                    if (sprite instanceof Sprite) {\r\n                        itemContainer_1.addDisposer(sprite.events.on(\"hidden\", function (ev) {\r\n                            itemContainer_1.readerChecked = true;\r\n                            itemContainer_1.events.disableType(\"toggled\");\r\n                            itemContainer_1.isActive = true;\r\n                            itemContainer_1.events.enableType(\"toggled\");\r\n                        }, undefined, false));\r\n                        itemContainer_1.addDisposer(sprite.events.on(\"shown\", function (ev) {\r\n                            itemContainer_1.readerChecked = false;\r\n                            itemContainer_1.events.disableType(\"toggled\");\r\n                            itemContainer_1.isActive = false;\r\n                            itemContainer_1.events.enableType(\"toggled\");\r\n                        }, undefined, false));\r\n                    }\r\n                }\r\n            }\r\n            return this._itemContainer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LegendDataItem.prototype, \"marker\", {\r\n        /**\r\n         * A [[Container]] that holds legend item's marker element.\r\n         *\r\n         * @return {Container} Marker\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._marker) {\r\n                var marker_1 = this.component.markers.create();\r\n                this._marker = marker_1;\r\n                marker_1.parent = this.itemContainer;\r\n                this.addSprite(marker_1);\r\n                this._disposers.push(marker_1);\r\n                this._disposers.push(new Disposer(function () {\r\n                    if ($type.hasValue(_this.component)) {\r\n                        _this.component.markers.removeValue(marker_1);\r\n                    }\r\n                }));\r\n            }\r\n            return this._marker;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return LegendDataItem;\r\n}(DataItem));\r\nexport { LegendDataItem };\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a class that carries legend settings.\r\n *\r\n * A legend might change its settings dynamically. Legend can also be shared\r\n * by several elements, requiring different settings.\r\n *\r\n * Having legend's settings in a separate object is a good way to \"hot swap\"\r\n * a set of settings for the legend.\r\n */\r\nvar LegendSettings = /** @class */ (function () {\r\n    function LegendSettings() {\r\n        /**\r\n         * Should marker be created for each legend item.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        this.createMarker = true;\r\n    }\r\n    return LegendSettings;\r\n}());\r\nexport { LegendSettings };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * [[Legend]] class is used to create legend for the chart.\r\n *\r\n * @see {@link ILegendEvents} for a list of available events\r\n * @see {@link ILegendAdapters} for a list of available Adapters\r\n * @todo Verify/implement dynamic updating of legend items once the properties of related Series change\r\n */\r\nvar Legend = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Legend, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Legend() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Legend\";\r\n        // Set defaults\r\n        _this.layout = \"grid\";\r\n        _this.setPropertyValue(\"useDefaultMarker\", false);\r\n        _this.setPropertyValue(\"contentAlign\", \"center\");\r\n        // Create a template container and list for legend items\r\n        var itemContainer = new Container();\r\n        itemContainer.applyOnClones = true;\r\n        itemContainer.padding(10, 0, 10, 0);\r\n        itemContainer.margin(0, 10, 0, 0);\r\n        itemContainer.layout = \"horizontal\";\r\n        itemContainer.clickable = true;\r\n        itemContainer.focusable = true;\r\n        itemContainer.role = \"checkbox\";\r\n        itemContainer.togglable = true;\r\n        itemContainer.cursorOverStyle = MouseCursorStyle.pointer;\r\n        itemContainer.background.fillOpacity = 0; // creates hit area\r\n        // Add click/tap event to toggle item\r\n        // not good to listen to \"toggled\" as we will get to stackoverflow\r\n        itemContainer.events.on(\"toggled\", function (ev) {\r\n            _this.toggleDataItem(ev.target.dataItem);\r\n        }, _this);\r\n        // Add focus event so that we can track which object is currently in focus\r\n        // for keyboard toggling\r\n        itemContainer.events.on(\"focus\", function (ev) {\r\n            _this.focusedItem = ev.target.dataItem;\r\n        });\r\n        itemContainer.events.on(\"blur\", function (ev) {\r\n            _this.focusedItem = undefined;\r\n        });\r\n        // Create container list using item template we just created\r\n        _this.itemContainers = new ListTemplate(itemContainer);\r\n        _this._disposers.push(new ListDisposer(_this.itemContainers));\r\n        _this._disposers.push(_this.itemContainers.template);\r\n        // Set up global keyboard events for toggling elements\r\n        _this._disposers.push(getInteraction().body.events.on(\"keyup\", function (ev) {\r\n            if (keyboard.isKey(ev.event, \"enter\") && _this.focusedItem) {\r\n                _this.toggleDataItem(_this.focusedItem);\r\n            }\r\n        }, _this));\r\n        var interfaceColors = new InterfaceColorSet();\r\n        // Create a template container and list for the a marker\r\n        var marker = new Container();\r\n        marker.width = 23;\r\n        marker.height = 23;\r\n        marker.interactionsEnabled = false;\r\n        marker.applyOnClones = true;\r\n        marker.setStateOnChildren = true;\r\n        marker.background.fillOpacity = 0;\r\n        marker.background.strokeOpacity = 0;\r\n        marker.propertyFields.fill = \"fill\";\r\n        marker.valign = \"middle\";\r\n        var disabledColor = interfaceColors.getFor(\"disabledBackground\");\r\n        marker.events.on(\"childadded\", function (event) {\r\n            var child = event.newValue;\r\n            var activeState = child.states.create(\"active\");\r\n            activeState.properties.stroke = disabledColor;\r\n            activeState.properties.fill = disabledColor;\r\n        });\r\n        _this.markers = new ListTemplate(marker);\r\n        _this._disposers.push(new ListDisposer(_this.markers));\r\n        _this._disposers.push(_this.markers.template);\r\n        // Create a legend background element\r\n        var rectangle = marker.createChild(RoundedRectangle);\r\n        rectangle.width = percent(100);\r\n        rectangle.height = percent(100);\r\n        rectangle.applyOnClones = true;\r\n        rectangle.propertyFields.fill = \"fill\";\r\n        rectangle.strokeOpacity = 0;\r\n        // Create a template container and list for item labels\r\n        var label = new Label();\r\n        label.text = \"{name}\";\r\n        label.margin(0, 5, 0, 5);\r\n        label.valign = \"middle\";\r\n        label.applyOnClones = true;\r\n        label.states.create(\"active\").properties.fill = interfaceColors.getFor(\"disabledBackground\");\r\n        _this.labels = new ListTemplate(label);\r\n        _this._disposers.push(new ListDisposer(_this.labels));\r\n        _this._disposers.push(_this.labels.template);\r\n        label.interactionsEnabled = false;\r\n        // Create a template container and list for item value labels\r\n        var valueLabel = new Label();\r\n        valueLabel.margin(0, 5, 0, 0);\r\n        valueLabel.valign = \"middle\";\r\n        valueLabel.width = 50; // to avoid rearranging legend entries when value changes.\r\n        valueLabel.align = \"right\";\r\n        valueLabel.textAlign = \"end\";\r\n        valueLabel.applyOnClones = true;\r\n        valueLabel.states.create(\"active\").properties.fill = interfaceColors.getFor(\"disabledBackground\");\r\n        valueLabel.interactionsEnabled = false;\r\n        _this.valueLabels = new ListTemplate(valueLabel);\r\n        _this._disposers.push(new ListDisposer(_this.valueLabels));\r\n        _this._disposers.push(_this.valueLabels.template);\r\n        _this.position = \"bottom\"; // don't use setPropertyValue here!\r\n        // Create a state for disabled legend items\r\n        itemContainer.states.create(\"active\");\r\n        itemContainer.setStateOnChildren = true;\r\n        // Apply accessibility settings\r\n        _this.role = \"group\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    Legend.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Legend\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return {LegendDataItem} Data Item\r\n     */\r\n    Legend.prototype.createDataItem = function () {\r\n        return new LegendDataItem();\r\n    };\r\n    /**\r\n     * [validateDataElement description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {LegendDataItem} dataItem Data item\r\n     * @todo Description\r\n     * @todo Figure out how to update appearance of legend item without losing focus\r\n     * @todo Update legend marker appearance as apperance of related series changes\r\n     */\r\n    Legend.prototype.validateDataElement = function (dataItem) {\r\n        _super.prototype.validateDataElement.call(this, dataItem);\r\n        // Get data item (legend item's) container\r\n        var container = dataItem.itemContainer;\r\n        var marker = dataItem.marker;\r\n        var label = dataItem.label;\r\n        var valueLabel = dataItem.valueLabel;\r\n        // Set parent and update current state\r\n        container.parent = this;\r\n        container.readerChecked = dataItem.dataContext.visible;\r\n        // Tell series its legend data item\r\n        dataItem.dataContext.legendDataItem = dataItem;\r\n        var legendSettings = dataItem.dataContext.legendSettings;\r\n        // If we are not using default markers, create a unique legend marker based\r\n        // on the data item type\r\n        var dataContext = dataItem.dataContext;\r\n        if (dataContext.createLegendMarker && (!this.useDefaultMarker || !(dataContext instanceof Sprite))) {\r\n            if (!dataItem.childrenCreated) {\r\n                dataContext.createLegendMarker(marker);\r\n                dataItem.childrenCreated = true;\r\n                if (dataContext.updateLegendValue) {\r\n                    dataContext.updateLegendValue(); // this solves issue with external legend, as legend is created after chart updates legend values\r\n                }\r\n            }\r\n        }\r\n        if (valueLabel.invalid) {\r\n            valueLabel.validate();\r\n        }\r\n        if (valueLabel.currentText == \"\" || valueLabel.currentText == undefined) {\r\n            valueLabel.__disabled = true;\r\n        }\r\n        else {\r\n            valueLabel.__disabled = false;\r\n        }\r\n        if (legendSettings && (legendSettings.itemValueText != undefined || legendSettings.valueText != undefined)) {\r\n            valueLabel.__disabled = false;\r\n        }\r\n        var visible = dataItem.dataContext.visible;\r\n        if (visible === undefined) {\r\n            visible = true;\r\n        }\r\n        visible = $type.toBoolean(visible);\r\n        dataItem.dataContext.visible = visible;\r\n        container.events.disableType(\"toggled\");\r\n        container.isActive = !visible;\r\n        container.events.enableType(\"toggled\");\r\n    };\r\n    Object.defineProperty(Legend.prototype, \"position\", {\r\n        /**\r\n         * @return {LegendPosition} Position\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"position\");\r\n        },\r\n        /**\r\n         * Position of the legend.\r\n         *\r\n         * Options: \"left\", \"right\", \"top\", \"bottom\" (default), or \"absolute\".\r\n         *\r\n         * IMPORTANT: [[MapChart]] will ignore this setting, as it is using different\r\n         * layout structure than other charts.\r\n         *\r\n         * To position legend in [[MapChart]] set legend's `align` (`\"left\"` or\r\n         * `\"right\"`) and `valign` (`\"top\"` or `\"bottom\"`) properties instead.\r\n         *\r\n         * @default \"bottom\"\r\n         * @param {LegendPosition}  value  Position\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"position\", value)) {\r\n                if (value == \"left\" || value == \"right\") {\r\n                    this.margin(10, 20, 10, 20);\r\n                    this.valign = \"middle\";\r\n                    this.itemContainers.template.width = percent(100);\r\n                    this.valueLabels.template.width = percent(100);\r\n                    this.labels.template.truncate = true;\r\n                    this.labels.template.fullWords = false;\r\n                }\r\n                else {\r\n                    this.itemContainers.template.width = undefined;\r\n                    this.itemContainers.template.maxWidth = undefined;\r\n                    this.valueLabels.template.width = 50;\r\n                    this.labels.template.truncate = false;\r\n                    this.width = percent(100);\r\n                }\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Legend.prototype, \"useDefaultMarker\", {\r\n        /**\r\n         * @return {boolean} Use default marker?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"useDefaultMarker\");\r\n        },\r\n        /**\r\n         * Should legend try to mirror the look of the related item when building\r\n         * the marker for legend item?\r\n         *\r\n         * If set to `true` it will try to make the marker look like its related\r\n         * item.\r\n         *\r\n         * E.g. if an item is for a Line Series, it will display a line of the\r\n         * same thickness, color, and will use the same bullets if series have them.\r\n         *\r\n         * @default false\r\n         * @param {boolean} value Use default marker?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"useDefaultMarker\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Toggles a legend item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {this[\"_dataItem\"]} item Legend item\r\n     * @todo Maybe do it with togglable instead\r\n     */\r\n    Legend.prototype.toggleDataItem = function (item) {\r\n        var dataContext = item.dataContext;\r\n        if (!dataContext.visible || dataContext.isHiding || (dataContext instanceof Sprite && dataContext.isHidden)) {\r\n            item.color = item.colorOrig;\r\n            item.itemContainer.isActive = false;\r\n            if (dataContext.hidden === true) {\r\n                dataContext.hidden = false;\r\n            }\r\n            if (dataContext.show) {\r\n                dataContext.show();\r\n            }\r\n            else {\r\n                dataContext.visible = true;\r\n            }\r\n        }\r\n        else {\r\n            item.itemContainer.isActive = true;\r\n            if (dataContext.hide) {\r\n                dataContext.hide();\r\n            }\r\n            else {\r\n                dataContext.visible = false;\r\n            }\r\n            item.color = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n        }\r\n    };\r\n    Object.defineProperty(Legend.prototype, \"preloader\", {\r\n        /**\r\n         * Override preloader method so that legend does not accidentally show its\r\n         * own preloader.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {Preloader} Always `undefined`\r\n         */\r\n        get: function () {\r\n            return;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * [handleDataItemPropertyChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Legend.prototype.handleDataItemPropertyChange = function (dataItem, name) {\r\n        dataItem.valueLabel.invalidate();\r\n        dataItem.label.invalidate();\r\n    };\r\n    return Legend;\r\n}(Component));\r\nexport { Legend };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Legend\"] = Legend;\r\n//# sourceMappingURL=Legend.js.map","/**\r\n * Base class for all Axis\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component } from \"../../core/Component\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { SortedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { List, ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Disposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[Axis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar AxisDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(AxisDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function AxisDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"AxisDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(AxisDataItem.prototype, \"grid\", {\r\n        /**\r\n         * @return {Grid} Grid element\r\n         */\r\n        get: function () {\r\n            if (!this._grid) {\r\n                var component_1 = this.component;\r\n                if (component_1) {\r\n                    var template = void 0;\r\n                    var grid_1;\r\n                    if (this.isRange) {\r\n                        template = component_1.axisRanges.template.grid;\r\n                        if (template.disabled) {\r\n                            return;\r\n                        }\r\n                        else {\r\n                            grid_1 = template.clone();\r\n                        }\r\n                    }\r\n                    else {\r\n                        template = component_1.renderer.grid.template;\r\n                        if (template.disabled) {\r\n                            return;\r\n                        }\r\n                        else {\r\n                            grid_1 = component_1.renderer.grid.create();\r\n                            this._disposers.push(new Disposer(function () {\r\n                                component_1.renderer.grid.removeValue(grid_1);\r\n                            }));\r\n                        }\r\n                    }\r\n                    this.grid = grid_1;\r\n                    this._disposers.push(grid_1);\r\n                    grid_1.axis = this.component;\r\n                }\r\n            }\r\n            return this._grid;\r\n        },\r\n        /**\r\n         * A [[Grid]] element associated with this data item.\r\n         *\r\n         * If there is no grid element associated with data item, a new one is\r\n         * created and returned.\r\n         *\r\n         * @param {Grid}  grid  Grid element\r\n         */\r\n        set: function (grid) {\r\n            if (this._grid && this._grid != grid) {\r\n                $array.remove(this.sprites, this._grid);\r\n                this._grid.dataItem = undefined;\r\n            }\r\n            if (grid) {\r\n                if (grid.dataItem && grid.dataItem != this) {\r\n                    $array.remove(grid.dataItem.sprites, grid);\r\n                    grid.dataItem.grid = undefined;\r\n                }\r\n                this.addSprite(grid);\r\n            }\r\n            this._grid = grid;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisDataItem.prototype, \"tick\", {\r\n        /**\r\n         * @return {AxisTick} Tick element\r\n         */\r\n        get: function () {\r\n            if (!this._tick) {\r\n                var component_2 = this.component;\r\n                if (component_2) {\r\n                    var template = void 0;\r\n                    var tick_1;\r\n                    if (this.isRange) {\r\n                        template = component_2.axisRanges.template.tick;\r\n                        if (template.disabled) {\r\n                            return;\r\n                        }\r\n                        else {\r\n                            tick_1 = template.clone();\r\n                        }\r\n                    }\r\n                    else {\r\n                        template = component_2.renderer.ticks.template;\r\n                        if (template.disabled) {\r\n                            return;\r\n                        }\r\n                        else {\r\n                            tick_1 = component_2.renderer.ticks.create();\r\n                            this._disposers.push(new Disposer(function () {\r\n                                component_2.renderer.ticks.removeValue(tick_1);\r\n                            }));\r\n                        }\r\n                    }\r\n                    this.tick = tick_1;\r\n                    tick_1.axis = this.component;\r\n                    this._disposers.push(tick_1);\r\n                }\r\n            }\r\n            return this._tick;\r\n        },\r\n        /**\r\n         * An [[AxisTick]] element associated with this data item.\r\n         *\r\n         * If there is no tick element associated with data item, a new one is\r\n         * created and returned.\r\n         *\r\n         * @param {AxisTick}  tick  Tick element\r\n         */\r\n        set: function (tick) {\r\n            if (this._tick && this._tick != tick) {\r\n                $array.remove(this.sprites, this._tick);\r\n                this._tick.dataItem = undefined;\r\n            }\r\n            if (tick) {\r\n                if (tick.dataItem && tick.dataItem != this) {\r\n                    $array.remove(tick.dataItem.sprites, tick);\r\n                    tick.dataItem.tick = undefined;\r\n                }\r\n                this.addSprite(tick);\r\n            }\r\n            this._tick = tick;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisDataItem.prototype, \"label\", {\r\n        /**\r\n         * @return {AxisLabel} Label element\r\n         */\r\n        get: function () {\r\n            if (!this._label) {\r\n                var component_3 = this.component;\r\n                if (component_3) {\r\n                    var template = void 0;\r\n                    var label_1;\r\n                    if (this.isRange) {\r\n                        template = component_3.axisRanges.template.label;\r\n                        if (template.disabled) {\r\n                            return;\r\n                        }\r\n                        else {\r\n                            label_1 = template.clone();\r\n                        }\r\n                    }\r\n                    else {\r\n                        template = component_3.renderer.labels.template;\r\n                        if (template.disabled) {\r\n                            return;\r\n                        }\r\n                        else {\r\n                            label_1 = component_3.renderer.labels.create();\r\n                            this._disposers.push(new Disposer(function () {\r\n                                component_3.renderer.labels.removeValue(label_1);\r\n                            }));\r\n                        }\r\n                    }\r\n                    this._disposers.push(label_1);\r\n                    this.label = label_1;\r\n                    label_1.axis = this.component;\r\n                    label_1.virtualParent = component_3;\r\n                }\r\n            }\r\n            return this._label;\r\n        },\r\n        /**\r\n         * An [[AxisLabel]] element associated with this data item.\r\n         *\r\n         * If there is no label element associated with data item, a new one is\r\n         * created and returned.\r\n         *\r\n         * @param {AxisLabel} label Label element\r\n         */\r\n        set: function (label) {\r\n            if (this._label && this._label != label) {\r\n                $array.remove(this.sprites, this._label);\r\n                this._label.dataItem = undefined;\r\n            }\r\n            if (label) {\r\n                if (label.dataItem && label.dataItem != this) {\r\n                    $array.remove(label.dataItem.sprites, label);\r\n                    label.dataItem.label = undefined;\r\n                }\r\n                this.addSprite(label);\r\n            }\r\n            this._label = label;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisDataItem.prototype, \"axisFill\", {\r\n        /**\r\n         * @return {AxisFill} Label element\r\n         */\r\n        get: function () {\r\n            if (!this._axisFill) {\r\n                var component_4 = this.component;\r\n                if (component_4) {\r\n                    var template = void 0;\r\n                    var axisFill_1;\r\n                    if (this.isRange) {\r\n                        template = component_4.axisRanges.template.axisFill;\r\n                        if (!this.isTemplate && template.disabled) {\r\n                            return;\r\n                        }\r\n                        else {\r\n                            axisFill_1 = template.clone();\r\n                        }\r\n                    }\r\n                    else {\r\n                        template = component_4.renderer.axisFills.template;\r\n                        if (template.disabled) {\r\n                            return;\r\n                        }\r\n                        else {\r\n                            axisFill_1 = component_4.renderer.axisFills.create();\r\n                            this._disposers.push(new Disposer(function () {\r\n                                component_4.renderer.axisFills.removeValue(axisFill_1);\r\n                            }));\r\n                        }\r\n                    }\r\n                    this.axisFill = axisFill_1;\r\n                    this._disposers.push(axisFill_1);\r\n                }\r\n            }\r\n            return this._axisFill;\r\n        },\r\n        /**\r\n         * An [[AxisFill]] associated element with this data item.\r\n         *\r\n         * If there is no fill element associated with data item, a new one is\r\n         * created and returned.\r\n         *\r\n         * @param {AxisFill} label Label element\r\n         */\r\n        set: function (axisFill) {\r\n            if (this._axisFill && this._axisFill != axisFill) {\r\n                $array.remove(this.sprites, this._axisFill);\r\n                this._axisFill.dataItem = undefined;\r\n            }\r\n            if (axisFill) {\r\n                if (axisFill.dataItem && axisFill.dataItem != this) {\r\n                    $array.remove(axisFill.dataItem.sprites, axisFill);\r\n                    axisFill.dataItem.axisFill = undefined;\r\n                }\r\n                axisFill.axis = this.component;\r\n                this.addSprite(axisFill);\r\n            }\r\n            this._axisFill = axisFill;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisDataItem.prototype, \"text\", {\r\n        /**\r\n         * @return {string} Text label\r\n         */\r\n        get: function () {\r\n            return this._text;\r\n        },\r\n        /**\r\n         * Text to be used as data item's label.\r\n         *\r\n         * @param {string} text Text label\r\n         */\r\n        set: function (text) {\r\n            this._text = text;\r\n            if (this._label) { // do not use getter, it will create unwanted instances!\r\n                this._label.text = text;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisDataItem.prototype, \"mask\", {\r\n        /**\r\n         * Data item's mask.\r\n         *\r\n         * @return {AxisFill} Mask\r\n         */\r\n        get: function () {\r\n            return this._mask;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisDataItem.prototype, \"contents\", {\r\n        /**\r\n         * Returns a [[Container]] to place all visual elements, related to data item\r\n         * in.\r\n         *\r\n         * If there is no Container, a new one is created.\r\n         *\r\n         * @return {Container} Contents container\r\n         */\r\n        get: function () {\r\n            if (!this._contents) {\r\n                var contents = new Container();\r\n                this.addSprite(contents);\r\n                contents.isMeasured = false;\r\n                this._contents = contents;\r\n                var component = this.component;\r\n                if (component) {\r\n                    var mask = component.renderer.createFill(this.component);\r\n                    mask.disabled = false;\r\n                    mask.axis = component;\r\n                    this.addSprite(mask);\r\n                    this._mask = mask;\r\n                    contents.mask = mask;\r\n                }\r\n            }\r\n            return this._contents;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisDataItem.prototype, \"axisBreak\", {\r\n        /**\r\n         * @return {AxisBreak} Axis break\r\n         */\r\n        get: function () {\r\n            return this._axisBreak;\r\n        },\r\n        /**\r\n         * An [[AxisBreak]] this data item falls within.\r\n         *\r\n         * @param {AxisBreak} axisBreak Axis break\r\n         */\r\n        set: function (axisBreak) {\r\n            if (this._axisBreak) {\r\n                this._axisBreak.dataItems.removeValue(this);\r\n            }\r\n            if (axisBreak) {\r\n                axisBreak.dataItems.push(this);\r\n            }\r\n            this._axisBreak = axisBreak;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Re-draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisDataItem.prototype.validate = function () {\r\n        if (this.component) {\r\n            this.component.validateDataElement(this);\r\n        }\r\n    };\r\n    /**\r\n     * Appends data item's elements to the parent [[Container]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisDataItem.prototype.appendChildren = function () {\r\n        if (this.component) {\r\n            this.component.appendDataItem(this);\r\n        }\r\n    };\r\n    /**\r\n     * Ordering function used in JSON setup.\r\n     *\r\n     * @param  {string}  a  Item A\r\n     * @param  {string}  b  Item B\r\n     * @return {Ordering}   Order\r\n     */\r\n    AxisDataItem.prototype.configOrder = function (a, b) {\r\n        if (a == b) {\r\n            return 0;\r\n        }\r\n        else if (a == \"language\") {\r\n            return -1;\r\n        }\r\n        else if (b == \"language\") {\r\n            return 1;\r\n        }\r\n        else if (a == \"component\") {\r\n            return -1;\r\n        }\r\n        else if (b == \"component\") {\r\n            return 1;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    };\r\n    /**\r\n     * Checks if data item has particular property set.\r\n     *\r\n     * @param  {string}   prop  Property name\r\n     * @return {boolean}        Property set?\r\n     */\r\n    AxisDataItem.prototype.hasProperty = function (prop) {\r\n        return prop == \"component\" ? true : _super.prototype.hasProperty.call(this, prop);\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[AxisDataItem]].\r\n     *\r\n     * @param {AxisDataItem} source Source AxisDataItem\r\n     */\r\n    AxisDataItem.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.text = source.text;\r\n    };\r\n    return AxisDataItem;\r\n}(DataItem));\r\nexport { AxisDataItem };\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines named positions for data item's location within [[Axis]].\r\n */\r\nexport var AxisItemLocation;\r\n(function (AxisItemLocation) {\r\n    AxisItemLocation[AxisItemLocation[\"Start\"] = 0] = \"Start\";\r\n    AxisItemLocation[AxisItemLocation[\"Middle\"] = 0.5] = \"Middle\";\r\n    AxisItemLocation[AxisItemLocation[\"End\"] = 1] = \"End\";\r\n})(AxisItemLocation || (AxisItemLocation = {}));\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A base class for all Axis elements.\r\n *\r\n * @see {@link IAxisEvents} for a list of available Events\r\n * @see {@link IAxisAdapters} for a list of available Adapters\r\n */\r\nvar Axis = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Axis, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Axis() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Number of Grid elements on the axis.\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this._gridCount = 10;\r\n        /**\r\n         * A list of [[XYSeries]] that are using this Axis.\r\n         *\r\n         * @type {List<XYSeries>}\r\n         */\r\n        _this._series = new List();\r\n        /**\r\n         * Specifies if axis should be automatically disposed when removing from\r\n         * chart's axis list.\r\n         *\r\n         * @default true\r\n         * @type {boolean}\r\n         */\r\n        _this.autoDispose = true;\r\n        _this.className = \"Axis\";\r\n        _this.shouldClone = false;\r\n        _this.setPropertyValue(\"cursorTooltipEnabled\", true);\r\n        var interfaceColors = new InterfaceColorSet();\r\n        // Create title\r\n        _this.title = new Label();\r\n        _this.title.shouldClone = false;\r\n        _this._disposers.push(_this.title);\r\n        _this.setPropertyValue(\"startLocation\", 0);\r\n        _this.setPropertyValue(\"endLocation\", 1);\r\n        // Data item iterator\r\n        _this._dataItemsIterator = new $iter.ListIterator(_this.dataItems, function () { return _this.dataItems.create(); });\r\n        _this._dataItemsIterator.createNewItems = true;\r\n        // Create tooltip\r\n        var tooltip = new Tooltip();\r\n        _this._disposers.push(tooltip);\r\n        tooltip.label.padding(5, 10, 5, 10);\r\n        tooltip.background.pointerLength = 5;\r\n        tooltip.fitPointerToBounds = true;\r\n        tooltip.background.filters.clear();\r\n        // Set virtual parentfor the tooltip so that it can properly inheirt\r\n        // formatters from the axis.\r\n        tooltip.virtualParent = _this;\r\n        // Create background element for the tooltip\r\n        var background = tooltip.background;\r\n        background.cornerRadius = 0;\r\n        background.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n        background.stroke = background.fill;\r\n        background.strokeWidth = 1;\r\n        background.fillOpacity = 1;\r\n        tooltip.label.fill = interfaceColors.getFor(\"alternativeText\");\r\n        _this.tooltip = tooltip;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Holds reference to a function that accepts a DataItem and its index as\r\n     * parameters.\r\n     *\r\n     * It can either return a fill opacity for a fill, or manipulate data item\r\n     * directly, to create various highlighting scenarios.\r\n     *\r\n     * For example, you can set it up to highlight only weekends on a\r\n     * [[DateAxis]].\r\n     *\r\n     * @todo type\r\n     */\r\n    Axis.prototype.fillRule = function (dataItem, index) {\r\n        if (!$type.isNumber(index)) {\r\n            index = dataItem.index;\r\n        }\r\n        if (index / 2 == Math.round(index / 2)) {\r\n            dataItem.axisFill.__disabled = true;\r\n            dataItem.axisFill.opacity = 0;\r\n        }\r\n        else {\r\n            dataItem.axisFill.opacity = 1;\r\n            dataItem.axisFill.__disabled = false;\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return {AxisDataItem} Data Item\r\n     */\r\n    Axis.prototype.createDataItem = function () {\r\n        return new AxisDataItem();\r\n    };\r\n    /**\r\n     * Invalidates layout.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Axis.prototype.invalidateLayout = function () {\r\n        _super.prototype.invalidateLayout.call(this);\r\n        // this puts series after axis in invalidation order also makes series update it's data items in case widht/height of a series is not 100%\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            series.invalidateLayout();\r\n        });\r\n    };\r\n    /**\r\n     * Invalidates series of this axis.\r\n     *\r\n     */\r\n    Axis.prototype.invalidateSeries = function () {\r\n        // this puts series after axis in invalidation order also makes series update it's data items in case widht/height of a series is not 100%\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            series.invalidate();\r\n        });\r\n    };\r\n    /**\r\n     * Override to cancel super call for data element validation.\r\n     * @ignore\r\n     */\r\n    Axis.prototype.validateDataElements = function () {\r\n        if (this.ghostLabel) {\r\n            this.renderer.updateLabelElement(this.ghostLabel, this.start, this.end);\r\n        }\r\n    };\r\n    /**\r\n     * Recalculates the number of grid items on the axis.\r\n     */\r\n    Axis.prototype.updateGridCount = function () {\r\n        if (this.renderer) {\r\n            this._gridCount = this.axisLength / this.renderer.minGridDistance;\r\n        }\r\n    };\r\n    /**\r\n     * Redraws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Axis.prototype.validateLayout = function () {\r\n        this.axisFullLength = this.axisLength / (this.end - this.start);\r\n        _super.prototype.validateLayout.call(this);\r\n        this.updateGridCount();\r\n        this.renderer.updateAxisLine();\r\n        this.renderer.updateTooltip();\r\n        this.renderer.updateBaseGridElement();\r\n        if (this._prevLength != this.axisLength) {\r\n            this.dispatchImmediately(\"lengthchanged\");\r\n            this._prevLength = this.axisLength;\r\n        }\r\n    };\r\n    /**\r\n     * Initializes Axis' renderer.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Axis.prototype.initRenderer = function () {\r\n    };\r\n    /**\r\n     * Adds a data item to the Axis.\r\n     *\r\n     * @param {this[\"_dataItem\"]} dataItem Data item\r\n     */\r\n    Axis.prototype.appendDataItem = function (dataItem) {\r\n        var renderer = this.renderer;\r\n        if (dataItem.tick) {\r\n            dataItem.tick.parent = renderer.gridContainer;\r\n        }\r\n        if (dataItem.label) {\r\n            dataItem.label.parent = renderer;\r\n        }\r\n        if (dataItem.grid) {\r\n            dataItem.grid.parent = renderer.gridContainer;\r\n        }\r\n        if (dataItem.axisFill) {\r\n            dataItem.axisFill.parent = renderer.gridContainer;\r\n        }\r\n    };\r\n    /**\r\n     * Redraws Axis' related items.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Axis.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        this.validateLayout();\r\n    };\r\n    /**\r\n     * Redars Axis ranges.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Axis.prototype.validateAxisRanges = function () {\r\n        var _this = this;\r\n        $iter.each(this.axisRanges.iterator(), function (axisRange) {\r\n            _this.appendDataItem(axisRange);\r\n            _this.validateDataElement(axisRange);\r\n            if (axisRange.grid) {\r\n                axisRange.grid.validate();\r\n            }\r\n            if (axisRange.tick) {\r\n                axisRange.tick.validate();\r\n            }\r\n            if (axisRange.axisFill) {\r\n                axisRange.axisFill.validate();\r\n            }\r\n            if (axisRange.label) {\r\n                axisRange.label.validate();\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Invalidates all axis breaks, so they are redrawn.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Axis.prototype.validateBreaks = function () {\r\n        $iter.each(this.axisBreaks.iterator(), function (axisBreak) {\r\n            axisBreak.invalidate();\r\n        });\r\n    };\r\n    /**\r\n     * Associates an Axis break with this Axis, after it is inserted into\r\n     * `axisBreaks`.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IListEvents<this[\"_axisBreak\"]>[\"inserted\"]} event Event\r\n     */\r\n    Axis.prototype.processBreak = function (event) {\r\n        var axisBreak = event.newValue;\r\n        axisBreak.parent = this.renderer.breakContainer;\r\n        axisBreak.axis = this;\r\n    };\r\n    /**\r\n     * Registers a [[XYSeries]] element with this Axis.\r\n     *\r\n     * Returns a [[Disposer]] for all events, added to Series for watching\r\n     * changes in Axis, and vice versa.\r\n     * @ignore\r\n     * @param  {XYSeries}     series  Series\r\n     * @return {IDisposer}          Event disposer\r\n     */\r\n    Axis.prototype.registerSeries = function (series) {\r\n        var _this = this;\r\n        this.series.moveValue(series);\r\n        return new MultiDisposer([\r\n            new Disposer(function () {\r\n                _this.series.removeValue(series);\r\n            }),\r\n            this.events.on(\"lengthchanged\", series.invalidate, series, false),\r\n            this.events.on(\"startchanged\", series.invalidate, series, false),\r\n            this.events.on(\"endchanged\", series.invalidate, series, false)\r\n            // TODO should these be disposed of ?\r\n            //series.events.on(\"datavalidated\", this.processSeriesDataItems, this),\r\n            //series.events.on(\"visibilitychanged\", this.processSeriesDataItems, this),\r\n            //series.events.on(\"hidden\", this.processSeriesDataItems, this)\r\n        ]);\r\n    };\r\n    Object.defineProperty(Axis.prototype, \"renderer\", {\r\n        /**\r\n         * @return {this[\"_renderer\"]} Renderer\r\n         */\r\n        get: function () {\r\n            return this._renderer;\r\n        },\r\n        /**\r\n         * An [[AxisRenderer]] to be used to render this Axis.\r\n         *\r\n         * Please note that most of the settings, related to Axis' appearance are set\r\n         * via its renderer. Not directly on the Axis.\r\n         *\r\n         * E.g.:\r\n         *\r\n         * ```TypeScript\r\n         * axis.renderer.inside = true;\r\n         * axis.renderer.minLabelPosition = 0.1;\r\n         * axis.renderer.maxLabelPosition = 0.9;\r\n         * ```\r\n         * ```JavaScript\r\n         * axis.renderer.inside = true;\r\n         * axis.renderer.minLabelPosition = 0.1;\r\n         * axis.renderer.maxLabelPosition = 0.9;\r\n         * ```\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/} for more info\r\n         * @param {this[\"_renderer\"]}  renderer  Renderer\r\n         */\r\n        set: function (renderer) {\r\n            if (renderer != this._renderer) {\r\n                this._renderer = renderer;\r\n                renderer.chart = this.chart;\r\n                renderer.axis = this;\r\n                renderer.parent = this;\r\n                this.title.parent = this; // we add title to axis and set layout in renderer to avoid one extra container, as otherwise axis container would be used for holding renderer only\r\n                this.initRenderer();\r\n                this._disposers.push(renderer.gridContainer.events.on(\"maxsizechanged\", this.invalidate, this, false));\r\n                var ghostLabel_1 = this.renderer.labels.create();\r\n                this._disposers.push(ghostLabel_1);\r\n                ghostLabel_1.dataItem = this.dataItems.template.clone(); // just for the adapters not to fail\r\n                ghostLabel_1.text = \"L\";\r\n                ghostLabel_1.parent = this.renderer;\r\n                ghostLabel_1.fillOpacity = 0;\r\n                ghostLabel_1.opacity = 0;\r\n                ghostLabel_1.strokeOpacity = 0;\r\n                ghostLabel_1.validate();\r\n                this.ghostLabel = ghostLabel_1;\r\n                this.events.on(\"beforedatavalidated\", function () {\r\n                    ghostLabel_1.text = \"L\";\r\n                }, undefined, false);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts a relative position to angle. (for circular axes)\r\n     *\r\n     * @param  {number} position Position (0-1)\r\n     * @return {number}          Angle\r\n     */\r\n    Axis.prototype.positionToAngle = function (position) {\r\n        return this.renderer.positionToAngle(position);\r\n    };\r\n    /**\r\n     * Converts pixel coordinates to a relative position. (0-1)\r\n     *\r\n     * @param {IPoint}   point  Coorinates (px)\r\n     * @return {number}         Position (0-1)\r\n     */\r\n    Axis.prototype.pointToPosition = function (point) {\r\n        return this.renderer.pointToPosition(point);\r\n    };\r\n    /**\r\n     * [getAnyRangePath description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param  {any}     start  [description]\r\n     * @param  {any}     end    [description]\r\n     * @return {string}         [description]\r\n     */\r\n    Axis.prototype.getAnyRangePath = function (start, end) {\r\n        return this.renderer.getPositionRangePath(start, end);\r\n    };\r\n    /**\r\n     * Converts any positional parameter to a relative position on axis.\r\n     *\r\n     * @todo Description (review)\r\n     * @param  {any}     value  Pisition\r\n     * @return {number}         Position (0-1)\r\n     */\r\n    Axis.prototype.anyToPosition = function (value) {\r\n        return 0;\r\n    };\r\n    /**\r\n     * Converts any positional parameter to a relative position on axis.\r\n     *\r\n     * @todo Description (review)\r\n     * @param  {any}     value  Pisition\r\n     * @return {IOrientationPoint}  Orientation point\r\n     */\r\n    Axis.prototype.anyToPoint = function (value) {\r\n        return { x: 0, y: 0, angle: 0 };\r\n    };\r\n    /**\r\n     * [getPositionRangePath description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param  {number} startPosition [description]\r\n     * @param  {number} endPosition   [description]\r\n     * @return {string}               [description]\r\n     */\r\n    Axis.prototype.getPositionRangePath = function (startPosition, endPosition) {\r\n        return this.renderer.getPositionRangePath(startPosition, endPosition);\r\n    };\r\n    Object.defineProperty(Axis.prototype, \"axisLength\", {\r\n        /**\r\n         * Actual axis length in pixels.\r\n         *\r\n         * @return {number} Axis length (px)\r\n         */\r\n        get: function () {\r\n            return this.renderer.axisLength;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Axis.prototype, \"cursorTooltipEnabled\", {\r\n        /**\r\n         * @return {boolean} Display tooltip?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"cursorTooltipEnabled\");\r\n        },\r\n        /**\r\n         * Indicates if axis should display a tooltip for chart's cursor.\r\n         *\r\n         * @param {boolean} value Display tooltip?\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"cursorTooltipEnabled\", value)) {\r\n                if (value && this.renderer) {\r\n                    this.renderer.updateTooltip();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Shows Axis tooltip at specific relative position within Axis. (0-1)\r\n     *\r\n     * @param {number} position Position (0-1)\r\n     * @param {boolean} local or global position\r\n     */\r\n    Axis.prototype.showTooltipAtPosition = function (position, local) {\r\n        var tooltip = this._tooltip;\r\n        if (!local) {\r\n            position = this.toAxisPosition(position);\r\n        }\r\n        var renderer = this.renderer;\r\n        if (tooltip && this.dataItems.length > 0) {\r\n            //@todo: think of how to solve this better\r\n            if (tooltip && !tooltip.parent) {\r\n                tooltip.parent = this.tooltipContainer;\r\n            }\r\n            var tooltipLocation = renderer.tooltipLocation;\r\n            var startPosition = this.getCellStartPosition(position);\r\n            var endPosition = this.getCellEndPosition(position);\r\n            if (this.tooltipPosition == \"fixed\") {\r\n                position = startPosition + (endPosition - startPosition) * tooltipLocation;\r\n            }\r\n            position = $math.fitToRange(position, this.start, this.end);\r\n            var startPoint = renderer.positionToPoint(startPosition);\r\n            var endPoint = renderer.positionToPoint(endPosition);\r\n            // save values so cursor could use them\r\n            this.currentItemStartPoint = startPoint;\r\n            this.currentItemEndPoint = endPoint;\r\n            if (renderer.fullWidthTooltip) {\r\n                tooltip.width = endPoint.x - startPoint.x;\r\n                tooltip.height = endPoint.y - startPoint.y;\r\n            }\r\n            var point = renderer.positionToPoint(position);\r\n            var globalPoint = $utils.spritePointToSvg(point, this.renderer.line);\r\n            tooltip.text = this.getTooltipText(position);\r\n            if (tooltip.text) {\r\n                tooltip.pointTo(globalPoint);\r\n                tooltip.show();\r\n            }\r\n            if (!this.cursorTooltipEnabled) {\r\n                tooltip.hide(0);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Converts relative position (0-1) to Axis position with zoom level and\r\n     * inversed taken into account.\r\n     *\r\n     * @param  {number} position Global position (0-1)\r\n     * @return {number}          Position within Axis (0-1)\r\n     */\r\n    Axis.prototype.toAxisPosition = function (position) {\r\n        position = position * (this.end - this.start);\r\n        if (this.renderer.inversed) {\r\n            position = this.end - position;\r\n        }\r\n        else {\r\n            position = this.start + position;\r\n        }\r\n        return position;\r\n    };\r\n    /**\r\n     * Converts position on the axis with zoom level and\r\n     * inversed taken into account to global position.\r\n     *\r\n     * @param  {number} position Axis position (0-1)\r\n     * @return {number}          Global position (0-1)\r\n     */\r\n    Axis.prototype.toGlobalPosition = function (position) {\r\n        if (this.renderer.inversed) {\r\n            position = this.end - position;\r\n        }\r\n        else {\r\n            position = position - this.start;\r\n        }\r\n        return position / (this.end - this.start);\r\n    };\r\n    /**\r\n     * Returns text to be used for cursor's Axis tooltip.\r\n     *\r\n     * This is a placeholder to override for extending classes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {number}  position  Position coordinate (px)\r\n     * @return {string}            Label text\r\n     */\r\n    Axis.prototype.getTooltipText = function (position) {\r\n        return;\r\n    };\r\n    /**\r\n     * Updates Axis' tooltip's position and possibly size, and pointer (stem)\r\n     * place.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {PointerOrientation}  pointerOrientation  Pointer (stem) orientation\r\n     * @param {IRectangle}          boundingRectangle   A rectangle for tooltip to fit within\r\n     */\r\n    Axis.prototype.updateTooltip = function (pointerOrientation, boundingRectangle) {\r\n        var tooltip = this._tooltip;\r\n        if (tooltip) {\r\n            tooltip.pointerOrientation = pointerOrientation;\r\n            tooltip.setBounds($utils.spriteRectToSvg(boundingRectangle, this.renderer.line));\r\n        }\r\n    };\r\n    /**\r\n     * [roundPosition description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param  {number}            position  Relative position\r\n     * @param  {AxisItemLocation}  location  Location on axis\r\n     * @return {number}                      Rounded position\r\n     */\r\n    Axis.prototype.roundPosition = function (position, location) {\r\n        return position;\r\n    };\r\n    /**\r\n     * [getCellStartPosition description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param  {number} position [description]\r\n     * @return {number}          [description]\r\n     */\r\n    Axis.prototype.getCellStartPosition = function (position) {\r\n        return position;\r\n    };\r\n    /**\r\n     * [getCellEndPosition description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param  {number} position [description]\r\n     * @return {number}          [description]\r\n     */\r\n    Axis.prototype.getCellEndPosition = function (position) {\r\n        return position;\r\n    };\r\n    Object.defineProperty(Axis.prototype, \"axisRanges\", {\r\n        /**\r\n         * A list of axis ranges for this Axis.\r\n         *\r\n         * @return {ListTemplate} Axis ranges\r\n         */\r\n        get: function () {\r\n            if (!this._axisRanges) {\r\n                var dataItem = this.createDataItem();\r\n                dataItem.isRange = true;\r\n                dataItem.axisFill = this.renderer.axisFills.template.clone();\r\n                dataItem.grid = this.renderer.grid.template.clone();\r\n                dataItem.tick = this.renderer.ticks.template.clone();\r\n                dataItem.label = this.renderer.labels.template.clone();\r\n                dataItem.isTemplate = true;\r\n                dataItem.component = this;\r\n                dataItem.axisFill.disabled = false;\r\n                dataItem.tick.disabled = false;\r\n                dataItem.grid.disabled = false;\r\n                dataItem.label.disabled = false;\r\n                this._axisRanges = new ListTemplate(dataItem);\r\n                this._axisRanges.events.on(\"inserted\", this.processAxisRange, this, false);\r\n                this._disposers.push(new ListDisposer(this._axisRanges));\r\n                this._disposers.push(this._axisRanges.template);\r\n            }\r\n            return this._axisRanges;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Decorates an axis range after it has been added to the axis range list.\r\n     *\r\n     * @param {IListEvents<this[\"_dataItem\"]>[\"inserted\"]} event Event\r\n     */\r\n    Axis.prototype.processAxisRange = function (event) {\r\n        var axisRange = event.newValue;\r\n        axisRange.component = this;\r\n        axisRange.isRange = true;\r\n    };\r\n    Object.defineProperty(Axis.prototype, \"axisBreaks\", {\r\n        /**\r\n         * A list of axis breaks on this Axis.\r\n         *\r\n         * @return {SortedListTemplate} Axis breaks.\r\n         */\r\n        get: function () {\r\n            if (!this._axisBreaks) {\r\n                this._axisBreaks = new SortedListTemplate(this.createAxisBreak(), function (a, b) {\r\n                    return $number.order(a.adjustedStartValue, b.adjustedStartValue);\r\n                });\r\n                this._axisBreaks.events.on(\"inserted\", this.processBreak, this, false);\r\n                this._disposers.push(new ListDisposer(this._axisBreaks));\r\n                this._disposers.push(this._axisBreaks.template);\r\n            }\r\n            return this._axisBreaks;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates a new axis break.\r\n     *\r\n     * @return {this[\"_axisBreak\"]} Axis break\r\n     */\r\n    Axis.prototype.createAxisBreak = function () {\r\n        return new AxisBreak();\r\n    };\r\n    Object.defineProperty(Axis.prototype, \"series\", {\r\n        /**\r\n         * A list of Series currently associated with this Axis.\r\n         *\r\n         * @return {List<XYSeries>} Series\r\n         */\r\n        get: function () {\r\n            if (!this._series) {\r\n                this._series = new List();\r\n            }\r\n            return this._series;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Processes Series' data items.\r\n     *\r\n     * This is a placeholder to override for extending classes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Axis.prototype.processSeriesDataItems = function () {\r\n    };\r\n    /**\r\n     * Processes Series' single data item.\r\n     *\r\n     * This is a placeholder to override for extending classes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {XYSeriesDataItem} dataItem Data item\r\n     */\r\n    Axis.prototype.processSeriesDataItem = function (dataItem, axisLetter) {\r\n    };\r\n    /**\r\n     * Post-processes Serie's data items.\r\n     *\r\n     * This is a placeholder to override for extending classes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Axis.prototype.postProcessSeriesDataItems = function () {\r\n    };\r\n    /**\r\n     * Post-processes Serie's single data item.\r\n     *\r\n     * This is a placeholder to override for extending classes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {XYSeriesDataItem} dataItem Data item\r\n     */\r\n    Axis.prototype.postProcessSeriesDataItem = function (dataItem) {\r\n    };\r\n    //\r\n    /**\r\n     * Updates Axis based on all Series that might influence it.\r\n     *\r\n     * Called by Series after Series data is validated.\r\n     *\r\n     * This is a placeholder to override for extending classes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Axis.prototype.updateAxisBySeries = function () {\r\n    };\r\n    /**\r\n     * Hides unused data items.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Axis.prototype.hideUnusedDataItems = function () {\r\n        var _this = this;\r\n        // hide all unused\r\n        var dataItemsIterator = this._dataItemsIterator;\r\n        dataItemsIterator.createNewItems = false;\r\n        $iter.each(dataItemsIterator.iterator(), function (dataItem) {\r\n            _this.validateDataElement(dataItem); // solves shrinking\r\n            dataItem.__disabled = true;\r\n        });\r\n        dataItemsIterator.clear();\r\n        dataItemsIterator.createNewItems = true;\r\n    };\r\n    /**\r\n     * Returns a Series' data item that corresponds to specific position on Axis.\r\n     *\r\n     * This is a placeholder to override for extending classes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {Series}          series    Series\r\n     * @param  {number}          position  Position (0-1)\r\n     * @param  {boolean}         findNearest  Should axis try to find nearest tooltip if there is no data item at exact position\r\n     * @return {XYSeriesDataItem}            Data item\r\n     */\r\n    Axis.prototype.getSeriesDataItem = function (series, position, findNearest) {\r\n        return;\r\n    };\r\n    /**\r\n     * Returns an angle that corresponds to specific position on axis.\r\n     *\r\n     * This is a placeholder to override for extending classes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param  {XYSeriesDataItem}  dataItem  Data item\r\n     * @param  {string}          key       ???\r\n     * @param  {number}          location  Location\r\n     * @param  {string}          stackKey  ???\r\n     * @return {number}                    Angle\r\n     */\r\n    Axis.prototype.getAngle = function (dataItem, key, location, stackKey) {\r\n        return;\r\n    };\r\n    /**\r\n     * [getX description]\r\n     *\r\n     * This is a placeholder to override for extending classes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param  {XYSeriesDataItem} dataItem [description]\r\n     * @param  {string}         key      [description]\r\n     * @param  {number}         location [description]\r\n     * @param  {string}         stackKey [description]\r\n     * @return {number}                  [description]\r\n     */\r\n    Axis.prototype.getX = function (dataItem, key, location, stackKey) {\r\n        return;\r\n    };\r\n    /**\r\n     * [getY description]\r\n     *\r\n     * This is a placeholder to override for extending classes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param  {XYSeriesDataItem} dataItem [description]\r\n     * @param  {string}         key      [description]\r\n     * @param  {number}         location [description]\r\n     * @param  {string}         stackKey [description]\r\n     * @return {number}                  [description]\r\n     */\r\n    Axis.prototype.getY = function (dataItem, key, location, stackKey) {\r\n        return;\r\n    };\r\n    Object.defineProperty(Axis.prototype, \"basePoint\", {\r\n        /**\r\n         * Coordinates of the actual axis start.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {IPoint} Base point coordinates\r\n         */\r\n        get: function () {\r\n            return { x: 0, y: 0 };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * [dataChangeUpdate description]\r\n     *\r\n     * This is a placeholder to override for extending classes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    Axis.prototype.dataChangeUpdate = function () {\r\n    };\r\n    /**\r\n     * [dataChangeUpdate description]\r\n     *\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    Axis.prototype.seriesDataChangeUpdate = function (series) {\r\n    };\r\n    /**\r\n     * Removes axis breaks that fall between `min` and `max` (???)\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param  {number}  min  Start value\r\n     * @param  {number}  max  End value\r\n     * @return {number}       Spread o\r\n     */\r\n    Axis.prototype.adjustDifference = function (min, max) {\r\n        var difference = max - min;\r\n        if ($type.isNumber(difference)) {\r\n            $iter.eachContinue(this.axisBreaks.iterator(), function (axisBreak) {\r\n                var startValue = axisBreak.adjustedStartValue;\r\n                var endValue = axisBreak.adjustedEndValue;\r\n                if ($type.isNumber(startValue) && $type.isNumber(endValue)) {\r\n                    // breaks are sorted, we don't need go further anymore\r\n                    if (startValue > max) {\r\n                        return false;\r\n                    }\r\n                    if (endValue >= min) {\r\n                        if ($type.isNumber(startValue) && $type.isNumber(endValue)) {\r\n                            var breakSize = axisBreak.breakSize;\r\n                            var intersection = $math.intersection({ start: startValue, end: endValue }, { start: min, end: max });\r\n                            if (intersection) {\r\n                                difference -= (intersection.end - intersection.start) * (1 - breakSize);\r\n                            }\r\n                        }\r\n                    }\r\n                    return true;\r\n                }\r\n            });\r\n            return difference;\r\n        }\r\n    };\r\n    /**\r\n     * Checks if specific value falls within a break.\r\n     *\r\n     * Returns [[AxisBreak]] the value falls into.\r\n     *\r\n     * @param  {number}     value  Value to check\r\n     * @return {this[\"_axisBreak\"]}         Axis break\r\n     */\r\n    Axis.prototype.isInBreak = function (value) {\r\n        return $iter.find(this.axisBreaks.iterator(), function (axisBreak) {\r\n            return value >= axisBreak.adjustedStartValue &&\r\n                value <= axisBreak.adjustedEndValue;\r\n        });\r\n    };\r\n    /**\r\n     * [fixAxisBreaks description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    Axis.prototype.fixAxisBreaks = function () {\r\n        var _this = this;\r\n        var axisBreaks = this.axisBreaks;\r\n        if (axisBreaks.length > 0) {\r\n            // first make sure that startValue is <= end value\r\n            // This needs to make a copy of axisBreaks because it mutates the list while traversing\r\n            // TODO very inefficient\r\n            $array.each($iter.toArray(axisBreaks.iterator()), function (axisBreak) {\r\n                var startValue = $math.min(axisBreak.startValue, axisBreak.endValue);\r\n                var endValue = $math.max(axisBreak.startValue, axisBreak.endValue);\r\n                axisBreak.adjustedStartValue = startValue;\r\n                axisBreak.adjustedEndValue = endValue;\r\n                _this.axisBreaks.update(axisBreak);\r\n            });\r\n            var firstAxisBreak = axisBreaks.first;\r\n            var previousEndValue_1 = Math.min(firstAxisBreak.startValue, firstAxisBreak.endValue);\r\n            // process breaks\r\n            // TODO does this need to call axisBreaks.update ?\r\n            $iter.each(this.axisBreaks.iterator(), function (axisBreak) {\r\n                var startValue = axisBreak.adjustedStartValue;\r\n                var endValue = axisBreak.adjustedEndValue;\r\n                // breaks can't overlap\r\n                // if break starts before previous break ends\r\n                if (startValue < previousEndValue_1) {\r\n                    startValue = previousEndValue_1;\r\n                    if (endValue < previousEndValue_1) {\r\n                        endValue = previousEndValue_1;\r\n                    }\r\n                }\r\n                axisBreak.adjustedStartValue = startValue;\r\n                axisBreak.adjustedEndValue = endValue;\r\n            });\r\n        }\r\n    };\r\n    Object.defineProperty(Axis.prototype, \"startIndex\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {number} [description]\r\n         */\r\n        get: function () {\r\n            return 0;\r\n        },\r\n        /**\r\n         * We need start/end indexes of axes to be 0 - `dataItems.length`.\r\n         *\r\n         * Yes, also for category axis, this helps to avoid jumping of categories\r\n         * while scrolling and does not do a lot of extra work as we use\r\n         * protected `_startIndex` and `_endIndex` when working with items.\r\n         *\r\n         * @hidden\r\n         */\r\n        /**\r\n         * [startIndex description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @param {number} value [description]\r\n         */\r\n        set: function (value) {\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Axis.prototype, \"endIndex\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {number} [description]\r\n         */\r\n        get: function () {\r\n            return this.dataItems.length;\r\n        },\r\n        /**\r\n         * [endIndex description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @param {number} value [description]\r\n         */\r\n        set: function (value) {\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a formatted label based on position.\r\n     *\r\n     * Individual axis types should override this method to generate a label\r\n     * that is relevant to axis type.\r\n     *\r\n     * Please note that `position` represents position within axis which may be\r\n     * zoomed and not correspond to Cursor's `position`.\r\n     *\r\n     * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n     * @param  {number}  position  Relative position on axis (0-1)\r\n     * @return {string}            Position label\r\n     */\r\n    Axis.prototype.getPositionLabel = function (position) {\r\n        return Math.round(position * 100) + \"%x\";\r\n    };\r\n    Object.defineProperty(Axis.prototype, \"chart\", {\r\n        /**\r\n         * @return {Chart} Chart\r\n         */\r\n        get: function () {\r\n            return this._chart;\r\n        },\r\n        /**\r\n         * A Chart this Axis belongs to.\r\n         *\r\n         * @param {Chart}  value  Chart\r\n         */\r\n        set: function (value) {\r\n            this._chart = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates a data item for a Series range.\r\n     *\r\n     * @param  {XYSeries}  series  Target Series\r\n     * @return {this}            Range data item\r\n     */\r\n    Axis.prototype.createSeriesRange = function (series) {\r\n        var range = this.axisRanges.create();\r\n        range.component = this;\r\n        range.axisFill = this.renderer.axisFills.template.clone();\r\n        range.axisFill.disabled = false;\r\n        range.axisFill.fillOpacity = 0;\r\n        range.grid = this.renderer.grid.template.clone();\r\n        range.grid.disabled = true;\r\n        range.tick = this.renderer.ticks.template.clone();\r\n        range.tick.disabled = true;\r\n        range.label = this.renderer.labels.template.clone();\r\n        range.label.disabled = true;\r\n        series.axisRanges.push(range);\r\n        return range;\r\n    };\r\n    /**\r\n     * Copies all properties and related data from a different instance of Axis.\r\n     *\r\n     * @param {this} source Source Axis\r\n     */\r\n    Axis.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.renderer) {\r\n            this.renderer.copyFrom(source.renderer);\r\n        }\r\n        if (source.title) {\r\n            this.title = source.title.clone();\r\n        }\r\n    };\r\n    /**\r\n     * Resets internal iterator.\r\n     */\r\n    Axis.prototype.resetIterators = function () {\r\n        this._dataItemsIterator.reset();\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {object}  config  Config\r\n     */\r\n    Axis.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Set up axis ranges\r\n            if ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n                for (var i = 0, len = config.axisRanges.length; i < len; i++) {\r\n                    var range = config.axisRanges[i];\r\n                    // If `series` is set, we know it's a series range\r\n                    if ($type.hasValue(range[\"series\"])) {\r\n                        if ($type.isString(range[\"series\"])) {\r\n                            if (this.map.hasKey(range[\"series\"])) {\r\n                                //range[\"series\"] = this.map.getKey(range[\"series\"]);\r\n                                config.axisRanges[i] = this.createSeriesRange(this.map.getKey(range[\"series\"]));\r\n                                delete (range[\"series\"]);\r\n                                config.axisRanges[i].config = range;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    Object.defineProperty(Axis.prototype, \"startLocation\", {\r\n        /**\r\n         * @return {number} Location (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startLocation\");\r\n        },\r\n        /**\r\n         * Axis start location. Works on Date/Category axis, doesn't work on Value axis.\r\n         *\r\n         * * 0 - Full first cell is shown.\r\n         * * 0.5 - Half of first cell is shown.\r\n         * * 1 - None of the first cell is visible. (you probably don't want that)\r\n         *\r\n         * @param {number} value Location (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startLocation\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Axis.prototype, \"endLocation\", {\r\n        /**\r\n         * @return {number} Location (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endLocation\");\r\n        },\r\n        /**\r\n         * Axis end location. Works on Date/Category axis, doesn't work on Value axis.\r\n         *\r\n         * * 0 - None of the last cell is shown. (don't do that)\r\n         * * 0.5 - Half of the last cell is shown.\r\n         * * 1 - Full last cell is shown.\r\n         *\r\n         * @param {number} value Location (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endLocation\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Axis;\r\n}(Component));\r\nexport { Axis };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Axis\"] = Axis;\r\nregistry.registeredClasses[\"AxisDataItem\"] = AxisDataItem;\r\n//# sourceMappingURL=Axis.js.map","/**\r\n * Axis break module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Base class to define \"breaks\" on axes.\r\n *\r\n * @see {@link IAxisBreakEvents} for a list of available events\r\n * @see {@link IAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar AxisBreak = /** @class */ (function (_super) {\r\n    tslib_1.__extends(AxisBreak, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function AxisBreak() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Reference to parent Axis.\r\n         *\r\n         * @type {MutableValueDisposer}\r\n         */\r\n        _this._axis = new MutableValueDisposer();\r\n        /**\r\n         * A list of axis data items which fall within this break.\r\n         *\r\n         * @type {List<AxisDataItem>}\r\n         */\r\n        _this.dataItems = new List();\r\n        _this.className = \"AxisBreak\";\r\n        // Set defaults\r\n        _this.breakSize = 0.01;\r\n        _this.marginLeft = -5;\r\n        _this.marginRight = -5;\r\n        _this.marginTop = -5;\r\n        _this.marginBottom = -5;\r\n        var interfaceColors = new InterfaceColorSet();\r\n        // Create elements\r\n        // (these won't be used actually, just for setting properties)\r\n        var fillShape = new WavedLine();\r\n        fillShape.fill = interfaceColors.getFor(\"background\");\r\n        fillShape.stroke = color();\r\n        fillShape.fillOpacity = 0.9;\r\n        fillShape.zIndex = 0;\r\n        _this._fillShape = fillShape;\r\n        var startLine = new WavedLine();\r\n        startLine.fill = color();\r\n        startLine.stroke = interfaceColors.getFor(\"grid\");\r\n        startLine.strokeOpacity = 0.3;\r\n        startLine.zIndex = 1;\r\n        _this._startLine = startLine;\r\n        var endLine = new WavedLine();\r\n        endLine.fill = color();\r\n        endLine.stroke = color(\"#000000\"); // interfaceColors.getFor(\"grid\");\r\n        endLine.strokeOpacity = 0.3;\r\n        endLine.zIndex = 2;\r\n        _this._endLine = endLine;\r\n        _this._disposers.push(_this._axis);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    AxisBreak.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        if (this._fillShape) {\r\n            this._fillShape.dispose();\r\n        }\r\n        if (this._startLine) {\r\n            this._startLine.dispose();\r\n        }\r\n        if (this._endLine) {\r\n            this._endLine.dispose();\r\n        }\r\n    };\r\n    Object.defineProperty(AxisBreak.prototype, \"startLine\", {\r\n        /**\r\n         * @return {IWavedShape} Element\r\n         */\r\n        get: function () {\r\n            return this._startLine;\r\n        },\r\n        /**\r\n         * An element used for the starting line of the break.\r\n         *\r\n         * @param {IWavedShape}  sprite  Element\r\n         */\r\n        set: function (sprite) {\r\n            if (this._startLine) {\r\n                this._startLine.dispose();\r\n            }\r\n            this._startLine = sprite;\r\n            this.addBreakSprite(sprite);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisBreak.prototype, \"endLine\", {\r\n        /**\r\n         * @return {IWavedShape} Element\r\n         */\r\n        get: function () {\r\n            return this._endLine;\r\n        },\r\n        /**\r\n         * An element used for the end line of the break.\r\n         *\r\n         * @param {IWavedShape} sprite Element\r\n         */\r\n        set: function (sprite) {\r\n            if (this._endLine) {\r\n                this._endLine.dispose();\r\n            }\r\n            this._endLine = sprite;\r\n            this.addBreakSprite(sprite);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisBreak.prototype, \"fillShape\", {\r\n        /**\r\n         * @return {IWavedShape} Element\r\n         */\r\n        get: function () {\r\n            return this._fillShape;\r\n        },\r\n        /**\r\n         * An element used for fill of the break.\r\n         *\r\n         * @param {IWavedShape} sprite Element\r\n         */\r\n        set: function (sprite) {\r\n            if (this._fillShape) {\r\n                this._fillShape.dispose();\r\n            }\r\n            this._fillShape = sprite;\r\n            this.addBreakSprite(sprite);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Adds a break element (e.g. lines, fill) to the break, which is\r\n     * [[Container]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IWavedShape} sprite Element to add\r\n     */\r\n    AxisBreak.prototype.addBreakSprite = function (sprite) {\r\n        sprite.parent = this;\r\n        sprite.isMeasured = false;\r\n        this._disposers.push(sprite);\r\n    };\r\n    Object.defineProperty(AxisBreak.prototype, \"axis\", {\r\n        /**\r\n         * @return {Axis} Axis\r\n         */\r\n        get: function () {\r\n            return this._axis.get();\r\n        },\r\n        /**\r\n         * An Axis this Break is associated with.\r\n         *\r\n         * @param {Axis}  axis  Axis\r\n         */\r\n        set: function (axis) {\r\n            if (this._axis.get() !== axis) {\r\n                this._axis.set(axis, axis.renderer.gridContainer.events.on(\"transformed\", this.invalidate, this, false));\r\n                axis.renderer.createBreakSprites(this);\r\n                // this can't go to copyFrom, as axis is set later\r\n                var breakTemplate = axis.axisBreaks.template;\r\n                this.startLine.copyFrom(breakTemplate.startLine);\r\n                this.endLine.copyFrom(breakTemplate.endLine);\r\n                this.fillShape.copyFrom(breakTemplate.fillShape);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisBreak.prototype, \"breakSize\", {\r\n        /**\r\n         * @return {number} Relative axis break\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"breakSize\");\r\n        },\r\n        /**\r\n         * A size of the break relative to the actual size of the scope break spans.\r\n         *\r\n         * For example, if `breakSize = 0.1` and unbroken scope of balues it spans\r\n         * would be 100 pixels, the break would be 10 pixels wide.\r\n         *\r\n         * 0 means the break will completely collapse and hide the values.\r\n         * 1 means break would be not collapse at all, which would make it\r\n         * effectively useless.\r\n         *\r\n         * @default 0.01\r\n         * @param {number}  value  Relative axis break\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"breakSize\", value)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidate();\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisBreak.prototype, \"startPoint\", {\r\n        /**\r\n         * Returns pixel coordinates of axis break's start.\r\n         *\r\n         * @return {IPoint} Start point\r\n         */\r\n        get: function () {\r\n            var renderer = this.axis.renderer;\r\n            if (renderer) {\r\n                return renderer.positionToPoint(this.startPosition);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisBreak.prototype, \"endPoint\", {\r\n        /**\r\n         * Returns pixel coordinates of axis break's end.\r\n         *\r\n         * @return {IPoint} End point\r\n         */\r\n        get: function () {\r\n            var renderer = this.axis.renderer;\r\n            if (renderer) {\r\n                return renderer.positionToPoint(this.endPosition);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisBreak.prototype, \"startPosition\", {\r\n        /**\r\n         * Returns a relative position at which axis break starts.\r\n         *\r\n         * This is a calculated position, meaning it shows relative position of the\r\n         * break after break is applied.\r\n         *\r\n         * @return {number} Start position\r\n         */\r\n        get: function () {\r\n            return;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisBreak.prototype, \"endPosition\", {\r\n        /**\r\n         * Returns a relative position at which axis break ends.\r\n         *\r\n         * This is a calculated position, meaning it shows relative position of the\r\n         * break after break is applied.\r\n         *\r\n         * @return {number} End position\r\n         */\r\n        get: function () {\r\n            return;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Draws the axis break.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisBreak.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        if (this.axis) {\r\n            var renderer = this.axis.renderer;\r\n            renderer.updateBreakElement(this);\r\n        }\r\n    };\r\n    Object.defineProperty(AxisBreak.prototype, \"startValue\", {\r\n        /**\r\n         * @return {number} Starting value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startValue\");\r\n        },\r\n        /**\r\n         * A starting value for the break.\r\n         *\r\n         * @param {number}  value  Starting value\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"startValue\", value)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidate();\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisBreak.prototype, \"endValue\", {\r\n        /**\r\n         * @return {number} End value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endValue\");\r\n        },\r\n        /**\r\n         * An end value for the break.\r\n         *\r\n         * @param {number}  value  End value\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"endValue\", value)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidate();\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return AxisBreak;\r\n}(Container));\r\nexport { AxisBreak };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisBreak\"] = AxisBreak;\r\n//# sourceMappingURL=AxisBreak.js.map","import * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * AxisFill is a base class used to defines fill shapes for various\r\n * type-specific Axes.\r\n *\r\n * Axis fills are used to add fills to specific ranges of those axes.\r\n *\r\n * @see {@link IAxisFillEvents} for a list of available events\r\n * @see {@link IAxisFillAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar AxisFill = /** @class */ (function (_super) {\r\n    tslib_1.__extends(AxisFill, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {Axis} axis Axis\r\n     */\r\n    function AxisFill(axis) {\r\n        var _this = _super.call(this) || this;\r\n        _this.axis = axis;\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.className = \"AxisFill\";\r\n        _this.isMeasured = false;\r\n        _this.location = 0;\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n        _this.fillOpacity = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    AxisFill.prototype.setDisabled = function (value) {\r\n        var changed = _super.prototype.setDisabled.call(this, value);\r\n        if (this.axis) {\r\n            this.axis.invalidateDataItems();\r\n        }\r\n        return changed;\r\n    };\r\n    /**\r\n     * Draws the fill element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisFill.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        if (this.axis && $type.isNumber(this.startPosition) && $type.isNumber(this.endPosition)) {\r\n            this.fillPath = this.axis.getPositionRangePath(this.startPosition, this.endPosition);\r\n            this.path = this.fillPath;\r\n        }\r\n    };\r\n    Object.defineProperty(AxisFill.prototype, \"startPosition\", {\r\n        /**\r\n         * @return {number} Start position\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startPosition\");\r\n        },\r\n        /**\r\n         * An actual starting position of the fill.\r\n         *\r\n         * @param {number}  value  Starting position\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startPosition\", value);\r\n            this.invalidate(); // this is needed as relative position might not change when zooming\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisFill.prototype, \"endPosition\", {\r\n        /**\r\n         * @return {number} End position\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endPosition\");\r\n        },\r\n        /**\r\n         * An actual end position of the fill.\r\n         *\r\n         * @param {number} value End position\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endPosition\", value);\r\n            this.invalidate(); // this is needed as relative position might not change when zooming\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisFill.prototype, \"location\", {\r\n        /**\r\n         * @return {AxisItemLocation} Location (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"location\");\r\n        },\r\n        /**\r\n         * Relative location of the fill. (0-1)\r\n         *\r\n         * @param {number} value Location (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"location\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return AxisFill;\r\n}(Sprite));\r\nexport { AxisFill };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFill\"] = AxisFill;\r\n//# sourceMappingURL=AxisFill.js.map","import * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nvar AxisFillCircular = /** @class */ (function (_super) {\r\n    tslib_1.__extends(AxisFillCircular, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {Axis} axis Axis\r\n     */\r\n    function AxisFillCircular(axis) {\r\n        var _this = _super.call(this, axis) || this;\r\n        _this.className = \"AxisFillCircular\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.radius = percent(100);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the fill element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisFillCircular.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        if (this.axis) {\r\n            var renderer = this.axis.renderer;\r\n            this.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n            this.path = this.fillPath;\r\n        }\r\n    };\r\n    Object.defineProperty(AxisFillCircular.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return {number} Inner radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n         *\r\n         * @param {number | Percent}  value  Inner radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisFillCircular.prototype, \"radius\", {\r\n        /**\r\n         * @return {number} Outer radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n         *\r\n         * @param {number | Percent}  value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisFillCircular.prototype, \"cornerRadius\", {\r\n        /**\r\n         * @return {number} Corner radius (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"cornerRadius\");\r\n        },\r\n        /**\r\n         * Corner radius for the fill. In pixels.\r\n         *\r\n         * @param {number}  value  Corner radius (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"cornerRadius\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return AxisFillCircular;\r\n}(AxisFill));\r\nexport { AxisFillCircular };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n//# sourceMappingURL=AxisFillCircular.js.map","/**\r\n * Axis Label module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Use to create labels on Axis.\r\n *\r\n * @see {@link IAxisLabelEvents} for a list of available events\r\n * @see {@link IAxisLabelAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar AxisLabel = /** @class */ (function (_super) {\r\n    tslib_1.__extends(AxisLabel, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function AxisLabel() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"AxisLabel\";\r\n        _this.isMeasured = false;\r\n        _this.padding(10, 10, 10, 10);\r\n        _this.location = 0.5;\r\n        //this.nonScaling = true; // not good for perf\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(AxisLabel.prototype, \"location\", {\r\n        /**\r\n         * @return {AxisItemLocation} Location (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"location\");\r\n        },\r\n        /**\r\n         * Relative location of the label. (0-1)\r\n         *\r\n         * @param {AxisItemLocation}  value  Location (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"location\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisLabel.prototype, \"inside\", {\r\n        /**\r\n         * Returns if label is set to be drawn inside axis.\r\n         *\r\n         * @return {boolean} Inside?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"inside\");\r\n        },\r\n        /**\r\n         * Sets if label should be drawn inside axis.\r\n         *\r\n         * @param {boolean}  value  Inside?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"inside\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    AxisLabel.prototype.setDisabled = function (value) {\r\n        var changed = _super.prototype.setDisabled.call(this, value);\r\n        if (this.axis) {\r\n            this.axis.invalidateDataItems();\r\n        }\r\n        return changed;\r\n    };\r\n    return AxisLabel;\r\n}(Label));\r\nexport { AxisLabel };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabel\"] = AxisLabel;\r\n//# sourceMappingURL=AxisLabel.js.map","/**\r\n * Axis Label module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nvar AxisLabelCircular = /** @class */ (function (_super) {\r\n    tslib_1.__extends(AxisLabelCircular, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function AxisLabelCircular() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         *\r\n         * @type {number}\r\n         * @ignore\r\n         */\r\n        _this.fdx = 0;\r\n        /**\r\n         *\r\n         * @type {number}\r\n         * @ignore\r\n         */\r\n        _this.fdy = 0;\r\n        _this.className = \"AxisLabelCircular\";\r\n        _this.padding(0, 0, 0, 0);\r\n        _this.location = 0.5;\r\n        _this.radius = 0;\r\n        _this.isMeasured = false;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(AxisLabelCircular.prototype, \"relativeRotation\", {\r\n        /**\r\n         * @return {number} Rotation angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"relativeRotation\");\r\n        },\r\n        /**\r\n         * Relative rotation of the label.\r\n         *\r\n         * It is an angle to circle. In case 90, labels will be positioned like rays\r\n         * of light, if 0 - positione along the circle.\r\n         *\r\n         * @param {number} value Rotation angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"relativeRotation\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisLabelCircular.prototype, \"radius\", {\r\n        /**\r\n         * @return {number} Distance (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Distance from axis circle to label in pixels or percent.\r\n         *\r\n         * @param {number} value Distance (px or percent)\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * returns label radius in pixels\r\n     */\r\n    AxisLabelCircular.prototype.pixelRadius = function (axisRadius) {\r\n        var sign = 1;\r\n        if (this.inside) {\r\n            sign = -1;\r\n        }\r\n        return $utils.relativeToValue(this.radius, axisRadius) * sign;\r\n    };\r\n    /**\r\n     * returns label radius in pixels\r\n     */\r\n    AxisLabelCircular.prototype.pixelRadiusY = function (axisRadius, axisRadiusY) {\r\n        var sign = 1;\r\n        if (this.inside) {\r\n            sign = -1;\r\n        }\r\n        var radius = this.radius;\r\n        if ($type.isNumber(radius)) {\r\n            radius *= axisRadiusY / axisRadius;\r\n            return $utils.relativeToValue(radius, axisRadius) * sign;\r\n        }\r\n        else {\r\n            return $utils.relativeToValue(radius, axisRadiusY) * sign;\r\n        }\r\n    };\r\n    /**\r\n     * [fixPosition description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param  {IPoint}  point       Label affixation point\r\n     * @param  {number}  axisRadius  Distance from point (px)\r\n     */\r\n    AxisLabelCircular.prototype.fixPosition = function (angle, axisRadius, axisRadiusY, dx, dy) {\r\n        if (!$type.isNumber(axisRadiusY)) {\r\n            axisRadiusY = axisRadius;\r\n        }\r\n        if (!$type.isNumber(dx)) {\r\n            dx = 0;\r\n        }\r\n        if (!$type.isNumber(dy)) {\r\n            dy = 0;\r\n        }\r\n        var point = { x: axisRadius * $math.cos(angle), y: axisRadiusY * $math.sin(angle) };\r\n        if (this.invalid) {\r\n            this.validate(); //@todo\" check if we need this\r\n        }\r\n        var isNegative = false;\r\n        var realRadius = this.radius;\r\n        if (realRadius instanceof Percent && realRadius.value < 0) {\r\n            isNegative = true;\r\n        }\r\n        else if (realRadius < 0) {\r\n            isNegative = true;\r\n        }\r\n        var relativeRotation = this.relativeRotation;\r\n        var labelRadius = this.pixelRadius(axisRadius);\r\n        // WHEN ROTATED\r\n        if ($type.isNumber(relativeRotation)) {\r\n            this.horizontalCenter = \"none\";\r\n            this.verticalCenter = \"none\";\r\n            angle = $math.fitAngleToRange(angle, -180, 180);\r\n            var pixelWidth = this.bbox.width;\r\n            var pixelHeight = this.bbox.height;\r\n            var pixelPaddingBottom = this.pixelPaddingBottom;\r\n            var pixelPaddingTop = this.pixelPaddingTop;\r\n            var pixelPaddingLeft = this.pixelPaddingLeft;\r\n            var pixelPaddingRight = this.pixelPaddingRight;\r\n            if (angle > 90 || angle < -90) {\r\n                if (relativeRotation == -90) {\r\n                    relativeRotation = 90;\r\n                    pixelWidth = 0;\r\n                }\r\n            }\r\n            else {\r\n                if (relativeRotation == -90) {\r\n                    pixelHeight = -pixelHeight;\r\n                }\r\n                if (relativeRotation == 90) {\r\n                    relativeRotation = -90;\r\n                    pixelWidth = -pixelPaddingLeft - pixelPaddingRight;\r\n                    pixelHeight = -pixelHeight - pixelPaddingTop - pixelPaddingBottom;\r\n                }\r\n            }\r\n            this.rotation = relativeRotation + angle + 90;\r\n            var dH = $math.sin(relativeRotation) / 2;\r\n            var dW = $math.cos(relativeRotation) / 2;\r\n            var rotation = this.rotation;\r\n            this.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n            this.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n            if (!this.inside) {\r\n                labelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n            }\r\n            else {\r\n                if (angle > 90 || angle < -90) {\r\n                    labelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n                }\r\n                else {\r\n                    labelRadius += (pixelPaddingBottom + this.bbox.height + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight + this.bbox.width) * $math.sin(relativeRotation);\r\n                }\r\n            }\r\n            point.x += $math.cos(angle) * labelRadius;\r\n            point.y += $math.sin(angle) * labelRadius * axisRadiusY / axisRadius;\r\n        }\r\n        else {\r\n            // END OF ROTATED\r\n            this.horizontalCenter = \"middle\";\r\n            this.verticalCenter = \"middle\";\r\n            if (isNegative) {\r\n                this.dx = 0;\r\n                this.dy = 0;\r\n                point.x = (axisRadius + labelRadius) * $math.cos(angle);\r\n                point.y = (axisRadiusY + labelRadius * axisRadiusY / axisRadius) * $math.sin(angle);\r\n            }\r\n            else {\r\n                // we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n                // this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n                // @todo with this math doesn't work well with inside = true\r\n                this.dy = this._measuredHeight / 2 * $math.sin(angle); //(1 - (point.y + axisRadiusY) / (2 * axisRadiusY));\r\n                // simmilar with dx\r\n                this.dx = this._measuredWidth / 2 * $math.cos(angle); //(1 - (point.x + axisRadius) / (2 * axisRadius));\r\n                point.x += $math.cos(angle) * labelRadius;\r\n                point.y += $math.sin(angle) * labelRadius * axisRadiusY / axisRadius;\r\n            }\r\n        }\r\n        point.x += dx;\r\n        point.y += dy;\r\n        this.fdx = this.dx;\r\n        this.fdy = this.dy;\r\n        this.moveTo(point);\r\n    };\r\n    return AxisLabelCircular;\r\n}(AxisLabel));\r\nexport { AxisLabelCircular };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\r\n//# sourceMappingURL=AxisLabelCircular.js.map","/**\r\n *\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to draw Axis line.\r\n *\r\n * @see {@link IAxisLineEvents} for a list of available events\r\n * @see {@link IAxisLineAdapters} for a list of available Adapters\r\n */\r\nvar AxisLine = /** @class */ (function (_super) {\r\n    tslib_1.__extends(AxisLine, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function AxisLine() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"AxisLine\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.stroke = interfaceColors.getFor(\"grid\");\r\n        _this.strokeOpacity = 0.15;\r\n        _this.pixelPerfect = true;\r\n        _this.fill = color();\r\n        _this.applyTheme();\r\n        _this.interactionsEnabled = false;\r\n        return _this;\r\n        //this.element.moveTo({ x: 0, y: 0 });\r\n    }\r\n    return AxisLine;\r\n}(Sprite));\r\nexport { AxisLine };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLine\"] = AxisLine;\r\n//# sourceMappingURL=AxisLine.js.map","/**\r\n * Module, defining base Axis Renderer.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { AxisLine } from \"./AxisLine\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A base class for all axis renderers.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\r\nvar AxisRenderer = /** @class */ (function (_super) {\r\n    tslib_1.__extends(AxisRenderer, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {Axis} axis Related axis\r\n     */\r\n    function AxisRenderer() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * A related chart.\r\n         *\r\n         * @type {MutableValueDisposer}\r\n         */\r\n        _this._chart = new MutableValueDisposer();\r\n        _this.className = \"AxisRenderer\";\r\n        // Set defaults\r\n        _this.minGridDistance = 50;\r\n        _this.inside = false;\r\n        _this.inversed = false;\r\n        _this.tooltipLocation = 0.5;\r\n        _this.fullWidthTooltip = false;\r\n        _this.cellStartLocation = 0;\r\n        _this.cellEndLocation = 1;\r\n        _this.minLabelPosition = 0;\r\n        _this.maxLabelPosition = 1;\r\n        _this.shouldClone = false;\r\n        var gridContainer = _this.createChild(Container);\r\n        gridContainer.shouldClone = false;\r\n        gridContainer.layout = \"none\";\r\n        gridContainer.isMeasured = false;\r\n        gridContainer.width = percent(100);\r\n        gridContainer.height = percent(100);\r\n        _this.gridContainer = gridContainer;\r\n        // not good without this\r\n        gridContainer.events.on(\"maxsizechanged\", function () {\r\n            if (_this.inited) {\r\n                _this.invalidateAxisItems();\r\n            }\r\n        }, _this, false);\r\n        var breakContainer = _this.createChild(Container);\r\n        breakContainer.shouldClone = false;\r\n        breakContainer.isMeasured = false;\r\n        breakContainer.layout = \"none\";\r\n        breakContainer.width = percent(100);\r\n        breakContainer.height = percent(100);\r\n        _this.breakContainer = breakContainer;\r\n        _this.line = _this.createChild(AxisLine);\r\n        _this.line.shouldClone = false;\r\n        _this.line.strokeOpacity = 0;\r\n        var baseGrid = _this.createChild(Grid);\r\n        baseGrid.shouldClone = false;\r\n        _this.baseGrid = baseGrid;\r\n        // Make elements disposable\r\n        var disposers = _this._disposers;\r\n        disposers.push(baseGrid);\r\n        disposers.push(_this.line);\r\n        disposers.push(gridContainer);\r\n        disposers.push(breakContainer);\r\n        disposers.push(_this._chart);\r\n        _this.ticks.template.disabled = true;\r\n        _this.axisFills.template.disabled = true;\r\n        _this.axisFills.template.interactionsEnabled = false;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(AxisRenderer.prototype, \"axis\", {\r\n        get: function () {\r\n            return this._axis;\r\n        },\r\n        set: function (axis) {\r\n            this.setAxis(axis);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n    * @ignore\r\n    */\r\n    AxisRenderer.prototype.setAxis = function (axis) {\r\n        this._axis = axis;\r\n        this.baseGrid.parent = axis;\r\n        this.line.parent = axis;\r\n        this.gridContainer.bind(\"opacity\", axis);\r\n    };\r\n    /**\r\n     * Called when rendered is attached to an Axis, as well as a property of\r\n     * Axis that might affect the appearance is updated.\r\n     *\r\n     * E.g. `axis.opposite`, `axis.inside`, etc.\r\n     *\r\n     * This method is called **before** draw, so that any related setting\r\n     * changed in this method can be changed.\r\n     *\r\n     * @todo Description (review)\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRenderer.prototype.processRenderer = function () {\r\n        this.events.on(\"sizechanged\", this.updateTooltip, this, false);\r\n        this.events.on(\"positionchanged\", this.updateTooltip, this, false);\r\n        this.labels.template.inside = this.inside;\r\n        this.ticks.template.inside = this.inside;\r\n    };\r\n    /**\r\n     * Updates Axis' tooltip.\r\n     *\r\n     * @todo Description (review)\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRenderer.prototype.updateTooltip = function () {\r\n        // This is a placeholder method for extending classes to override.\r\n    };\r\n    Object.defineProperty(AxisRenderer.prototype, \"axisLength\", {\r\n        /**\r\n         * Returns actual length of the Axis, in pixels.\r\n         *\r\n         * @return {number} Length (px)\r\n         */\r\n        get: function () {\r\n            // This is a placeholder method for extending classes to override.\r\n            return 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Re-positions an element to new coordinates.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Sprite}  item   A target element\r\n     * @param {IPoint}  point  New coordinates\r\n     */\r\n    AxisRenderer.prototype.positionItem = function (item, point) {\r\n        if (item) {\r\n            item.moveTo(point);\r\n        }\r\n    };\r\n    /**\r\n     * Converts relative position on axis to point coordinates.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {number}  position  Position (0-1)\r\n     * @return {IPoint}            Point\r\n     */\r\n    AxisRenderer.prototype.positionToPoint = function (position) {\r\n        // This is a placeholder method for extending classes to override.\r\n        return { x: 0, y: 0 };\r\n    };\r\n    /**\r\n     * Converts relative position on axis to angle.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review / units)\r\n     * @param  {number}  position  Position (0-1)\r\n     * @return {number}            Angle\r\n     */\r\n    AxisRenderer.prototype.positionToAngle = function (position) {\r\n        // This is a placeholder method for extending classes to override.\r\n        return 0;\r\n    };\r\n    /**\r\n     * Converts relative position (0-1) on axis to a pixel coordinate.\r\n     *\r\n     * @param  {number}  position  Position (0-1)\r\n     * @return {number}            Coordinate (px)\r\n     */\r\n    AxisRenderer.prototype.positionToCoordinate = function (position) {\r\n        var coordinate;\r\n        var axis = this.axis;\r\n        var axisFullLength = axis.axisFullLength;\r\n        if (axis.renderer.inversed) {\r\n            coordinate = (axis.end - position) * axisFullLength;\r\n        }\r\n        else {\r\n            coordinate = (position - axis.start) * axisFullLength;\r\n        }\r\n        return coordinate;\r\n    };\r\n    AxisRenderer.prototype.getHeight = function () {\r\n        var axis = this.axis;\r\n        if (axis && axis.chart) {\r\n            var chart = this.axis.chart;\r\n            if (chart.plotContainer) {\r\n                return chart.plotContainer.pixelHeight || 0;\r\n            }\r\n        }\r\n        return this.gridContainer.pixelHeight || 0;\r\n    };\r\n    AxisRenderer.prototype.getWidth = function () {\r\n        var axis = this.axis;\r\n        if (axis && axis.chart) {\r\n            var chart = this.axis.chart;\r\n            if (chart.plotContainer) {\r\n                return chart.plotContainer.pixelWidth || 0;\r\n            }\r\n        }\r\n        return this.gridContainer.pixelWidth || 0;\r\n    };\r\n    /**\r\n     * Converts a coordinate in pixels to a relative position. (0-1)\r\n     *\r\n     * @param  {number}  coordinate  Coordinate (px)\r\n     * @return {number}              Position (0-1)\r\n     */\r\n    AxisRenderer.prototype.coordinateToPosition = function (coordinate) {\r\n        var position;\r\n        var axis = this.axis;\r\n        var axisFullLength = axis.axisFullLength;\r\n        if (axis.renderer.inversed) {\r\n            position = axis.end - coordinate / axisFullLength;\r\n        }\r\n        else {\r\n            position = coordinate / axisFullLength + axis.start;\r\n        }\r\n        return $math.round(position, 5);\r\n    };\r\n    /**\r\n     * Converts a point at specific coordinates to a relative position (0-1)\r\n     * on the axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {IPoint}  point  Point\r\n     * @return {number}         Position (0-1)\r\n     */\r\n    AxisRenderer.prototype.pointToPosition = function (point) {\r\n        // This is a placeholder method for extending classes to override.\r\n        return 0;\r\n    };\r\n    /**\r\n     * [getPositionRangePath description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param  {number}  startPosition  Starting position\r\n     * @param  {number}  endPosition    End position\r\n     * @return {string}                 SVG path\r\n     */\r\n    AxisRenderer.prototype.getPositionRangePath = function (startPosition, endPosition) {\r\n        return \"\";\r\n    };\r\n    /**\r\n     * Invalidates all axis data items, effectively causing them re-evaluated.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     */\r\n    AxisRenderer.prototype.invalidateAxisItems = function () {\r\n        var axis = this.axis;\r\n        if (axis) {\r\n            axis.invalidateDataItems();\r\n        }\r\n    };\r\n    /**\r\n     * Updates and positions a grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Grid}    grid         Grid element\r\n     * @param {number}  position     Starting position\r\n     * @param {number}  endPosition  End position\r\n     */\r\n    AxisRenderer.prototype.updateGridElement = function (grid, position, endPosition) {\r\n        // This is a placeholder method for extending classes to override.\r\n    };\r\n    /**\r\n     * Updates and positions a tick element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AxisTick}  tick         Tick element\r\n     * @param {number}    position     Starting position\r\n     * @param {number}    endPosition  End position\r\n     */\r\n    AxisRenderer.prototype.updateTickElement = function (tick, position, endPosition) {\r\n        // This is a placeholder method for extending classes to override.\r\n    };\r\n    /**\r\n     * Updates and positions a label element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AxisLabel}  label        Label element\r\n     * @param {number}     position     Starting position\r\n     * @param {number}     endPosition  Ending position\r\n     */\r\n    AxisRenderer.prototype.updateLabelElement = function (label, position, endPosition, location) {\r\n        // This is a placeholder method for extending classes to override.\r\n    };\r\n    /**\r\n     * Updates and positions the axis fill element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AxisFill}  fill         Fill element\r\n     * @param {number}    position     Starting position\r\n     * @param {number}    endPosition  Ending position\r\n     */\r\n    AxisRenderer.prototype.updateFillElement = function (fill, position, endPosition) {\r\n        fill.startPosition = position;\r\n        fill.endPosition = endPosition;\r\n    };\r\n    /**\r\n     * Updates and positions the axis line element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRenderer.prototype.updateAxisLine = function () {\r\n        // This is a placeholder method for extending classes to override.\r\n    };\r\n    /**\r\n     * Updates and positions the base grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRenderer.prototype.updateBaseGridElement = function () {\r\n        // This is a placeholder method for extending classes to override.\r\n    };\r\n    /**\r\n     * Updates and positions an axis break element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AxisBreak} axisBreak Break element\r\n     */\r\n    AxisRenderer.prototype.updateBreakElement = function (axisBreak) {\r\n        this.positionItem(axisBreak.startLine, axisBreak.startPoint);\r\n        this.toggleVisibility(axisBreak.startLine, axisBreak.startPosition, 0, 1);\r\n        this.positionItem(axisBreak.endLine, axisBreak.endPoint);\r\n        this.toggleVisibility(axisBreak.endLine, axisBreak.endPosition, 0, 1);\r\n    };\r\n    Object.defineProperty(AxisRenderer.prototype, \"minGridDistance\", {\r\n        /**\r\n         * @return {number} Min distance (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minGridDistance\");\r\n        },\r\n        /**\r\n         * Minimum distance in pixels between grid elements.\r\n         *\r\n         * @param {number}  value  Min distance (px)\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"minGridDistance\", value)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidateLayout();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRenderer.prototype, \"chart\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {Chart} Chart\r\n         */\r\n        get: function () {\r\n            return this._chart.get();\r\n        },\r\n        /**\r\n         * A chart, associated with the Axis.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {Chart}  value  Chart\r\n         */\r\n        set: function (value) {\r\n            this._chart.set(value, null);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Toggles visibility of an element, based on its current position and\r\n     * min/max position settings.\r\n     *\r\n     * E.g. labels based on `minLabelPosition` and `maxLabelPosition`.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Sprite}  sprite       An element to toggle\r\n     * @param {number}  position     Elements current position\r\n     * @param {number}  minPosition  Min position setting\r\n     * @param {number}  maxPosition  Max position setting\r\n     */\r\n    AxisRenderer.prototype.toggleVisibility = function (sprite, position, minPosition, maxPosition) {\r\n        var axis = this.axis;\r\n        var updatedStart = axis.start + (axis.end - axis.start) * (minPosition - 0.00001);\r\n        var updatedEnd = axis.start + (axis.end - axis.start) * (maxPosition + 0.00001);\r\n        if (!sprite.disabled) {\r\n            if (position < updatedStart || position > updatedEnd) {\r\n                sprite.__disabled = true;\r\n            }\r\n            else {\r\n                sprite.__disabled = false;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Creates visual elements for and axis break.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AxisBreak} axisBreak Axis break\r\n     */\r\n    AxisRenderer.prototype.createBreakSprites = function (axisBreak) {\r\n        // This is a placeholder method for extending classes to override.\r\n    };\r\n    Object.defineProperty(AxisRenderer.prototype, \"axisFills\", {\r\n        /**\r\n         * A list of Axis' Fill elements.\r\n         *\r\n         * Those are fill elements that cover the space between every second set\r\n         * of grid lines, and can be configured to create striped charts.\r\n         *\r\n         * Please note that these are disabled by default. To enable them, set\r\n         * template to true.\r\n         *\r\n         * ```TypeScript\r\n         * categoryAxis.renderer.axisFills.template.disabled = false;\r\n         * ```\r\n         * ```JavaScript\r\n         * categoryAxis.renderer.axisFills.template.disabled = false;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"xAxes\": [{\r\n         *     // ...\r\n         *     \"renderer\": {\r\n         *       \"axisFills\": {\r\n         *         \"disabled\": false\r\n         *       }\r\n         *     }\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/tutorials/alternated-axis-fills/} this tutorial for more info.\r\n         * @return {ListTemplate} Fill elements\r\n         */\r\n        get: function () {\r\n            if (!this._axisFills) {\r\n                var fill = this.createFill(this.axis);\r\n                this._axisFills = new ListTemplate(fill);\r\n                fill.applyOnClones = true;\r\n                fill.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n                this._disposers.push(new ListDisposer(this._axisFills));\r\n                this._disposers.push(this._axisFills.template);\r\n            }\r\n            return this._axisFills;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a new fill element, suitable for this Axis Renderer type.\r\n     *\r\n     * @return {AxisFill} Fill element\r\n     */\r\n    AxisRenderer.prototype.createFill = function (axis) {\r\n        return new AxisFill(axis);\r\n    };\r\n    Object.defineProperty(AxisRenderer.prototype, \"grid\", {\r\n        /**\r\n         * A list of Axis' Grid elements.\r\n         *\r\n         * @return {ListTemplate} Grid elements\r\n         */\r\n        get: function () {\r\n            if (!this._grid) {\r\n                var grid = this.createGrid();\r\n                this._grid = new ListTemplate(grid);\r\n                grid.applyOnClones = true;\r\n                grid.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n                this._disposers.push(new ListDisposer(this._grid));\r\n                this._disposers.push(this._grid.template);\r\n            }\r\n            return this._grid;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a new grid element, suitable for this Axis Renderer type.\r\n     *\r\n     * @return {Grid} Grid element\r\n     */\r\n    AxisRenderer.prototype.createGrid = function () {\r\n        return new Grid();\r\n    };\r\n    Object.defineProperty(AxisRenderer.prototype, \"ticks\", {\r\n        /**\r\n         * A list of Axis' Tick elements.\r\n         *\r\n         * Please note that these are disabled by default. To enable them, set\r\n         * template to true.\r\n         *\r\n         * ```TypeScript\r\n         * categoryAxis.renderer.ticks.template.disabled = false;\r\n         * ```\r\n         * ```JavaScript\r\n         * categoryAxis.renderer.ticks.template.disabled = false;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"xAxes\": [{\r\n         *     // ...\r\n         *     \"renderer\": {\r\n         *       \"ticks\": {\r\n         *         \"disabled\": false\r\n         *       }\r\n         *     }\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * @return {ListTemplate} Tick elements\r\n         */\r\n        get: function () {\r\n            if (!this._ticks) {\r\n                var tick = this.createTick();\r\n                tick.applyOnClones = true;\r\n                tick.isMeasured = false;\r\n                tick.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n                this._ticks = new ListTemplate(tick);\r\n                this._disposers.push(new ListDisposer(this._ticks));\r\n                this._disposers.push(this._ticks.template);\r\n            }\r\n            return this._ticks;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a new tick element, suitable for this Axis Renderer type.\r\n     *\r\n     * @return {AxisTick} Tick element\r\n     */\r\n    AxisRenderer.prototype.createTick = function () {\r\n        return new AxisTick();\r\n    };\r\n    Object.defineProperty(AxisRenderer.prototype, \"labels\", {\r\n        /**\r\n         * A list of Axis' Label elements.\r\n         *\r\n         * @return {ListTemplate} Label elements\r\n         */\r\n        get: function () {\r\n            if (!this._labels) {\r\n                var label = this.createLabel();\r\n                this._labels = new ListTemplate(label);\r\n                label.applyOnClones = true;\r\n                label.events.on(\"enabled\", this.invalidateAxisItems, this, false);\r\n                this._disposers.push(new ListDisposer(this._labels));\r\n                this._disposers.push(this._labels.template);\r\n            }\r\n            return this._labels;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a new label element, suitable for this Axis Renderer type.\r\n     *\r\n     * @return {AxisLabel} Label element\r\n     */\r\n    AxisRenderer.prototype.createLabel = function () {\r\n        return new AxisLabel();\r\n    };\r\n    Object.defineProperty(AxisRenderer.prototype, \"inside\", {\r\n        /**\r\n         * @return {boolean} Labels inside?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"inside\");\r\n        },\r\n        /**\r\n         * Indicates whether Axis' labels and ticks should be drawn inside Plot area.\r\n         *\r\n         * Does not work with all renderers, like AxisRendererRadial.\r\n         *\r\n         * @param {boolean}  value  Labels inside?\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"inside\", value)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidate();\r\n                }\r\n            }\r\n            if (value) {\r\n                this.width = 0;\r\n                this.height = 0;\r\n            }\r\n            else {\r\n                this.width = undefined;\r\n                this.height = undefined;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRenderer.prototype, \"opposite\", {\r\n        /**\r\n         * @return {boolean} Draw axis on opposite side?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"opposite\");\r\n        },\r\n        /**\r\n         * Indicates whether Axis should be drawn on the opposite side of the plot\r\n         * area than it would normally be drawn based on chart's settings.\r\n         *\r\n         * Does not work with all renderers, like [[AxisRendererRadial]] and\r\n         * [[AxisRenderer Circular].\r\n         *\r\n         * @param {boolean}  value  Draw axis on opposite side?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"opposite\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRenderer.prototype, \"fullWidthTooltip\", {\r\n        /**\r\n         * @return {boolean} Full width tooltip?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"fullWidthTooltip\");\r\n        },\r\n        /**\r\n         * Indicates if Axis tooltip should take the whole width of the axis cell.\r\n         * (between two grid lines)\r\n         *\r\n         * NOTE: this setting is ignored on circular axis types.\r\n         *\r\n         * @param {boolean} value Full width tooltip?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"fullWidthTooltip\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRenderer.prototype, \"tooltipLocation\", {\r\n        /**\r\n         * @return {number} Tooltip location\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tooltipLocation\");\r\n        },\r\n        /**\r\n         * Location within axis cell to show tooltip on. (0-1)\r\n         *\r\n         * 0 - show at the start\r\n         * 0.5 - show right in the middle\r\n         * 1 - show at the end\r\n         *\r\n         * @param {number} value Tooltip location\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tooltipLocation\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRenderer.prototype, \"cellStartLocation\", {\r\n        /**\r\n         * @return {number} Cell start (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"cellStartLocation\");\r\n        },\r\n        /**\r\n         * Location for the cell start.\r\n         *\r\n         * Normally a \"cell\" is the whole available width in a category.\r\n         *\r\n         * If there are several clustered column-like series available, the whole\r\n         * space is divided between each clustered column, or column stacks.\r\n         *\r\n         * `cellStartLocation` identifies where, within available space, the actual\r\n         * cell starts.\r\n         *\r\n         * This, together with column series' `width` will affect actual width of\r\n         * columns, and thus gaps between them.\r\n         *\r\n         * This will affect category-like axes only, like [[DateAxis]], or\r\n         * [[CategoryAxis]].\r\n         *\r\n         * This is used to limit a space occupied by series like column.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n         * @param {number} value Cell start (0-1)\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"cellStartLocation\", value)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRenderer.prototype, \"cellEndLocation\", {\r\n        /**\r\n         * @return {number} Cell end (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"cellEndLocation\");\r\n        },\r\n        /**\r\n         * Location for the cell end.\r\n         *\r\n         * Normally a \"cell\" is the whole available width in a category.\r\n         *\r\n         * If there are several clustered column-like series available, the whole\r\n         * space is divided between each clustered column, or column stacks.\r\n         *\r\n         * `cellEndLocation` identifies where, within available space, the actual\r\n         * cell ends.\r\n         *\r\n         * This, together with column series' `width` will affect actual width of\r\n         * columns, and thus gaps between them.\r\n         *\r\n         * This will affect category-like axes only, like [[DateAxis]], or\r\n         * [[CategoryAxis]].\r\n         *\r\n         * This is used to limit a space occupied by series like column.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n         * @param {number} value Cell end (0-1)\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"cellEndLocation\", value)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRenderer.prototype, \"inversed\", {\r\n        /**\r\n         * @return {boolean} Flip axis?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"inversed\");\r\n        },\r\n        /**\r\n         * Indicates if the scale of the axis should be flipped.\r\n         *\r\n         * @param {boolean} value Flip axis?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"inversed\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRenderer.prototype, \"minLabelPosition\", {\r\n        /**\r\n         * @return {number} Min label position (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minLabelPosition\");\r\n        },\r\n        /**\r\n         * Minimum position along the Axis, for labels.\r\n         *\r\n         * Labels, which have their position closer to the start of the Axis, will be\r\n         * automatically hidden.\r\n         *\r\n         * E.g., setting this to 0.05 (5% of total axis length) would hide labels,\r\n         * that would otherwise be drawn very near start of the Axis.\r\n         *\r\n         * This is especially usefull with `inside = true`, or if the chart hasn't\r\n         * got any extra margins.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n         * @param {number}  value  Min label position (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"minLabelPosition\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRenderer.prototype, \"maxLabelPosition\", {\r\n        /**\r\n         * @return {number} Max label position (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxLabelPosition\");\r\n        },\r\n        /**\r\n         * Maximum position along the Axis, for labels.\r\n         *\r\n         * Labels, which have their position closer to the and of the Axis, will be\r\n         * automatically hidden.\r\n         *\r\n         * E.g., setting this to 0.95 (95% of total axis length) would hide labels,\r\n         * that would otherwise be drawn very near end of the Axis.\r\n         *\r\n         * This is especially usefull with `inside = true`, or if the chart hasn't\r\n         * got any extra margins.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/} for more info.\r\n         * @param {number}  value  Max label position (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"maxLabelPosition\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all settings and related items from another object of the same\r\n     * type.\r\n     *\r\n     * @param {this}  source  Source object\r\n     */\r\n    AxisRenderer.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.grid.template.copyFrom(source.grid.template);\r\n        this.ticks.template.copyFrom(source.ticks.template);\r\n        this.labels.template.copyFrom(source.labels.template);\r\n        this.axisFills.template.copyFrom(source.axisFills.template);\r\n        this.line.copyFrom(source.line);\r\n        this.baseGrid.copyFrom(source.baseGrid);\r\n    };\r\n    return AxisRenderer;\r\n}(Container));\r\nexport { AxisRenderer };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRenderer\"] = AxisRenderer;\r\n//# sourceMappingURL=AxisRenderer.js.map","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nvar AxisRendererCircular = /** @class */ (function (_super) {\r\n    tslib_1.__extends(AxisRendererCircular, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {Axis} axis Related axis\r\n     */\r\n    function AxisRendererCircular() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.pixelRadiusReal = 0;\r\n        // axis.layout = \"none\"; // does not trigger redraw when size changes\r\n        _this.layout = \"none\";\r\n        _this.className = \"AxisRendererCircular\";\r\n        _this.isMeasured = false;\r\n        _this.startAngle = -90;\r\n        _this.endAngle = 270;\r\n        _this.useChartAngles = true;\r\n        _this.radius = percent(100);\r\n        _this.isMeasured = false;\r\n        _this.grid.template.location = 0;\r\n        _this.labels.template.location = 0;\r\n        _this.labels.template.radius = 15;\r\n        _this.ticks.template.location = 0;\r\n        _this.ticks.template.pixelPerfect = false;\r\n        _this.tooltipLocation = 0;\r\n        _this.line.strokeOpacity = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n    * @ignore\r\n    */\r\n    AxisRendererCircular.prototype.setAxis = function (axis) {\r\n        var _this = this;\r\n        _super.prototype.setAxis.call(this, axis);\r\n        axis.isMeasured = false;\r\n        // modify x and y so that tooltip would always be on circle\r\n        var tooltip = axis.tooltip;\r\n        tooltip.adapter.add(\"dx\", function (x, target) {\r\n            var point = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, _this);\r\n            return _this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n        });\r\n        tooltip.adapter.add(\"dy\", function (y, target) {\r\n            var point = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, _this);\r\n            return _this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n        });\r\n    };\r\n    /**\r\n     * Validates Axis renderer.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererCircular.prototype.validate = function () {\r\n        // so that radius would be updated\r\n        if (this.chart && this.chart.invalid) {\r\n            this.chart.validate();\r\n        }\r\n        _super.prototype.validate.call(this);\r\n    };\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"axisLength\", {\r\n        /**\r\n         * Returns actual length of the Axis, in pixels.\r\n         *\r\n         * @return {number} Length (px)\r\n         */\r\n        get: function () {\r\n            return 2 * Math.PI * this.pixelRadius;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"radius\", {\r\n        /**\r\n         * @return {number | Percent} Outer radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Outer radius of the axis.\r\n         *\r\n         * Can be absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param {number | Percent}  value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidate();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"pixelRadius\", {\r\n        /**\r\n         * Outer radius in pixels.\r\n         *\r\n         * @return {number} Outer radius (px)\r\n         */\r\n        get: function () {\r\n            return $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return {number | Percent} Inner radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius of the axis.\r\n         *\r\n         * Can be absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param {number | Percent}  value  Inner radius\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidate();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"useChartAngles\", {\r\n        /**\r\n         * @return {boolean} Use chart angles\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"useChartAngles\");\r\n        },\r\n        /**\r\n         * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n         * inherit them from relative properties from chart.\r\n         *\r\n         * @default false\r\n         * @param {boolean}  value  Use chart's angles\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"useChartAngles\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"pixelInnerRadius\", {\r\n        /**\r\n         * Inner radius in pixels.\r\n         *\r\n         * @return {number} Inner radius (px)\r\n         */\r\n        get: function () {\r\n            return $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts relative position on axis to point coordinates.\r\n     *\r\n     * @param  {number}  position  Position (0-1)\r\n     * @return {IPoint}            Point\r\n     */\r\n    AxisRendererCircular.prototype.positionToPoint = function (position) {\r\n        var coordinate = this.positionToCoordinate(position);\r\n        var angle = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n        return { x: this.pixelRadius * $math.cos(angle), y: this.pixelRadius * $math.sin(angle) };\r\n    };\r\n    /**\r\n     * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n     *\r\n     * @param  {number}  position  Position (0-1)\r\n     * @return {number}            Angle (0-360)\r\n     */\r\n    AxisRendererCircular.prototype.positionToAngle = function (position) {\r\n        var axis = this.axis;\r\n        var arc = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n        var angle;\r\n        if (axis.renderer.inversed) {\r\n            angle = this.startAngle + (axis.end - position) * arc;\r\n        }\r\n        else {\r\n            angle = this.startAngle + (position - axis.start) * arc;\r\n        }\r\n        return $math.round(angle, 3);\r\n    };\r\n    /**\r\n     * Updates and positions the axis line element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererCircular.prototype.updateAxisLine = function () {\r\n        var radius = this.pixelRadius;\r\n        var startAngle = this.startAngle;\r\n        var endAngle = this.endAngle;\r\n        var arc = endAngle - startAngle;\r\n        this.line.path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius);\r\n    };\r\n    /**\r\n     * Updates and positions a grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Grid}    grid         Grid element\r\n     * @param {number}  position     Starting position\r\n     * @param {number}  endPosition  End position\r\n     */\r\n    AxisRendererCircular.prototype.updateGridElement = function (grid, position, endPosition) {\r\n        position = position + (endPosition - position) * grid.location;\r\n        var point = this.positionToPoint(position);\r\n        if (grid.element) {\r\n            var angle = $math.DEGREES * Math.atan2(point.y, point.x);\r\n            var radius = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n            var gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n            grid.zIndex = 0;\r\n            var innerRadius = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);\r\n            grid.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n        }\r\n        this.toggleVisibility(grid, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions a tick element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AxisTick}  tick         Tick element\r\n     * @param {number}    position     Starting position\r\n     * @param {number}    endPosition  End position\r\n     */\r\n    AxisRendererCircular.prototype.updateTickElement = function (tick, position, endPosition) {\r\n        position = position + (endPosition - position) * tick.location;\r\n        var point = this.positionToPoint(position);\r\n        if (tick.element) {\r\n            var radius = this.pixelRadius;\r\n            var angle = $math.DEGREES * Math.atan2(point.y, point.x);\r\n            var tickLength = tick.length;\r\n            if (tick.inside) {\r\n                tickLength = -tickLength;\r\n            }\r\n            tick.zIndex = 1;\r\n            tick.path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) });\r\n        }\r\n        this.toggleVisibility(tick, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions a label element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AxisLabel}  label        Label element\r\n     * @param {number}     position     Starting position\r\n     * @param {number}     endPosition  Ending position\r\n     */\r\n    AxisRendererCircular.prototype.updateLabelElement = function (label, position, endPosition, location) {\r\n        if (!$type.hasValue(location)) {\r\n            location = label.location;\r\n        }\r\n        position = position + (endPosition - position) * location;\r\n        label.fixPosition(this.positionToAngle(position), this.pixelRadius);\r\n        label.zIndex = 2;\r\n        this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n    };\r\n    /**\r\n     * Checks if point is within bounds of a container.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {IPoint}   point Point coordinates\r\n     * @return {boolean}         Fits?\r\n     */\r\n    AxisRendererCircular.prototype.fitsToBounds = function (point) {\r\n        return true;\r\n    };\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"startAngle\", {\r\n        /**\r\n         * @return {number} Start angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * Start angle of the axis in degrees (0-360).\r\n         *\r\n         * @param {number}  value  Start angle\r\n         */\r\n        set: function (value) {\r\n            // do not normalize angel here!\r\n            if (this.setPropertyValue(\"startAngle\", value)) {\r\n                this.invalidateAxisItems();\r\n                if (this.axis) {\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"endAngle\", {\r\n        /**\r\n         * @return {number} End angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endAngle\");\r\n        },\r\n        /**\r\n         * End angle of the axis in degrees (0-360).\r\n         *\r\n         * @param {number}  value  End angle\r\n         */\r\n        set: function (value) {\r\n            // do not normalize angel here!\r\n            if (this.setPropertyValue(\"endAngle\", value)) {\r\n                this.invalidateAxisItems();\r\n                if (this.axis) {\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * [getPositionRangePath description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param  {number}  startPosition  Starting position\r\n     * @param  {number}  endPosition    End position\r\n     * @return {string}                 SVG path\r\n     */\r\n    AxisRendererCircular.prototype.getPositionRangePath = function (startPosition, endPosition, radius, innerRadius, cornerRadius) {\r\n        var path = \"\";\r\n        if ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n            if (!$type.hasValue(radius)) {\r\n                radius = this.radius;\r\n            }\r\n            startPosition = $math.max(startPosition, this.axis.start);\r\n            endPosition = $math.min(endPosition, this.axis.end);\r\n            if (endPosition < startPosition) {\r\n                endPosition = startPosition;\r\n            }\r\n            var pixelRadius = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n            var pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n            var startAngle = this.positionToAngle(startPosition);\r\n            var endAngle = this.positionToAngle(endPosition);\r\n            var arc = endAngle - startAngle;\r\n            path = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n        }\r\n        return path;\r\n    };\r\n    /**\r\n     * Returns a new grid element, suitable for this Axis Renderer type.\r\n     *\r\n     * @return {GridCircular} Grid element\r\n     */\r\n    AxisRendererCircular.prototype.createGrid = function () {\r\n        return new GridCircular();\r\n    };\r\n    /**\r\n     * Returns a new fill element, suitable for this Axis Renderer type.\r\n     *\r\n     * @return {AxisFillCircular} Fill element\r\n     */\r\n    AxisRendererCircular.prototype.createFill = function (axis) {\r\n        return new AxisFillCircular(axis);\r\n    };\r\n    /**\r\n     * Returns a new label element, suitable for this Axis Renderer type.\r\n     *\r\n     * @return {AxisLabelCircular} Label element\r\n     */\r\n    AxisRendererCircular.prototype.createLabel = function () {\r\n        return new AxisLabelCircular();\r\n    };\r\n    /**\r\n     * Converts a point at specific coordinates to a relative position (0-1)\r\n     * on the axis.\r\n     *\r\n     * @param  {IPoint}  point  Point\r\n     * @return {number}         Position (0-1)\r\n     */\r\n    AxisRendererCircular.prototype.pointToPosition = function (point) {\r\n        var angle = $math.fitAngleToRange($math.getAngle(point), this.startAngle, this.endAngle);\r\n        return this.coordinateToPosition((angle - this.startAngle) / 360 * this.axisLength);\r\n    };\r\n    return AxisRendererCircular;\r\n}(AxisRenderer));\r\nexport { AxisRendererCircular };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n//# sourceMappingURL=AxisRendererCircular.js.map","/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY } from \"./AxisRendererY\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nvar AxisRendererRadial = /** @class */ (function (_super) {\r\n    tslib_1.__extends(AxisRendererRadial, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {Axis} axis Related axis\r\n     */\r\n    function AxisRendererRadial() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * A related chart.\r\n         *\r\n         * @type {MutableValueDisposer}\r\n         */\r\n        _this._chart = new MutableValueDisposer();\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.pixelRadiusReal = 0;\r\n        _this.className = \"AxisRendererRadial\";\r\n        _this.isMeasured = false;\r\n        _this.startAngle = -90;\r\n        _this.endAngle = 270;\r\n        _this.minGridDistance = 30;\r\n        _this.gridType = \"circles\";\r\n        _this.axisAngle = -90;\r\n        _this.isMeasured = false;\r\n        _this.layout = \"none\";\r\n        _this.radius = percent(100);\r\n        _this.line.strokeOpacity = 0;\r\n        _this.labels.template.horizontalCenter = \"middle\";\r\n        _this._disposers.push(_this._chart);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Validates Axis renderer.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererRadial.prototype.validate = function () {\r\n        // so that radius would be updated\r\n        if (this.chart && this.chart.invalid) {\r\n            this.chart.validate();\r\n        }\r\n        _super.prototype.validate.call(this);\r\n    };\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"axisLength\", {\r\n        /**\r\n         * Returns actual length of the Axis, in pixels.\r\n         *\r\n         * @return {number} Length (px)\r\n         */\r\n        get: function () {\r\n            return this.pixelRadius - this.pixelInnerRadius;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"radius\", {\r\n        /**\r\n         * @return {number | Percent} Outer radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Outer radius of the axis.\r\n         *\r\n         * Can be absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param {number | Percent}  value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"pixelRadius\", {\r\n        /**\r\n         * Outer radius in pixels.\r\n         *\r\n         * @return {number} Outer radius (px)\r\n         */\r\n        get: function () {\r\n            return $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return {number | Percent} Inner radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius of the axis.\r\n         *\r\n         * Can be absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param {number | Percent}  value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"pixelInnerRadius\", {\r\n        /**\r\n         * Inner radius in pixels.\r\n         *\r\n         * @return {number} Inner radius (px)\r\n         */\r\n        get: function () {\r\n            return $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"chart\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {RadarChart} Chart\r\n         */\r\n        get: function () {\r\n            return this._chart.get();\r\n        },\r\n        /**\r\n         * Chart, associated with the Axis.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {RadarChart} value Chart\r\n         */\r\n        set: function (chart) {\r\n            this._chart.set(chart, null);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts relative position on axis to point coordinates.\r\n     *\r\n     * @param  {number}  position  Position (0-1)\r\n     * @return {IPoint}            Point\r\n     */\r\n    AxisRendererRadial.prototype.positionToPoint = function (position) {\r\n        var radius = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n        return { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n    };\r\n    /**\r\n     * Updates and positions the axis line element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererRadial.prototype.updateAxisLine = function () {\r\n        this.line.path = $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) });\r\n        var title = this.axis.title;\r\n        title.valign = \"none\";\r\n        title.horizontalCenter = \"middle\";\r\n        title.verticalCenter = \"bottom\";\r\n        title.y = -this.axisLength / 2;\r\n        var rotation = 90;\r\n        if (this.opposite) {\r\n            if (!this.inside) {\r\n                rotation = -90;\r\n            }\r\n        }\r\n        else {\r\n            if (this.inside) {\r\n                rotation = -90;\r\n            }\r\n        }\r\n        title.rotation = rotation;\r\n    };\r\n    /**\r\n     * Updates and positions a grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Grid}    grid         Grid element\r\n     * @param {number}  position     Starting position\r\n     * @param {number}  endPosition  End position\r\n     */\r\n    AxisRendererRadial.prototype.updateGridElement = function (grid, position, endPosition) {\r\n        position = position + (endPosition - position) * grid.location;\r\n        var point = this.positionToPoint(position);\r\n        var path;\r\n        var radius = $math.getDistance(point);\r\n        var startAngle = this.startAngle;\r\n        var endAngle = this.endAngle;\r\n        if ($type.isNumber(radius) && grid.element) {\r\n            var chart = this.chart;\r\n            var xAxis = chart.xAxes.getIndex(0);\r\n            var count = chart.dataItems.length;\r\n            var series = chart.series.getIndex(0);\r\n            // polygons are only possible if x axis is present\r\n            // @todo: review this\r\n            if (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n                var gridLocation = xAxis.renderer.grid.template.location;\r\n                var angle = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n                path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n                var count_1 = chart.dataItems.length;\r\n                for (var i = 1; i < count_1; i++) {\r\n                    angle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n                    path += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n                }\r\n                angle = xAxis.getAngle(series.dataItems.getIndex(count_1 - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n                path += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n            }\r\n            else {\r\n                path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n            }\r\n            grid.path = path;\r\n        }\r\n        this.toggleVisibility(grid, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions a label element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AxisLabel}  label        Label element\r\n     * @param {number}     position     Starting position\r\n     * @param {number}     endPosition  Ending position\r\n     */\r\n    AxisRendererRadial.prototype.updateLabelElement = function (label, position, endPosition, location) {\r\n        if (!$type.hasValue(location)) {\r\n            location = label.location;\r\n        }\r\n        position = position + (endPosition - position) * location;\r\n        var point = this.positionToPoint(position);\r\n        this.positionItem(label, point);\r\n        this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n    };\r\n    /**\r\n     * Updates and positions the base grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererRadial.prototype.updateBaseGridElement = function () {\r\n        // @todo? zero grid for radar chart, is it needed?\r\n    };\r\n    /**\r\n     * Checks if point is within bounds of a container.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {IPoint}   point Point coordinates\r\n     * @return {boolean}         Fits?\r\n     */\r\n    AxisRendererRadial.prototype.fitsToBounds = function (point) {\r\n        return true;\r\n    };\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"startAngle\", {\r\n        /**\r\n         * @return {number} Start angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * Start angle of the axis in degrees. (0-360)\r\n         *\r\n         * @param {number}  value  Start angle\r\n         */\r\n        set: function (value) {\r\n            // do not normalize angle here!\r\n            if (this.setPropertyValue(\"startAngle\", value)) {\r\n                this.invalidateAxisItems();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"endAngle\", {\r\n        /**\r\n         * @return {number} End angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endAngle\");\r\n        },\r\n        /**\r\n         * End angle of the axis in degrees. (0-360)\r\n         *\r\n         * @param {number}  value  End angle\r\n         */\r\n        set: function (value) {\r\n            // do not normalize angel here!\r\n            if (this.setPropertyValue(\"endAngle\", value)) {\r\n                this.invalidateAxisItems();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"axisAngle\", {\r\n        /**\r\n         * @return {number} Axis angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"axisAngle\");\r\n            //return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n        },\r\n        /**\r\n         * Angle of the radial axis in degrees. (0-360)\r\n         *\r\n         * @param {number}  value  Axis angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n            this.invalidateAxisItems();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererRadial.prototype, \"gridType\", {\r\n        /**\r\n         * @type {\"circles\" | \"polygons\"} Grid type\r\n         */\r\n        get: function () {\r\n            var axis = this.chart.xAxes.getIndex(0);\r\n            if (axis instanceof CategoryAxis) {\r\n                return this.getPropertyValue(\"gridType\");\r\n            }\r\n            else {\r\n                return \"circles\";\r\n            }\r\n        },\r\n        // polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n        /**\r\n         * Grid type for radial axis.\r\n         *\r\n         * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n         * straight lines (\"polygons\").\r\n         *\r\n         * @default \"circles\"\r\n         * @param {\"circles\" | \"polygons\"}  value  Grid type\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"gridType\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * [getPositionRangePath description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param  {number}  startPosition  Starting position\r\n     * @param  {number}  endPosition    End position\r\n     * @return {string}                 SVG path\r\n     */\r\n    AxisRendererRadial.prototype.getPositionRangePath = function (startPosition, endPosition) {\r\n        var pixelInnerRadius = this.pixelInnerRadius;\r\n        var pixelRadius = this.axisLength + pixelInnerRadius;\r\n        var innerRadius = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n        var radius = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n        //let angleCount: number = this.angleCount;\r\n        var startAngle = this.startAngle;\r\n        var endAngle = this.endAngle;\r\n        var arc = endAngle - startAngle;\r\n        var path;\r\n        var chart = this.chart;\r\n        var xAxis = chart.xAxes.getIndex(0);\r\n        var count = chart.dataItems.length;\r\n        var series = chart.series.getIndex(0);\r\n        // polygons are only possible if x axis is present\r\n        // @todo: review this\r\n        if (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n            var gridLocation = xAxis.renderer.grid.template.location;\r\n            var angle = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n            path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n            var count_2 = chart.dataItems.length;\r\n            for (var i = 1; i < count_2; i++) {\r\n                angle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n                path += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n            }\r\n            angle = xAxis.getAngle(series.dataItems.getIndex(count_2 - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n            path += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n            path += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n            for (var i = count_2 - 1; i >= 0; i--) {\r\n                angle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n                path += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n            }\r\n        }\r\n        else {\r\n            path = $path.arc(startAngle, arc, radius, innerRadius);\r\n        }\r\n        return path;\r\n    };\r\n    /**\r\n     * Updates and positions an axis break element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AxisBreak} axisBreak Break element\r\n     */\r\n    AxisRendererRadial.prototype.updateBreakElement = function (axisBreak) {\r\n        // @todo: someday we might need axis break when gridType is polygons\r\n        var startLine = axisBreak.startLine;\r\n        var endLine = axisBreak.endLine;\r\n        var fillShape = axisBreak.fillShape;\r\n        var startPoint = axisBreak.startPoint;\r\n        var endPoint = axisBreak.endPoint;\r\n        startLine.radius = Math.abs(startPoint.y);\r\n        endLine.radius = Math.abs(endPoint.y);\r\n        fillShape.radius = Math.abs(endPoint.y);\r\n        fillShape.innerRadius = Math.abs(startPoint.y);\r\n    };\r\n    /**\r\n     * Creates visual elements for and axis break.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AxisBreak} axisBreak Axis break\r\n     */\r\n    AxisRendererRadial.prototype.createBreakSprites = function (axisBreak) {\r\n        axisBreak.startLine = new WavedCircle();\r\n        axisBreak.endLine = new WavedCircle();\r\n        axisBreak.fillShape = new WavedCircle();\r\n    };\r\n    /**\r\n     * Updates some of the Axis tooltip's visual properties, related to\r\n     * rendering of the Axis.\r\n     *\r\n     * @todo Description (review)\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererRadial.prototype.updateTooltip = function () {\r\n        var axis = this.axis;\r\n        if (axis) {\r\n            var bigNum = 4000;\r\n            var bbx = -4000;\r\n            var bby = -4000;\r\n            var bbw = bigNum * 2;\r\n            var bbh = bigNum * 2;\r\n            var axisAngle = this.axisAngle;\r\n            if (axisAngle < 0) {\r\n                axisAngle += 360;\r\n            }\r\n            var tooltipOrientation = \"vertical\";\r\n            if ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n                tooltipOrientation = \"horizontal\";\r\n            }\r\n            this.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n        }\r\n    };\r\n    /**\r\n     * Updates and positions a tick element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AxisTick}  tick      Tick element\r\n     * @param {number}    position  Position\r\n     */\r\n    AxisRendererRadial.prototype.updateTickElement = function (tick, position) {\r\n        var point = this.positionToPoint(position);\r\n        if (tick.element) {\r\n            var angle = $math.normalizeAngle(this.axisAngle + 90);\r\n            if (angle / 90 != Math.round(angle / 90)) {\r\n                tick.pixelPerfect = false;\r\n            }\r\n            else {\r\n                tick.pixelPerfect = true;\r\n            }\r\n            var tickLength = -tick.length;\r\n            if (tick.inside) {\r\n                tickLength *= -1;\r\n            }\r\n            tick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) });\r\n        }\r\n        this.positionItem(tick, point);\r\n        this.toggleVisibility(tick, position, 0, 1);\r\n    };\r\n    /**\r\n     * Converts a position on the axis to a coordinate in pixels.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {number}  position  Position (0-1)\r\n     * @return {number}            Coordinate (px)\r\n     */\r\n    AxisRendererRadial.prototype.positionToCoordinate = function (position) {\r\n        var coordinate;\r\n        var axis = this.axis;\r\n        var axisFullLength = axis.axisFullLength;\r\n        var innerRadius = this.pixelInnerRadius;\r\n        if (axis.renderer.inversed) {\r\n            coordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n        }\r\n        else {\r\n            coordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n        }\r\n        return $math.round(coordinate, 1);\r\n    };\r\n    /**\r\n     * Converts a point at specific coordinates to a relative position (0-1)\r\n     * on the axis.\r\n     *\r\n     * @param  {IPoint}  point  Point\r\n     * @return {number}         Position (0-1)\r\n     */\r\n    AxisRendererRadial.prototype.pointToPosition = function (point) {\r\n        var coordinate = ($math.getDistance(point) - this.pixelInnerRadius);\r\n        return this.coordinateToPosition(coordinate);\r\n    };\r\n    return AxisRendererRadial;\r\n}(AxisRendererY));\r\nexport { AxisRendererRadial };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n//# sourceMappingURL=AxisRendererRadial.js.map","/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A renderer for horizontal axis.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\r\nvar AxisRendererX = /** @class */ (function (_super) {\r\n    tslib_1.__extends(AxisRendererX, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {Axis} axis Related axis\r\n     */\r\n    function AxisRendererX() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"AxisRendererX\";\r\n        _this.minGridDistance = 120;\r\n        _this.opposite = false;\r\n        _this.rotation = 0;\r\n        _this.width = percent(100);\r\n        _this.labels.template.horizontalCenter = \"middle\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n    * @ignore\r\n    */\r\n    AxisRendererX.prototype.setAxis = function (axis) {\r\n        _super.prototype.setAxis.call(this, axis);\r\n        axis.layout = \"vertical\";\r\n    };\r\n    /**\r\n     * Called when rendered is attached to an Axis, as well as a property of\r\n     * Axis that might affect the appearance is updated.\r\n     *\r\n     * E.g. `axis.opposite`, `axis.inside`, etc.\r\n     *\r\n     * This method is called **before** draw, so that any related setting\r\n     * changed in this method can be changed.\r\n     *\r\n     * @todo Description (review)\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererX.prototype.processRenderer = function () {\r\n        _super.prototype.processRenderer.call(this);\r\n        // can not do this in init, as axis is set later\r\n        var axis = this.axis;\r\n        if (axis) {\r\n            axis.width = percent(100);\r\n            // @todo Is thi sneeded?\r\n            this.line;\r\n            var title = axis.title;\r\n            title.rotation = 0;\r\n            title.align = \"center\";\r\n            if (this.opposite) {\r\n                this.line.toFront();\r\n                title.toBack();\r\n            }\r\n            else {\r\n                title.toFront();\r\n                this.line.toBack();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates some of the Axis tooltip's visual properties, related to\r\n     * rendering of the Axis.\r\n     *\r\n     * @todo Description (review)\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererX.prototype.updateTooltip = function () {\r\n        var axis = this.axis;\r\n        if (axis) {\r\n            var bigNum = 1000;\r\n            var bbx = this.line.pixelX;\r\n            var bby = this.line.pixelY;\r\n            var bbw = this.axisLength;\r\n            var bbh = bigNum;\r\n            // top\r\n            if (this.opposite) {\r\n                if (!this.inside) {\r\n                    bby = -bigNum;\r\n                    bbh = bigNum;\r\n                }\r\n            }\r\n            // bottom\r\n            else {\r\n                if (this.inside) {\r\n                    bby = -bigNum;\r\n                    bbh = bigNum;\r\n                }\r\n            }\r\n            this.axis.updateTooltip(\"vertical\", { x: bbx, y: bby, width: bbw, height: bbh });\r\n        }\r\n    };\r\n    /**\r\n     * Updates and positions a label element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AxisLabel}  label        Label element\r\n     * @param {number}     position     Starting position\r\n     * @param {number}     endPosition  Ending position\r\n     */\r\n    AxisRendererX.prototype.updateLabelElement = function (label, position, endPosition, location) {\r\n        if (!$type.hasValue(location)) {\r\n            location = label.location;\r\n        }\r\n        position = position + (endPosition - position) * location;\r\n        var point = this.positionToPoint(position);\r\n        label.isMeasured = !label.inside;\r\n        if (!this.opposite && label.inside) {\r\n            if (label.rotation == 0) {\r\n                label.verticalCenter = \"bottom\";\r\n            }\r\n        }\r\n        else {\r\n            if (label.rotation == 0) {\r\n                label.verticalCenter = \"top\";\r\n            }\r\n        }\r\n        this.positionItem(label, point);\r\n        this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n    };\r\n    Object.defineProperty(AxisRendererX.prototype, \"axisLength\", {\r\n        /**\r\n         * Returns actual length of the Axis, in pixels.\r\n         *\r\n         * @return {number} Length (px)\r\n         */\r\n        get: function () {\r\n            var axis = this.axis;\r\n            return (axis.measuredWidth - axis.pixelPaddingRight - axis.pixelPaddingLeft) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts relative position on axis to point coordinates.\r\n     *\r\n     * @param  {number}  position  Position (0-1)\r\n     * @return {IPoint}            Point\r\n     */\r\n    AxisRendererX.prototype.positionToPoint = function (position) {\r\n        return { x: this.positionToCoordinate(position), y: 0 };\r\n    };\r\n    /**\r\n     * Converts a point at specific coordinates to a relative position (0-1)\r\n     * on the axis.\r\n     *\r\n     * @param  {IPoint}  point  Point\r\n     * @return {number}         Position (0-1)\r\n     */\r\n    AxisRendererX.prototype.pointToPosition = function (point) {\r\n        return this.coordinateToPosition(point.x);\r\n    };\r\n    /**\r\n     * [getPositionRangePath description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param  {number}  startPosition  Starting position\r\n     * @param  {number}  endPosition    End position\r\n     * @return {string}                 SVG path\r\n     */\r\n    AxisRendererX.prototype.getPositionRangePath = function (startPosition, endPosition) {\r\n        var x1 = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\r\n        var x2 = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\r\n        var w = Math.abs(x2 - x1);\r\n        var h = this.getHeight();\r\n        var x = Math.min(x1, x2);\r\n        var y = 0;\r\n        return $path.rectToPath({\r\n            x: x,\r\n            y: y,\r\n            width: w,\r\n            height: h\r\n        }, true);\r\n    };\r\n    /**\r\n     * Updates and positions an axis break element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AxisBreak} axisBreak Break element\r\n     */\r\n    AxisRendererX.prototype.updateBreakElement = function (axisBreak) {\r\n        _super.prototype.updateBreakElement.call(this, axisBreak);\r\n        var startLine = axisBreak.startLine;\r\n        var endLine = axisBreak.endLine;\r\n        var fillShape = axisBreak.fillShape;\r\n        var startPoint = axisBreak.startPoint;\r\n        var endPoint = axisBreak.endPoint;\r\n        var y1 = axisBreak.pixelMarginLeft;\r\n        var y2 = this.getHeight() - axisBreak.pixelMarginTop - axisBreak.pixelMarginBottom;\r\n        startPoint.x = $math.fitToRange(startPoint.x, -1, this.pixelWidth + 1);\r\n        endPoint.x = $math.fitToRange(endPoint.x, -1, this.pixelWidth + 1);\r\n        if (startPoint.x == endPoint.x && (startPoint.x < 0 || startPoint.x > this.pixelWidth)) {\r\n            axisBreak.fillShape.__disabled = true;\r\n        }\r\n        else {\r\n            axisBreak.fillShape.__disabled = false;\r\n        }\r\n        startLine.y = y1;\r\n        startLine.width = 0;\r\n        startLine.height = y2;\r\n        endLine.y = y1;\r\n        endLine.width = 0;\r\n        endLine.height = y2;\r\n        fillShape.height = y2;\r\n        fillShape.width = Math.abs(endPoint.x - startPoint.x);\r\n        fillShape.y = y1;\r\n        fillShape.x = startPoint.x;\r\n    };\r\n    /**\r\n     * Updates and positions a grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Grid}    grid         Grid element\r\n     * @param {number}  position     Starting position\r\n     * @param {number}  endPosition  End position\r\n     */\r\n    AxisRendererX.prototype.updateGridElement = function (grid, position, endPosition) {\r\n        position = position + (endPosition - position) * grid.location;\r\n        var point = this.positionToPoint(position);\r\n        grid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.getHeight() });\r\n        this.positionItem(grid, point);\r\n        this.toggleVisibility(grid, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions a tick element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AxisTick}  tick         Tick element\r\n     * @param {number}    position     Starting position\r\n     * @param {number}    endPosition  End position\r\n     */\r\n    AxisRendererX.prototype.updateTickElement = function (tick, position, endPosition) {\r\n        position = position + (endPosition - position) * tick.location;\r\n        var point = this.positionToPoint(position);\r\n        var tickLength = tick.length;\r\n        if (this.opposite) {\r\n            point.y = 0;\r\n            tickLength *= (tick.inside ? 1 : -1);\r\n        }\r\n        else {\r\n            point.y = this.gridContainer.pixelHeight;\r\n            tickLength *= (tick.inside ? -1 : 1);\r\n        }\r\n        tick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: tickLength });\r\n        this.positionItem(tick, point);\r\n        this.toggleVisibility(tick, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions the axis line element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererX.prototype.updateAxisLine = function () {\r\n        this.line.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.axisLength, y: 0 });\r\n    };\r\n    /**\r\n     * Updates and positions the base grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererX.prototype.updateBaseGridElement = function () {\r\n        _super.prototype.updateBaseGridElement.call(this);\r\n        var axis = this.axis;\r\n        var h = this.getHeight();\r\n        var w = this.getWidth();\r\n        var baseGrid = this.baseGrid;\r\n        var x = axis.basePoint.x;\r\n        if (x < 0 || x > w) {\r\n            baseGrid.hide(0);\r\n        }\r\n        else {\r\n            var y = $utils.spritePointToSprite({ x: 0, y: 0 }, this.gridContainer, baseGrid.parent).y;\r\n            baseGrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: h });\r\n            baseGrid.moveTo({ x: x, y: y });\r\n            baseGrid.show(0);\r\n        }\r\n    };\r\n    /**\r\n     * Creates visual elements for and axis break.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AxisBreak} axisBreak Axis break\r\n     */\r\n    AxisRendererX.prototype.createBreakSprites = function (axisBreak) {\r\n        axisBreak.startLine = new WavedLine();\r\n        axisBreak.endLine = new WavedLine();\r\n        var wavedRectangle = new WavedRectangle();\r\n        wavedRectangle.setWavedSides(false, true, false, true);\r\n        axisBreak.fillShape = wavedRectangle;\r\n    };\r\n    return AxisRendererX;\r\n}(AxisRenderer));\r\nexport { AxisRendererX };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX\"] = AxisRendererX;\r\n//# sourceMappingURL=AxisRendererX.js.map","/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nvar AxisRendererX3D = /** @class */ (function (_super) {\r\n    tslib_1.__extends(AxisRendererX3D, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {Axis} axis Related axis\r\n     */\r\n    function AxisRendererX3D() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * A related chart.\r\n         *\r\n         * @todo Description\r\n         * @type {MutableValueDisposer}\r\n         */\r\n        _this._chart = new MutableValueDisposer();\r\n        _this.className = \"AxisRendererX3D\";\r\n        _this._disposers.push(_this._chart);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Updates and positions a grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Grid}    grid         Grid element\r\n     * @param {number}  position     Starting position\r\n     * @param {number}  endPosition  End position\r\n     */\r\n    AxisRendererX3D.prototype.updateGridElement = function (grid, position, endPosition) {\r\n        position = position + (endPosition - position) * grid.location;\r\n        var point = this.positionToPoint(position);\r\n        if (grid.element) {\r\n            var dx = this.chart.dx3D;\r\n            var dy = this.chart.dy3D;\r\n            var h = this.getHeight();\r\n            grid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n        }\r\n        this.positionItem(grid, point);\r\n        this.toggleVisibility(grid, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions the base grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererX3D.prototype.updateBaseGridElement = function () {\r\n        _super.prototype.updateBaseGridElement.call(this);\r\n        var h = this.getHeight();\r\n        var dx = this.chart.dx3D;\r\n        var dy = this.chart.dy3D;\r\n        this.baseGrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n    };\r\n    Object.defineProperty(AxisRendererX3D.prototype, \"chart\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {XYChart3D} Chart\r\n         */\r\n        get: function () {\r\n            return this._chart.get();\r\n        },\r\n        /**\r\n         * Chart, associated with the Axis.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {XYChart3D} value Chart\r\n         */\r\n        set: function (chart) {\r\n            if (chart) {\r\n                this._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Invoked when 3D-related settings change, like depth or angle.\r\n     *\r\n     * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n     */\r\n    AxisRendererX3D.prototype.handle3DChanged = function (event) {\r\n        if (event.property == \"depth\" || event.property == \"angle\") {\r\n            this.invalidate();\r\n        }\r\n    };\r\n    return AxisRendererX3D;\r\n}(AxisRendererX));\r\nexport { AxisRendererX3D };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n//# sourceMappingURL=AxisRendererX3D.js.map","/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A renderer for vertical axis.\r\n *\r\n * @see {@link IAxisRendererYEvents} for a list of available events\r\n * @see {@link IAxisRendererYAdapters} for a list of available Adapters\r\n */\r\nvar AxisRendererY = /** @class */ (function (_super) {\r\n    tslib_1.__extends(AxisRendererY, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {Axis} axis Related axis\r\n     */\r\n    function AxisRendererY() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"AxisRendererY\";\r\n        _this.minGridDistance = 40;\r\n        _this.opposite = false;\r\n        _this.height = percent(100);\r\n        _this.labels.template.verticalCenter = \"middle\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n    * @ignore\r\n    */\r\n    AxisRendererY.prototype.setAxis = function (axis) {\r\n        _super.prototype.setAxis.call(this, axis);\r\n        axis.layout = \"horizontal\";\r\n    };\r\n    /**\r\n     * Called when rendered is attached to an Axis, as well as a property of\r\n     * Axis that might affect the appearance is updated.\r\n     *\r\n     * E.g. `axis.opposite`, `axis.inside`, etc.\r\n     *\r\n     * This method is called **before** draw, so that any related setting\r\n     * changed in this method can be changed.\r\n     *\r\n     * @todo Description (review)\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererY.prototype.processRenderer = function () {\r\n        _super.prototype.processRenderer.call(this);\r\n        var axis = this.axis;\r\n        if (axis) {\r\n            var title = axis.title;\r\n            title.valign = \"middle\";\r\n            axis.height = percent(100);\r\n            if (this.opposite) {\r\n                title.rotation = 90;\r\n                this.line.toBack();\r\n                title.toFront();\r\n            }\r\n            else {\r\n                title.rotation = -90;\r\n                title.toBack();\r\n                this.line.toFront();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates some of the Axis tooltip's visual properties, related to\r\n     * rendering of the Axis.\r\n     *\r\n     * @todo Description (review)\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererY.prototype.updateTooltip = function () {\r\n        var axis = this.axis;\r\n        if (axis) {\r\n            var bigNum = 2000;\r\n            var bbx = 0;\r\n            var bby = 0;\r\n            var bbw = bigNum;\r\n            var bbh = this.axisLength;\r\n            // right\r\n            if (this.opposite) {\r\n                if (this.inside) {\r\n                    bbx = -bigNum;\r\n                    bbw = bigNum;\r\n                }\r\n            }\r\n            // left\r\n            else {\r\n                if (!this.inside) {\r\n                    bbx = -bigNum;\r\n                    bbw = bigNum;\r\n                }\r\n            }\r\n            this.axis.updateTooltip(\"horizontal\", { x: bbx, y: bby, width: bbw, height: bbh });\r\n        }\r\n    };\r\n    Object.defineProperty(AxisRendererY.prototype, \"axisLength\", {\r\n        /**\r\n         * Returns actual length of the Axis, in pixels.\r\n         *\r\n         * @return {number} Length (px)\r\n         */\r\n        get: function () {\r\n            var axis = this.axis;\r\n            return (axis.measuredHeight - axis.pixelPaddingTop - axis.pixelPaddingBottom) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts relative position on axis to point coordinates.\r\n     *\r\n     * @param  {number}  position  Position (0-1)\r\n     * @return {IPoindt}            Point\r\n     */\r\n    AxisRendererY.prototype.positionToPoint = function (position) {\r\n        return { x: 0, y: this.positionToCoordinate(position) };\r\n    };\r\n    /**\r\n     * Converts a point at specific coordinates to a relative position (0-1)\r\n     * on the axis.\r\n     *\r\n     * @param  {IPoint}  point  Point\r\n     * @return {number}         Position (0-1)\r\n     */\r\n    AxisRendererY.prototype.pointToPosition = function (point) {\r\n        return this.coordinateToPosition(point.y);\r\n    };\r\n    /**\r\n     * [getPositionRangePath description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param  {number}  startPosition  Starting position\r\n     * @param  {number}  endPosition    End position\r\n     * @return {string}                 SVG path\r\n     */\r\n    AxisRendererY.prototype.getPositionRangePath = function (startPosition, endPosition) {\r\n        var y1 = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\r\n        var y2 = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\r\n        var h = Math.abs(y2 - y1);\r\n        var w = this.getWidth();\r\n        var y = Math.min(y1, y2);\r\n        var x = 0;\r\n        return $path.rectToPath({\r\n            x: x,\r\n            y: y,\r\n            width: w,\r\n            height: h\r\n        }, true);\r\n    };\r\n    /**\r\n     * Updates and positions a grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Grid}    grid         Grid element\r\n     * @param {number}  position     Starting position\r\n     * @param {number}  endPosition  End position\r\n     */\r\n    AxisRendererY.prototype.updateGridElement = function (grid, position, endPosition) {\r\n        position = position + (endPosition - position) * grid.location;\r\n        var point = this.positionToPoint(position);\r\n        grid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.getWidth(), y: 0 });\r\n        this.positionItem(grid, point);\r\n        this.toggleVisibility(grid, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions a tick element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AxisTick}  tick         Tick element\r\n     * @param {number}    position     Starting position\r\n     * @param {number}    endPosition  End position\r\n     */\r\n    AxisRendererY.prototype.updateTickElement = function (tick, position, endPosition) {\r\n        var point = this.positionToPoint(position);\r\n        var tickLength = tick.length;\r\n        var titleWidth = 0;\r\n        try {\r\n            titleWidth = this.axis.title.measuredWidth;\r\n        }\r\n        catch (_a) {\r\n            // void\r\n        }\r\n        if (!this.opposite) {\r\n            tickLength *= (tick.inside ? 1 : -1);\r\n            point.x = 0;\r\n        }\r\n        else {\r\n            point.x = this.gridContainer.pixelWidth;\r\n            tickLength *= (tick.inside ? -1 : 1);\r\n        }\r\n        tick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength, y: 0 });\r\n        this.positionItem(tick, point);\r\n        this.toggleVisibility(tick, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions the axis line element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererY.prototype.updateAxisLine = function () {\r\n        this.line.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.axisLength });\r\n    };\r\n    /**\r\n     * Updates and positions the base grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererY.prototype.updateBaseGridElement = function () {\r\n        _super.prototype.updateBaseGridElement.call(this);\r\n        var axis = this.axis;\r\n        var w = this.getWidth();\r\n        var h = this.getHeight();\r\n        var y = axis.basePoint.y;\r\n        var baseGrid = this.baseGrid;\r\n        if (y < 0 || y > h) {\r\n            baseGrid.hide(0);\r\n        }\r\n        else {\r\n            var x = $utils.spritePointToSprite({ x: 0, y: 0 }, this.gridContainer, baseGrid.parent).x;\r\n            baseGrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: w, y: 0 });\r\n            baseGrid.moveTo({ x: x, y: y });\r\n            baseGrid.show(0);\r\n        }\r\n    };\r\n    /**\r\n     * Updates and positions a label element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AxisLabel}  label        Label element\r\n     * @param {number}     position     Starting position\r\n     * @param {number}     endPosition  Ending position\r\n     */\r\n    AxisRendererY.prototype.updateLabelElement = function (label, position, endPosition, location) {\r\n        if (!$type.hasValue(location)) {\r\n            location = label.location;\r\n        }\r\n        position = position + (endPosition - position) * location;\r\n        label.isMeasured = !label.inside;\r\n        var point = this.positionToPoint(position);\r\n        var horizontalCenter;\r\n        var deltaX = 0;\r\n        if (this.opposite) {\r\n            if (label.inside) {\r\n                horizontalCenter = \"right\";\r\n            }\r\n            else {\r\n                horizontalCenter = \"left\";\r\n            }\r\n            if (label.inside) {\r\n                if (label.align == \"left\") {\r\n                    deltaX = -this.gridContainer.maxWidth;\r\n                    horizontalCenter = \"left\";\r\n                }\r\n            }\r\n            point.x = 0 + deltaX;\r\n        }\r\n        else {\r\n            if (label.inside) {\r\n                horizontalCenter = \"left\";\r\n            }\r\n            else {\r\n                horizontalCenter = \"right\";\r\n            }\r\n            if (label.inside) {\r\n                if (label.align == \"right\") {\r\n                    deltaX = this.gridContainer.maxWidth;\r\n                    horizontalCenter = \"right\";\r\n                }\r\n            }\r\n            point.x = this.measuredWidth + deltaX;\r\n        }\r\n        label.horizontalCenter = horizontalCenter;\r\n        this.positionItem(label, point);\r\n        this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n    };\r\n    /**\r\n     * Updates and positions an axis break element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AxisBreak} axisBreak Break element\r\n     */\r\n    AxisRendererY.prototype.updateBreakElement = function (axisBreak) {\r\n        _super.prototype.updateBreakElement.call(this, axisBreak);\r\n        var startLine = axisBreak.startLine;\r\n        var endLine = axisBreak.endLine;\r\n        var fillShape = axisBreak.fillShape;\r\n        var startPoint = axisBreak.startPoint;\r\n        var endPoint = axisBreak.endPoint;\r\n        var x1 = axisBreak.pixelMarginLeft;\r\n        var x2 = this.getWidth() - axisBreak.pixelMarginLeft - axisBreak.pixelMarginRight;\r\n        startPoint.y = $math.fitToRange(startPoint.y, -1, this.pixelHeight + 1);\r\n        endPoint.y = $math.fitToRange(endPoint.y, -1, this.pixelHeight + 1);\r\n        if (startPoint.y == endPoint.y && (startPoint.y < 0 || startPoint.y > this.pixelHeight)) {\r\n            axisBreak.fillShape.__disabled = true;\r\n        }\r\n        else {\r\n            axisBreak.fillShape.__disabled = false;\r\n        }\r\n        var w = Math.abs(x2 - x1);\r\n        startLine.x = x1;\r\n        startLine.height = 0;\r\n        startLine.width = w;\r\n        endLine.x = x1;\r\n        endLine.height = 0;\r\n        endLine.width = w;\r\n        fillShape.width = w;\r\n        fillShape.height = Math.abs(endPoint.y - startPoint.y);\r\n        fillShape.x = x1;\r\n        fillShape.y = endPoint.y;\r\n    };\r\n    /**\r\n     * Creates visual elements for and axis break.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AxisBreak} axisBreak Axis break\r\n     */\r\n    AxisRendererY.prototype.createBreakSprites = function (axisBreak) {\r\n        axisBreak.startLine = new WavedLine();\r\n        axisBreak.endLine = new WavedLine();\r\n        var wavedRectangle = new WavedRectangle();\r\n        wavedRectangle.setWavedSides(true, false, true, false);\r\n        axisBreak.fillShape = wavedRectangle;\r\n    };\r\n    /**\r\n     * Converts a position on the axis to a coordinate in pixels.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {number}  position  Position (0-1)\r\n     * @return {number}            Coordinate (px)\r\n     */\r\n    AxisRendererY.prototype.positionToCoordinate = function (position) {\r\n        var coordinate;\r\n        var axis = this.axis;\r\n        var axisFullLength = axis.axisFullLength;\r\n        if (!axis.renderer.inversed) {\r\n            coordinate = (axis.end - position) * axisFullLength;\r\n        }\r\n        else {\r\n            coordinate = (position - axis.start) * axisFullLength;\r\n        }\r\n        return $math.round(coordinate, 1);\r\n    };\r\n    return AxisRendererY;\r\n}(AxisRenderer));\r\nexport { AxisRendererY };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererY\"] = AxisRendererY;\r\n//# sourceMappingURL=AxisRendererY.js.map","/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nvar AxisRendererY3D = /** @class */ (function (_super) {\r\n    tslib_1.__extends(AxisRendererY3D, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {Axis} axis Related axis\r\n     */\r\n    function AxisRendererY3D() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * A related chart.\r\n         *\r\n         * @todo Description\r\n         * @type {MutableValueDisposer}\r\n         */\r\n        _this._chart = new MutableValueDisposer();\r\n        _this.className = \"AxisRendererY3D\";\r\n        _this._disposers.push(_this._chart);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Updates and positions a grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Grid}    grid         Grid element\r\n     * @param {number}  position     Starting position\r\n     * @param {number}  endPosition  End position\r\n     */\r\n    AxisRendererY3D.prototype.updateGridElement = function (grid, position, endPosition) {\r\n        position = position + (endPosition - position) * grid.location;\r\n        var point = this.positionToPoint(position);\r\n        if (grid.element) {\r\n            var dx = this.chart.dx3D;\r\n            var dy = this.chart.dy3D;\r\n            var w = this.getWidth();\r\n            grid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy });\r\n        }\r\n        this.positionItem(grid, point);\r\n        this.toggleVisibility(grid, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions the base grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererY3D.prototype.updateBaseGridElement = function () {\r\n        _super.prototype.updateBaseGridElement.call(this);\r\n        var w = this.getWidth();\r\n        this.baseGrid.path = $path.moveTo({ x: 0, y: 0 })\r\n            + $path.lineTo({ x: w, y: 0 })\r\n            + $path.lineTo({ x: w + this.chart.dx3D, y: this.chart.dy3D });\r\n    };\r\n    Object.defineProperty(AxisRendererY3D.prototype, \"chart\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {XYChart3D} Chart\r\n         */\r\n        get: function () {\r\n            return this._chart.get();\r\n        },\r\n        /**\r\n         * Chart, associated with the Axis.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {XYChart3D}  value  Chart\r\n         */\r\n        set: function (chart) {\r\n            if (chart) {\r\n                this._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Invoked when 3D-related settings change, like depth or angle.\r\n     *\r\n     * @param {AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]} event Event\r\n     */\r\n    AxisRendererY3D.prototype.handle3DChanged = function (event) {\r\n        if (event.property == \"depth\" || event.property == \"angle\") {\r\n            this.invalidate();\r\n        }\r\n    };\r\n    return AxisRendererY3D;\r\n}(AxisRendererY));\r\nexport { AxisRendererY3D };\r\n//# sourceMappingURL=AxisRendererY3D.js.map","/**\r\n * Axis Tick module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick } from \"../elements/Tick\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws an axis tick\r\n * @see {@link IAxisTickEvents} for a list of available events\r\n * @see {@link IAxisTickAdapters} for a list of available Adapters\r\n */\r\nvar AxisTick = /** @class */ (function (_super) {\r\n    tslib_1.__extends(AxisTick, _super);\r\n    function AxisTick() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"AxisTick\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.location = 0.5;\r\n        _this.isMeasured = false;\r\n        _this.pixelPerfect = true;\r\n        _this.strokeOpacity = 0;\r\n        _this.length = 5;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(AxisTick.prototype, \"location\", {\r\n        get: function () {\r\n            return this.getPropertyValue(\"location\");\r\n        },\r\n        set: function (value) {\r\n            this.setPropertyValue(\"location\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisTick.prototype, \"inside\", {\r\n        get: function () {\r\n            return this.getPropertyValue(\"inside\");\r\n        },\r\n        set: function (value) {\r\n            this.setPropertyValue(\"inside\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    AxisTick.prototype.setDisabled = function (value) {\r\n        var changed = _super.prototype.setDisabled.call(this, value);\r\n        if (this.axis) {\r\n            this.axis.invalidateDataItems();\r\n        }\r\n        return changed;\r\n    };\r\n    return AxisTick;\r\n}(Tick));\r\nexport { AxisTick };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisTick\"] = AxisTick;\r\n//# sourceMappingURL=AxisTick.js.map","/**\r\n * Category axis module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisDataItem } from \"./Axis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { CategoryAxisBreak } from \"./CategoryAxisBreak\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { Adapter } from \"../../core/utils/Adapter\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[CategoryAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar CategoryAxisDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(CategoryAxisDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function CategoryAxisDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Holds Adapter.\r\n         *\r\n         * @type {Adapter<CategoryAxisDataItem, ICategoryAxisDataItemAdapters>}\r\n         */\r\n        _this.adapter = new Adapter(_this);\r\n        _this.className = \"CategoryAxisDataItem\";\r\n        _this.text = \"{category}\";\r\n        _this.locations.category = 0;\r\n        _this.locations.endCategory = 1;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CategoryAxisDataItem.prototype, \"category\", {\r\n        /**\r\n         * @return {string} Category\r\n         */\r\n        get: function () {\r\n            if (this.adapter.isEnabled(\"category\")) {\r\n                return this.adapter.apply(\"category\", this.properties[\"category\"]);\r\n            }\r\n            return this.properties[\"category\"];\r\n        },\r\n        /**\r\n         * Category.\r\n         *\r\n         * @param {string}  value  Category\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"category\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CategoryAxisDataItem.prototype, \"endCategory\", {\r\n        /**\r\n         * @return {string} End category\r\n         */\r\n        get: function () {\r\n            return this.properties[\"endCategory\"];\r\n        },\r\n        /**\r\n         * End category.\r\n         *\r\n         * Used for items that span several categories, like [[CategoryAxisBreak]].\r\n         *\r\n         * @param {string}  value  End category\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"endCategory\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return CategoryAxisDataItem;\r\n}(AxisDataItem));\r\nexport { CategoryAxisDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to create a category-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"CategoryAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Clients\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link ICategoryAxisEvents} for a list of available Events\r\n * @see {@link ICategoryAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar CategoryAxis = /** @class */ (function (_super) {\r\n    tslib_1.__extends(CategoryAxis, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function CategoryAxis() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * A collection that holds Axis' data items sorted by each category.\r\n         *\r\n         * @type {Dictionary}\r\n         */\r\n        _this.dataItemsByCategory = new Dictionary();\r\n        _this.className = \"CategoryAxis\";\r\n        // Set field name\r\n        _this.axisFieldName = \"category\";\r\n        _this._lastDataItem = _this.createDataItem();\r\n        _this._lastDataItem.component = _this;\r\n        _this._disposers.push(_this._lastDataItem);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return {CategoryAxisDataItem} Data Item\r\n     */\r\n    CategoryAxis.prototype.createDataItem = function () {\r\n        return new CategoryAxisDataItem();\r\n    };\r\n    /**\r\n     * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n     *\r\n     * @return {CategoryAxisBreak} Axis break\r\n     */\r\n    CategoryAxis.prototype.createAxisBreak = function () {\r\n        return new CategoryAxisBreak();\r\n    };\r\n    /**\r\n     * Validates the data range.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     */\r\n    CategoryAxis.prototype.validateDataRange = function () {\r\n        var _this = this;\r\n        _super.prototype.validateDataRange.call(this);\r\n        $iter.each(this._series.iterator(), function (series) {\r\n            if ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {\r\n                series.invalidateDataRange();\r\n            }\r\n            else {\r\n                var firstSeriesDataItem = _this.getSeriesDataItem(series, _this.start);\r\n                var lastSeriesDataItem = _this.getSeriesDataItem(series, _this.end, true);\r\n                if (firstSeriesDataItem) {\r\n                    series.startIndex = firstSeriesDataItem.index;\r\n                }\r\n                else {\r\n                    series.start = _this.start;\r\n                }\r\n                if (lastSeriesDataItem) {\r\n                    series.endIndex = lastSeriesDataItem.index + 1;\r\n                }\r\n                else {\r\n                    series.end = _this.end;\r\n                }\r\n                // range might not change, but axis breaks might.\r\n                if (_this.axisBreaks.length > 0) {\r\n                    series.invalidateDataRange();\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Validates the whole axis. Causes it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     */\r\n    CategoryAxis.prototype.validate = function () {\r\n        var _this = this;\r\n        _super.prototype.validate.call(this);\r\n        var dataCount = this.dataItems.length;\r\n        var startIndex = $math.fitToRange(Math.floor(this.start * dataCount - 1), 0, dataCount);\r\n        var endIndex = $math.fitToRange(Math.ceil(this.end * dataCount), 0, dataCount);\r\n        if (this.renderer.invalid) {\r\n            this.renderer.validate();\r\n        }\r\n        // find frequency at which we'll show items\r\n        var maxCount = this.renderer.axisLength / this.renderer.minGridDistance;\r\n        var frequency = Math.min(this.dataItems.length, Math.ceil((endIndex - startIndex) / maxCount));\r\n        this._startIndex = Math.floor(startIndex / frequency) * frequency;\r\n        this._endIndex = Math.ceil(this.end * dataCount);\r\n        this.fixAxisBreaks();\r\n        if (this._startIndex == this._endIndex) {\r\n            this._endIndex++;\r\n        }\r\n        this._frequency = frequency;\r\n        if (this.axisLength <= 0) {\r\n            return;\r\n        }\r\n        this.maxZoomFactor = this.dataItems.length;\r\n        if (this.dataItems.length <= 0) {\r\n            this.maxZoomFactor = 1;\r\n        }\r\n        this.resetIterators();\r\n        // it's important to use protected variables here, as getters will return 0 - length\r\n        // TODO use iterator instead\r\n        // @ todo: not solved cat axis item fading\r\n        startIndex = $math.max(0, this._startIndex - this._frequency);\r\n        endIndex = $math.min(this.dataItems.length, this._endIndex + this._frequency);\r\n        var itemIndex = 0;\r\n        for (var i = 0; i < startIndex; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            dataItem.__disabled = true;\r\n        }\r\n        for (var i = endIndex, len = this.dataItems.length; i < len; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            dataItem.__disabled = true;\r\n        }\r\n        for (var i = startIndex; i < endIndex; i++) {\r\n            if (i < this.dataItems.length) {\r\n                var dataItem = this.dataItems.getIndex(i);\r\n                if (i / this._frequency == Math.round(i / this._frequency)) {\r\n                    var axisBreak = this.isInBreak(i);\r\n                    if (!axisBreak) {\r\n                        this.appendDataItem(dataItem);\r\n                        this.validateDataElement(dataItem, itemIndex);\r\n                    }\r\n                    itemIndex++;\r\n                }\r\n                else {\r\n                    //previously we disabled all before, but this is better for cpu\r\n                    this.validateDataElement(dataItem, itemIndex); // helps to solve shrinking\r\n                    dataItem.__disabled = true;\r\n                }\r\n            }\r\n        }\r\n        this.appendDataItem(this._lastDataItem);\r\n        this.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);\r\n        var axisBreaks = this.axisBreaks;\r\n        axisBreaks.each(function (axisBreak) {\r\n            var adjustedStartValue = axisBreak.adjustedStartValue;\r\n            var adjustedEndValue = axisBreak.adjustedEndValue;\r\n            if ($math.intersect({ start: adjustedStartValue, end: adjustedEndValue }, { start: _this._startIndex, end: _this._endIndex })) {\r\n                var frequency_1 = $math.fitToRange(Math.ceil(_this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);\r\n                var itemIndex_1 = 0;\r\n                // TODO use iterator instead\r\n                for (var b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency_1) {\r\n                    var dataItem = _this.dataItems.getIndex(b);\r\n                    _this.appendDataItem(dataItem);\r\n                    _this.validateDataElement(dataItem, itemIndex_1);\r\n                    itemIndex_1++;\r\n                }\r\n            }\r\n        });\r\n        this.validateBreaks();\r\n        this.validateAxisRanges();\r\n        this.ghostLabel.invalidate(); // solves font issue\r\n        this.renderer.invalidateLayout();\r\n    };\r\n    /**\r\n     * [validateDataElement description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param {CategoryAxisDataItem}  dataItem   [description]\r\n     * @param {number}                itemIndex  [description]\r\n     */\r\n    CategoryAxis.prototype.validateDataElement = function (dataItem, itemIndex, index) {\r\n        _super.prototype.validateDataElement.call(this, dataItem);\r\n        //dataItem.__disabled = false;\r\n        var renderer = this.renderer;\r\n        if (!$type.isNumber(index)) {\r\n            index = this.categoryToIndex(dataItem.category);\r\n        }\r\n        var endIndex = this.categoryToIndex(dataItem.endCategory);\r\n        if (!$type.isNumber(endIndex)) {\r\n            endIndex = index;\r\n        }\r\n        var position = this.indexToPosition(index, dataItem.locations.category);\r\n        var endPosition = this.indexToPosition(endIndex, dataItem.locations.endCategory);\r\n        dataItem.position = position;\r\n        var fillEndIndex;\r\n        var fillPosition;\r\n        var fillEndPosition;\r\n        if (dataItem.isRange) {\r\n            fillEndIndex = endIndex;\r\n            fillPosition = this.indexToPosition(index, dataItem.locations.category);\r\n            fillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);\r\n        }\r\n        dataItem.point = renderer.positionToPoint(position);\r\n        var tick = dataItem.tick;\r\n        if (tick && !tick.disabled) {\r\n            renderer.updateTickElement(tick, position, endPosition);\r\n        }\r\n        var grid = dataItem.grid;\r\n        if (grid && !grid.disabled) {\r\n            renderer.updateGridElement(grid, position, endPosition);\r\n        }\r\n        var label = dataItem.label;\r\n        if (label && !label.disabled) {\r\n            // theorethically this might result problems if category text changes, the range text won't change. But otherwise range.label.text = \"custom text\" wont' work, which is not intuitive.\r\n            if (!dataItem.isRange || label.text == undefined) {\r\n                dataItem.text = dataItem.text;\r\n            }\r\n            renderer.updateLabelElement(label, position, endPosition);\r\n            if (dataItem.label.measuredWidth > this.ghostLabel.measuredWidth || dataItem.label.measuredHeight > this.ghostLabel.measuredHeight) {\r\n                this.ghostLabel.text = dataItem.label.currentText;\r\n            }\r\n        }\r\n        var fill = dataItem.axisFill;\r\n        if (fill && !fill.disabled) {\r\n            if (!dataItem.isRange) {\r\n                fillEndIndex = index + this._frequency;\r\n                fillPosition = this.indexToPosition(index, fill.location);\r\n                fillEndPosition = this.indexToPosition(fillEndIndex, fill.location);\r\n            }\r\n            renderer.updateFillElement(fill, fillPosition, fillEndPosition);\r\n            if (!dataItem.isRange) {\r\n                this.fillRule(dataItem, itemIndex);\r\n            }\r\n        }\r\n        var mask = dataItem.mask;\r\n        if (mask) {\r\n            renderer.updateFillElement(mask, fillPosition, fillEndPosition);\r\n        }\r\n    };\r\n    /**\r\n     * Processes the axis data item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {CategoryAxisDataItem}  dataItem     Data item\r\n     * @param {Object}                dataContext  The raw data that corresponds to this data item\r\n     */\r\n    CategoryAxis.prototype.processDataItem = function (dataItem, dataContext) {\r\n        // creat a collection for fast access\r\n        _super.prototype.processDataItem.call(this, dataItem, dataContext);\r\n        // check if such category already exists\r\n        var existingDataItem = this.dataItemsByCategory.getKey(dataItem.category);\r\n        if (existingDataItem != dataItem) {\r\n            this.dataItems.remove(existingDataItem);\r\n        }\r\n        this.dataItemsByCategory.setKey(dataItem.category, dataItem);\r\n    };\r\n    /**\r\n     * Converts a category index to an actual screen coordinate on the axis.\r\n     *\r\n     * `location` identifies relative location within category. 0 - beginning,\r\n     * 0.5 - middle, 1 - end, and anything inbetween.\r\n     *\r\n     * @param  {number}                     index     Index\r\n     * @param  {AxisItemLocation | number}  location  Location (0-1)\r\n     * @return {number}                               Position (px)\r\n     */\r\n    CategoryAxis.prototype.indexToPosition = function (index, location) {\r\n        if (!$type.isNumber(location)) {\r\n            location = 0.5;\r\n        }\r\n        var startIndex = this.startIndex;\r\n        var endIndex = this.endIndex;\r\n        var difference = this.adjustDifference(startIndex, endIndex);\r\n        var startLocation = this.startLocation;\r\n        var endLocation = this.endLocation;\r\n        difference -= startLocation;\r\n        difference -= (1 - endLocation);\r\n        var axisBreaks = this.axisBreaks;\r\n        $iter.eachContinue(axisBreaks.iterator(), function (axisBreak) {\r\n            var breakStartIndex = axisBreak.adjustedStartValue;\r\n            var breakEndIndex = axisBreak.adjustedEndValue;\r\n            if (index < startIndex) {\r\n                return false;\r\n            }\r\n            if ($math.intersect({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {\r\n                breakStartIndex = Math.max(startIndex, breakStartIndex);\r\n                breakEndIndex = Math.min(endIndex, breakEndIndex);\r\n                var breakSize = axisBreak.breakSize;\r\n                // value to the right of break end\r\n                if (index > breakEndIndex) {\r\n                    startIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n                }\r\n                // value to the left of break start\r\n                else if (index < breakStartIndex) {\r\n                }\r\n                // value within break\r\n                else {\r\n                    index = breakStartIndex + (index - breakStartIndex) * breakSize;\r\n                }\r\n            }\r\n            return true;\r\n        });\r\n        return $math.round((index + location - startLocation - startIndex) / difference, 5);\r\n    };\r\n    /**\r\n     * Converts a string category name to relative position on axis.\r\n     *\r\n     * `location` identifies relative location within category. 0 - beginning,\r\n     * 0.5 - middle, 1 - end, and anything inbetween.\r\n     *\r\n     * @param  {string}            category  Category name\r\n     * @param  {AxisItemLocation}  location  Location (0-1)\r\n     * @return {number}                      Position\r\n     */\r\n    CategoryAxis.prototype.categoryToPosition = function (category, location) {\r\n        var index = this.categoryToIndex(category);\r\n        return this.indexToPosition(index, location);\r\n    };\r\n    /**\r\n     * Converts a string category name to a orientation point (x, y, angle) on axis\r\n     *\r\n     * `location` identifies relative location within category. 0 - beginning,\r\n     * 0.5 - middle, 1 - end, and anything inbetween.\r\n     * @param  {string}            category  Category name\r\n     * @param  {AxisItemLocation}  location  Location (0-1)\r\n     * @return {IOrientationPoint}  Orientation point\r\n     */\r\n    CategoryAxis.prototype.categoryToPoint = function (category, location) {\r\n        var position = this.categoryToPosition(category, location);\r\n        var point = this.renderer.positionToPoint(position);\r\n        var angle = this.renderer.positionToAngle(position);\r\n        return { x: point.x, y: point.y, angle: angle };\r\n    };\r\n    /**\r\n     * Converts a string category name to a orientation point (x, y, angle) on axis\r\n     *\r\n     * `location` identifies relative location within category. 0 - beginning,\r\n     * 0.5 - middle, 1 - end, and anything inbetween.\r\n     * @param  {string}            category  Category name\r\n     * @param  {AxisItemLocation}  location  Location (0-1)\r\n     * @return {IOrientationPoint}  Orientation point\r\n     */\r\n    CategoryAxis.prototype.anyToPoint = function (category, location) {\r\n        return this.categoryToPoint(category, location);\r\n    };\r\n    /**\r\n     * Converts a string category name to relative position on axis.\r\n     *\r\n     * An alias to `categoryToPosition()`.\r\n     *\r\n     * @param  {string}            category  Category name\r\n     * @param  {AxisItemLocation}  location  Location (0-1)\r\n     * @return {number}                      Relative position\r\n     */\r\n    CategoryAxis.prototype.anyToPosition = function (category, location) {\r\n        return this.categoryToPosition(category, location);\r\n    };\r\n    /**\r\n     * Converts named category to an index of data item it corresponds to.\r\n     *\r\n     * @param  {string}  category  Category\r\n     * @return {number}            Data item index\r\n     */\r\n    CategoryAxis.prototype.categoryToIndex = function (category) {\r\n        if ($type.hasValue(category)) {\r\n            var dataItem = this.dataItemsByCategory.getKey(category);\r\n            if (dataItem) {\r\n                return dataItem.index;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Zooms the axis to specific named ctaegories.\r\n     *\r\n     * @param {string}  startCategory  Start category\r\n     * @param {string}  endCategory    End category\r\n     */\r\n    CategoryAxis.prototype.zoomToCategories = function (startCategory, endCategory) {\r\n        this.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory) + 1);\r\n    };\r\n    /**\r\n     * [getAnyRangePath description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param  {string}           start         [description]\r\n     * @param  {string}           end           [description]\r\n     * @param  {AxisItemLocation} startLocation [description]\r\n     * @param  {AxisItemLocation} endLocation   [description]\r\n     * @return {string}                         [description]\r\n     */\r\n    CategoryAxis.prototype.getAnyRangePath = function (start, end, startLocation, endLocation) {\r\n        var startPos = this.categoryToPosition(start, startLocation);\r\n        var endPos = this.categoryToPosition(end, endLocation);\r\n        return this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer\r\n    };\r\n    /**\r\n     * Takes an absolute position (px) within axis and adjust it to a specific\r\n     * `location` within category it corresponds to.\r\n     *\r\n     * @param  {number}            position  Source position (px)\r\n     * @param  {AxisItemLocation}  location  Location within category (0-1)\r\n     * @return {number}                      Adjusted position (px)\r\n     */\r\n    CategoryAxis.prototype.roundPosition = function (position, location) {\r\n        var index = this.positionToIndex(position);\r\n        return this.indexToPosition(index, location);\r\n    };\r\n    /**\r\n     * Returns a data item from Series that corresponds to a specific absolute\r\n     * position on the Axis.\r\n     *\r\n     * @param  {XYSeries}          series    Target series\r\n     * @param  {number}            position  Position (px)\r\n     * @return {XYSeriesDataItem}            Series data item\r\n     */\r\n    CategoryAxis.prototype.getSeriesDataItem = function (series, position, last) {\r\n        var _this = this;\r\n        if ($type.isNumber(position)) {\r\n            var index = this.positionToIndex(position);\r\n            var dataItem = this.dataItems.getIndex(index);\r\n            if (dataItem) {\r\n                var category_1 = dataItem.category;\r\n                var sdi_1;\r\n                //try the same index first\r\n                if (!last) {\r\n                    var seriesDataItem = series.dataItems.getIndex(index);\r\n                    if (series.xAxis == this) {\r\n                        if (seriesDataItem.categoryX == category_1) {\r\n                            return seriesDataItem;\r\n                        }\r\n                    }\r\n                    if (series.yAxis == this) {\r\n                        if (seriesDataItem.categoryY == category_1) {\r\n                            return seriesDataItem;\r\n                        }\r\n                    }\r\n                    $iter.eachContinue(series.dataItems.iterator(), function (dataItem) {\r\n                        if (series.xAxis == _this) {\r\n                            if (dataItem.categoryX == category_1) {\r\n                                sdi_1 = dataItem;\r\n                                return false;\r\n                            }\r\n                        }\r\n                        if (series.yAxis == _this) {\r\n                            if (dataItem.categoryY == category_1) {\r\n                                sdi_1 = dataItem;\r\n                                return false;\r\n                            }\r\n                        }\r\n                        return true;\r\n                    });\r\n                    return sdi_1;\r\n                }\r\n                else {\r\n                    for (var i = series.dataItems.length - 1; i >= 0; i--) {\r\n                        var dataItem_1 = series.dataItems.getIndex(i);\r\n                        if (series.xAxis == this) {\r\n                            if (dataItem_1.categoryX == category_1) {\r\n                                return dataItem_1;\r\n                            }\r\n                        }\r\n                        if (series.yAxis == this) {\r\n                            if (dataItem_1.categoryY == category_1) {\r\n                                return dataItem_1;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns the X coordinate for series' data item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param  {SeriesDataItem}  dataItem  Data item\r\n     * @param  {string}          key       Category\r\n     * @param  {number}          location  Location (0-1)\r\n     * @return {number}                    X coordinate (px)\r\n     */\r\n    CategoryAxis.prototype.getX = function (dataItem, key, location) {\r\n        var position;\r\n        if ($type.hasValue(key)) {\r\n            position = this.categoryToPosition(dataItem.categories[key], location);\r\n        }\r\n        if ($type.isNaN(position)) {\r\n            return this.basePoint.x;\r\n        }\r\n        else {\r\n            return this.renderer.positionToPoint(position).x;\r\n        }\r\n    };\r\n    /**\r\n     * Returns the Y coordinate for series' data item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param  {SeriesDataItem}  dataItem  Data item\r\n     * @param  {string}          key       Category\r\n     * @param  {number}          location  Location (0-1)\r\n     * @return {number}                    Y coordinate (px)\r\n     */\r\n    CategoryAxis.prototype.getY = function (dataItem, key, location) {\r\n        var position;\r\n        if ($type.hasValue(key)) {\r\n            position = this.categoryToPosition(dataItem.categories[key], location);\r\n        }\r\n        if ($type.isNaN(position)) {\r\n            return this.basePoint.y;\r\n        }\r\n        else {\r\n            return this.renderer.positionToPoint(position).y;\r\n        }\r\n    };\r\n    /**\r\n     * Returns an angle for series data item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param  {XYSeriesDataItem}  dataItem  Data item\r\n     * @param  {string}            key       Category\r\n     * @param  {number}            location  Location (0-1)\r\n     * @param  {string}            stackKey  Stack key (?)\r\n     * @return {number}                      Angle\r\n     */\r\n    CategoryAxis.prototype.getAngle = function (dataItem, key, location, stackKey) {\r\n        return this.positionToAngle(this.categoryToPosition(dataItem.categories[key], location));\r\n    };\r\n    /**\r\n     * Returns an absolute pixel coordinate of the start of the cell (category),\r\n     * that specific position value falls into.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param  {number}  position  Position (px)\r\n     * @return {number}            Cell start position (px)\r\n     */\r\n    CategoryAxis.prototype.getCellStartPosition = function (position) {\r\n        return this.roundPosition(position, 0);\r\n    };\r\n    /**\r\n     * Returns an absolute pixel coordinate of the end of the cell (category),\r\n     * that specific position value falls into.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param  {number}  position  Position (px)\r\n     * @return {number}            Cell end position (px)\r\n     */\r\n    CategoryAxis.prototype.getCellEndPosition = function (position) {\r\n        return this.roundPosition(position, 1);\r\n    };\r\n    /**\r\n     * Returns text to show in a category tooltip, based on specific position\r\n     * within axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {number}  position  Position (px)\r\n     * @return {string}            Label (category)\r\n     */\r\n    CategoryAxis.prototype.getTooltipText = function (position) {\r\n        var dataItem = this.dataItems.getIndex(this.positionToIndex(position));\r\n        if (dataItem) {\r\n            return this.adapter.apply(\"getTooltipText\", dataItem.category);\r\n        }\r\n    };\r\n    /**\r\n     * Returns an index of the category that corresponds to specific pixel\r\n     * position within axis.\r\n     *\r\n     * @param  {number}  position  Position (px)\r\n     * @return {number}            Category index\r\n     */\r\n    CategoryAxis.prototype.positionToIndex = function (position) {\r\n        position = $math.round(position, 10);\r\n        if (position < 0) {\r\n            position = 0;\r\n        }\r\n        var startIndex = this.startIndex;\r\n        var endIndex = this.endIndex;\r\n        var difference = endIndex - startIndex;\r\n        var axisBreaks = this.axisBreaks;\r\n        var index = null;\r\n        // in case we have some axis breaks\r\n        $iter.eachContinue(axisBreaks.iterator(), function (axisBreak) {\r\n            var breakStartPosition = axisBreak.startPosition;\r\n            var breakEndPosition = axisBreak.endPosition;\r\n            var breakStartIndex = axisBreak.adjustedStartValue;\r\n            var breakEndIndex = axisBreak.adjustedEndValue;\r\n            breakStartIndex = $math.max(breakStartIndex, startIndex);\r\n            breakEndIndex = $math.min(breakEndIndex, endIndex);\r\n            var breakSize = axisBreak.breakSize;\r\n            difference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n            // position to the right of break end\r\n            if (position > breakEndPosition) {\r\n                startIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n            }\r\n            // position to the left of break start\r\n            else if (position < breakStartPosition) {\r\n            }\r\n            // value within break\r\n            else {\r\n                var breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n                index = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        if (!$type.isNumber(index)) {\r\n            index = Math.floor(position * difference + startIndex);\r\n        }\r\n        if (index >= endIndex) {\r\n            index--;\r\n        }\r\n        return index;\r\n    };\r\n    /**\r\n     * Returns category based on position.\r\n     *\r\n     * Please note that `position` represents position within axis which may be\r\n     * zoomed and not correspond to Cursor's `position`.\r\n     *\r\n     * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n     * @param  {number}  position  Relative position on axis (0-1)\r\n     * @return {string}            Position label\r\n     */\r\n    CategoryAxis.prototype.getPositionLabel = function (position) {\r\n        var dataItem = this.dataItems.getIndex(this.positionToIndex(position));\r\n        if (dataItem) { // @martynas todo: added this check, but this means that some aria label might not be received?\r\n            return dataItem.category;\r\n        }\r\n    };\r\n    Object.defineProperty(CategoryAxis.prototype, \"basePoint\", {\r\n        /**\r\n         * Coordinates of the actual axis start.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {IPoint} Base point\r\n         */\r\n        get: function () {\r\n            // This makes base grid to be drawn at the end of the axis and adds extra\r\n            // grid which we need to nicely close the chart.\r\n            return this.renderer.positionToPoint(1);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Initializes Axis' renderer.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    CategoryAxis.prototype.initRenderer = function () {\r\n        _super.prototype.initRenderer.call(this);\r\n        var renderer = this.renderer;\r\n        renderer.baseGrid.disabled = true;\r\n    };\r\n    return CategoryAxis;\r\n}(Axis));\r\nexport { CategoryAxis };\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxis\"] = CategoryAxis;\r\nregistry.registeredClasses[\"CategoryAxisDataItem\"] = CategoryAxisDataItem;\r\n//# sourceMappingURL=CategoryAxis.js.map","/**\r\n * A module which defines functionality related to Category Axis Break.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Base class to define \"breaks\" in axes\r\n * @see {@link ICategoryAxisBreakEvents} for a list of available events\r\n * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters\r\n */\r\nvar CategoryAxisBreak = /** @class */ (function (_super) {\r\n    tslib_1.__extends(CategoryAxisBreak, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function CategoryAxisBreak() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"CategoryAxisBreak\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CategoryAxisBreak.prototype, \"startPosition\", {\r\n        /**\r\n         * Pixel position of the break's start.\r\n         *\r\n         * @return {number} Position (px)\r\n         * @readonly\r\n         */\r\n        get: function () {\r\n            if (this.axis) {\r\n                return this.axis.indexToPosition(this.adjustedStartValue);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CategoryAxisBreak.prototype, \"endPosition\", {\r\n        /**\r\n         * Pixel position of the break's end.\r\n         *\r\n         * @return {number} Position (px)\r\n         * @readonly\r\n         */\r\n        get: function () {\r\n            if (this.axis) {\r\n                return this.axis.indexToPosition(this.adjustedEndValue);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CategoryAxisBreak.prototype, \"startCategory\", {\r\n        /**\r\n         * @return {string} Start category\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startCategory\");\r\n        },\r\n        /**\r\n         * A category break starts on.\r\n         *\r\n         * @param {string}  value Start category\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"startCategory\", value)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidateDataItems();\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CategoryAxisBreak.prototype, \"endCategory\", {\r\n        /**\r\n         * @return {string} End category\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endCategory\");\r\n        },\r\n        /**\r\n         * A category break ends on.\r\n         *\r\n         * @param {string}  value  End category\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"endCategory\", value)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidateDataItems();\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CategoryAxisBreak.prototype, \"startValue\", {\r\n        /**\r\n         * @return {number} Value\r\n         */\r\n        get: function () {\r\n            var category = this.getPropertyValue(\"startCategory\");\r\n            if (category) {\r\n                return this.axis.categoryToIndex(category);\r\n            }\r\n            else {\r\n                return this.getPropertyValue(\"startValue\");\r\n            }\r\n        },\r\n        /**\r\n         * An index of start category.\r\n         *\r\n         * @param {number}  value  Value\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"startValue\", value)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidateDataItems();\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CategoryAxisBreak.prototype, \"endValue\", {\r\n        /**\r\n         * @return {number} Value\r\n         */\r\n        get: function () {\r\n            var category = this.getPropertyValue(\"endCategory\");\r\n            if (category) {\r\n                return this.axis.categoryToIndex(category);\r\n            }\r\n            else {\r\n                return this.getPropertyValue(\"endValue\");\r\n            }\r\n        },\r\n        /**\r\n         * An index of end category or a end value.\r\n         *\r\n         * @param {number}  value  Value\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"endValue\", value)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidateDataItems();\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return CategoryAxisBreak;\r\n}(AxisBreak));\r\nexport { CategoryAxisBreak };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxisBreak\"] = CategoryAxisBreak;\r\n//# sourceMappingURL=CategoryAxisBreak.js.map","/**\r\n * DateAxis module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem } from \"./ValueAxis\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar DateAxisDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(DateAxisDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DateAxisDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"DateAxisDataItem\";\r\n        _this.applyTheme();\r\n        _this.values.date = {};\r\n        _this.values.endDate = {};\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DateAxisDataItem.prototype, \"date\", {\r\n        /**\r\n         * @return {Date} Date\r\n         */\r\n        get: function () {\r\n            return this.dates[\"date\"];\r\n        },\r\n        /**\r\n         * Date position of the data item.\r\n         *\r\n         * @param {Date}  date  Date\r\n         */\r\n        set: function (date) {\r\n            this.setDate(\"date\", date);\r\n            this.value = date.getTime();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateAxisDataItem.prototype, \"endDate\", {\r\n        /**\r\n         * @return {Date} End date\r\n         */\r\n        get: function () {\r\n            return this.dates[\"endDate\"];\r\n        },\r\n        /**\r\n         * End date for data item.\r\n         *\r\n         * @param {Date} date End date\r\n         */\r\n        set: function (date) {\r\n            this.setDate(\"endDate\", date);\r\n            this.endValue = date.getTime();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DateAxisDataItem;\r\n}(ValueAxisDataItem));\r\nexport { DateAxisDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar DateAxis = /** @class */ (function (_super) {\r\n    tslib_1.__extends(DateAxis, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DateAxis() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * A list of date/time intervals for Date axis.\r\n         *\r\n         * This define various granularities available for the axis. For example\r\n         * if you have an axis spanning an hour, and space for 6 grid lines / labels\r\n         * the axis will choose the granularity of 10 minutes, displaying a label\r\n         * every 10 minutes.\r\n         *\r\n         * Default intervals:\r\n         *\r\n         * ```JSON\r\n         * [\r\n         *  { timeUnit: \"millisecond\", count: 1 },\r\n         *  { timeUnit: \"millisecond\", count: 5 },\r\n         *  { timeUnit: \"millisecond\", count: 10 },\r\n         *  { timeUnit: \"millisecond\", count: 50 },\r\n         *  { timeUnit: \"millisecond\", count: 100 },\r\n         *  { timeUnit: \"millisecond\", count: 500 },\r\n         *  { timeUnit: \"second\", count: 1 },\r\n         *  { timeUnit: \"second\", count: 5 },\r\n         *  { timeUnit: \"second\", count: 10 },\r\n         *  { timeUnit: \"second\", count: 30 },\r\n         *  { timeUnit: \"minute\", count: 1 },\r\n         *  { timeUnit: \"minute\", count: 5 },\r\n         *  { timeUnit: \"minute\", count: 10 },\r\n         *  { timeUnit: \"minute\", count: 30 },\r\n         *  { timeUnit: \"hour\", count: 1 },\r\n         *  { timeUnit: \"hour\", count: 3 },\r\n         *  { timeUnit: \"hour\", count: 6 },\r\n         *  { timeUnit: \"hour\", count: 12 },\r\n         *  { timeUnit: \"day\", count: 1 },\r\n         *  { timeUnit: \"day\", count: 2 },\r\n         *  { timeUnit: \"day\", count: 3 },\r\n         *  { timeUnit: \"day\", count: 4 },\r\n         *  { timeUnit: \"day\", count: 5 },\r\n         *  { timeUnit: \"week\", count: 1 },\r\n         *  { timeUnit: \"month\", count: 1 },\r\n         *  { timeUnit: \"month\", count: 2 },\r\n         *  { timeUnit: \"month\", count: 3 },\r\n         *  { timeUnit: \"month\", count: 6 },\r\n         *  { timeUnit: \"year\", count: 1 },\r\n         *  { timeUnit: \"year\", count: 2 },\r\n         *  { timeUnit: \"year\", count: 5 },\r\n         *  { timeUnit: \"year\", count: 10 },\r\n         *  { timeUnit: \"year\", count: 50 },\r\n         *  { timeUnit: \"year\", count: 100 }\r\n         * ]\r\n         * ```\r\n         *\r\n         * @type {List<ITimeInterval>}\r\n         */\r\n        _this.gridIntervals = new List();\r\n        /**\r\n         * A collection of date formats to use when formatting different time units\r\n         * on Date/time axis.\r\n         *\r\n         * Actual defaults will depend on the language locale set for the chart.\r\n         *\r\n         * To override format for a specific time unit, say days, you need to set\r\n         * the appropriate key to a format string. E.g.:\r\n         *\r\n         * ```TypeScript\r\n         * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n         * ```\r\n         * ```JavaScript\r\n         * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n         * ```\r\n         * ```JSON\r\n         * \"xAxes\": [{\r\n         *   \"type\": \"DateAxis\",\r\n         *   \"dateFormats\": {\r\n         *     \"day\": \"MMMM d, yyyy\"\r\n         *   }\r\n         * }]\r\n         * ```\r\n         *\r\n         * @see {@link DateFormatter}\r\n         * @type {Dictionary<TimeUnit, string>}\r\n         */\r\n        _this.dateFormats = new Dictionary();\r\n        /**\r\n         * These formats are applied to labels that are first in a larger unit.\r\n         *\r\n         * For example, if we have a DateAxis with days on it, the first day of month\r\n         * indicates a break in month - a start of the bigger period.\r\n         *\r\n         * For those labels, `periodChangeDateFormats` are applied instead of\r\n         * `dateFormats`.\r\n         *\r\n         * This allows us implement convenient structures, like instead of:\r\n         *\r\n         * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n         *\r\n         * We can have:\r\n         *\r\n         * `Jan - 1 - 2 - 3 - ...`\r\n         *\r\n         * This can be disabled by setting `markUnitChange = false`.\r\n         *\r\n         * @type {Dictionary<TimeUnit, string>}\r\n         */\r\n        _this.periodChangeDateFormats = new Dictionary();\r\n        /**\r\n         * Actual interval (granularity) derived from the actual data.\r\n         *\r\n         * @type {ITimeInterval}\r\n         */\r\n        _this._baseIntervalReal = { timeUnit: \"day\", count: 1 };\r\n        /**\r\n         * [_minDifference description]\r\n         *\r\n         * @todo Description\r\n         * @type {number}\r\n         */\r\n        _this._minDifference = {};\r\n        _this.className = \"DateAxis\";\r\n        _this.setPropertyValue(\"markUnitChange\", true);\r\n        _this.snapTooltip = true;\r\n        // Translatable defaults are applied in `applyInternalDefaults()`\r\n        // ...\r\n        // Define default intervals\r\n        _this.gridIntervals.pushAll([\r\n            { timeUnit: \"millisecond\", count: 1 },\r\n            { timeUnit: \"millisecond\", count: 5 },\r\n            { timeUnit: \"millisecond\", count: 10 },\r\n            { timeUnit: \"millisecond\", count: 50 },\r\n            { timeUnit: \"millisecond\", count: 100 },\r\n            { timeUnit: \"millisecond\", count: 500 },\r\n            { timeUnit: \"second\", count: 1 },\r\n            { timeUnit: \"second\", count: 5 },\r\n            { timeUnit: \"second\", count: 10 },\r\n            { timeUnit: \"second\", count: 30 },\r\n            { timeUnit: \"minute\", count: 1 },\r\n            { timeUnit: \"minute\", count: 5 },\r\n            { timeUnit: \"minute\", count: 10 },\r\n            { timeUnit: \"minute\", count: 15 },\r\n            { timeUnit: \"minute\", count: 30 },\r\n            { timeUnit: \"hour\", count: 1 },\r\n            { timeUnit: \"hour\", count: 3 },\r\n            { timeUnit: \"hour\", count: 6 },\r\n            { timeUnit: \"hour\", count: 12 },\r\n            { timeUnit: \"day\", count: 1 },\r\n            { timeUnit: \"day\", count: 2 },\r\n            { timeUnit: \"day\", count: 3 },\r\n            { timeUnit: \"day\", count: 4 },\r\n            { timeUnit: \"day\", count: 5 },\r\n            { timeUnit: \"week\", count: 1 },\r\n            { timeUnit: \"month\", count: 1 },\r\n            { timeUnit: \"month\", count: 2 },\r\n            { timeUnit: \"month\", count: 3 },\r\n            { timeUnit: \"month\", count: 6 },\r\n            { timeUnit: \"year\", count: 1 },\r\n            { timeUnit: \"year\", count: 2 },\r\n            { timeUnit: \"year\", count: 5 },\r\n            { timeUnit: \"year\", count: 10 },\r\n            { timeUnit: \"year\", count: 50 },\r\n            { timeUnit: \"year\", count: 100 },\r\n            { timeUnit: \"year\", count: 200 },\r\n            { timeUnit: \"year\", count: 500 },\r\n            { timeUnit: \"year\", count: 1000 },\r\n            { timeUnit: \"year\", count: 2000 },\r\n            { timeUnit: \"year\", count: 5000 },\r\n            { timeUnit: \"year\", count: 10000 },\r\n            { timeUnit: \"year\", count: 100000 }\r\n        ]);\r\n        // Set field name\r\n        _this.axisFieldName = \"date\";\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * A function which applies fills to axis cells.\r\n     *\r\n     * Default function fills every second fill. You can set this to a function\r\n     * that follows some other logic.\r\n     *\r\n     * Function should accept a [[DateAxisDataItem]] and modify its `axisFill`\r\n     * property accordingly.\r\n     *\r\n     * @todo type\r\n     */\r\n    DateAxis.prototype.fillRule = function (dataItem) {\r\n        var value = dataItem.value;\r\n        var axis = dataItem.component;\r\n        var gridInterval = axis._gridInterval;\r\n        var gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n        if (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n            dataItem.axisFill.__disabled = true;\r\n        }\r\n        else {\r\n            dataItem.axisFill.__disabled = false;\r\n        }\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    DateAxis.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Set default date formats\r\n        if (!this.dateFormats.hasKey(\"millisecond\")) {\r\n            this.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n        }\r\n        if (!this.dateFormats.hasKey(\"second\")) {\r\n            this.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n        }\r\n        if (!this.dateFormats.hasKey(\"minute\")) {\r\n            this.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n        }\r\n        if (!this.dateFormats.hasKey(\"hour\")) {\r\n            this.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n        }\r\n        if (!this.dateFormats.hasKey(\"day\")) {\r\n            this.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n        }\r\n        if (!this.dateFormats.hasKey(\"week\")) {\r\n            this.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\")); // not a mistake\r\n        }\r\n        if (!this.dateFormats.hasKey(\"month\")) {\r\n            this.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n        }\r\n        if (!this.dateFormats.hasKey(\"year\")) {\r\n            this.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n        }\r\n        if (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n            this.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n        }\r\n        if (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n            this.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n        }\r\n        if (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n            this.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n        }\r\n        if (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n            this.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n        }\r\n        if (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n            this.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n        }\r\n        if (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n            this.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n        }\r\n        if (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n            this.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return {DateAxisDataItem} Data Item\r\n     */\r\n    DateAxis.prototype.createDataItem = function () {\r\n        return new DateAxisDataItem();\r\n    };\r\n    /**\r\n     * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n     *\r\n     * @return {DateAxisBreak} Axis break\r\n     */\r\n    DateAxis.prototype.createAxisBreak = function () {\r\n        return new DateAxisBreak();\r\n    };\r\n    /**\r\n     * Validates Axis' data items.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    DateAxis.prototype.validateDataItems = function () {\r\n        // allows to keep selection of the same size\r\n        var start = this.start;\r\n        var end = this.end;\r\n        var periodCount = (this.max - this.min) / this.baseDuration;\r\n        _super.prototype.validateDataItems.call(this);\r\n        this.maxZoomFactor = (this.max - this.min) / this.baseDuration;\r\n        // allows to keep selection of the same size\r\n        var newPeriodCount = (this.max - this.min) / this.baseDuration;\r\n        start = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n        this.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n    };\r\n    /**\r\n     * Handles process after zoom.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Does nothing?\r\n     */\r\n    DateAxis.prototype.handleSelectionExtremesChange = function () {\r\n    };\r\n    /**\r\n     * Calculates all positions, related to axis as per current zoom.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    DateAxis.prototype.calculateZoom = function () {\r\n        var _this = this;\r\n        _super.prototype.calculateZoom.call(this);\r\n        var gridInterval = this.chooseInterval(0, this.adjustDifference(this._minZoomed, this._maxZoomed), this._gridCount);\r\n        if ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n            gridInterval = tslib_1.__assign({}, this.baseInterval);\r\n        }\r\n        this._gridInterval = gridInterval;\r\n        this._gridDate = $time.round(new Date(this.min), gridInterval.timeUnit, gridInterval.count);\r\n        this._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n        // the following is needed to avoid grid flickering while scrolling\r\n        this._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n        var count = Math.ceil(this._difference / this._intervalDuration);\r\n        count = Math.floor(this.start * count) - 3; // some extra is needed\r\n        $time.add(this._gridDate, gridInterval.timeUnit, count * gridInterval.count);\r\n        // tell series start/end\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            if (series.baseAxis == _this) {\r\n                var field_1 = series.getAxisField(_this);\r\n                // TODO use $type.castNumber ?\r\n                var startIndex = series.dataItems.findClosestIndex(_this._minZoomed, function (x) { return x[field_1]; }, \"left\");\r\n                // 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n                var endIndex = series.dataItems.findClosestIndex(_this._maxZoomed - 1, function (x) { return x[field_1]; }, \"right\") + 1;\r\n                series.startIndex = startIndex;\r\n                series.endIndex = endIndex;\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * (Re)validates data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    DateAxis.prototype.validateData = function () {\r\n        _super.prototype.validateData.call(this);\r\n        if (!$type.isNumber(this.baseInterval.count)) {\r\n            this.baseInterval.count = 1;\r\n        }\r\n    };\r\n    Object.defineProperty(DateAxis.prototype, \"minDifference\", {\r\n        /**\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            var minDifference = Number.MAX_VALUE;\r\n            this.series.each(function (series) {\r\n                if (minDifference > _this._minDifference[series.uid]) {\r\n                    minDifference = _this._minDifference[series.uid];\r\n                }\r\n            });\r\n            if (minDifference == Number.MAX_VALUE || minDifference == 0) {\r\n                minDifference = $time.getDuration(\"day\");\r\n            }\r\n            return minDifference;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * [dataChangeUpdate description]\r\n     *\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    DateAxis.prototype.seriesDataChangeUpdate = function (series) {\r\n        this._minDifference[series.uid] = Number.MAX_VALUE;\r\n    };\r\n    /**\r\n     * [postProcessSeriesDataItems description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    DateAxis.prototype.postProcessSeriesDataItems = function () {\r\n        var _this = this;\r\n        this.series.each(function (series) {\r\n            if (JSON.stringify(series._baseInterval[_this.uid]) != JSON.stringify(_this.baseInterval)) {\r\n                series.dataItems.each(function (dataItem) {\r\n                    _this.postProcessSeriesDataItem(dataItem);\r\n                });\r\n                series._baseInterval[_this.uid] = _this.baseInterval;\r\n            }\r\n        });\r\n        this.addEmptyUnitsBreaks();\r\n    };\r\n    /**\r\n     * [postProcessSeriesDataItem description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param {XYSeriesDataItem} dataItem Data item\r\n     */\r\n    DateAxis.prototype.postProcessSeriesDataItem = function (dataItem) {\r\n        // we need to do this for all series data items not only added recently, as baseInterval might change\r\n        var baseInterval = this.baseInterval;\r\n        var series = dataItem.component;\r\n        var dataItemsByAxis = series.dataItemsByAxis.getKey(this.uid);\r\n        $object.each(dataItem.dates, function (key) {\r\n            var date = dataItem.getDate(key);\r\n            var time = date.getTime();\r\n            var startDate = $time.round(new Date(time), baseInterval.timeUnit, baseInterval.count);\r\n            var startTime = startDate.getTime();\r\n            var endDate = $time.add(new Date(startTime), baseInterval.timeUnit, baseInterval.count);\r\n            dataItem.setCalculatedValue(key, startTime, \"open\");\r\n            dataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n            dataItemsByAxis.setKey(startTime.toString(), dataItem);\r\n        });\r\n    };\r\n    /**\r\n     * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n     * elements for them.\r\n     *\r\n     * Can be used to automatically remove strethes without data, like weekends.\r\n     *\r\n     * No, need to call this manually. It will automatically be done if\r\n     * `skipEmptyPeriods = true`.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    DateAxis.prototype.addEmptyUnitsBreaks = function () {\r\n        var _this = this;\r\n        if (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n            var timeUnit = this.baseInterval.timeUnit;\r\n            var count = this.baseInterval.count;\r\n            this.axisBreaks.clear(); // TODO: what about breaks added by user?\r\n            var date = $time.round(new Date(this.min), timeUnit, count);\r\n            var axisBreak = void 0;\r\n            var _loop_1 = function () {\r\n                $time.add(date, timeUnit, count);\r\n                var startTime = date.getTime();\r\n                var startTimeStr = startTime.toString();\r\n                var hasData = $iter.contains(this_1.series.iterator(), function (series) {\r\n                    return !!series.dataItemsByAxis.getKey(_this.uid).getKey(startTimeStr);\r\n                });\r\n                // open break if not yet opened\r\n                if (!hasData) {\r\n                    if (!axisBreak) {\r\n                        axisBreak = this_1.axisBreaks.create();\r\n                        axisBreak.startDate = new Date(startTime);\r\n                    }\r\n                }\r\n                else {\r\n                    // close if already opened\r\n                    if (axisBreak) {\r\n                        // close at end time minus one millisecond\r\n                        axisBreak.endDate = new Date(startTime - 1);\r\n                        axisBreak = undefined;\r\n                    }\r\n                }\r\n            };\r\n            var this_1 = this;\r\n            while (date.getTime() < this.max - this.baseDuration) {\r\n                _loop_1();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates positioning of Axis breaks after something changes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    DateAxis.prototype.fixAxisBreaks = function () {\r\n        var _this = this;\r\n        _super.prototype.fixAxisBreaks.call(this);\r\n        var axisBreaks = this.axisBreaks;\r\n        if (axisBreaks.length > 0) {\r\n            // process breaks\r\n            axisBreaks.each(function (axisBreak) {\r\n                var breakGridCount = Math.ceil(_this._gridCount * (Math.min(_this.end, axisBreak.endPosition) - Math.max(_this.start, axisBreak.startPosition)) / (_this.end - _this.start));\r\n                axisBreak.gridInterval = _this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n                var gridDate = $time.round(new Date(axisBreak.adjustedStartValue), axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count);\r\n                if (gridDate.getTime() > axisBreak.startDate.getTime()) {\r\n                    $time.add(gridDate, axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count);\r\n                }\r\n                axisBreak.gridDate = gridDate;\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * [getGridDate description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param  {Date}    date           [description]\r\n     * @param  {number}  intervalCount  [description]\r\n     * @return {Date}                   [description]\r\n     */\r\n    DateAxis.prototype.getGridDate = function (date, intervalCount) {\r\n        var timeUnit = this._gridInterval.timeUnit;\r\n        var realIntervalCount = this._gridInterval.count;\r\n        // round date\r\n        $time.round(date, timeUnit, 1);\r\n        var prevTimestamp = date.getTime();\r\n        var newDate = $time.copy(date);\r\n        // modify date by adding intervalcount\r\n        var timestamp = $time.add(newDate, timeUnit, intervalCount).getTime();\r\n        // if it's axis break, get first rounded date which is not in a break\r\n        var axisBreak = this.isInBreak(timestamp);\r\n        if (axisBreak) {\r\n            newDate = new Date(axisBreak.endDate.getTime());\r\n            $time.round(newDate, timeUnit, realIntervalCount);\r\n            if (newDate.getTime() < axisBreak.endDate.getTime()) {\r\n                $time.add(newDate, timeUnit, realIntervalCount);\r\n            }\r\n            timestamp = newDate.getTime();\r\n        }\r\n        // get duration between grid lines with break duration removed\r\n        var durationBreaksRemoved = this.adjustDifference(prevTimestamp, timestamp);\r\n        // calculate how many time units fit to this duration\r\n        var countBreaksRemoved = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n        // if less units fit, add one and repeat\r\n        if (countBreaksRemoved < realIntervalCount) {\r\n            return this.getGridDate(date, intervalCount + realIntervalCount);\r\n        }\r\n        return newDate;\r\n    };\r\n    /**\r\n     * [getBreaklessDate description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param  {DateAxisBreak}  axisBreak  [description]\r\n     * @param  {TimeUnit}       timeUnit   [description]\r\n     * @param  {number}         count      [description]\r\n     * @return {Date}                      [description]\r\n     */\r\n    DateAxis.prototype.getBreaklessDate = function (axisBreak, timeUnit, count) {\r\n        var date = new Date(axisBreak.endValue);\r\n        $time.round(date, timeUnit, count);\r\n        $time.add(date, timeUnit, count);\r\n        var timestamp = date.getTime();\r\n        axisBreak = this.isInBreak(timestamp);\r\n        if (axisBreak) {\r\n            return this.getBreaklessDate(axisBreak, timeUnit, count);\r\n        }\r\n        return date;\r\n    };\r\n    /**\r\n     * (Re)validates all Axis elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     */\r\n    DateAxis.prototype.validateAxisElements = function () {\r\n        var _this = this;\r\n        if ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n            this.calculateZoom();\r\n            // first regular items\r\n            var timestamp = this._gridDate.getTime();\r\n            var timeUnit = this._gridInterval.timeUnit;\r\n            var intervalCount = this._gridInterval.count;\r\n            var prevGridDate = $time.copy(this._gridDate);\r\n            var dataItemsIterator_1 = this._dataItemsIterator;\r\n            this.resetIterators();\r\n            var _loop_2 = function () {\r\n                var date = this_2.getGridDate(new Date(prevGridDate), intervalCount);\r\n                timestamp = date.getTime();\r\n                var endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n                endDate = $time.add(endDate, timeUnit, intervalCount);\r\n                var format = this_2.dateFormats.getKey(timeUnit);\r\n                if (this_2.markUnitChange && prevGridDate) {\r\n                    if ($time.checkChange(date, prevGridDate, this_2._nextGridUnit)) {\r\n                        if (timeUnit !== \"year\") {\r\n                            format = this_2.periodChangeDateFormats.getKey(timeUnit);\r\n                        }\r\n                    }\r\n                }\r\n                var text = this_2.dateFormatter.format(date, format);\r\n                var dataItem = dataItemsIterator_1.find(function (x) { return x.text === text; });\r\n                this_2.appendDataItem(dataItem);\r\n                dataItem.axisBreak = undefined;\r\n                dataItem.date = date;\r\n                dataItem.endDate = endDate;\r\n                dataItem.text = text;\r\n                prevGridDate = date;\r\n                this_2.validateDataElement(dataItem);\r\n            };\r\n            var this_2 = this;\r\n            while (timestamp <= this._maxZoomed) {\r\n                _loop_2();\r\n            }\r\n            // breaks later\r\n            var renderer_1 = this.renderer;\r\n            $iter.each(this.axisBreaks.iterator(), function (axisBreak) {\r\n                if (axisBreak.breakSize > 0) {\r\n                    var timeUnit_1 = axisBreak.gridInterval.timeUnit;\r\n                    var intervalCount_1 = axisBreak.gridInterval.count;\r\n                    // only add grid if gap is bigger then minGridDistance\r\n                    if ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer_1.minGridDistance * 4) {\r\n                        var timestamp_1 = axisBreak.gridDate.getTime();\r\n                        var prevGridDate_1;\r\n                        var count = 0;\r\n                        var _loop_3 = function () {\r\n                            var date = $time.copy(axisBreak.gridDate);\r\n                            timestamp_1 = $time.add(date, timeUnit_1, intervalCount_1 * count).getTime();\r\n                            count++;\r\n                            if (timestamp_1 > axisBreak.adjustedStartValue && timestamp_1 < axisBreak.adjustedEndValue) {\r\n                                var endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n                                endDate = $time.add(endDate, timeUnit_1, intervalCount_1);\r\n                                var format = _this.dateFormats.getKey(timeUnit_1);\r\n                                if (_this.markUnitChange && prevGridDate_1) {\r\n                                    if ($time.checkChange(date, prevGridDate_1, _this._nextGridUnit)) {\r\n                                        if (timeUnit_1 !== \"year\") {\r\n                                            format = _this.periodChangeDateFormats.getKey(timeUnit_1);\r\n                                        }\r\n                                    }\r\n                                }\r\n                                var text_1 = _this.dateFormatter.format(date, format);\r\n                                var dataItem = dataItemsIterator_1.find(function (x) { return x.text === text_1; });\r\n                                //this.processDataItem(dataItem);\r\n                                _this.appendDataItem(dataItem);\r\n                                dataItem.axisBreak = axisBreak;\r\n                                axisBreak.dataItems.moveValue(dataItem);\r\n                                dataItem.date = date;\r\n                                dataItem.endDate = endDate;\r\n                                dataItem.text = text_1;\r\n                                prevGridDate_1 = date;\r\n                                _this.validateDataElement(dataItem);\r\n                            }\r\n                        };\r\n                        while (timestamp_1 <= axisBreak.adjustedMax) {\r\n                            _loop_3();\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Validates Axis data item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {DateAxisDataItem} dataItem Data item\r\n     */\r\n    DateAxis.prototype.validateDataElement = function (dataItem) {\r\n        //super.validateDataElement(dataItem);\r\n        if ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n            var renderer = this.renderer;\r\n            var timestamp = dataItem.value;\r\n            var endTimestamp = dataItem.endValue;\r\n            if (!$type.isNumber(endTimestamp)) {\r\n                endTimestamp = timestamp;\r\n            }\r\n            var position = this.valueToPosition(timestamp);\r\n            var endPosition = this.valueToPosition(endTimestamp);\r\n            var fillEndPosition = endPosition;\r\n            if (!dataItem.isRange && this._gridInterval.count > 1) {\r\n                endPosition = position + (endPosition - position) / this._gridInterval.count;\r\n            }\r\n            dataItem.position = position;\r\n            var tick = dataItem.tick;\r\n            if (tick && !tick.disabled) {\r\n                renderer.updateTickElement(tick, position, endPosition);\r\n            }\r\n            var grid = dataItem.grid;\r\n            if (grid && !grid.disabled) {\r\n                renderer.updateGridElement(grid, position, endPosition);\r\n            }\r\n            var fill = dataItem.axisFill;\r\n            if (fill && !fill.disabled) {\r\n                renderer.updateFillElement(fill, position, fillEndPosition);\r\n                if (!dataItem.isRange) {\r\n                    this.fillRule(dataItem);\r\n                }\r\n            }\r\n            var mask = dataItem.mask;\r\n            if (mask) {\r\n                renderer.updateFillElement(mask, position, endPosition);\r\n            }\r\n            var label = dataItem.label;\r\n            if (label && !label.disabled) {\r\n                var location_1 = label.location;\r\n                if (location_1 == 0) {\r\n                    if (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n                        location_1 = 0.5;\r\n                    }\r\n                    else {\r\n                        location_1 = 0;\r\n                    }\r\n                }\r\n                renderer.updateLabelElement(label, position, endPosition, location_1);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(DateAxis.prototype, \"baseDuration\", {\r\n        /**\r\n         * A duration in milliseconds of the `baseInterval`.\r\n         *\r\n         * @return {number} Duration (ms)\r\n         */\r\n        get: function () {\r\n            return $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Adjusts min/max values.\r\n     *\r\n     * @ignore Exclude from docs.\r\n     * @todo Description (review)\r\n     * @param  {number}       min  Min timestamp\r\n     * @param  {number}       max  Max timestamp\r\n     * @return {IMinMaxStep}       Adjusted min/max step\r\n     */\r\n    DateAxis.prototype.adjustMinMax = function (min, max) {\r\n        return { min: min, max: max, step: this.baseDuration };\r\n    };\r\n    /**\r\n     * Adjusts the minimum timestamp as per cell start location.\r\n     *\r\n     * @param  {number}  value  Value\r\n     * @return {number}         Adjusted value\r\n     */\r\n    DateAxis.prototype.fixMin = function (value) {\r\n        // like this because months are not equal\r\n        var startTime = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count).getTime();\r\n        var endTime = $time.add(new Date(startTime), this.baseInterval.timeUnit, this.baseInterval.count).getTime();\r\n        return startTime + (endTime - startTime) * this.startLocation;\r\n    };\r\n    /**\r\n     * Adjusts the maximum timestamp as per cell start location.\r\n     *\r\n     * @param  {number}  value  Value\r\n     * @return {number}         Adjusted value\r\n     */\r\n    DateAxis.prototype.fixMax = function (value) {\r\n        // like this because months are not equal\r\n        var startTime = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count).getTime();\r\n        var endTime = $time.add(new Date(startTime), this.baseInterval.timeUnit, this.baseInterval.count).getTime();\r\n        return startTime + (endTime - startTime) * this.endLocation;\r\n    };\r\n    /**\r\n     * [chooseInterval description]\r\n     *\r\n     * @ignore Exclude from docs.\r\n     * @todo Description\r\n     * @param  {number}         index      [description]\r\n     * @param  {number}         duration   [description]\r\n     * @param  {number}         gridCount  [description]\r\n     * @return {ITimeInterval}             [description]\r\n     */\r\n    DateAxis.prototype.chooseInterval = function (index, duration, gridCount) {\r\n        var gridIntervals = this.gridIntervals;\r\n        var gridInterval = gridIntervals.getIndex(index);\r\n        var intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n        var lastIndex = gridIntervals.length - 1;\r\n        if (index >= lastIndex) {\r\n            return tslib_1.__assign({}, gridIntervals.getIndex(lastIndex));\r\n        }\r\n        var count = Math.ceil(duration / intervalDuration);\r\n        if (duration < intervalDuration && index > 0) {\r\n            return tslib_1.__assign({}, gridIntervals.getIndex(index - 1));\r\n        }\r\n        if (count <= gridCount) {\r\n            return tslib_1.__assign({}, gridIntervals.getIndex(index));\r\n        }\r\n        else {\r\n            if (index + 1 < gridIntervals.length) {\r\n                return this.chooseInterval(index + 1, duration, gridCount);\r\n            }\r\n            else {\r\n                return tslib_1.__assign({}, gridIntervals.getIndex(index));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Formats the value according to axis' own [[DateFormatter]].\r\n     *\r\n     * @param  {number}  value  Source value\r\n     * @return {string}         Formatted value\r\n     */\r\n    DateAxis.prototype.formatLabel = function (value) {\r\n        return this.dateFormatter.format(value);\r\n    };\r\n    /**\r\n     * Converts a Date to an asbolute pixel position within Axis.\r\n     *\r\n     * @param  {Date}    date  Date\r\n     * @return {number}        Position (px)\r\n     */\r\n    DateAxis.prototype.dateToPosition = function (date) {\r\n        return this.valueToPosition(date.getTime());\r\n    };\r\n    /**\r\n     * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n     *\r\n     * @param  {Date | number}  date  Date or a timestamp\r\n     * @return {number}               Relative position\r\n     */\r\n    DateAxis.prototype.anyToPosition = function (date) {\r\n        if (date instanceof Date) {\r\n            return this.dateToPosition(date);\r\n        }\r\n        else {\r\n            return this.valueToPosition(date);\r\n        }\r\n    };\r\n    /**\r\n     * Converts date to orientation point (x, y, angle) on axis\r\n     *\r\n     * @param  {Date}  date Date\r\n     * @return {IOrientationPoint} IOrientationPoint\r\n     */\r\n    DateAxis.prototype.dateToPoint = function (date) {\r\n        var position = this.dateToPosition(date);\r\n        var point = this.renderer.positionToPoint(position);\r\n        var angle = this.renderer.positionToAngle(position);\r\n        return { x: point.x, y: point.y, angle: angle };\r\n    };\r\n    /**\r\n     * Converts a numeric value to orientation (x, y, angle) point on axis\r\n     *\r\n     * @param  {number}  value  Value\r\n     * @return {IOrientationPoint}  Orientation point\r\n     */\r\n    DateAxis.prototype.anyToPoint = function (date) {\r\n        if (date instanceof Date) {\r\n            return this.dateToPoint(date);\r\n        }\r\n        else {\r\n            return this.valueToPoint(date);\r\n        }\r\n    };\r\n    /**\r\n     * Converts pixel position within Axis to a corresponding Date.\r\n     *\r\n     * @param  {number}  position  Position (px)\r\n     * @return {Date}              Date\r\n     */\r\n    DateAxis.prototype.positionToDate = function (position) {\r\n        return new Date(this.positionToValue(position));\r\n    };\r\n    /**\r\n     * Returns the X coordinate for series' data item's value.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param  {XYSeriesDataItem}  dataItem  Data item\r\n     * @param  {string}            key       Data field to get value from\r\n     * @param  {number}            location  Location (0-1)\r\n     * @return {number}                      X coordinate (px)\r\n     */\r\n    DateAxis.prototype.getX = function (dataItem, key, location) {\r\n        var value = this.getTimeByLocation(dataItem, key, location);\r\n        //let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n        if (!$type.isNumber(value)) {\r\n            value = this.baseValue;\r\n        }\r\n        return this.renderer.positionToPoint(this.valueToPosition(value)).x;\r\n    };\r\n    /**\r\n     * Returns the Y coordinate for series' data item's value.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param  {XYSeriesDataItem}  dataItem  Data item\r\n     * @param  {string}            key       Data field to get value from\r\n     * @param  {number}            location  Location (0-1)\r\n     * @return {number}                      Y coordinate (px)\r\n     */\r\n    DateAxis.prototype.getY = function (dataItem, key, location) {\r\n        var value = this.getTimeByLocation(dataItem, key, location);\r\n        var stack = dataItem.getValue(\"valueX\", \"stack\");\r\n        if (!$type.isNumber(value)) {\r\n            value = this.baseValue;\r\n        }\r\n        return this.renderer.positionToPoint(this.valueToPosition(value + stack)).y;\r\n    };\r\n    /**\r\n     * Returns an angle for series data item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param  {XYSeriesDataItem}  dataItem  Data item\r\n     * @param  {string}            key       Data field to get value from\r\n     * @param  {number}            location  Location (0-1)\r\n     * @param  {string}            stackKey  Stack ID\r\n     * @return {number}                      Angle\r\n     */\r\n    DateAxis.prototype.getAngle = function (dataItem, key, location, stackKey) {\r\n        var value = this.getTimeByLocation(dataItem, key, location);\r\n        var stack = dataItem.getValue(stackKey, \"stack\");\r\n        if (!$type.isNumber(value)) {\r\n            value = this.baseValue;\r\n        }\r\n        return this.positionToAngle(this.valueToPosition(value + stack));\r\n    };\r\n    /**\r\n     * [getTimeByLocation description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param  {XYSeriesDataItem}  dataItem  [description]\r\n     * @param  {string}            key       [description]\r\n     * @param  {number}            location  [description]\r\n     * @return {number}                      [description]\r\n     */\r\n    DateAxis.prototype.getTimeByLocation = function (dataItem, key, location) {\r\n        if (!$type.hasValue(key)) {\r\n            return;\r\n        }\r\n        if (!$type.isNumber(location)) {\r\n            location = dataItem.workingLocations[key];\r\n            if (!$type.isNumber(location)) {\r\n                location = 0;\r\n            }\r\n        }\r\n        var startTime = dataItem.values[key][\"open\"];\r\n        var endTime = dataItem.values[key][\"close\"];\r\n        if ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n            return startTime + (endTime - startTime) * location;\r\n        }\r\n    };\r\n    /**\r\n     * Processes a related series' data item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param {XYSeriesDataItem}  dataItem  Data item\r\n     */\r\n    DateAxis.prototype.processSeriesDataItem = function (dataItem, axisLetter) {\r\n        var series = dataItem.component;\r\n        var time;\r\n        var date = dataItem[\"date\" + axisLetter];\r\n        if (date) {\r\n            time = date.getTime();\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n        var openDate = dataItem[\"openDate\" + axisLetter];\r\n        var prevSeriesTime = this._prevSeriesTime;\r\n        var openTime;\r\n        if (openDate) {\r\n            openTime = openDate.getTime();\r\n        }\r\n        if ($type.isNumber(openTime)) {\r\n            var difference = Math.abs(time - openTime);\r\n            if (this._minDifference[series.uid] > difference) {\r\n                this._minDifference[series.uid] = difference;\r\n            }\r\n        }\r\n        var differece = time - prevSeriesTime;\r\n        if (differece > 0) {\r\n            if (this._minDifference[series.uid] > differece) {\r\n                this._minDifference[series.uid] = differece;\r\n            }\r\n        }\r\n        this._prevSeriesTime = time;\r\n        if (series._baseInterval[this.uid]) {\r\n            this.postProcessSeriesDataItem(dataItem);\r\n        }\r\n        else {\r\n            if (this._baseInterval) {\r\n                series._baseInterval[this.uid] = this._baseInterval;\r\n                this.postProcessSeriesDataItem(dataItem);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * [updateAxisBySeries description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    DateAxis.prototype.updateAxisBySeries = function () {\r\n        _super.prototype.updateAxisBySeries.call(this);\r\n        var baseInterval = this.chooseInterval(0, this.minDifference, 1);\r\n        // handle short months\r\n        if (this.minDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n            baseInterval.timeUnit = \"month\";\r\n            baseInterval.count = 1;\r\n        }\r\n        // handle daylight saving\r\n        if (this.minDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n            baseInterval.timeUnit = \"day\";\r\n            baseInterval.count = 1;\r\n        }\r\n        this._baseIntervalReal = baseInterval;\r\n        // no need to invalidate\r\n    };\r\n    Object.defineProperty(DateAxis.prototype, \"baseInterval\", {\r\n        /**\r\n         * @return {ITimeInterval} Base interval\r\n         */\r\n        get: function () {\r\n            if (this._baseInterval) {\r\n                return this._baseInterval;\r\n            }\r\n            else {\r\n                return this._baseIntervalReal;\r\n            }\r\n        },\r\n        /**\r\n         * A base interval (granularity) of data.\r\n         *\r\n         * Used to indicate what are the base units of your data.\r\n         *\r\n         * For example, if you have a data set that has a data point every 5 minutes,\r\n         * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n         *\r\n         * If not set, the Axis will try to determine the setting by its own, looking\r\n         * at actual data.\r\n         *\r\n         * @param {ITimeInterval} timeInterval base interval\r\n         */\r\n        set: function (timeInterval) {\r\n            if (JSON.stringify(this._baseInterval) != JSON.stringify(timeInterval)) {\r\n                this._baseInterval = timeInterval;\r\n                this.invalidate();\r\n                this.postProcessSeriesDataItems();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateAxis.prototype, \"skipEmptyPeriods\", {\r\n        /**\r\n         * @return {boolean} Remove empty stretches of time?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"skipEmptyPeriods\");\r\n        },\r\n        /**\r\n         * If enabled, axis will automatically collapse empty (without data points)\r\n         * periods of time, i.e. weekends.\r\n         *\r\n         * An \"empty\" period is considered a stretch of time in the length of current\r\n         * `baseInterval` without a single data point in it.\r\n         *\r\n         * For each such empty period, axis will automatically create an\r\n         * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n         * them by accessing `axis.breaks.template`.\r\n         *\r\n         * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n         *\r\n         * Important notes:\r\n         * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n         * * Using this feature affects performance. Use only if you need it.\r\n         * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n         *\r\n         * @default false\r\n         * @param {boolean}  value  Remove empty stretches of time?\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n                this.invalidateData();\r\n            }\r\n            if (value) {\r\n                var breakTemplate = this.axisBreaks.template;\r\n                breakTemplate.startLine.disabled = true;\r\n                breakTemplate.endLine.disabled = true;\r\n                breakTemplate.fillShape.disabled = true;\r\n                breakTemplate.breakSize = 0;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateAxis.prototype, \"tooltipDateFormat\", {\r\n        /**\r\n         * @return {string} Date format\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tooltipDateFormat\");\r\n        },\r\n        /**\r\n         * A special date format to apply axis tooltips.\r\n         *\r\n         * Will use same format as for labels, if not set.\r\n         *\r\n         * @param {string}  value  Date format\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tooltipDateFormat\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateAxis.prototype, \"markUnitChange\", {\r\n        /**\r\n         * @return {boolean} Use different format for period beginning?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"markUnitChange\");\r\n        },\r\n        /**\r\n         * Use `periodChangeDateFormats` to apply different formats to the first\r\n         * label in bigger time unit.\r\n         *\r\n         * @default true\r\n         * @param {boolean}  value  Use different format for period beginning?\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"markUnitChange\", value)) {\r\n                this.invalidateData();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns text to show in a tooltip, based on specific relative position\r\n     * within axis.\r\n     *\r\n     * The label will be formatted as per [[DateFormatter]] set for the whole\r\n     * chart, or explicitly for this Axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {number}  position  Position\r\n     * @return {string}            Label (formatted date)\r\n     */\r\n    DateAxis.prototype.getTooltipText = function (position) {\r\n        var text;\r\n        var date = this.positionToDate(position);\r\n        date = $time.round(date, this.baseInterval.timeUnit, this.baseInterval.count);\r\n        if ($type.hasValue(this.tooltipDateFormat)) {\r\n            text = this.dateFormatter.format(date, this.tooltipDateFormat);\r\n        }\r\n        else {\r\n            var dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\r\n            if (dateFormat) {\r\n                text = this.dateFormatter.format(date, dateFormat);\r\n            }\r\n            else {\r\n                text = this.getPositionLabel(position);\r\n            }\r\n        }\r\n        return this.adapter.apply(\"getTooltipText\", text);\r\n    };\r\n    /**\r\n     * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {number}            position Source position\r\n     * @param  {AxisItemLocation}  location  Location in the cell\r\n     * @return {number}            Adjusted position\r\n     */\r\n    DateAxis.prototype.roundPosition = function (position, location) {\r\n        var baseInterval = this.baseInterval;\r\n        var timeUnit = baseInterval.timeUnit;\r\n        var count = baseInterval.count;\r\n        var date = this.positionToDate(position);\r\n        $time.round(date, timeUnit, count);\r\n        if (location > 0) {\r\n            $time.add(date, timeUnit, location * count);\r\n        }\r\n        if (this.isInBreak(date.getTime())) {\r\n            while (date.getTime() < this.max) {\r\n                $time.add(date, timeUnit, count);\r\n                if (!this.isInBreak(date.getTime())) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return this.dateToPosition(date);\r\n    };\r\n    /**\r\n     * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param  {number}  position  Relative position\r\n     * @return {number}            Cell start relative position\r\n     */\r\n    DateAxis.prototype.getCellStartPosition = function (position) {\r\n        return this.roundPosition(position, 0);\r\n    };\r\n    /**\r\n     * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param  {number}  position  Relative position\r\n     * @return {number}            Cell end relative position\r\n     */\r\n    DateAxis.prototype.getCellEndPosition = function (position) {\r\n        return this.roundPosition(position, 1);\r\n        //return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\r\n    };\r\n    /**\r\n     * Returns a Series data item that corresponds to the specific pixel position\r\n     * of the Axis.\r\n     *\r\n     * If `findNearest` (third parameter) is set to `true`, the method will try\r\n     * to locate nearest available data item if none is found directly under\r\n     * `position`.\r\n     *\r\n     * @param  {XYSeries}          series       Series\r\n     * @param  {number}            position     Position (px)\r\n     * @param  {boolean}           findNearest  Should axis try to find nearest tooltip if there is no data item at exact position\r\n     * @return {XYSeriesDataItem}               Data item\r\n     */\r\n    DateAxis.prototype.getSeriesDataItem = function (series, position, findNearest) {\r\n        var value = this.positionToValue(position);\r\n        var date = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count);\r\n        var dataItemsByAxis = series.dataItemsByAxis.getKey(this.uid);\r\n        var dataItem = dataItemsByAxis.getKey(date.getTime().toString());\r\n        // todo:  alternatively we can find closiest here\r\n        if (!dataItem && findNearest) {\r\n            /*\r\n            // to the left\r\n            let leftCount = 0;\r\n            let leftDataItem: XYSeriesDataItem;\r\n            let leftDate = new Date(date.getTime());\r\n\r\n            while (leftDate.getTime() > this.minZoomed) {\r\n                leftDate = $time.add(leftDate, this.baseInterval.timeUnit, -this.baseInterval.count);\r\n                leftDataItem = dataItemsByAxis.getKey(leftDate.getTime().toString());\r\n                if (leftDataItem) {\r\n                    break;\r\n                }\r\n                leftCount++;\r\n                if (leftCount > 5000) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            let rightCount = 0;\r\n            let rightDataItem: XYSeriesDataItem;\r\n            let rightDate = new Date(date.getTime());\r\n            while (rightDate.getTime() < this.maxZoomed) {\r\n                rightDate = $time.add(rightDate, this.baseInterval.timeUnit, this.baseInterval.count);\r\n                rightDataItem = dataItemsByAxis.getKey(rightDate.getTime().toString());\r\n                if (rightDataItem) {\r\n                    break;\r\n                }\r\n                rightCount++;\r\n                if (rightCount > 5000) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (leftDataItem && !rightDataItem) {\r\n                return leftDataItem;\r\n            }\r\n            else if (!leftDataItem && rightDataItem) {\r\n                return rightDataItem;\r\n            }\r\n            else if (leftDataItem && rightDataItem) {\r\n                if (leftCount < rightCount) {\r\n                    return leftDataItem;\r\n                }\r\n                else {\r\n                    return rightDataItem;\r\n                }\r\n            }*/\r\n            var key_1;\r\n            if (this.axisLetter == \"Y\") {\r\n                key_1 = \"dateY\";\r\n            }\r\n            else {\r\n                key_1 = \"dateX\";\r\n            }\r\n            dataItem = series.dataItems.getIndex(series.dataItems.findClosestIndex(date.getTime(), function (x) { return x[key_1].getTime(); }, \"any\"));\r\n        }\r\n        return dataItem;\r\n    };\r\n    /**\r\n     * Returns a formatted date based on position in axis scale.\r\n     *\r\n     * Please note that `position` represents position within axis which may be\r\n     * zoomed and not correspond to Cursor's `position`.\r\n     *\r\n     * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n     * @param  {number}  position  Relative position on axis (0-1)\r\n     * @return {string}            Position label\r\n     */\r\n    DateAxis.prototype.getPositionLabel = function (position) {\r\n        // @todo Better format recognition\r\n        var date = this.positionToDate(position);\r\n        return this.dateFormatter.format(date, this.getCurrentLabelFormat());\r\n    };\r\n    /**\r\n     * Returns label date format based on currently used time units\r\n     *\r\n     * @return {string}  Format\r\n     */\r\n    DateAxis.prototype.getCurrentLabelFormat = function () {\r\n        return this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n    };\r\n    /**\r\n     * Initializes an Axis renderer.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    DateAxis.prototype.initRenderer = function () {\r\n        _super.prototype.initRenderer.call(this);\r\n        var renderer = this.renderer;\r\n        if (renderer) {\r\n            // Set defaults\r\n            renderer.ticks.template.location = 0;\r\n            renderer.grid.template.location = 0;\r\n            renderer.labels.template.location = 0;\r\n            renderer.baseGrid.disabled = true;\r\n        }\r\n    };\r\n    Object.defineProperty(DateAxis.prototype, \"basePoint\", {\r\n        /**\r\n         * Coordinates of the actual axis start.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {IPoint} Base point\r\n         */\r\n        get: function () {\r\n            return { x: 0, y: 0 };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Zooms axis to specific Dates.\r\n     *\r\n     * @param {Date}     startDate       Start date\r\n     * @param {Date}     endValue        End date\r\n     * @param {boolean}  skipRangeEvent  Do not invoke events\r\n     * @param {boolean}  instantly       Do not play zoom animations\r\n     */\r\n    DateAxis.prototype.zoomToDates = function (startDate, endDate, skipRangeEvent, instantly) {\r\n        startDate = this.dateFormatter.parse(startDate);\r\n        endDate = this.dateFormatter.parse(endDate);\r\n        this.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly);\r\n    };\r\n    /**\r\n     * Adds `baseInterval` to \"as is\" fields.\r\n     *\r\n     * @param  {string}   field  Field name\r\n     * @return {boolean}         Assign as is?\r\n     */\r\n    DateAxis.prototype.asIs = function (field) {\r\n        return field == \"baseInterval\" || _super.prototype.asIs.call(this, field);\r\n    };\r\n    /**\r\n     * Copies all properties and related data from a different instance of Axis.\r\n     *\r\n     * @param {this} source Source Axis\r\n     */\r\n    DateAxis.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.dateFormats = source.dateFormats;\r\n        this.periodChangeDateFormats = source.periodChangeDateFormats;\r\n        if (source[\"_baseInterval\"]) {\r\n            this.baseInterval = source.baseInterval;\r\n        }\r\n    };\r\n    /**\r\n     * Shows Axis tooltip at specific relative position within Axis. (0-1)\r\n     *\r\n     * @param {number} position Position (0-1)\r\n     * @param {boolean} local or global position\r\n     */\r\n    DateAxis.prototype.showTooltipAtPosition = function (position, local) {\r\n        var _this = this;\r\n        if (!local) {\r\n            position = this.toAxisPosition(position);\r\n        }\r\n        if (this.snapTooltip) {\r\n            var actualDate = $time.round(this.positionToDate(position), this.baseInterval.timeUnit, 1);\r\n            var actualTime_1 = actualDate.getTime();\r\n            var closestDate_1;\r\n            this.series.each(function (series) {\r\n                var dataItem = _this.getSeriesDataItem(series, position, true);\r\n                if (dataItem) {\r\n                    var date = void 0;\r\n                    if (series.xAxis == _this) {\r\n                        date = dataItem.dateX;\r\n                    }\r\n                    if (series.yAxis == _this) {\r\n                        date = dataItem.dateY;\r\n                    }\r\n                    if (!closestDate_1) {\r\n                        closestDate_1 = date;\r\n                    }\r\n                    else {\r\n                        if (Math.abs(closestDate_1.getTime() - actualTime_1) > Math.abs(date.getTime() - actualTime_1)) {\r\n                            closestDate_1 = date;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            if (closestDate_1) {\r\n                var closestTime_1 = closestDate_1.getTime();\r\n                closestDate_1 = $time.round(new Date(closestTime_1), this.baseInterval.timeUnit, this.baseInterval.count);\r\n                closestDate_1 = new Date(closestDate_1.getTime() + this.baseDuration / 2);\r\n                position = this.dateToPosition(closestDate_1);\r\n                var seriesPoints_1 = [];\r\n                this.series.each(function (series) {\r\n                    var dataItem = series.dataItemsByAxis.getKey(_this.uid).getKey(closestTime_1.toString());\r\n                    var point = series.showTooltipAtDataItem(dataItem);\r\n                    if (point) {\r\n                        seriesPoints_1.push({ series: series, point: point });\r\n                    }\r\n                });\r\n                this.chart.sortSeriesTooltips(seriesPoints_1);\r\n            }\r\n        }\r\n        _super.prototype.showTooltipAtPosition.call(this, position, true);\r\n    };\r\n    Object.defineProperty(DateAxis.prototype, \"snapTooltip\", {\r\n        /**\r\n         * @return {boolean} Should snap?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"snapTooltip\");\r\n        },\r\n        /**\r\n         * Should the nearest tooltip be shown if no data item is found on the\r\n         * current cursor position.\r\n         *\r\n         * @default true\r\n         * @param {boolean}  value  Should snap?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"snapTooltip\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DateAxis;\r\n}(ValueAxis));\r\nexport { DateAxis };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\r\n//# sourceMappingURL=DateAxis.js.map","/**\r\n * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxisBreak } from \"./ValueAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to define breaks for [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n *\r\n * @see {@link IDateAxisBreakEvents} for a list of available events\r\n * @see {@link IDateAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar DateAxisBreak = /** @class */ (function (_super) {\r\n    tslib_1.__extends(DateAxisBreak, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DateAxisBreak() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"DateAxisBreak\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DateAxisBreak.prototype, \"startDate\", {\r\n        /**\r\n         * @return {Date} Start date\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startDate\");\r\n        },\r\n        /**\r\n         * Starting date for the break.\r\n         *\r\n         * @param {Date} value Start date\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"startDate\", value)) {\r\n                this.startValue = value.getTime();\r\n                if (this.axis) {\r\n                    this.axis.invalidate();\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateAxisBreak.prototype, \"endDate\", {\r\n        /**\r\n         * @return {Date} End date\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endDate\");\r\n        },\r\n        /**\r\n         * Ending date for the break.\r\n         *\r\n         * @param {Date} value End date\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"endDate\", value)) {\r\n                this.endValue = value.getTime();\r\n                if (this.axis) {\r\n                    this.axis.invalidate();\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DateAxisBreak;\r\n}(ValueAxisBreak));\r\nexport { DateAxisBreak };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxisBreak\"] = DateAxisBreak;\r\n//# sourceMappingURL=DateAxisBreak.js.map","/**\r\n * DurationAxis module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem } from \"./ValueAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar DurationAxisDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(DurationAxisDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DurationAxisDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"DurationAxisDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return DurationAxisDataItem;\r\n}(ValueAxisDataItem));\r\nexport { DurationAxisDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar DurationAxis = /** @class */ (function (_super) {\r\n    tslib_1.__extends(DurationAxis, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DurationAxis() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * A base unit (granularity) of data.\r\n         *\r\n         * Used to indicate what are the base units of your data.\r\n         */\r\n        _this._baseUnit = \"second\";\r\n        _this.className = \"DurationAxis\";\r\n        _this.setPropertyValue(\"maxZoomFactor\", 1000000);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Formats the value according to axis' own [[DurationFormatter]].\r\n     *\r\n     * @param  {number}  value  Source value\r\n     * @return {string}         Formatted value\r\n     */\r\n    DurationAxis.prototype.formatLabel = function (value, format) {\r\n        return this.durationFormatter.format(value, format || this.axisDurationFormat);\r\n    };\r\n    /**\r\n     * Adjusts actual min and max scale values so that the axis starts and ends\r\n     * at \"nice\" values, unless `strictMinMax` is set.\r\n     *\r\n     * The `difference` can be something else than `max - min`, because of the\r\n     * axis breaks.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param  {number}      min        [description]\r\n     * @param  {number}      max        [description]\r\n     * @param  {number}      difference [description]\r\n     * @param  {number}      gridCount  [description]\r\n     * @param  {boolean}     strictMode [description]\r\n     * @return {IMinMaxStep}            [description]\r\n     */\r\n    DurationAxis.prototype.adjustMinMax = function (min, max, difference, gridCount, strictMode) {\r\n        var minMaxStep;\r\n        var timeUnit = this.baseUnit;\r\n        // we don't allow to go to smaller units, setting so to avoid invalidation\r\n        this.setPropertyValue(\"maxPrecision\", 0);\r\n        if (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\r\n            // will fail if 0\r\n            if (gridCount <= 1) {\r\n                gridCount = 1;\r\n            }\r\n            gridCount = Math.round(gridCount);\r\n            var initialMin = min;\r\n            var initialMax = max;\r\n            // in case min and max is the same, use max\r\n            if (difference === 0) {\r\n                difference = Math.abs(max);\r\n            }\r\n            var step = difference / gridCount;\r\n            var divisors = [60, 30, 20, 15, 10, 2, 1];\r\n            var realDivisor = 1;\r\n            if (timeUnit == \"hour\") {\r\n                divisors = [24, 12, 6, 4, 2, 1];\r\n            }\r\n            try {\r\n                for (var divisors_1 = tslib_1.__values(divisors), divisors_1_1 = divisors_1.next(); !divisors_1_1.done; divisors_1_1 = divisors_1.next()) {\r\n                    var divisor = divisors_1_1.value;\r\n                    if (difference / divisor > gridCount) {\r\n                        realDivisor = divisor;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (divisors_1_1 && !divisors_1_1.done && (_a = divisors_1.return)) _a.call(divisors_1);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n            var count = Math.ceil(((max - min) / realDivisor) / gridCount);\r\n            var exponent = Math.log(Math.abs(count)) * Math.LOG10E;\r\n            var power = Math.pow(10, Math.floor(exponent)) / 10;\r\n            var reducedCount = count / power;\r\n            // find closest to divisor\r\n            var closest = $math.closest(divisors, reducedCount);\r\n            count = closest * power;\r\n            step = realDivisor * count;\r\n            var unit = this.durationFormatter.getValueUnit(step, this.baseUnit);\r\n            min = Math.floor(min / step) * step;\r\n            max = Math.ceil(max / step) * step;\r\n            if (strictMode) {\r\n                min -= step;\r\n                if (min < 0 && initialMin >= 0) {\r\n                    min = 0;\r\n                }\r\n                max += step;\r\n                if (max > 0 && initialMax <= 0) {\r\n                    max = 0;\r\n                }\r\n            }\r\n            minMaxStep = { min: min, max: max, step: step };\r\n        }\r\n        else {\r\n            minMaxStep = _super.prototype.adjustMinMax.call(this, min, max, difference, gridCount, strictMode);\r\n        }\r\n        // choose duration formatter based on step\r\n        this.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\r\n        return minMaxStep;\r\n        var e_1, _a;\r\n    };\r\n    Object.defineProperty(DurationAxis.prototype, \"tooltipDurationFormat\", {\r\n        /**\r\n         * @return {string} Duration format for axis labels\r\n         */\r\n        get: function () {\r\n            return this._tooltipDurationFormat;\r\n        },\r\n        /**\r\n         * A special duration format to apply axis tooltips.\r\n         *\r\n         * Will use same format as for labels, if not set.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n         * @param {string}  value  Duration format for axis labels\r\n         */\r\n        set: function (value) {\r\n            this._tooltipDurationFormat = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns text to show in a axis tooltip, based on specific position within\r\n     * axis.\r\n     *\r\n     * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n     * chart, or explicitly for this Axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {number}  position  Position (px)\r\n     * @return {string}            Label (numeric value)\r\n     */\r\n    DurationAxis.prototype.getTooltipText = function (position) {\r\n        var value = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\r\n        return this.adapter.apply(\"getTooltipText\", this.formatLabel(value, this.tooltipDurationFormat));\r\n    };\r\n    Object.defineProperty(DurationAxis.prototype, \"baseUnit\", {\r\n        /**\r\n         * @return {TimeUnit} Base unit\r\n         */\r\n        get: function () {\r\n            return this._baseUnit;\r\n        },\r\n        /**\r\n         * A base unit (granularity) of data.\r\n         *\r\n         * Used to indicate what are the base units of your data.\r\n         *\r\n         * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n         * \"day\", \"week\", \"month\", \"year\".\r\n         *\r\n         * @default \"second\"\r\n         * @param {TimeUnit} timeUnit\r\n         */\r\n        set: function (timeUnit) {\r\n            if (this._baseUnit != timeUnit) {\r\n                this._baseUnit = timeUnit;\r\n                this.durationFormatter.baseUnit = timeUnit;\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all properties and related data from a different instance of Axis.\r\n     *\r\n     * @param {this} source Source Axis\r\n     */\r\n    DurationAxis.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.baseUnit = source.baseUnit;\r\n    };\r\n    return DurationAxis;\r\n}(ValueAxis));\r\nexport { DurationAxis };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\r\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;\r\n//# sourceMappingURL=DurationAxis.js.map","/**\r\n * A module defining functionality for axis grid elements.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Displays an axis grid line.\r\n *\r\n * @see {@link IGridEvents} for a list of available events\r\n * @see {@link IGridAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the grid, also with 3d charts we might need some additional elements\r\n * @important\r\n */\r\nvar Grid = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Grid, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Grid() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Grid\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.location = 0.5;\r\n        _this.isMeasured = false;\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.stroke = interfaceColors.getFor(\"grid\");\r\n        _this.pixelPerfect = true;\r\n        _this.strokeOpacity = 0.15;\r\n        _this.fill = color(); // \"none\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Grid.prototype, \"location\", {\r\n        /**\r\n         * @return {AxisItemLocation} Location (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"location\");\r\n        },\r\n        /**\r\n         * Location within axis cell to place grid line on.\r\n         *\r\n         * * 0 - start\r\n         * * 0.5 - middle\r\n         * * 1 - end\r\n         *\r\n         * @param {AxisItemLocation}  value  Location (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"location\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    Grid.prototype.setDisabled = function (value) {\r\n        var changed = _super.prototype.setDisabled.call(this, value);\r\n        if (this.axis) {\r\n            this.axis.invalidateDataItems();\r\n        }\r\n        return changed;\r\n    };\r\n    return Grid;\r\n}(Sprite));\r\nexport { Grid };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Grid\"] = Grid;\r\n//# sourceMappingURL=Grid.js.map","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Grid } from \"./Grid\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nvar GridCircular = /** @class */ (function (_super) {\r\n    tslib_1.__extends(GridCircular, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function GridCircular() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"GridCircular\";\r\n        _this.pixelPerfect = false;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(GridCircular.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return {number} Inner radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius of the circular grid. (absolute or relative)\r\n         *\r\n         * @param {number | Percent} value Inner radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GridCircular.prototype, \"radius\", {\r\n        /**\r\n         * @return {number} Outer radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Outer radius of the circular grid. (absolute or relative)\r\n         *\r\n         * @param {number | Percent} value Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return GridCircular;\r\n}(Grid));\r\nexport { GridCircular };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n//# sourceMappingURL=GridCircular.js.map","/**\r\n * Value Axis module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisDataItem } from \"./Axis\";\r\nimport { AxisRendererY } from \"./AxisRendererY\";\r\nimport { MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ValueAxisBreak } from \"./ValueAxisBreak\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[ValueAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar ValueAxisDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ValueAxisDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ValueAxisDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ValueAxisDataItem\";\r\n        _this.values.value = {};\r\n        _this.values.endValue = {};\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ValueAxisDataItem.prototype, \"value\", {\r\n        /**\r\n         * @return {number} Value\r\n         */\r\n        get: function () {\r\n            return this.values[\"value\"].value;\r\n        },\r\n        /**\r\n         * A data point's numeric value.\r\n         *\r\n         * @param {number}  value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"value\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxisDataItem.prototype, \"endValue\", {\r\n        /**\r\n         * @return {number} Value\r\n         */\r\n        get: function () {\r\n            return this.values[\"endValue\"].value;\r\n        },\r\n        /**\r\n         * Data point's numeric end value.\r\n         *\r\n         * @param {number}  value  End value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"endValue\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ValueAxisDataItem;\r\n}(AxisDataItem));\r\nexport { ValueAxisDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to create a value axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JSON\r\n * \"yAxes\": [{\r\n *   \"type\": \"ValueAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Monthly Sales\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IValueAxisEvents} for a list of available Events\r\n * @see {@link IValueAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar ValueAxis = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ValueAxis, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ValueAxis() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * [_stepDecimalPlaces description]\r\n         *\r\n         * @todo Description\r\n         * @type {number}\r\n         */\r\n        _this._stepDecimalPlaces = 0;\r\n        /**\r\n         * Base value for the axis.\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this._baseValue = 0;\r\n        /**\r\n         * Adjusted start in case we have breaks.\r\n         *\r\n         * @todo Description\r\n         * @type {number}\r\n         */\r\n        _this._adjustedStart = 0;\r\n        /**\r\n         * Adjusted end in case we have breaks.\r\n         *\r\n         * @todo Description\r\n         * @type {number}\r\n         */\r\n        _this._adjustedEnd = 1;\r\n        _this._extremesChanged = false;\r\n        /**\r\n         * As calculating totals is expensive operation and not often needed, we\r\n         * don't do it by default.\r\n         *\r\n         * In case you use `totalPercent` or `total` in your charts, this must be set\r\n         * to `true`.\r\n         *\r\n         * @default false\r\n         * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#100_stacks} For using `calculateTotals` for 100% stacked series.\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-strings/#Placeholders_for_numeric_values} For using `calculateTotals` in labels.\r\n         * @type {boolean}\r\n         */\r\n        _this.calculateTotals = false;\r\n        _this.className = \"ValueAxis\";\r\n        // Set field name\r\n        _this.axisFieldName = \"value\";\r\n        // Set defaults\r\n        _this.setPropertyValue(\"maxZoomFactor\", 1000);\r\n        _this.setPropertyValue(\"extraMin\", 0);\r\n        _this.setPropertyValue(\"extraMax\", 0);\r\n        _this.setPropertyValue(\"strictMinMax\", false);\r\n        _this.setPropertyValue(\"maxPrecision\", Number.MAX_VALUE);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Holds reference to a function that accepts a DataItem as parameter.\r\n     *\r\n     * It can either return a fill opacity for a fill, or manipulate data item\r\n     * directly, to create various highlighting scenarios.\r\n     *\r\n     * @todo type\r\n     */\r\n    ValueAxis.prototype.fillRule = function (dataItem) {\r\n        var value = dataItem.value;\r\n        var axis = dataItem.component;\r\n        if (!dataItem.axisFill.disabled) {\r\n            // rounding in left to solve floating point number\r\n            if ($math.round(value / axis.step / 2, 5) == Math.round(value / axis.step / 2)) {\r\n                dataItem.axisFill.__disabled = true;\r\n            }\r\n            else {\r\n                dataItem.axisFill.__disabled = false;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return {ValueAxisDataItem} Data Item\r\n     */\r\n    ValueAxis.prototype.createDataItem = function () {\r\n        return new ValueAxisDataItem();\r\n    };\r\n    /**\r\n     * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n     *\r\n     * @return {ValueAxisBreak} Axis break\r\n     */\r\n    ValueAxis.prototype.createAxisBreak = function () {\r\n        return new ValueAxisBreak();\r\n    };\r\n    /**\r\n     * [dataChangeUpdate description]\r\n     *\r\n     * This is a placeholder to override for extending classes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    ValueAxis.prototype.dataChangeUpdate = function () {\r\n        this._start = 0;\r\n        this._end = 1;\r\n        this._maxZoomed = this._maxDefined;\r\n        this._minZoomed = this._minDefined;\r\n        this._maxAdjusted = this._maxDefined;\r\n        this._minAdjusted = this._minDefined;\r\n    };\r\n    /**\r\n     * Processes data items of the related Series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ValueAxis.prototype.processSeriesDataItems = function () {\r\n        // @todo: add some boolean (maybe autodedect) if we need these calculations or not. this place uses a lot of cpu\r\n        if (this.calculateTotals) {\r\n            var series = this.series.getIndex(0);\r\n            var startIndex = series.startIndex;\r\n            if (series.dataItems.length > 0) {\r\n                if (startIndex > 0) {\r\n                    startIndex--;\r\n                }\r\n                var endIndex = series.endIndex;\r\n                if (endIndex < series.dataItems.length) {\r\n                    endIndex++;\r\n                }\r\n                // This has to be `var` in order to avoid garbage collection\r\n                for (var i = startIndex; i < endIndex; ++i) {\r\n                    // This has to be `var` in order to avoid garbage collection\r\n                    var total = {};\r\n                    $iter.each(this.series.iterator(), function (series) {\r\n                        var dataItem = series.dataItems.getIndex(i);\r\n                        if (dataItem) {\r\n                            $object.each(dataItem.values, function (key) {\r\n                                var value = dataItem.values[key].workingValue; // can not use getWorkingValue here!\r\n                                if ($type.isNumber(value)) {\r\n                                    if (!$type.isNumber(total[key])) {\r\n                                        total[key] = value;\r\n                                    }\r\n                                    else {\r\n                                        total[key] += value;\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                    $iter.each(this.series.iterator(), function (series) {\r\n                        var dataItem = series.dataItems.getIndex(i);\r\n                        if (dataItem) {\r\n                            $object.each(dataItem.values, function (key) {\r\n                                var value = dataItem.values[key].workingValue; // can not use getWorkingValue here!\r\n                                if ($type.isNumber(value)) {\r\n                                    dataItem.setCalculatedValue(key, total[key], \"total\");\r\n                                    dataItem.setCalculatedValue(key, 100 * value / total[key], \"totalPercent\");\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Validates the whole axis. Causes it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     */\r\n    ValueAxis.prototype.validate = function () {\r\n        if (this.axisLength <= 0) {\r\n            return;\r\n        }\r\n        _super.prototype.validate.call(this);\r\n        this.getMinMax();\r\n        this.fixAxisBreaks();\r\n        this.calculateZoom();\r\n        this.validateAxisElements();\r\n        this.validateAxisRanges();\r\n        this.validateBreaks();\r\n        this.hideUnusedDataItems();\r\n        this.renderer.invalidateLayout();\r\n        // hide too close\r\n        //this.hideTooCloseDataItems();\r\n    };\r\n    /**\r\n     * Calculates all positions, related to axis as per current zoom.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ValueAxis.prototype.calculateZoom = function () {\r\n        if ($type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n            var min = this.positionToValue(this.start);\r\n            var max = this.positionToValue(this.end);\r\n            var differece = this.adjustDifference(min, max);\r\n            var minMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\r\n            min = minMaxStep.min;\r\n            max = minMaxStep.max;\r\n            this._adjustedStart = $math.round((min - this.min) / (this.max - this.min), 5);\r\n            this._adjustedEnd = $math.round((max - this.min) / (this.max - this.min), 5);\r\n            this._step = minMaxStep.step;\r\n            this._stepDecimalPlaces = $utils.decimalPlaces(this._step);\r\n            if (this._minZoomed != min || this._maxZoomed != max) {\r\n                this._minZoomed = min;\r\n                this._maxZoomed = max;\r\n                this.dispatchImmediately(\"selectionextremeschanged\");\r\n            }\r\n        }\r\n        else {\r\n            this._adjustedStart = this.start;\r\n            this._adjustedEnd = this.end;\r\n        }\r\n    };\r\n    /**\r\n     * Validates Axis elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    ValueAxis.prototype.validateAxisElements = function () {\r\n        var _this = this;\r\n        if ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n            // first regular items\r\n            var value_1 = this.minZoomed - this._step * 2;\r\n            if (!this.logarithmic) {\r\n                value_1 = Math.floor(value_1 / this._step) * this._step;\r\n            }\r\n            else {\r\n                var differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\r\n                if (differencePower > 1) {\r\n                    value_1 = Math.pow(10, Math.log(this.min) * Math.LOG10E);\r\n                }\r\n                else {\r\n                    value_1 = Math.floor(this.minZoomed / this._step) * this._step;\r\n                }\r\n            }\r\n            var maxZoomed = this._maxZoomed + this._step;\r\n            this.resetIterators();\r\n            var dataItemsIterator_1 = this._dataItemsIterator;\r\n            var i = 0;\r\n            while (value_1 <= maxZoomed) {\r\n                var axisBreak = this.isInBreak(value_1);\r\n                if (!axisBreak) {\r\n                    var dataItem = dataItemsIterator_1.find(function (x) { return x.value === value_1; });\r\n                    //this.processDataItem(dataItem);\r\n                    this.appendDataItem(dataItem);\r\n                    dataItem.axisBreak = undefined;\r\n                    if (dataItem.value != value_1) {\r\n                        dataItem.value = value_1;\r\n                        dataItem.text = this.formatLabel(value_1);\r\n                        if (dataItem.label && dataItem.label.invalid) {\r\n                            dataItem.label.validate();\r\n                        }\r\n                        if (dataItem.value > this.min && dataItem.value < this.max) {\r\n                            if (dataItem.label && (dataItem.label.measuredWidth > this.ghostLabel.measuredWidth || dataItem.label.measuredHeight > this.ghostLabel.measuredHeight)) {\r\n                                this.ghostLabel.text = dataItem.label.text;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.validateDataElement(dataItem);\r\n                }\r\n                i++;\r\n                if (!this.logarithmic) {\r\n                    value_1 += this._step;\r\n                }\r\n                else {\r\n                    var differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\r\n                    if (differencePower > 1) {\r\n                        value_1 = Math.pow(10, Math.log(this.min) * Math.LOG10E + i);\r\n                    }\r\n                    else {\r\n                        value_1 += this._step;\r\n                    }\r\n                }\r\n            }\r\n            var axisBreaks = this.axisBreaks;\r\n            // breaks later\r\n            var renderer_1 = this.renderer;\r\n            $iter.each(axisBreaks.iterator(), function (axisBreak) {\r\n                if (axisBreak.breakSize > 0) {\r\n                    // only add grid if gap is bigger then minGridDistance\r\n                    if ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer_1.minGridDistance) {\r\n                        var breakValue_1 = axisBreak.adjustedMin;\r\n                        while (breakValue_1 <= axisBreak.adjustedMax) {\r\n                            if (breakValue_1 >= axisBreak.adjustedStartValue && breakValue_1 <= axisBreak.adjustedEndValue) {\r\n                                var dataItem = dataItemsIterator_1.find(function (x) { return x.value === breakValue_1; });\r\n                                //this.processDataItem(dataItem);\r\n                                _this.appendDataItem(dataItem);\r\n                                dataItem.axisBreak = axisBreak;\r\n                                if (dataItem.value != breakValue_1) {\r\n                                    dataItem.value = breakValue_1;\r\n                                    dataItem.text = _this.formatLabel(breakValue_1);\r\n                                    if (dataItem.label && dataItem.label.invalid) {\r\n                                        dataItem.label.validate();\r\n                                    }\r\n                                }\r\n                                _this.validateDataElement(dataItem);\r\n                            }\r\n                            breakValue_1 += axisBreak.adjustedStep;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Validates axis data item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param {ValueAxisDataItem}  dataItem  Data item\r\n     */\r\n    ValueAxis.prototype.validateDataElement = function (dataItem) {\r\n        _super.prototype.validateDataElement.call(this, dataItem);\r\n        //dataItem.__disabled = false;\r\n        var renderer = this.renderer;\r\n        var value = dataItem.value;\r\n        var endValue = dataItem.endValue;\r\n        var position = this.valueToPosition(value);\r\n        dataItem.position = position;\r\n        var endPosition = position;\r\n        var fillEndPosition = this.valueToPosition(value + this._step);\r\n        if ($type.isNumber(endValue)) {\r\n            endPosition = this.valueToPosition(endValue);\r\n            fillEndPosition = endPosition;\r\n        }\r\n        // this point is needed to calculate distance to satisfy minGridDistance\r\n        dataItem.point = renderer.positionToPoint(position);\r\n        var tick = dataItem.tick;\r\n        if (tick && !tick.disabled) {\r\n            renderer.updateTickElement(tick, position, endPosition);\r\n        }\r\n        var grid = dataItem.grid;\r\n        if (grid && !grid.disabled) {\r\n            renderer.updateGridElement(grid, position, endPosition);\r\n        }\r\n        var label = dataItem.label;\r\n        if (label && !label.disabled) {\r\n            renderer.updateLabelElement(label, position, endPosition);\r\n        }\r\n        var fill = dataItem.axisFill;\r\n        if (fill && !fill.disabled) {\r\n            renderer.updateFillElement(fill, position, fillEndPosition);\r\n            if (!dataItem.isRange) {\r\n                this.fillRule(dataItem);\r\n            }\r\n        }\r\n        var mask = dataItem.mask;\r\n        if (mask) {\r\n            renderer.updateFillElement(mask, position, fillEndPosition);\r\n        }\r\n    };\r\n    /**\r\n     * Formats the value according to axis' own [[NumberFormatter]].\r\n     *\r\n     * @param  {number}  value  Source value\r\n     * @return {string}         Formatted value\r\n     */\r\n    ValueAxis.prototype.formatLabel = function (value) {\r\n        return this.numberFormatter.format(value);\r\n    };\r\n    Object.defineProperty(ValueAxis.prototype, \"basePoint\", {\r\n        /**\r\n         * Coordinates of the actual axis start.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {IPoint} Base point\r\n         */\r\n        get: function () {\r\n            var baseValue = this._baseValue;\r\n            var position = this.valueToPosition(baseValue);\r\n            var basePoint = this.renderer.positionToPoint(position);\r\n            return basePoint;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"baseValue\", {\r\n        /**\r\n         * @return {number} base value\r\n         */\r\n        get: function () {\r\n            if (this.logarithmic) {\r\n                return this.min;\r\n            }\r\n            else {\r\n                return this._baseValue;\r\n            }\r\n        },\r\n        /**\r\n         * A base value.\r\n         *\r\n         * This is a threshold value that will divide \"positive\" and \"negative\"\r\n         * value ranges.\r\n         *\r\n         * Other scale-related functionality also depend on base value. E.g. stacks,\r\n         * value-dependent coloring, etc.\r\n         *\r\n         * @param {number} value Base value\r\n         */\r\n        set: function (value) {\r\n            this._baseValue = value;\r\n            this.invalidateLayout();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts a numeric value to relative position on axis\r\n     *\r\n     * An alias to `valueToPosition()`.\r\n     *\r\n     * @param  {number}  value  Value\r\n     * @return {number}         Position\r\n     */\r\n    ValueAxis.prototype.anyToPosition = function (value) {\r\n        return this.valueToPosition(value);\r\n    };\r\n    /**\r\n     * Converts a numeric value to orientation point (x, y, angle) on axis\r\n     *\r\n     * @param  {number}  value  Value\r\n     * @return {IOrientationPoint}  Orientation point\r\n     */\r\n    ValueAxis.prototype.valueToPoint = function (value) {\r\n        var position = this.valueToPosition(value);\r\n        var point = this.renderer.positionToPoint(position);\r\n        var angle = this.renderer.positionToAngle(position);\r\n        return { x: point.x, y: point.y, angle: angle };\r\n    };\r\n    /**\r\n     * Converts a numeric value to orientation (x, y, angle) point on axis\r\n     *\r\n     * @param  {number}  value  Value\r\n     * @return {IOrientationPoint}  Orientation point\r\n     */\r\n    ValueAxis.prototype.anyToPoint = function (value) {\r\n        return this.valueToPoint(value);\r\n    };\r\n    /**\r\n     * Converts a numeric value to relative position on axis.\r\n     *\r\n     * @param  {number}  value  Value\r\n     * @return {number}  relative position\r\n     */\r\n    ValueAxis.prototype.valueToPosition = function (value) {\r\n        if ($type.isNumber(value)) {\r\n            // todo: think if possible to take previous value and do not go through all previous breaks\r\n            var min_1 = this.min;\r\n            var max_1 = this.max;\r\n            if ($type.isNumber(min_1) && $type.isNumber(max_1)) {\r\n                var difference = this._difference;\r\n                var axisBreaks = this.axisBreaks;\r\n                if (axisBreaks.length > 0) {\r\n                    $iter.eachContinue(axisBreaks.iterator(), function (axisBreak) {\r\n                        var startValue = axisBreak.adjustedStartValue;\r\n                        var endValue = axisBreak.adjustedEndValue;\r\n                        if ($type.isNumber(startValue) && $type.isNumber(endValue)) {\r\n                            if (value < startValue) {\r\n                                return false;\r\n                            }\r\n                            if ($math.intersect({ start: startValue, end: endValue }, { start: min_1, end: max_1 })) { // todo: check this once and set some flag in axisBreak\r\n                                startValue = Math.max(startValue, min_1);\r\n                                endValue = Math.min(endValue, max_1);\r\n                                var breakSize = axisBreak.breakSize;\r\n                                // value to the right of break end\r\n                                if (value > endValue) {\r\n                                    min_1 += (endValue - startValue) * (1 - breakSize); // todo: maybe this can be done differently?\r\n                                }\r\n                                // value to the left of break start\r\n                                else if (value < startValue) {\r\n                                }\r\n                                // value within break\r\n                                else {\r\n                                    value = startValue + (value - startValue) * breakSize;\r\n                                }\r\n                            }\r\n                        }\r\n                        return true;\r\n                    });\r\n                }\r\n                var position = void 0;\r\n                if (!this.logarithmic) {\r\n                    position = (value - min_1) / difference;\r\n                }\r\n                else {\r\n                    position = (Math.log(value) * Math.LOG10E - Math.log(this.min) * Math.LOG10E) / ((Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E));\r\n                }\r\n                //position = $math.round(position, 10);\r\n                return position;\r\n            }\r\n        }\r\n        return 0;\r\n    };\r\n    /**\r\n     * Converts an relative position to a corresponding value within\r\n     * axis' scale.\r\n     *\r\n     * @param  {number}  position  Position (px)\r\n     * @return {number}            Value\r\n     */\r\n    ValueAxis.prototype.positionToValue = function (position) {\r\n        position = $math.round(position, 10);\r\n        var strPosition = position.toString();\r\n        var min = this.min;\r\n        var max = this.max;\r\n        if ($type.isNumber(min) && $type.isNumber(max)) {\r\n            var difference_1 = max - min; //no need to adjust!\r\n            var axisBreaks = this.axisBreaks;\r\n            var value_2 = null;\r\n            // in case we have some axis breaks\r\n            if (axisBreaks.length > 0) {\r\n                $iter.eachContinue(axisBreaks.iterator(), function (axisBreak) {\r\n                    var breakStartPosition = axisBreak.startPosition;\r\n                    var breakEndPosition = axisBreak.endPosition;\r\n                    var breakStartValue = axisBreak.adjustedStartValue;\r\n                    var breakEndValue = axisBreak.adjustedEndValue;\r\n                    if ($type.isNumber(breakStartValue) && $type.isNumber(breakEndValue)) {\r\n                        if (breakStartValue > max) {\r\n                            return false;\r\n                        }\r\n                        if ($math.intersect({ start: breakStartValue, end: breakEndValue }, { start: min, end: max })) {\r\n                            breakStartValue = $math.max(breakStartValue, min);\r\n                            breakEndValue = $math.min(breakEndValue, max);\r\n                            var breakSize = axisBreak.breakSize;\r\n                            difference_1 -= (breakEndValue - breakStartValue) * (1 - breakSize);\r\n                            // position to the right of break end\r\n                            if (position > breakEndPosition) {\r\n                                min += (breakEndValue - breakStartValue) * (1 - breakSize);\r\n                            }\r\n                            // position to the left of break start\r\n                            else if (position < breakStartPosition) {\r\n                            }\r\n                            // value within break\r\n                            else {\r\n                                var breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n                                value_2 = breakStartValue + breakPosition * (breakEndValue - breakStartValue);\r\n                                return false;\r\n                            }\r\n                        }\r\n                        return true;\r\n                    }\r\n                });\r\n            }\r\n            if (!$type.isNumber(value_2)) {\r\n                value_2 = position * difference_1 + min;\r\n            }\r\n            return value_2;\r\n        }\r\n        //}\r\n    };\r\n    /**\r\n     * Converts an X coordinate to a relative value in axis' scale.\r\n     *\r\n     * @param  {number}  x  X (px)\r\n     * @return {number}     Value\r\n     */\r\n    ValueAxis.prototype.xToValue = function (x) {\r\n        return this.positionToValue(this.pointToPosition({ x: x, y: 0 }));\r\n    };\r\n    /**\r\n     * Converts an Y coordinate to a relative value in axis' scale.\r\n     *\r\n     * @param  {number}  y  Y (px)\r\n     * @return {number}     Value\r\n     */\r\n    ValueAxis.prototype.yToValue = function (y) {\r\n        return this.positionToValue(this.pointToPosition({ x: 0, y: y }));\r\n    };\r\n    /**\r\n     * Converts pixel coordinates to a relative position. (0-1)\r\n     *\r\n     * @param {IPoint}   point  Coorinates (px)\r\n     * @return {number}         Position (0-1)\r\n     */\r\n    ValueAxis.prototype.pointToPosition = function (point) {\r\n        if (this.renderer instanceof AxisRendererY) {\r\n            return 1 - this.renderer.pointToPosition(point);\r\n        }\r\n        else {\r\n            return this.renderer.pointToPosition(point);\r\n        }\r\n    };\r\n    /**\r\n     * Calculates smallest and biggest value for the axis scale.\r\n     *\r\n     * @todo Description (review)\r\n     */\r\n    ValueAxis.prototype.getMinMax = function () {\r\n        var _this = this;\r\n        this.updateGridCount();\r\n        var min = Number.POSITIVE_INFINITY;\r\n        var max = Number.NEGATIVE_INFINITY;\r\n        // only if min and max are not set from outside, we go through min and max influencers\r\n        if (!$type.isNumber(this._minDefined) || !$type.isNumber(this._maxDefined)) {\r\n            $iter.each(this.series.iterator(), function (series) {\r\n                if (!series.ignoreMinMax) {\r\n                    // check min\r\n                    var seriesMin = series.min(_this);\r\n                    if ($type.isNumber(seriesMin) && (seriesMin < min)) {\r\n                        min = seriesMin;\r\n                    }\r\n                    // check max\r\n                    var seriesMax = series.max(_this);\r\n                    if ($type.isNumber(seriesMax) && (seriesMax > max)) {\r\n                        max = seriesMax;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (this.logarithmic) {\r\n            if (min <= 0) {\r\n                throw Error(\"Logarithmic value axis can not have vales <= 0.\");\r\n            }\r\n        }\r\n        if (min == 0 && max == 0) {\r\n            max = 0.9;\r\n            min = -0.9;\r\n        }\r\n        // if defined from outside\r\n        if ($type.isNumber(this._minDefined)) {\r\n            min = this._minDefined;\r\n        }\r\n        if ($type.isNumber(this._maxDefined)) {\r\n            max = this._maxDefined;\r\n        }\r\n        if (!$type.isNumber(min) || !$type.isNumber(max)) {\r\n            return;\r\n        }\r\n        this._minReal = min;\r\n        this._maxReal = max;\r\n        if (min == Number.POSITIVE_INFINITY) {\r\n            min = undefined;\r\n        }\r\n        if (max == Number.NEGATIVE_INFINITY) {\r\n            max = undefined;\r\n        }\r\n        var dif = this.adjustDifference(min, max); // previously it was max-min, but not worked well\r\n        min = this.fixMin(min);\r\n        max = this.fixMax(max);\r\n        // this happens if starLocation and endLocation are 0.5 and DateAxis has only one date\r\n        if (min == max) {\r\n            min -= 1;\r\n            max += 1;\r\n        }\r\n        min -= (max - min) * this.extraMin;\r\n        max += (max - min) * this.extraMax;\r\n        var minMaxStep = this.adjustMinMax(min, max, dif, this._gridCount, this.strictMinMax);\r\n        min = minMaxStep.min;\r\n        max = minMaxStep.max;\r\n        dif = max - min; //new\r\n        // do it for the second time (importat!)\r\n        minMaxStep = this.adjustMinMax(min, max, max - min, this._gridCount, true);\r\n        min = minMaxStep.min;\r\n        max = minMaxStep.max;\r\n        // return min max if strict\r\n        if (this.strictMinMax) {\r\n            if ($type.isNumber(this._minDefined)) {\r\n                min = this._minDefined;\r\n            }\r\n            if ($type.isNumber(this._maxDefined)) {\r\n                max = this._maxDefined;\r\n            }\r\n        }\r\n        // checking isNumber is good when all series are hidden\r\n        if ((this._minAdjusted != min || this._maxAdjusted != max) && $type.isNumber(min) && $type.isNumber(max)) {\r\n            var animation = this._minMaxAnimation;\r\n            if (this._extremesChanged && $type.isNumber(this._minAdjusted) && $type.isNumber(this._maxAdjusted) && this.inited) {\r\n                if ((animation && !animation.isFinished()) && this._finalMax == max && this._finalMin == min) {\r\n                    return;\r\n                }\r\n                else {\r\n                    this._finalMin = min;\r\n                    this._finalMax = max;\r\n                    animation = this.animate([{ property: \"_minAdjusted\", from: this._minAdjusted, to: min }, { property: \"_maxAdjusted\", from: this._maxAdjusted, to: max }], this.rangeChangeDuration);\r\n                    animation.events.on(\"animationprogress\", this.validateDataItems, this);\r\n                    animation.events.on(\"animationended\", function () {\r\n                        _this.validateDataItems();\r\n                        _this.handleSelectionExtremesChange();\r\n                    });\r\n                    this._minMaxAnimation = animation;\r\n                    this.validateDataItems();\r\n                    this.handleSelectionExtremesChange();\r\n                }\r\n            }\r\n            else {\r\n                if ((animation && !animation.isFinished()) && this._finalMax == max && this._finalMin == min) {\r\n                    return;\r\n                }\r\n                else {\r\n                    this._minAdjusted = min;\r\n                    this._maxAdjusted = max;\r\n                    this._finalMin = min;\r\n                    this._finalMax = max;\r\n                    this.invalidateDataItems();\r\n                    this.dispatchImmediately(\"extremeschanged\");\r\n                }\r\n            }\r\n        }\r\n        this._extremesChanged = false;\r\n        this._difference = this.adjustDifference(min, max);\r\n    };\r\n    /**\r\n     * Adjusts the minimum value.\r\n     *\r\n     * This is a placeholder method for extending classes to override.\r\n     *\r\n     * For numeric values this does nothing, however for more complex types, like\r\n     * dates, it may be necessary to adjust.\r\n     *\r\n     * @param  {number}  value  Value\r\n     * @return {number}         Adjusted value\r\n     */\r\n    ValueAxis.prototype.fixMin = function (value) {\r\n        return value;\r\n    };\r\n    /**\r\n     * Adjusts the maximum value.\r\n     *\r\n     * This is a placeholder method for extending classes to override.\r\n     *\r\n     * For numeric values this does nothing, however for more complex types, like\r\n     * dates, it may be necessary to adjust.\r\n     *\r\n     * @param  {number}  value  Value\r\n     * @return {number}         Adjusted value\r\n     */\r\n    ValueAxis.prototype.fixMax = function (value) {\r\n        return value;\r\n    };\r\n    /**\r\n     * Adjusts actual min and max scale values so that the axis starts and ends\r\n     * at \"nice\" values, unless `strictMinMax` is set.\r\n     *\r\n     * The `difference` can be something else than `max - min`, because of the\r\n     * axis breaks.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param  {number}      min        [description]\r\n     * @param  {number}      max        [description]\r\n     * @param  {number}      difference [description]\r\n     * @param  {number}      gridCount  [description]\r\n     * @param  {boolean}     strictMode [description]\r\n     * @return {IMinMaxStep}            [description]\r\n     */\r\n    ValueAxis.prototype.adjustMinMax = function (min, max, difference, gridCount, strictMode) {\r\n        // will fail if 0\r\n        if (gridCount <= 1) {\r\n            gridCount = 1;\r\n        }\r\n        gridCount = Math.round(gridCount);\r\n        var initialMin = min;\r\n        var initialMax = max;\r\n        // in case min and max is the same, use max\r\n        if (difference === 0) {\r\n            difference = Math.abs(max);\r\n        }\r\n        // the number by which we need to raise 10 to get difference\r\n        var exponent = Math.log(Math.abs(difference)) * Math.LOG10E;\r\n        // here we find a number which is power of 10 and has the same count of numbers as difference has\r\n        var power = Math.pow(10, Math.floor(exponent));\r\n        // reduce this number by 10 times\r\n        power = power / 10;\r\n        var extra = power;\r\n        if (strictMode) {\r\n            extra = 0;\r\n        }\r\n        if (!this.logarithmic) {\r\n            // round down min\r\n            if (strictMode) {\r\n                min = Math.floor(min / power) * power;\r\n                // round up max\r\n                max = Math.ceil(max / power) * power;\r\n            }\r\n            else {\r\n                min = Math.ceil(min / power) * power - extra;\r\n                // round up max\r\n                max = Math.floor(max / power) * power + extra;\r\n            }\r\n            // don't let min go below 0 if real min is >= 0\r\n            if (min < 0 && initialMin >= 0) {\r\n                min = 0;\r\n            }\r\n            // don't let max go above 0 if real max is <= 0\r\n            if (max > 0 && initialMax <= 0) {\r\n                max = 0;\r\n            }\r\n        }\r\n        else {\r\n            if (min <= 0) {\r\n                //throw Error(\"Logarithmic value axis can not have vales <= 0.\");\r\n                min = this.baseValue;\r\n            }\r\n            // @todo: think of a better way or to restrict zooming when no series are selected\r\n            if (min == Infinity) {\r\n                min = 1;\r\n            }\r\n            if (max == -Infinity) {\r\n                max = 10;\r\n            }\r\n            min = Math.pow(10, Math.floor(Math.log(Math.abs(min)) * Math.LOG10E));\r\n            max = Math.pow(10, Math.ceil(Math.log(Math.abs(max)) * Math.LOG10E));\r\n        }\r\n        // repeat diff, exponent and power again with rounded values\r\n        //difference = this.adjustDifference(min, max);\r\n        /*\r\n\r\n                if(min > initialMin){\r\n                    min = initialMin;\r\n                }\r\n\r\n                if(max < initialMax){\r\n                    max = initialMax;\r\n                }\r\n        */\r\n        exponent = Math.log(Math.abs(difference)) * Math.LOG10E;\r\n        power = Math.pow(10, Math.floor(exponent));\r\n        power = power / 10;\r\n        // approximate difference between two grid lines\r\n        var step = Math.ceil((difference / gridCount) / power) * power;\r\n        var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));\r\n        // TODO: in v3 I had fixStepE here, ommiting it for a while, need to think about other solution\r\n        // the step should divide by  2, 5, and 10.\r\n        var stepDivisor = Math.ceil(step / stepPower); // number 0 - 10\r\n        if (stepDivisor > 5) {\r\n            stepDivisor = 10;\r\n        }\r\n        else if (stepDivisor <= 5 && stepDivisor > 2) {\r\n            stepDivisor = 5;\r\n        }\r\n        // now get real step\r\n        step = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;\r\n        if (this.maxPrecision < Number.MAX_VALUE && step != $math.ceil(step, this.maxPrecision)) {\r\n            step = $math.ceil(step, this.maxPrecision);\r\n        }\r\n        var decCount = 0;\r\n        // in case numbers are smaller than 1\r\n        if (stepPower < 1) {\r\n            // exponent is less then 1 too. Count decimals of exponent\r\n            decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1;\r\n            // round step\r\n            step = $math.round(step, decCount);\r\n        }\r\n        if (!this.logarithmic) {\r\n            // final min and max\r\n            var minCount = Math.floor(min / step);\r\n            min = $math.round(step * minCount, decCount);\r\n            var maxCount = void 0;\r\n            if (!strictMode) {\r\n                maxCount = Math.ceil(max / step);\r\n            }\r\n            else {\r\n                maxCount = Math.floor(max / step);\r\n            }\r\n            if (maxCount == minCount) {\r\n                maxCount++;\r\n            }\r\n            max = $math.round(step * maxCount, decCount);\r\n            if (max < initialMax) {\r\n                max = max + step;\r\n            }\r\n            if (min > initialMin) {\r\n                min = min - step;\r\n            }\r\n        }\r\n        return { min: min, max: max, step: step };\r\n    };\r\n    Object.defineProperty(ValueAxis.prototype, \"min\", {\r\n        /**\r\n         * @return {number} Min value\r\n         */\r\n        get: function () {\r\n            var min = this._minAdjusted;\r\n            if (!$type.isNumber(min)) {\r\n                min = this._minDefined;\r\n            }\r\n            return min;\r\n        },\r\n        /**\r\n         * A minimum value for the axis scale.\r\n         *\r\n         * This value might be auto-adjusted by the Axis in order to accomodate the\r\n         * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n         *\r\n         * The above might be overridden by `strictMinMax` which will force exact\r\n         * user-defined min and max values to be used for scale.\r\n         *\r\n         * @param {number}  value  Min value\r\n         */\r\n        set: function (value) {\r\n            if (this._minDefined != value) {\r\n                this._minDefined = value;\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"extraMin\", {\r\n        /**\r\n         * @return {number}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"extraMin\");\r\n        },\r\n        /**\r\n         * Allows relatively adjusting minimum value of the axis' scale.\r\n         *\r\n         * The value is relative to the actual range of values currently displayed\r\n         * on the axis.\r\n         *\r\n         * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n         * from 100 to 200, we will now have axis displaying from 50 to 200 because\r\n         * we asked to expand minimum value by 50% (0.5).\r\n         *\r\n         * @param {number}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"extraMin\", value)) {\r\n                this.invalidateDataItems();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"extraMax\", {\r\n        /**\r\n         * @return {number} Min multiplier\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"extraMax\");\r\n        },\r\n        /**\r\n         * Allows relatively adjusting maximum value of the axis' scale.\r\n         *\r\n         * The value is relative to the actual range of values currently displayed\r\n         * on the axis.\r\n         *\r\n         * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n         * from 100 to 200, we will now have axis displaying from 100 to 250 because\r\n         * we asked to expand maximum value by 50% (0.5).\r\n         *\r\n         * @param {number}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"extraMax\", value)) {\r\n                this.invalidateDataItems();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"step\", {\r\n        /**\r\n         * Current calculated delta in values between two adjacent grid lines (step).\r\n         *\r\n         * This is a read-only value and cannot be used to set actual step.\r\n         *\r\n         * @readonly\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/#Setting_the_density_of_the_the_grid_labels} For more information about modifying density of labels\r\n         * @return {number} [description]\r\n         */\r\n        get: function () {\r\n            return this._step;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"max\", {\r\n        /**\r\n         * @return {number} Max value\r\n         */\r\n        get: function () {\r\n            var max = this._maxAdjusted;\r\n            if (!$type.isNumber(max)) {\r\n                max = this._maxDefined;\r\n            }\r\n            return max;\r\n        },\r\n        /**\r\n         * A maximum value for the axis scale.\r\n         *\r\n         * This value might be auto-adjusted by the Axis in order to accomodate the\r\n         * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n         *\r\n         * The above might be overridden by `strictMinMax` which will force exact\r\n         * user-defined min and max values to be used for scale.\r\n         *\r\n         * @param {number}  value  Max value\r\n         */\r\n        set: function (value) {\r\n            if (this._maxDefined != value) {\r\n                this._maxDefined = value;\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Used for the Series to register itself as the user of this Axis.\r\n     *\r\n     * This will also decorate both the Series and Axis with event handlers, used\r\n     * to redraw on Axis position/zoom change.\r\n     *\r\n     * A disposer for those events is returned, so that they can be disposed\r\n     * together with Series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {XYSeries}   series  Series\r\n     * @return {IDisposer}          Disposer for events\r\n     */\r\n    ValueAxis.prototype.registerSeries = function (series) {\r\n        return new MultiDisposer([\r\n            _super.prototype.registerSeries.call(this, series),\r\n            series.events.on(\"extremeschanged\", this.handleExtremesChange, this, false),\r\n            series.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false),\r\n            this.events.on(\"extremeschanged\", series.invalidate, series, false)\r\n        ]);\r\n    };\r\n    /**\r\n     * Perform tasks after Axis zoom.\r\n     */\r\n    ValueAxis.prototype.handleSelectionExtremesChange = function () {\r\n        var _this = this;\r\n        var selectionMin;\r\n        var selectionMax;\r\n        var allHidden = true;\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            if (!series.ignoreMinMax) {\r\n                if (series.visible && !series.isHiding) {\r\n                    allHidden = false;\r\n                }\r\n                var seriesSelectionMin = series.selectionMin(_this);\r\n                var seriesSelectionMax = series.selectionMax(_this);\r\n                if ($type.isNumber(seriesSelectionMin)) {\r\n                    if (!$type.isNumber(selectionMin) || (seriesSelectionMin < selectionMin)) {\r\n                        selectionMin = seriesSelectionMin;\r\n                    }\r\n                }\r\n                // check max\r\n                if ($type.isNumber(seriesSelectionMax)) {\r\n                    if (!$type.isNumber(selectionMax) || (seriesSelectionMax > selectionMax)) {\r\n                        selectionMax = seriesSelectionMax;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            if (!series.appeared) {\r\n                allHidden = true;\r\n            }\r\n        });\r\n        if ($type.isNumber(this._minDefined)) {\r\n            if (this.strictMinMax) {\r\n                selectionMin = this._minDefined;\r\n            }\r\n            else {\r\n                selectionMin = this.min;\r\n            }\r\n        }\r\n        if ($type.isNumber(this._maxDefined)) {\r\n            if (this.strictMinMax) {\r\n                selectionMax = this._maxDefined;\r\n            }\r\n            else {\r\n                selectionMax = this.max;\r\n            }\r\n        }\r\n        if (selectionMin == selectionMax) {\r\n            selectionMin -= 1;\r\n            selectionMax += 1;\r\n        }\r\n        var dif = this.adjustDifference(selectionMin, selectionMax);\r\n        var minMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount);\r\n        selectionMin = minMaxStep.min;\r\n        selectionMax = minMaxStep.max;\r\n        selectionMin -= (selectionMax - selectionMin) * this.extraMin;\r\n        selectionMax += (selectionMax - selectionMin) * this.extraMax;\r\n        selectionMin = $math.fitToRange(selectionMin, this.min, this.max);\r\n        selectionMax = $math.fitToRange(selectionMax, this.min, this.max);\r\n        // do it for the second time !important\r\n        dif = this.adjustDifference(selectionMin, selectionMax);\r\n        minMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount, true);\r\n        selectionMin = minMaxStep.min;\r\n        selectionMax = minMaxStep.max;\r\n        if (this.strictMinMax) {\r\n            selectionMin = $math.max(selectionMin, this._minDefined);\r\n            selectionMax = $math.min(selectionMax, this._maxDefined);\r\n        }\r\n        var start = this.valueToPosition(selectionMin);\r\n        var end = this.valueToPosition(selectionMax);\r\n        // in case all series are hidden or hiding, full zoomout\r\n        if (allHidden) {\r\n            start = 0;\r\n            end = 1;\r\n        }\r\n        this.zoom({ start: start, end: end }, false, false, 0);\r\n    };\r\n    Object.defineProperty(ValueAxis.prototype, \"strictMinMax\", {\r\n        /**\r\n         * @return {boolean} Use exact values?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"strictMinMax\");\r\n        },\r\n        /**\r\n         * Indicates whether to blindly use exact `min` and `max` values set by user\r\n         * when generating Axis scale.\r\n         *\r\n         * If not set, the Axis might slightly adjust those values to accomodate a\r\n         * better looking grid.\r\n         *\r\n         * @default false\r\n         * @param {boolean} value Use exact values?\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"strictMinMax\", value)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"logarithmic\", {\r\n        /**\r\n         * @return {boolean} Logarithmic scale?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"logarithmic\");\r\n        },\r\n        /**\r\n         * Indicates if this axis should use a logarithmic scale.\r\n         *\r\n         * Please note that logarithmic axis can **only** accommodate values bigger\r\n         * than zero.\r\n         *\r\n         * Having zero or negative values will result in error and failure of the\r\n         * whole chart.\r\n         *\r\n         * @param {boolean} value Logarithmic scale?\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"logarithmic\", value)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"maxPrecision\", {\r\n        /**\r\n         * @return {boolean} max precision\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxPrecision\");\r\n        },\r\n        /**\r\n         * Maximum number of decimals to allow when placing grid lines and labels\r\n         * on axis.\r\n         *\r\n         * Set it to `0` (zero) to force integer-only axis labels.\r\n         *\r\n         * @param {number}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"maxPrecision\", value)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Invalidates axis data items when series extremes change\r\n     */\r\n    ValueAxis.prototype.handleExtremesChange = function () {\r\n        this._extremesChanged = true;\r\n        this.getMinMax();\r\n        if (this.ghostLabel) {\r\n            var min = this.min;\r\n            var max = this.max;\r\n            var text = 0;\r\n            if ($type.isNumber(min) && $type.isNumber(max) && min.toString().length > max.toString().length) {\r\n                text = min;\r\n            }\r\n            else {\r\n                text = max;\r\n            }\r\n            this.ghostLabel.text = this.formatLabel(text);\r\n        }\r\n    };\r\n    /**\r\n     * Returns the X coordinate for series' data item's value.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param  {XYSeriesDataItem}  dataItem  Data item\r\n     * @param  {string}            key       Data field to get value from\r\n     * @param  {number}            location  Location (0-1)\r\n     * @param  {string}            stackKey  ?\r\n     * @return {number}                      X coordinate (px)\r\n     */\r\n    ValueAxis.prototype.getX = function (dataItem, key, location, stackKey) {\r\n        var value = dataItem.getWorkingValue(key);\r\n        if (!$type.hasValue(stackKey)) {\r\n            stackKey = \"valueX\";\r\n        }\r\n        var stack = dataItem.getValue(stackKey, \"stack\");\r\n        if (!$type.isNumber(value)) {\r\n            value = this.baseValue;\r\n            if (this.logarithmic) {\r\n                if (stack > 0) {\r\n                    value = 0;\r\n                }\r\n            }\r\n        }\r\n        return this.renderer.positionToPoint(this.valueToPosition(value + stack)).x;\r\n    };\r\n    /**\r\n     * Returns the Y coordinate for series' data item's value.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param  {XYSeriesDataItem}  dataItem  Data item\r\n     * @param  {string}            key       Data field to get value from\r\n     * @param  {number}            location  Location (0-1)\r\n     * @param  {string}            stackKey  Stack ID\r\n     * @return {number}                      Y coordinate (px)\r\n     */\r\n    ValueAxis.prototype.getY = function (dataItem, key, location, stackKey) {\r\n        var value = dataItem.getWorkingValue(key);\r\n        if (!$type.hasValue(stackKey)) {\r\n            stackKey = \"valueY\";\r\n        }\r\n        var stack = dataItem.getValue(stackKey, \"stack\");\r\n        if (!$type.isNumber(value)) {\r\n            value = this.baseValue;\r\n            if (this.logarithmic) {\r\n                if (stack > 0) {\r\n                    value = 0;\r\n                }\r\n            }\r\n        }\r\n        return this.renderer.positionToPoint(this.valueToPosition(value + stack)).y;\r\n    };\r\n    /**\r\n     * Returns an angle for series data item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param  {XYSeriesDataItem}  dataItem  Data item\r\n     * @param  {string}            key       Data field to get value from\r\n     * @param  {number}            location  Location (0-1)\r\n     * @param  {string}            stackKey  Stack ID\r\n     * @return {number}                      Angle\r\n     */\r\n    ValueAxis.prototype.getAngle = function (dataItem, key, location, stackKey) {\r\n        var value = dataItem.getWorkingValue(key);\r\n        var stack = dataItem.getValue(stackKey, \"stack\");\r\n        if (!$type.isNumber(value)) {\r\n            value = this.baseValue;\r\n        }\r\n        return this.positionToAngle(this.valueToPosition(value + stack));\r\n    };\r\n    /**\r\n     * [getAnyRangePath description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param  {number}  start     [description]\r\n     * @param  {number}  end       [description]\r\n     * @param  {number}  location  [description]\r\n     * @return {string}            [description]\r\n     */\r\n    ValueAxis.prototype.getAnyRangePath = function (start, end, location) {\r\n        var startPosition = this.valueToPosition(start);\r\n        var endPosition = this.valueToPosition(end);\r\n        return this.getPositionRangePath(startPosition, endPosition); // Base class (Axis) gets range shape from AxisRenderer\r\n    };\r\n    /**\r\n     * Returns text to show in a axis tooltip, based on specific position within\r\n     * axis.\r\n     *\r\n     * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n     * chart, or explicitly for this Axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {number}  position  Position (px)\r\n     * @return {string}            Label (numeric value)\r\n     */\r\n    ValueAxis.prototype.getTooltipText = function (position) {\r\n        var value = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\r\n        return this.adapter.apply(\"getTooltipText\", this.tooltip.numberFormatter.format(value));\r\n    };\r\n    /**\r\n     * Zooms axis to specific values.\r\n     *\r\n     * @param {number}   startValue      Start value\r\n     * @param {number}   endValue        End value\r\n     * @param {boolean}  skipRangeEvent  Do not invoke events\r\n     * @param {boolean}  instantly       Do not play zoom animations\r\n     */\r\n    ValueAxis.prototype.zoomToValues = function (startValue, endValue, skipRangeEvent, instantly) {\r\n        var start = (startValue - this.min) / (this.max - this.min);\r\n        var end = (endValue - this.min) / (this.max - this.min);\r\n        this.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n    };\r\n    Object.defineProperty(ValueAxis.prototype, \"minZoomed\", {\r\n        /**\r\n         * A smallest value in axis scale within current zoom.\r\n         *\r\n         * @return {number} Min zoom value\r\n         */\r\n        get: function () {\r\n            return $math.max(this.min, this._minZoomed);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"maxZoomed\", {\r\n        /**\r\n         * A biggest value in axis scale within current zoom.\r\n         * @return {number} [description]\r\n         */\r\n        get: function () {\r\n            return $math.min(this.max, this._maxZoomed);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates positioning of Axis breaks after something changes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ValueAxis.prototype.fixAxisBreaks = function () {\r\n        var _this = this;\r\n        _super.prototype.fixAxisBreaks.call(this);\r\n        var axisBreaks = this.axisBreaks;\r\n        if (axisBreaks.length > 0) {\r\n            // process breaks\r\n            axisBreaks.each(function (axisBreak) {\r\n                var startValue = axisBreak.adjustedStartValue;\r\n                var endValue = axisBreak.adjustedEndValue;\r\n                // break difference\r\n                var axisBreakDif = endValue - startValue;\r\n                var axisBreakGridCount = Math.ceil(axisBreakDif * axisBreak.breakSize) * _this._gridCount / (_this.max - _this.min);\r\n                // calculate min, max and step for axis break\r\n                var breakMinMaxStep = _this.adjustMinMax(startValue, endValue, axisBreakDif, axisBreakGridCount, true);\r\n                axisBreak.adjustedStep = breakMinMaxStep.step;\r\n                axisBreak.adjustedMin = breakMinMaxStep.min;\r\n                axisBreak.adjustedMax = breakMinMaxStep.max;\r\n            });\r\n        }\r\n        this._difference = this.adjustDifference(this.min, this.max);\r\n    };\r\n    /**\r\n     * Returns value based on position.\r\n     *\r\n     * Please note that `position` represents position within axis which may be\r\n     * zoomed and not correspond to Cursor's `position`.\r\n     *\r\n     * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n     * @param  {number}  position  Relative position on axis (0-1)\r\n     * @return {string}            Position label\r\n     */\r\n    ValueAxis.prototype.getPositionLabel = function (position) {\r\n        var value = this.positionToValue(position);\r\n        return this.numberFormatter.format(value);\r\n    };\r\n    /**\r\n     * Shows Axis tooltip at specific value\r\n     *\r\n     * @param {number} value Value\r\n     */\r\n    ValueAxis.prototype.showTooltipAt = function (value) {\r\n        this.showTooltipAtPosition(this.valueToPosition(value));\r\n    };\r\n    /**\r\n     * Copies all properties and related data from a different instance of Axis.\r\n     *\r\n     * @param {this} source Source Axis\r\n     */\r\n    ValueAxis.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.min = source.min;\r\n        this.max = source.max;\r\n        this.calculateTotals = source.calculateTotals;\r\n        this._baseValue = source.baseValue;\r\n    };\r\n    return ValueAxis;\r\n}(Axis));\r\nexport { ValueAxis };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ValueAxis\"] = ValueAxis;\r\nregistry.registeredClasses[\"ValueAxisDataItem\"] = ValueAxisDataItem;\r\n//# sourceMappingURL=ValueAxis.js.map","/**\r\n * A module which defines functionality related to Value Axis Break.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Base class to define \"breaks\" on value axis.\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * when comparing columns with relatively similar values, it would make sense\r\n * to cut out their mid section, so that their tip differences are more\r\n * prominent.\r\n *\r\n * @see {@link IValueAxisBreakEvents} for a list of available events\r\n * @see {@link IValueAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar ValueAxisBreak = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ValueAxisBreak, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ValueAxisBreak() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ValueAxisBreak\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ValueAxisBreak.prototype, \"startPosition\", {\r\n        /**\r\n         * Pixel position of the break's start.\r\n         *\r\n         * @return {number} Position (px)\r\n         * @readonly\r\n         */\r\n        get: function () {\r\n            if (this.axis) {\r\n                return this.axis.valueToPosition(this.adjustedStartValue);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxisBreak.prototype, \"endPosition\", {\r\n        /**\r\n         * Pixel position of the break's end.\r\n         *\r\n         * @return {number} Position (px)\r\n         * @readonly\r\n         */\r\n        get: function () {\r\n            if (this.axis) {\r\n                return this.axis.valueToPosition(this.adjustedEndValue);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ValueAxisBreak;\r\n}(AxisBreak));\r\nexport { ValueAxisBreak };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ValueAxisBreak\"] = ValueAxisBreak;\r\n//# sourceMappingURL=ValueAxisBreak.js.map","/**\r\n * Cursor module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nvar Cursor = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Cursor, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Cursor() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Current cursor position during selection.\r\n         *\r\n         * @type {IPoint}\r\n         * @todo Better description\r\n         */\r\n        _this.point = { x: 0, y: 0 };\r\n        /**\r\n         * Specifies the rules when cursor needs to be moved or hidden.\r\n         */\r\n        _this._stick = \"none\";\r\n        _this.className = \"Cursor\";\r\n        // Set defaults\r\n        _this.width = percent(100);\r\n        _this.height = percent(100);\r\n        _this.shouldClone = false;\r\n        _this.hide(0);\r\n        _this.trackable = true;\r\n        _this.clickable = true;\r\n        _this.isMeasured = false;\r\n        // Add events on body to trigger down and up events (to start zooming or\r\n        // selection)\r\n        var interaction = getInteraction();\r\n        _this._disposers.push(interaction.body.events.on(\"down\", _this.handleCursorDown, _this));\r\n        _this._disposers.push(interaction.body.events.on(\"up\", _this.handleCursorUp, _this));\r\n        _this._disposers.push(interaction.body.events.on(\"track\", _this.handleCursorMove, _this));\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Handle pointer movement in document and update cursor position as needed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IInteractionObjectEvents[\"track\"]} event Event\r\n     */\r\n    Cursor.prototype.handleCursorMove = function (event) {\r\n        if (!this.interactionsEnabled) {\r\n            return;\r\n        }\r\n        if (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n            // We want to let zoom/pan continue even if cursor is outside chart area\r\n            if (!this.isHidden || !this.isHiding) {\r\n                this.hide();\r\n            }\r\n            return;\r\n        }\r\n        var local = $utils.documentPointToSprite(event.pointer.point, this);\r\n        if (this._stick == \"hard\" && this._stickPoint) {\r\n            local = this._stickPoint;\r\n        }\r\n        if (this._stick == \"soft\" && this._stickPoint) {\r\n            if (!this.fitsToBounds(local)) {\r\n                local = this._stickPoint;\r\n            }\r\n        }\r\n        this.triggerMove(local);\r\n        return local;\r\n    };\r\n    /**\r\n     * Hides actual SVG elements and handles hiding animations.\r\n     *\r\n     * @param  {number}  duration  Fade out duration (ms)\r\n     * @return {Animation}            Fade out duration (ms)\r\n     * @ignore\r\n     */\r\n    Cursor.prototype.hideReal = function (duration) {\r\n        if ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\r\n            return;\r\n        }\r\n        return _super.prototype.hideReal.call(this, duration);\r\n    };\r\n    /**\r\n     * Places the cursor at specific point.\r\n     *\r\n     * The second parameter has following options:\r\n     *\r\n     * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n     * it either moves to a new place (if pointer over plot area) or is hidden.\r\n     *\r\n     * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n     * outside chart, but will move to a new place whe plot area is hovered or\r\n     * touched.\r\n     *\r\n     * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n     * another `triggerMove()` call.\r\n     *\r\n     * @param {IPoint}                    point  Point to place cursor at\r\n     * @param {\"hard\" | \"soft\" | \"none\"}  stick  Level of cursor stickiness to the place\r\n     */\r\n    Cursor.prototype.triggerMove = function (point, stick) {\r\n        point.x = $math.round(point.x, 1);\r\n        point.y = $math.round(point.y, 1);\r\n        if (stick) {\r\n            this._stick = stick;\r\n        }\r\n        if (stick == \"hard\" || stick == \"soft\") {\r\n            this._stickPoint = point;\r\n        }\r\n        this.triggerMoveReal(point);\r\n    };\r\n    /**\r\n     * Places the cursor at specific point.\r\n     *\r\n     * @param {IPoint}  point Point to place cursor at\r\n     */\r\n    Cursor.prototype.triggerMoveReal = function (point) {\r\n        if (this.point.x != point.x || this.point.y != point.y) {\r\n            this.point = point;\r\n            this.invalidatePosition();\r\n            // hide cursor if it's out of bounds\r\n            if (this.fitsToBounds(point)) {\r\n                this.show(0);\r\n            }\r\n            else {\r\n                // unless we are selecting (mouse is down)\r\n                if (!this.downPoint) {\r\n                    this.hide(0);\r\n                }\r\n            }\r\n            if (this.visible) {\r\n                this.getPositions();\r\n                this.dispatch(\"cursorpositionchanged\"); // not good to dispatch later (check step count example)\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Simulates pressing down (click/touch) action by a cursor.\r\n     *\r\n     * @param {IPoint}   point               Point of action\r\n     */\r\n    Cursor.prototype.triggerDown = function (point) {\r\n        this.triggerDownReal(point);\r\n    };\r\n    /**\r\n     * Simulates pressing down (click/touch) action by a cursor.\r\n     *\r\n     * @param {IPoint}   point               Point of action\r\n     */\r\n    Cursor.prototype.triggerDownReal = function (point) {\r\n        switch (this._generalBehavior) {\r\n            case \"zoom\":\r\n                this.dispatchImmediately(\"zoomstarted\");\r\n                break;\r\n            case \"select\":\r\n                this.dispatchImmediately(\"selectstarted\");\r\n                break;\r\n            case \"pan\":\r\n                this.dispatchImmediately(\"panstarted\");\r\n                getInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Simulates the action of release of the mouse down / touch.\r\n     *\r\n     * @param {IPoint}   point               Point of action\r\n     */\r\n    Cursor.prototype.triggerUp = function (point) {\r\n        this.triggerUpReal(point);\r\n    };\r\n    /**\r\n     * Simulates the action of release of the mouse down / touch.\r\n     *\r\n     * @param {IPoint}   point               Point of action\r\n     */\r\n    Cursor.prototype.triggerUpReal = function (point) {\r\n        this.updatePoint(this.upPoint);\r\n        var interaction = getInteraction();\r\n        if ($math.getDistance(this._upPointOrig, this._downPointOrig) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n            switch (this._generalBehavior) {\r\n                case \"zoom\":\r\n                    this.dispatchImmediately(\"zoomended\");\r\n                    break;\r\n                case \"select\":\r\n                    this.dispatchImmediately(\"selectended\");\r\n                    break;\r\n                case \"pan\":\r\n                    this.dispatchImmediately(\"panended\");\r\n                    interaction.setGlobalStyle(MouseCursorStyle.default);\r\n                    break;\r\n            }\r\n            this.downPoint = undefined;\r\n            this.updateSelection();\r\n        }\r\n        else {\r\n            this.dispatchImmediately(\"behaviorcanceled\");\r\n            interaction.setGlobalStyle(MouseCursorStyle.default);\r\n            this.downPoint = undefined;\r\n        }\r\n    };\r\n    /**\r\n     * Updates selection dimensions on size change.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Cursor.prototype.updateSelection = function () {\r\n    };\r\n    /**\r\n     * Updates cursors current positions.\r\n     */\r\n    Cursor.prototype.getPositions = function () {\r\n        // positions are used by axes or series\r\n        this.xPosition = this.point.x / this.innerWidth;\r\n        this.yPosition = 1 - this.point.y / this.innerHeight;\r\n    };\r\n    /**\r\n     * Handles pointer down event so we can start zoom or selection.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IInteractionEvents[\"down\"]} event Original event\r\n     */\r\n    Cursor.prototype.handleCursorDown = function (event) {\r\n        if (!this.interactionsEnabled || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n            return;\r\n        }\r\n        // Get local point\r\n        var local = $utils.documentPointToSprite(event.pointer.point, this);\r\n        this._downPointOrig = { x: local.x, y: local.y };\r\n        // We need to cancel the event to prevent gestures on touch devices\r\n        if (event.event.cancelable && this.fitsToBounds(local)) {\r\n            event.event.preventDefault();\r\n        }\r\n        // Make this happen\r\n        this.triggerMove(local);\r\n        this.triggerDown(local);\r\n    };\r\n    /**\r\n     * Updates the coordinates of where pointer down event occurred\r\n     * (was pressed).\r\n     */\r\n    Cursor.prototype.updatePoint = function (point) {\r\n    };\r\n    /**\r\n     * Handles pointer up event - finishes zoom or selection action.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IInteractionEvents[\"up\"]} event Original event\r\n     */\r\n    Cursor.prototype.handleCursorUp = function (event) {\r\n        if (!this.interactionsEnabled) {\r\n            return;\r\n        }\r\n        if (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n            return;\r\n        }\r\n        var local = $utils.documentPointToSprite(event.pointer.point, this);\r\n        this._upPointOrig = { x: local.x, y: local.y };\r\n        this.triggerMove(local);\r\n        this.triggerUp(local);\r\n    };\r\n    Object.defineProperty(Cursor.prototype, \"chart\", {\r\n        /**\r\n         * @return {Chart} Chart\r\n         */\r\n        get: function () {\r\n            return this._chart;\r\n        },\r\n        /**\r\n         * A reference to a [[Chart]] the cursor belongs to.\r\n         *\r\n         * @param {Chart}  value  Chart\r\n         */\r\n        set: function (value) {\r\n            this._chart = value;\r\n            if ($type.hasValue(this._chart.plotContainer)) {\r\n                getInteraction().lockElement(this._chart.plotContainer.interactions);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Cursor;\r\n}(Container));\r\nexport { Cursor };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n//# sourceMappingURL=Cursor.js.map","import * as tslib_1 from \"tslib\";\r\nimport { XYCursor } from \"./XYCursor\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nvar RadarCursor = /** @class */ (function (_super) {\r\n    tslib_1.__extends(RadarCursor, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function RadarCursor() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"RadarCursor\";\r\n        _this.radius = percent(100);\r\n        _this.innerRadius = percent(0);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        _this.mask = undefined;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Checks if point is within bounds of a container.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {IPoint}   point  Point to check\r\n     * @return {boolean}         Fits within container?\r\n     */\r\n    RadarCursor.prototype.fitsToBounds = function (point) {\r\n        var radius = $math.getDistance(point);\r\n        var angle = $math.getAngle(point);\r\n        //if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n        //return false;\r\n        //}\r\n        if (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Object.defineProperty(RadarCursor.prototype, \"startAngle\", {\r\n        /**\r\n         * @return {number} Start angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * Starting angle of the cursor's radial line.\r\n         *\r\n         * @param {number} value Start angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarCursor.prototype, \"endAngle\", {\r\n        /**\r\n         * @return {number} End angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endAngle\");\r\n        },\r\n        /**\r\n         * End angle of the cursor's radial line.\r\n         *\r\n         * @param {number} value End angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    RadarCursor.prototype.triggerMoveReal = function (point) {\r\n        if (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n            this.updateLineX(this.point);\r\n        }\r\n        if (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n            this.updateLineY(this.point);\r\n        }\r\n        this.updateSelection();\r\n        _super.prototype.triggerMoveReal.call(this, point);\r\n    };\r\n    /**\r\n     * (Re)draws the horizontal (circular) cursor's line.\r\n     *\r\n     * @param {IPoint} point New target point\r\n     */\r\n    RadarCursor.prototype.updateLineX = function (point) {\r\n        var radius = this.pixelRadius;\r\n        var startAngle = this.startAngle;\r\n        var endAngle = this.endAngle;\r\n        var innerRadius = this.pixelInnerRadius;\r\n        if (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle) && $type.isNumber(innerRadius)) {\r\n            var angle = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n            var path = void 0;\r\n            if (this.lineX && this.lineX.visible) {\r\n                this.lineX.moveTo({ x: 0, y: 0 });\r\n                // fill\r\n                if (this.xAxis && this.fullWidthLineX) {\r\n                    var startPoint = this.xAxis.currentItemStartPoint;\r\n                    var endPoint = this.xAxis.currentItemEndPoint;\r\n                    if (startPoint && endPoint) {\r\n                        var fillStartAngle = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n                        var fillEndAngle = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n                        var arc = fillEndAngle - fillStartAngle;\r\n                        // clockwise\r\n                        // this is needed, normalizeAngle doesn't solve it\r\n                        if (startAngle < endAngle) {\r\n                            if (arc < 0) {\r\n                                arc += 360;\r\n                            }\r\n                        }\r\n                        // ccw\r\n                        else {\r\n                            if (arc > 0) {\r\n                                arc -= 360;\r\n                            }\r\n                        }\r\n                        angle -= arc / 2;\r\n                        path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n                            + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n                            + $path.arcTo(angle, arc, radius)\r\n                            + $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n                            + $path.arcTo(angle + arc, -arc, innerRadius);\r\n                    }\r\n                }\r\n                // line\r\n                if (!path) {\r\n                    path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n                }\r\n                this.lineX.path = path;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * (Re)draws the vertical (radial) cursor's line.\r\n     *\r\n     * @param {IPoint} point New target point\r\n     */\r\n    RadarCursor.prototype.updateLineY = function (point) {\r\n        if (this.lineY && this.lineY.visible) {\r\n            var startAngle = this.startAngle;\r\n            var endAngle = this.endAngle;\r\n            var truePixelRadius = this.truePixelRadius;\r\n            var radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n            if ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n                this.lineY.moveTo({ x: 0, y: 0 });\r\n                var path = void 0;\r\n                var arc = endAngle - startAngle;\r\n                if (this.yAxis && this.fullWidthLineY) {\r\n                    // fill\r\n                    var startPoint = this.yAxis.currentItemStartPoint;\r\n                    var endPoint = this.yAxis.currentItemEndPoint;\r\n                    if (startPoint && endPoint) {\r\n                        var innerRadius = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n                        radius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n                        path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n                        path += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n                    }\r\n                }\r\n                if (!path) {\r\n                    path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n                }\r\n                this.lineY.path = path;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates selection dimensions on size change.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    RadarCursor.prototype.updateSelection = function () {\r\n        if (this._usesSelection) {\r\n            var downPoint = this.downPoint;\r\n            if (downPoint) {\r\n                var point = this.point;\r\n                var radius = this.pixelRadius;\r\n                var truePixelRadius = this.truePixelRadius;\r\n                var innerRadius = this.pixelInnerRadius;\r\n                var startAngle = Math.min(this.startAngle, this.endAngle);\r\n                var endAngle = Math.max(this.startAngle, this.endAngle);\r\n                var downAngle = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n                var angle = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n                var downRadius = $math.getDistance(downPoint);\r\n                if (downRadius < truePixelRadius) {\r\n                    var currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n                    this._prevAngle = angle;\r\n                    var path = $path.moveTo({ x: 0, y: 0 });\r\n                    var downSin = $math.sin(downAngle);\r\n                    var downCos = $math.cos(downAngle);\r\n                    var sin = $math.sin(angle);\r\n                    var cos = $math.cos(angle);\r\n                    var behavior = this.behavior;\r\n                    if (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n                        path += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n                    }\r\n                    else if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n                        path = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n                    }\r\n                    else if (behavior == \"zoomXY\") {\r\n                        path = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n                    }\r\n                    this.selection.path = path;\r\n                }\r\n                this.selection.moveTo({ x: 0, y: 0 });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates cursors current positions.\r\n     */\r\n    RadarCursor.prototype.getPositions = function () {\r\n        // positions are used by axes or series\r\n        var chart = this.chart;\r\n        if (chart) {\r\n            var innerRadius = this.pixelInnerRadius;\r\n            var radius = this.truePixelRadius - innerRadius;\r\n            var startAngle = this.startAngle;\r\n            var endAngle = this.endAngle;\r\n            var angle = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n            var xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n            this.xPosition = xPosition;\r\n            this.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n        }\r\n    };\r\n    /**\r\n     * Overriding inherited method, so that nothing happens when it's triggered.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    RadarCursor.prototype.updatePoint = function (point) {\r\n    };\r\n    /**\r\n     * Updates Cursor's position when axis tooltip changes horizontal position.\r\n     *\r\n     * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n     */\r\n    RadarCursor.prototype.handleXTooltipPosition = function (event) {\r\n        if (this.xAxis.cursorTooltipEnabled) {\r\n            var tooltip = this.xAxis.tooltip;\r\n            this.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n        }\r\n    };\r\n    /**\r\n     * Updates Cursor's position when axis tooltip changes vertical position.\r\n     *\r\n     * @todo Description\r\n     * @param {ISpriteEvents[\"positionchanged\"]} event Axis event\r\n     */\r\n    RadarCursor.prototype.handleYTooltipPosition = function (event) {\r\n        if (this.yAxis.cursorTooltipEnabled) {\r\n            var tooltip = this.yAxis.tooltip;\r\n            this.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n        }\r\n    };\r\n    /**\r\n     * needs to be overriden\r\n     * @ignore\r\n     */\r\n    RadarCursor.prototype.updateLinePositions = function (point) {\r\n    };\r\n    /**\r\n     * [getRanges description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    RadarCursor.prototype.getRanges = function () {\r\n        var downPoint = this.downPoint;\r\n        if (downPoint) {\r\n            var upPoint = this.upPoint;\r\n            var chart = this.chart;\r\n            if (chart) {\r\n                var radius = this.pixelRadius;\r\n                var startAngle = this.startAngle;\r\n                var endAngle = this.endAngle;\r\n                var downAngle = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n                var upAngle = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n                var downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n                var upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n                var startX = 0;\r\n                var endX = 1;\r\n                var startY = 0;\r\n                var endY = 1;\r\n                var behavior = this.behavior;\r\n                if (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n                    var arc = endAngle - startAngle;\r\n                    startX = $math.round((downAngle - startAngle) / arc, 5);\r\n                    endX = $math.round((upAngle - startAngle) / arc, 5);\r\n                }\r\n                if (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n                    startY = $math.round(downRadius / radius, 5);\r\n                    endY = $math.round(upRadius / radius, 5);\r\n                }\r\n                this.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n                this.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n                if (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.selection.hide();\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Overriding inherited method, so that nothing happens when `updateSize`\r\n     * is triggered.\r\n     *\r\n     * RadarCursor is quite complicated and needs own sizing logic.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    RadarCursor.prototype.updateSize = function () { };\r\n    Object.defineProperty(RadarCursor.prototype, \"radius\", {\r\n        /**\r\n         * @return {number} Outer radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Outer radius of the cursor's circular line.\r\n         * Absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param {number | Percent}  value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarCursor.prototype, \"pixelRadius\", {\r\n        /**\r\n         * Outer radius of the circular line in pixels.\r\n         *\r\n         * @return {number} Outer radius (px)\r\n         * @readonly\r\n         */\r\n        get: function () {\r\n            return $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarCursor.prototype, \"truePixelRadius\", {\r\n        /**\r\n         * [truePixelRadius description]\r\n         *\r\n         * @todo Description\r\n         * @return {number} Outer radius (px)\r\n         * @readonly\r\n         */\r\n        get: function () {\r\n            return $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarCursor.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return {number} Inner radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius of the cursor's circular line.\r\n         * Absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param {number | Percent}  value  Inner radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarCursor.prototype, \"pixelInnerRadius\", {\r\n        /**\r\n         * Inner radius of the circular line in pixels.\r\n         *\r\n         * @return {number} Inner radius (px)\r\n         * @readonly\r\n         */\r\n        get: function () {\r\n            var innerRadius = this.innerRadius;\r\n            if (innerRadius instanceof Percent) {\r\n                innerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n            }\r\n            return $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    RadarCursor.prototype.fixPoint = function (point) {\r\n        // overriding xy method\r\n        return point;\r\n    };\r\n    return RadarCursor;\r\n}(XYCursor));\r\nexport { RadarCursor };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n//# sourceMappingURL=RadarCursor.js.map","/**\r\n * Cursor for XY chart\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor } from \"./Cursor\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nvar XYCursor = /** @class */ (function (_super) {\r\n    tslib_1.__extends(XYCursor, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function XYCursor() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Vertical cursor line element.\r\n         *\r\n         * @type {MutableValueDisposer<Sprite>}\r\n         */\r\n        _this._lineX = new MutableValueDisposer();\r\n        /**\r\n         * Horizontal cursor line element.\r\n         *\r\n         * @type {MutableValueDisposer<Sprite>}\r\n         */\r\n        _this._lineY = new MutableValueDisposer();\r\n        /**\r\n         * Horizontal [[Axis]].\r\n         *\r\n         * @type {MutableValueDisposer<Axis>}\r\n         */\r\n        _this._xAxis = new MutableValueDisposer();\r\n        /**\r\n         * Vertical [[Axis]].\r\n         *\r\n         * @type {MutableValueDisposer<Axis>}\r\n         */\r\n        _this._yAxis = new MutableValueDisposer();\r\n        _this.className = \"XYCursor\";\r\n        // Defaults\r\n        _this.behavior = \"zoomX\";\r\n        _this.maxPanOut = 0.1;\r\n        var interfaceColors = new InterfaceColorSet();\r\n        // Create selection element\r\n        var selection = _this.createChild(Sprite);\r\n        selection.shouldClone = false;\r\n        selection.fillOpacity = 0.2;\r\n        selection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n        selection.isMeasured = false;\r\n        selection.interactionsEnabled = false;\r\n        _this.selection = selection;\r\n        _this._disposers.push(_this.selection);\r\n        // Create cursor's vertical line\r\n        var lineX = _this.createChild(Sprite);\r\n        lineX.shouldClone = false;\r\n        lineX.stroke = interfaceColors.getFor(\"grid\");\r\n        lineX.fill = color();\r\n        lineX.strokeDasharray = \"3,3\";\r\n        lineX.isMeasured = false;\r\n        lineX.strokeOpacity = 0.4;\r\n        lineX.interactionsEnabled = false;\r\n        lineX.y = 0; // important\r\n        _this.lineX = lineX;\r\n        _this._disposers.push(_this.lineX);\r\n        // Create cursor's horizontal line\r\n        var lineY = _this.createChild(Sprite);\r\n        lineY.shouldClone = false;\r\n        lineY.stroke = interfaceColors.getFor(\"grid\");\r\n        lineY.fill = color();\r\n        lineY.strokeDasharray = \"3,3\";\r\n        lineY.isMeasured = false;\r\n        lineY.strokeOpacity = 0.4;\r\n        lineY.interactionsEnabled = false;\r\n        lineY.x = 0; // important\r\n        _this.lineY = lineY;\r\n        _this._disposers.push(_this.lineY);\r\n        // Add handler for size changes\r\n        _this.events.on(\"sizechanged\", _this.updateSize, _this, false);\r\n        _this._disposers.push(_this._lineX);\r\n        _this._disposers.push(_this._lineY);\r\n        _this._disposers.push(_this._xAxis);\r\n        _this._disposers.push(_this._yAxis);\r\n        _this.mask = _this;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Updates cursor element dimensions on size change.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYCursor.prototype.updateSize = function () {\r\n        if (this.lineX) {\r\n            this.lineX.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight });\r\n        }\r\n        if (this.lineY) {\r\n            this.lineY.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 });\r\n        }\r\n    };\r\n    /**\r\n     * Updates selection dimensions on size change.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYCursor.prototype.updateSelection = function () {\r\n        if (this._usesSelection) {\r\n            var downPoint = this.downPoint;\r\n            if (downPoint) {\r\n                var point = this.point;\r\n                if (this.lineX) {\r\n                    point.x = this.lineX.pixelX;\r\n                }\r\n                if (this.lineY) {\r\n                    point.y = this.lineY.pixelY;\r\n                }\r\n                var selection = this.selection;\r\n                var x = Math.min(point.x, downPoint.x);\r\n                var y = Math.min(point.y, downPoint.y);\r\n                var w = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n                var h = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n                switch (this.behavior) {\r\n                    case \"zoomX\":\r\n                        y = 0;\r\n                        h = this.pixelHeight;\r\n                        break;\r\n                    case \"zoomY\":\r\n                        x = 0;\r\n                        w = this.pixelWidth;\r\n                        break;\r\n                    case \"selectX\":\r\n                        y = 0;\r\n                        h = this.pixelHeight;\r\n                        break;\r\n                    case \"selectY\":\r\n                        x = 0;\r\n                        w = this.pixelWidth;\r\n                        break;\r\n                }\r\n                selection.x = x;\r\n                selection.y = y;\r\n                selection.path = $path.rectangle(w, h);\r\n                selection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n            }\r\n            else {\r\n                this.selection.hide();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYCursor.prototype.fixPoint = function (point) {\r\n        point.x = Math.max(0, point.x);\r\n        point.y = Math.max(0, point.y);\r\n        point.x = Math.min(this.pixelWidth, point.x);\r\n        point.y = Math.min(this.pixelHeight, point.y);\r\n        return point;\r\n    };\r\n    /**\r\n     * Places the cursor at specific point.\r\n     *\r\n     * @param {IPoint}   point Point to place cursor at\r\n     */\r\n    XYCursor.prototype.triggerMoveReal = function (point) {\r\n        _super.prototype.triggerMoveReal.call(this, point);\r\n        if ((this.snapToSeries && !this.snapToSeries.isHidden)) {\r\n        }\r\n        else {\r\n            this.updateLinePositions(point);\r\n        }\r\n        if (this.downPoint && $math.getDistance(this.downPoint, point) > 3) {\r\n            if (this._generalBehavior == \"pan\") {\r\n                this.getPanningRanges();\r\n                this.dispatch(\"panning\");\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYCursor.prototype.updateLinePositions = function (point) {\r\n        point = this.fixPoint(this.point);\r\n        if (this.lineX && this.lineX.visible && !this.xAxis) {\r\n            this.lineX.x = point.x;\r\n        }\r\n        if (this.lineY && this.lineY.visible && !this.yAxis) {\r\n            this.lineY.y = point.y;\r\n        }\r\n        this.updateSelection();\r\n    };\r\n    XYCursor.prototype.triggerDownReal = function (point) {\r\n        if (this.visible && !this.isHiding) {\r\n            if (this.fitsToBounds(point)) {\r\n                this.downPoint = { x: point.x, y: point.y };\r\n                this.updatePoint(point);\r\n                //this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n                this.point.x = this.downPoint.x;\r\n                this.point.y = this.downPoint.y;\r\n                var selection = this.selection;\r\n                var selectionX = this.downPoint.x;\r\n                var selectionY = this.downPoint.y;\r\n                if (this._usesSelection) {\r\n                    selection.x = selectionX;\r\n                    selection.y = selectionY;\r\n                    selection.path = \"\";\r\n                    selection.show();\r\n                }\r\n                _super.prototype.triggerDownReal.call(this, point);\r\n            }\r\n            else {\r\n                this.downPoint = undefined;\r\n            }\r\n        }\r\n        else {\r\n            this.downPoint = undefined;\r\n        }\r\n    };\r\n    /**\r\n     * Updates the coordinates of where pointer down event occurred\r\n     * (was pressed).\r\n     */\r\n    XYCursor.prototype.updatePoint = function (point) {\r\n        if (this.lineX) {\r\n            point.x = this.lineX.pixelX;\r\n        }\r\n        if (this.lineY) {\r\n            point.y = this.lineY.pixelY;\r\n        }\r\n    };\r\n    XYCursor.prototype.triggerUpReal = function (point) {\r\n        if ($math.getDistance(this._upPointOrig, this._downPointOrig) > getInteraction().getHitOption(this.interactions, \"hitTolerance\")) {\r\n            if (this.downPoint) {\r\n                this.upPoint = point;\r\n                this.updatePoint(this.upPoint);\r\n                this.getRanges();\r\n                if (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.selection.hide();\r\n                }\r\n                _super.prototype.triggerUpReal.call(this, point);\r\n            }\r\n        }\r\n        else {\r\n            this.selection.hide(0);\r\n        }\r\n        this.downPoint = undefined;\r\n    };\r\n    /**\r\n     * [getRanges description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    XYCursor.prototype.getPanningRanges = function () {\r\n        var startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n        var startY = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n        var currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n        var currentY = $math.round(this.point.y / this.innerHeight, 5);\r\n        var deltaX = startX - currentX;\r\n        var deltaY = -startY + currentY;\r\n        this.xRange = { start: deltaX, end: 1 + deltaX };\r\n        this.yRange = { start: deltaY, end: 1 + deltaY };\r\n        if (this.behavior == \"panX\") {\r\n            this.yRange.start = 0;\r\n            this.yRange.end = 1;\r\n        }\r\n        if (this.behavior == \"panY\") {\r\n            this.xRange.start = 0;\r\n            this.xRange.end = 1;\r\n        }\r\n    };\r\n    /**\r\n     * [getRanges description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    XYCursor.prototype.getRanges = function () {\r\n        if (this.lineX) {\r\n            this.upPoint.x = this.lineX.pixelX;\r\n        }\r\n        if (this.lineY) {\r\n            this.upPoint.y = this.lineY.pixelY;\r\n        }\r\n        // @todo Is this needed?\r\n        this.selection;\r\n        var startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n        var endX = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n        var startY = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n        var endY = $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n        this.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n        this.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n    };\r\n    Object.defineProperty(XYCursor.prototype, \"behavior\", {\r\n        /**\r\n         * @type {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} Bheavior\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"behavior\");\r\n        },\r\n        /**\r\n         * Cursor's behavior when it's moved with pointer down:\r\n         *\r\n         * * \"zoomX\" - zooms horizontally;\r\n         * * \"zoomY\" - zooms vertically;\r\n         * * \"zoomXY\" - zooms both horizontally and vertically;\r\n         * * \"selectX\" - selects a range horizontally;\r\n         * * \"selectY\" - selects a range vertically;\r\n         * * \"selectXY\" - selects a range both horizontally and vertically;\r\n         * * \"panX\" - moves (pans) current selection horizontally;\r\n         * * \"panY\" - moves (pans) current selection vertically;\r\n         * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n         * * \"none\" - does nothing with pointer down.\r\n         *\r\n         * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n         * and dragging it will start zooming the chart.\r\n         *\r\n         * @param {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\"} value Bheavior\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"behavior\", value, true);\r\n            this._usesSelection = false;\r\n            if (value.indexOf(\"zoom\") != -1) {\r\n                this._generalBehavior = \"zoom\";\r\n                this._usesSelection = true;\r\n            }\r\n            if (value.indexOf(\"select\") != -1) {\r\n                this._generalBehavior = \"select\";\r\n                this._usesSelection = true;\r\n            }\r\n            if (value.indexOf(\"pan\") != -1) {\r\n                this._generalBehavior = \"pan\";\r\n                this._usesSelection = false;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYCursor.prototype, \"fullWidthLineX\", {\r\n        /**\r\n         * @return {boolean} Full width?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"fullWidthLineX\");\r\n        },\r\n        /**\r\n         * Cursor's horizontal line is expanded to take full width of the related\r\n         * Axis' cell/category.\r\n         *\r\n         * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n         * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n         *\r\n         * @param {boolean} value Full width?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"fullWidthLineX\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYCursor.prototype, \"fullWidthLineY\", {\r\n        /**\r\n         * @return {boolean} Full width?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"fullWidthLineY\");\r\n        },\r\n        /**\r\n         * Cursor's vertical line is expanded to take full width of the related\r\n         * Axis' cell/category.\r\n         *\r\n         * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n         * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n         *\r\n         * @param {boolean} value Full width?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"fullWidthLineY\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYCursor.prototype, \"maxPanOut\", {\r\n        /**\r\n         * @return {number} Full width?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxPanOut\");\r\n        },\r\n        /**\r\n         * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n         * This setting specifies relative value by how much we can pan out the plot\r\n         *\r\n         * @param {number} value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"maxPanOut\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYCursor.prototype, \"xAxis\", {\r\n        /**\r\n         * @return {Axis} X axis\r\n         */\r\n        get: function () {\r\n            return this._xAxis.get();\r\n        },\r\n        /**\r\n         * A reference to X [[Axis]].\r\n         *\r\n         * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n         * you have axis tooltip enabled and you want cursor line to be at the same\r\n         * position as tooltip.\r\n         *\r\n         * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n         * [[ValueAxis]].\r\n         *\r\n         * @todo Description (review)\r\n         * @param {Axis} axis X axis\r\n         */\r\n        set: function (axis) {\r\n            if (this._xAxis.get() != axis) {\r\n                var chart = axis.chart;\r\n                this._xAxis.set(axis, new MultiDisposer([\r\n                    axis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false),\r\n                ]));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYCursor.prototype, \"yAxis\", {\r\n        /**\r\n         * @return {Axis} Y Axis\r\n         */\r\n        get: function () {\r\n            return this._yAxis.get();\r\n        },\r\n        /**\r\n         * A reference to Y [[Axis]].\r\n         *\r\n         * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n         * you have axis tooltip enabled and you want cursor line to be at the same\r\n         * position as tooltip.\r\n         *\r\n         * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n         * [[ValueAxis]].\r\n         *\r\n         * @todo Description (review)\r\n         * @param {Axis} axis Y axis\r\n         */\r\n        set: function (axis) {\r\n            if (this._yAxis.get() != axis) {\r\n                var chart = axis.chart;\r\n                this._yAxis.set(axis, new MultiDisposer([\r\n                    axis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false),\r\n                ]));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates Cursor's position when axis tooltip changes position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n     */\r\n    XYCursor.prototype.handleXTooltipPosition = function (event) {\r\n        var tooltip = this.xAxis.tooltip;\r\n        var point = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n        var x = point.x;\r\n        if (this.lineX) {\r\n            this.lineX.x = x;\r\n            if (!this.fitsToBounds(point)) {\r\n                this.hide();\r\n            }\r\n        }\r\n        if (this.xAxis && this.fullWidthLineX) {\r\n            var startPoint = this.xAxis.currentItemStartPoint;\r\n            var endPoint = this.xAxis.currentItemEndPoint;\r\n            if (startPoint && endPoint) {\r\n                this.lineX.x = x;\r\n                var width = endPoint.x - startPoint.x;\r\n                this.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates Cursor's position when Y axis changes position or scale.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {ISpriteEvents[\"positionchanged\"]} event Original Axis event\r\n     */\r\n    XYCursor.prototype.handleYTooltipPosition = function (event) {\r\n        var tooltip = this.yAxis.tooltip;\r\n        var point = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n        var y = point.y;\r\n        if (this.lineY) {\r\n            this.lineY.y = y;\r\n            if (!this.fitsToBounds(point)) {\r\n                this.hide();\r\n            }\r\n        }\r\n        if (this.yAxis && this.fullWidthLineY) {\r\n            var startPoint = this.yAxis.currentItemStartPoint;\r\n            var endPoint = this.yAxis.currentItemEndPoint;\r\n            if (startPoint && endPoint) {\r\n                this.lineY.y = y;\r\n                var height = endPoint.y - startPoint.y;\r\n                this.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(XYCursor.prototype, \"lineX\", {\r\n        /**\r\n         * @return {Sprite} Line element\r\n         */\r\n        get: function () {\r\n            return this._lineX.get();\r\n        },\r\n        /**\r\n         * A Line element to use for X axis.\r\n         *\r\n         * @param {Sprite} lineX Line\r\n         */\r\n        set: function (lineX) {\r\n            if (lineX) {\r\n                lineX.setElement(this.paper.add(\"path\"));\r\n                this._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n                lineX.interactionsEnabled = false;\r\n                lineX.parent = this;\r\n            }\r\n            else {\r\n                this._lineX.reset();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYCursor.prototype, \"lineY\", {\r\n        /**\r\n         * @return {Sprite} Line element\r\n         */\r\n        get: function () {\r\n            return this._lineY.get();\r\n        },\r\n        /**\r\n         * A Line element to use Y axis.\r\n         *\r\n         * @param {Sprite} lineY Line\r\n         */\r\n        set: function (lineY) {\r\n            if (lineY) {\r\n                lineY.setElement(this.paper.add(\"path\"));\r\n                this._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n                lineY.parent = this;\r\n                lineY.interactionsEnabled = false;\r\n            }\r\n            else {\r\n                this._lineY.reset();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYCursor.prototype, \"selection\", {\r\n        /**\r\n         * @return {Sprite} Selection rectangle\r\n         */\r\n        get: function () {\r\n            return this._selection;\r\n        },\r\n        /**\r\n         * A selection element ([[Sprite]]).\r\n         *\r\n         * @param {Sprite} selection Selection rectangle\r\n         */\r\n        set: function (selection) {\r\n            this._selection = selection;\r\n            if (selection) {\r\n                selection.element = this.paper.add(\"path\");\r\n                selection.parent = this;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n     * with real references.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {object}  config  Config\r\n     */\r\n    XYCursor.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Set up axes\r\n            if ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n                if (this.map.hasKey(config.xAxis)) {\r\n                    config.xAxis = this.map.getKey(config.xAxis);\r\n                }\r\n                else {\r\n                    this.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`\");\r\n                    delete config.xAxis;\r\n                }\r\n            }\r\n            if ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n                if (this.map.hasKey(config.yAxis)) {\r\n                    config.yAxis = this.map.getKey(config.yAxis);\r\n                }\r\n                else {\r\n                    this.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`\");\r\n                    delete config.yAxis;\r\n                }\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    Object.defineProperty(XYCursor.prototype, \"snapToSeries\", {\r\n        /**\r\n         * @return {XYSeries}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"snapToSeries\");\r\n        },\r\n        /**\r\n         * Specifies to which series cursor lines should be snapped. Works when one\r\n         * of the axis is `DateAxis` or `CategoryAxis`. Won't work if both axes are\r\n         * `ValueAxis`.\r\n         *\r\n         * @param {XYSeries}\r\n         */\r\n        set: function (series) {\r\n            if (this.setPropertyValue(\"snapToSeries\", series)) {\r\n                if (this._snapToDisposer) {\r\n                    this._snapToDisposer.dispose();\r\n                }\r\n                if (series) {\r\n                    this._snapToDisposer = series.events.on(\"tooltipshownat\", this.handleSnap, this, false);\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * [handleSnap description]\r\n     *\r\n     * @ignore\r\n     * @todo Description\r\n     */\r\n    XYCursor.prototype.handleSnap = function () {\r\n        var series = this.snapToSeries;\r\n        var y = series.tooltipY;\r\n        var x = series.tooltipX; // - this.pixelWidth;\r\n        if (this.xAxis) {\r\n            if (this.xAxis.renderer.opposite) {\r\n                y -= this.pixelHeight;\r\n            }\r\n        }\r\n        this.point = { x: x, y: y };\r\n        this.getPositions();\r\n        x -= this.pixelWidth;\r\n        if (this.yAxis) {\r\n            if (this.yAxis.renderer.opposite) {\r\n                x += this.pixelWidth;\r\n            }\r\n        }\r\n        var tooltip = series.tooltip;\r\n        var duration = tooltip.animationDuration;\r\n        var easing = tooltip.animationEasing;\r\n        if (series.baseAxis == series.xAxis) {\r\n            series.yAxis.showTooltipAtPosition(this.yPosition);\r\n        }\r\n        if (series.baseAxis == series.yAxis) {\r\n            series.xAxis.showTooltipAtPosition(this.xPosition);\r\n        }\r\n        this.lineX.animate([{ property: \"y\", to: y }], duration, easing);\r\n        this.lineY.animate([{ property: \"x\", to: x }], duration, easing);\r\n        if (!this.xAxis) {\r\n            this.lineX.animate([{ property: \"x\", to: x }], duration, easing);\r\n        }\r\n        if (!this.yAxis) {\r\n            this.lineY.animate([{ property: \"y\", to: y }], duration, easing);\r\n        }\r\n    };\r\n    return XYCursor;\r\n}(Cursor));\r\nexport { XYCursor };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n//# sourceMappingURL=XYCursor.js.map","/**\r\n * Module that defines everything related to building bullets.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to creates bullets.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nvar Bullet = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Bullet, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Bullet() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Bullet\";\r\n        _this.isMeasured = false;\r\n        _this.tooltipX = 0;\r\n        _this.tooltipY = 0;\r\n        _this.layout = \"none\";\r\n        _this.applyOnClones = true;\r\n        _this.copyToLegendMarker = true;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Bullet.prototype, \"locationX\", {\r\n        /**\r\n         * @return {number} Location (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"locationX\");\r\n        },\r\n        /**\r\n         * Relative horizontal location within cell. (0-1)\r\n         *\r\n         * @param {number}  value  Location (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"locationX\", value, false, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Bullet.prototype, \"locationY\", {\r\n        /**\r\n         * @return {number} Location (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"locationY\");\r\n        },\r\n        /**\r\n         * Relative vertical location within cell. (0-1)\r\n         *\r\n         * @param {number}  value  Location (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"locationY\", value, false, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Bullet.prototype, \"xField\", {\r\n        /**\r\n         * @return {string} [description]\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"xField\");\r\n        },\r\n        /**\r\n         * [xField description]\r\n         *\r\n         * @todo Description\r\n         * @param {string}  value  [description]\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"xField\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Bullet.prototype, \"yField\", {\r\n        /**\r\n         * @return {string} [description]\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"yField\");\r\n        },\r\n        /**\r\n         * [yField description]\r\n         *\r\n         * Description\r\n         * @param {string}  value  [description]\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"yField\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Bullet.prototype, \"isDynamic\", {\r\n        /**\r\n         * @return {boolean} Redraw on data change?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"isDynamic\");\r\n        },\r\n        /**\r\n         * Indicates if the bullet is \"dynamic\".\r\n         *\r\n         * In most cases the bullets remain the same, even if the underlying data\r\n         * changes.\r\n         *\r\n         * However, in cases where bullet also displays a label, or its size depends\r\n         * on data, it also needs to be redrawn when the underlying data changes.\r\n         *\r\n         * Only those bullets that have set `isDynamic = true` will be redrawn each\r\n         * time data changes. Regular bullets will be reused as they are.\r\n         *\r\n         * @default false\r\n         * @param {boolean}  value  Redraw on data change?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"isDynamic\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Bullet.prototype, \"copyToLegendMarker\", {\r\n        /**\r\n         * @return {boolean} Redraw on data change?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"copyToLegendMarker\");\r\n        },\r\n        /**\r\n         * Indicates if the bullet should be copied to legend marker\r\n         *\r\n         * @default false\r\n         * @param {boolean}  value  Redraw on data change?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"copyToLegendMarker\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Bullet;\r\n}(Container));\r\nexport { Bullet };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Bullet\"] = Bullet;\r\n//# sourceMappingURL=Bullet.js.map","/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column } from \"./Column\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to creates Candlesticks.\r\n *\r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nvar Candlestick = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Candlestick, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Candlestick() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Candlestick\";\r\n        _this.layout = \"none\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    Candlestick.prototype.createAssets = function () {\r\n        _super.prototype.createAssets.call(this);\r\n        this.lowLine = this.createChild(Line);\r\n        this.lowLine.shouldClone = false;\r\n        this.highLine = this.createChild(Line);\r\n        this.highLine.shouldClone = false;\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[Candlestick]].\r\n     *\r\n     * @param {Candlestick} source Source Candlestick\r\n     */\r\n    Candlestick.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.lowLine) {\r\n            this.lowLine.copyFrom(source.lowLine);\r\n        }\r\n        if (this.highLine) {\r\n            this.highLine.copyFrom(source.highLine);\r\n        }\r\n    };\r\n    return Candlestick;\r\n}(Column));\r\nexport { Candlestick };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\r\n//# sourceMappingURL=Candlestick.js.map","/**\r\n * ChordLink module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { FlowDiagramLink } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar ChordLink = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ChordLink, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ChordLink() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ChordLink\";\r\n        _this.middleLine = _this.createChild(QuadraticCurve);\r\n        _this.middleLine.shouldClone = false;\r\n        _this.middleLine.strokeOpacity = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * (Re)validates (redraws) the link.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ChordLink.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        if (!this.isTemplate) {\r\n            var startAngle = this.startAngle;\r\n            var endAngle = this.endAngle;\r\n            var arc = this.arc;\r\n            var radius = this.radius;\r\n            var fromNode = this.dataItem.fromNode;\r\n            var toNode = this.dataItem.toNode;\r\n            var fromX = 0;\r\n            var fromY = 0;\r\n            if (fromNode) {\r\n                fromX = fromNode.pixelX + fromNode.dx;\r\n                fromY = fromNode.pixelY + fromNode.dy;\r\n            }\r\n            var toX = 0;\r\n            var toY = 0;\r\n            if (toNode) {\r\n                toX = toNode.pixelX + toNode.dx;\r\n                toY = toNode.pixelY + toNode.dy;\r\n            }\r\n            if (radius > 0) {\r\n                var x1 = radius * $math.cos(startAngle) + fromX;\r\n                var y1 = radius * $math.sin(startAngle) + fromY;\r\n                var x2 = radius * $math.cos(endAngle) + toX;\r\n                var y2 = radius * $math.sin(endAngle) + toY;\r\n                var x3 = radius * $math.cos(endAngle + arc) + toX;\r\n                var y3 = radius * $math.sin(endAngle + arc) + toY;\r\n                var x4 = radius * $math.cos(startAngle + arc) + fromX;\r\n                var y4 = radius * $math.sin(startAngle + arc) + fromY;\r\n                //let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n                //let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n                //let cpx = (arcWidth) * $math.cos(cpAngle);\r\n                //let cpy = (arcWidth) * $math.sin(cpAngle);\r\n                var cp = { x: 0, y: 0 };\r\n                var path = $path.moveTo({ x: x1, y: y1 });\r\n                path += $path.arcTo(startAngle, arc, radius);\r\n                path += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n                path += $path.arcTo(endAngle, arc, radius);\r\n                path += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n                if (arc > 0) {\r\n                    this.link.path = path;\r\n                }\r\n                else {\r\n                    this.link.path = \"\";\r\n                }\r\n                if (this.maskBullets) {\r\n                    this.bulletsMask.path = path;\r\n                    this.bulletsContainer.mask = this.bulletsMask;\r\n                }\r\n                var mAngle1 = startAngle + arc / 2;\r\n                var mAngle2 = endAngle + arc / 2;\r\n                var mAngleM = mAngle1 + (mAngle2 - mAngle1) / 2;\r\n                var middleLine = this.middleLine;\r\n                middleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n                middleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n                middleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n                middleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n                middleLine.cpx = 0;\r\n                middleLine.cpy = 0;\r\n                middleLine.stroke = this.fill;\r\n                this.positionBullets();\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(ChordLink.prototype, \"radius\", {\r\n        /**\r\n         * @return {number} End Y\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * [radius description]\r\n         *\r\n         * @todo Description\r\n         * @param {number} value End Y\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"radius\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ChordLink.prototype, \"arc\", {\r\n        /**\r\n         * @return {number} [description]\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"arc\");\r\n        },\r\n        /**\r\n         * [arc description]\r\n         *\r\n         * @todo Description\r\n         * @param {number} value [description]\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"arc\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ChordLink;\r\n}(FlowDiagramLink));\r\nexport { ChordLink };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n//# sourceMappingURL=ChordLink.js.map","/**\r\n * ChordNode module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode } from \"./FlowDiagramNode\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar ChordNode = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ChordNode, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ChordNode() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ChordNode\";\r\n        _this.label = _this.createChild(AxisLabelCircular);\r\n        _this.label.location = 0.5;\r\n        _this.label.radius = 5;\r\n        _this.label.text = \"{name}\";\r\n        _this.label.zIndex = 1;\r\n        _this.label.shouldClone = false;\r\n        _this.layout = \"none\";\r\n        _this.events.on(\"positionchanged\", _this.updateRotation, _this, false);\r\n        _this.isMeasured = false;\r\n        _this.slice = _this.createChild(Slice);\r\n        _this.slice.isMeasured = false;\r\n        var hiddenState = _this.hiddenState;\r\n        hiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n        hiddenState.properties.opacity = 0.5;\r\n        hiddenState.properties.visible = true;\r\n        _this.setStateOnChildren = false;\r\n        _this.slice.hiddenState.properties.visible = true;\r\n        _this.adapter.add(\"tooltipX\", function (tooltipX, target) {\r\n            return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n        });\r\n        _this.adapter.add(\"tooltipY\", function (tooltipY, target) {\r\n            return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n        });\r\n        return _this;\r\n    }\r\n    /**\r\n     * Invalidates all links, attached to this node.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ChordNode.prototype.invalidateLinks = function () {\r\n        var _this = this;\r\n        _super.prototype.invalidateLinks.call(this);\r\n        var label = this.label;\r\n        var slice = this.slice;\r\n        var chart = this.chart;\r\n        if (chart && slice) {\r\n            var sum = this.total;\r\n            var arc_1 = slice.arc;\r\n            var sliceStartAngle_1 = slice.startAngle;\r\n            this.children.each(function (child) {\r\n                if (child instanceof Bullet) {\r\n                    var locationX = child.locationX;\r\n                    if (!$type.isNumber(locationX)) {\r\n                        locationX = 0.5;\r\n                    }\r\n                    var locationY = child.locationY;\r\n                    if (!$type.isNumber(locationY)) {\r\n                        locationY = 1;\r\n                    }\r\n                    var childAngle = sliceStartAngle_1 + arc_1 * locationX;\r\n                    var childRadius = locationY * slice.radius;\r\n                    child.x = childRadius * $math.cos(childAngle);\r\n                    child.y = childRadius * $math.sin(childAngle);\r\n                }\r\n            });\r\n            var labelAngle = sliceStartAngle_1 + arc_1 * label.location;\r\n            var startAngle = sliceStartAngle_1 + (1 - sum / this.adjustedTotal) * arc_1 * 0.5; // if value of a node is > then sum of the links, add to center link\r\n            if ($type.isNaN(startAngle)) {\r\n                startAngle = sliceStartAngle_1;\r\n            }\r\n            var x = slice.radius * $math.cos(labelAngle);\r\n            var y = slice.radius * $math.sin(labelAngle);\r\n            var point = label.fixPosition(labelAngle, slice.radius);\r\n            this.nextAngle = startAngle;\r\n            if (this._outgoingSorted) {\r\n                $iter.each(this._outgoingSorted, function (dataItem) {\r\n                    var link = dataItem.link;\r\n                    link.parent = _this.chart.linksContainer;\r\n                    var value = dataItem.getWorkingValue(\"value\");\r\n                    if ($type.isNumber(value)) {\r\n                        if (chart.nonRibbon) {\r\n                            var percentWidth = link.percentWidth;\r\n                            if (!$type.isNumber(percentWidth)) {\r\n                                percentWidth = 5;\r\n                            }\r\n                            percentWidth = percentWidth / 100;\r\n                            link.startAngle = sliceStartAngle_1 + arc_1 / 2 - arc_1 / 2 * percentWidth;\r\n                            link.arc = arc_1 * percentWidth;\r\n                        }\r\n                        else {\r\n                            link.arc = value * chart.valueAngle;\r\n                            link.startAngle = _this.nextAngle;\r\n                            _this.nextAngle += link.arc;\r\n                        }\r\n                        if (!dataItem.toNode) {\r\n                            link.endAngle = link.startAngle;\r\n                        }\r\n                        link.radius = slice.pixelInnerRadius;\r\n                    }\r\n                    //link.validate();\r\n                });\r\n            }\r\n            if (this._incomingSorted) {\r\n                $iter.each(this._incomingSorted, function (dataItem) {\r\n                    var link = dataItem.link;\r\n                    link.radius = slice.pixelInnerRadius;\r\n                    if (chart.nonRibbon) {\r\n                        var percentWidth = link.percentWidth;\r\n                        if (!$type.isNumber(percentWidth)) {\r\n                            percentWidth = 5;\r\n                        }\r\n                        percentWidth = percentWidth / 100;\r\n                        link.endAngle = sliceStartAngle_1 + arc_1 / 2 - arc_1 / 2 * percentWidth;\r\n                        link.arc = arc_1 * percentWidth;\r\n                    }\r\n                    else {\r\n                        link.endAngle = _this.nextAngle;\r\n                        var value = dataItem.getWorkingValue(\"value\");\r\n                        if ($type.isNumber(value)) {\r\n                            link.arc = value * chart.valueAngle; // yes, this is needed\r\n                            _this.nextAngle += link.arc;\r\n                        }\r\n                    }\r\n                    if (!dataItem.fromNode) {\r\n                        link.startAngle = link.endAngle;\r\n                    }\r\n                    //link.validate();\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     * updates slice start angle so that when we drag a node it would face the center\r\n     */\r\n    ChordNode.prototype.updateRotation = function () {\r\n        var slice = this.slice;\r\n        var mAngle = this.trueStartAngle + slice.arc / 2;\r\n        var radius = slice.radius;\r\n        var tx = radius * $math.cos(mAngle);\r\n        var ty = radius * $math.sin(mAngle);\r\n        var angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n        slice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n        this.dx = -this.pixelX;\r\n        this.dy = -this.pixelY;\r\n    };\r\n    /**\r\n     * Copies properties and labels from another [[ChordNode]].\r\n     *\r\n     * @param {ChordNode}  source  Source node\r\n     */\r\n    ChordNode.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.label.copyFrom(source.label);\r\n        this.slice.copyFrom(source.slice);\r\n    };\r\n    return ChordNode;\r\n}(FlowDiagramNode));\r\nexport { ChordNode };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n//# sourceMappingURL=ChordNode.js.map","/**\r\n * Bullet module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet } from \"./Bullet\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nvar CircleBullet = /** @class */ (function (_super) {\r\n    tslib_1.__extends(CircleBullet, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function CircleBullet() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"CircleBullet\";\r\n        var circle = _this.createChild(Circle);\r\n        circle.shouldClone = false;\r\n        circle.radius = 5;\r\n        circle.isMeasured = false;\r\n        _this.circle = circle;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Copies all proprities and related stuff from another instance of\r\n     * [[CircleBullet]].\r\n     *\r\n     * @param {this}  source  Source element\r\n     */\r\n    CircleBullet.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.circle.copyFrom(source.circle);\r\n    };\r\n    return CircleBullet;\r\n}(Bullet));\r\nexport { CircleBullet };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\r\n//# sourceMappingURL=CircleBullet.js.map","/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nvar ClockHand = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ClockHand, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ClockHand() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * An Axis hand is related to.\r\n         *\r\n         * @type {MutableValueDisposer<Axis>}\r\n         */\r\n        _this._axis = new MutableValueDisposer();\r\n        _this.className = \"ClockHand\";\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n        _this.stroke = _this.fill;\r\n        var pin = new Circle();\r\n        pin.radius = 5;\r\n        _this.pin = pin;\r\n        _this.isMeasured = false;\r\n        _this.startWidth = 5;\r\n        _this.endWidth = 1;\r\n        _this.width = percent(100);\r\n        _this.height = percent(100);\r\n        _this.radius = percent(100);\r\n        _this.innerRadius = percent(0);\r\n        var hand = new Trapezoid();\r\n        _this.hand = hand;\r\n        _this._disposers.push(_this._axis);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Re(validates) the clock hand, effectively redrawing it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ClockHand.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        var hand = this.hand;\r\n        hand.width = this.pixelWidth;\r\n        var h = Math.max(this.startWidth, this.endWidth);\r\n        hand.height = h;\r\n        hand.leftSide = percent(this.startWidth / h * 100);\r\n        hand.rightSide = percent(this.endWidth / h * 100);\r\n        if (this.axis) {\r\n            var renderer = this.axis.renderer;\r\n            var x0 = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n            var x1 = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n            hand.x = x0;\r\n            hand.y = -h / 2;\r\n            hand.width = x1 - x0;\r\n        }\r\n    };\r\n    Object.defineProperty(ClockHand.prototype, \"pin\", {\r\n        /**\r\n         * @return {Circle} Pin element\r\n         */\r\n        get: function () {\r\n            return this._pin;\r\n        },\r\n        /**\r\n         * A circle element used as hand's base. (pin)\r\n         *\r\n         * @param {Circle}  pin  Pin element\r\n         */\r\n        set: function (pin) {\r\n            if (this._pin) {\r\n                this.removeDispose(this._pin);\r\n            }\r\n            if (pin) {\r\n                this._pin = pin;\r\n                pin.parent = this;\r\n                this._disposers.push(pin);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"hand\", {\r\n        /**\r\n         * @return {Trapezoid} Hand element\r\n         */\r\n        get: function () {\r\n            return this._hand;\r\n        },\r\n        /**\r\n         * A trapezoid shape used for hand itself.\r\n         *\r\n         * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n         * `endWidth` properties.\r\n         *\r\n         * Set `endWidth` to 1 (px) to make it pointy.\r\n         *\r\n         * @param {Trapezoid}  hand  Hand element\r\n         */\r\n        set: function (hand) {\r\n            if (this._hand) {\r\n                this.removeDispose(this._hand);\r\n            }\r\n            if (hand) {\r\n                this._hand = hand;\r\n                hand.parent = this;\r\n                this._disposers.push(hand);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"radius\", {\r\n        /**\r\n         * @return {number} Radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Radius of the hand's outer end. (tip)\r\n         *\r\n         * Absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @default Percent(0)\r\n         * @param {number | Percent}  value  Radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return {number} Radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Radius of the hand's inner end. (base)\r\n         *\r\n         * Absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @default Percent(0)\r\n         * @param {number | Percent}  value  Radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"startWidth\", {\r\n        /**\r\n         * @return {number} Width (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startWidth\");\r\n        },\r\n        /**\r\n         * Width, in pixels, of the clock hand's inner end. (base)\r\n         *\r\n         * @default 5\r\n         * @param {number}  value  Width (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startWidth\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"endWidth\", {\r\n        /**\r\n         * @return {number} Width (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endWidth\");\r\n        },\r\n        /**\r\n         * Width, in pixels, of the clock hand's outer end. (tip)\r\n         *\r\n         * @default 1\r\n         * @param {number}  value  Width (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endWidth\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"rotationDirection\", {\r\n        /**\r\n         * @return {\"any\" | \"clockWise\" | \"counterClockWise\"} rotationDirection\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"rotationDirection\");\r\n        },\r\n        /**\r\n         * Rotation direction\r\n         *\r\n         * @default any\r\n         * @param {\"any\" | \"clockWise\" | \"counterClockWise\"}  value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"rotationDirection\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Moves clock hand to particular value.\r\n     *\r\n     * If `duration` is set to a number in milliseconds, the hand will move\r\n     * to the new position gracefully, rather than jumping rigth to it.\r\n     *\r\n     * Alternatively, you can also set `value` directly.\r\n     *\r\n     * @param {any}     value     New value\r\n     * @param {number}  duration  Animation duration (ms)\r\n     * @param {(value:number)=>number}  easing  Animation easing function\r\n     */\r\n    ClockHand.prototype.showValue = function (value, duration, easing) {\r\n        this._value = value;\r\n        if (value != undefined) {\r\n            if (!$type.isNumber(duration)) {\r\n                duration = 0;\r\n            }\r\n            if (this.axis) {\r\n                var renderer = this.axis.renderer;\r\n                var newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n                var currentAngle = this.rotation;\r\n                if (this.rotationDirection == \"clockWise\") {\r\n                    if (newAngle < currentAngle) {\r\n                        this.rotation = currentAngle - 360;\r\n                    }\r\n                }\r\n                if (this.rotationDirection == \"counterClockWise\") {\r\n                    if (newAngle > currentAngle) {\r\n                        this.rotation = currentAngle + 360;\r\n                    }\r\n                }\r\n                this.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(ClockHand.prototype, \"value\", {\r\n        /**\r\n         * @return {any} Value\r\n         */\r\n        get: function () {\r\n            return this._value;\r\n        },\r\n        /**\r\n         * A current value clock hand is pointing to.\r\n         *\r\n         * @param {any}  value  Value\r\n         */\r\n        set: function (value) {\r\n            this.showValue(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"axis\", {\r\n        /**\r\n         * @return {Axis} Axis\r\n         */\r\n        get: function () {\r\n            return this._axis.get();\r\n        },\r\n        /**\r\n         * An Axis clock hand is associated with.\r\n         *\r\n         * Hand's `value` relates to values on the Axis.\r\n         *\r\n         * @param {Axis}  axis  Axis\r\n         */\r\n        set: function (axis) {\r\n            if (this.axis != axis) {\r\n                this._axis.set(axis, new MultiDisposer([\r\n                    axis.events.on(\"datavalidated\", this.updateValue, this, false),\r\n                    axis.events.on(\"datarangechanged\", this.updateValue, this, false),\r\n                    axis.events.on(\"dataitemsvalidated\", this.updateValue, this, false),\r\n                    axis.events.on(\"propertychanged\", this.invalidate, this, false)\r\n                ]));\r\n            }\r\n            if (axis) {\r\n                var chart = axis.chart;\r\n                if (chart) {\r\n                    this.rotation = chart.startAngle;\r\n                }\r\n            }\r\n            this.parent = axis.renderer;\r\n            this.zIndex = 5;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Triggers `value` accessor, so that Hand animates to new position, in case\r\n     * value has changed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ClockHand.prototype.updateValue = function () {\r\n        this.value = this.value;\r\n    };\r\n    /**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param {object}  config  Config\r\n */\r\n    ClockHand.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Connect clock hands with axes\r\n            if ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n                config.axis = this.map.getKey(config.axis);\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    return ClockHand;\r\n}(Container));\r\nexport { ClockHand };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n//# sourceMappingURL=ClockHand.js.map","/**\r\n * Module that defines everything related to building Columns.\r\n * It is a container which has column element which is a RoundedRectangle.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to creates Columns.\r\n *\r\n * @see {@link IColumnEvents} for a list of available events\r\n * @see {@link IColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nvar Column = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Column, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Column() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Column\";\r\n        _this.width = percent(80);\r\n        _this.height = percent(80);\r\n        //this.isMeasured = true; // for correct position of the tooltip\r\n        _this.applyOnClones = true;\r\n        _this.strokeOpacity = 1;\r\n        _this.layout = \"none\";\r\n        _this.createAssets();\r\n        // otherwise users will have to set layout themselves if they'll want to align, scale etc children\r\n        _this.events.on(\"childadded\", _this.handleKidAdded, _this, false);\r\n        return _this;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    Column.prototype.handleKidAdded = function () {\r\n        if (this.layout == \"none\") {\r\n            this.layout = \"absolute\";\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Column.prototype.createAssets = function () {\r\n        this.column = this.createChild(RoundedRectangle);\r\n        this.column.shouldClone = false;\r\n        this.column.cornerRadius(0, 0, 0, 0);\r\n        this._disposers.push(this.column);\r\n    };\r\n    /**\r\n     * @ignore Exclude from docs\r\n     */\r\n    Column.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        var column = this.column;\r\n        if (column) {\r\n            column.width = $math.min(this.pixelWidth, this.maxWidth);\r\n            column.height = $math.min(this.pixelHeight, this.maxHeight);\r\n            if (column.invalid) {\r\n                column.validate(); // important!\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[Column]].\r\n     *\r\n     * @param {Column} source Source Column\r\n     */\r\n    Column.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.column) {\r\n            this.column.copyFrom(source.column);\r\n        }\r\n    };\r\n    Object.defineProperty(Column.prototype, \"bbox\", {\r\n        /**\r\n         * Returns bounding box (square) for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {IRectangle}\r\n         */\r\n        get: function () {\r\n            if (this.definedBBox) {\r\n                return this.definedBBox;\r\n            }\r\n            if (this.column) {\r\n                return { x: 0, y: 0, width: this.column.measuredWidth, height: this.column.measuredHeight };\r\n            }\r\n            else {\r\n                return { x: 0, y: 0, width: $math.min(this.pixelWidth, this.maxWidth), height: $math.min(this.pixelHeight, this.maxHeight) };\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Column;\r\n}(Container));\r\nexport { Column };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column\"] = Column;\r\n//# sourceMappingURL=Column.js.map","/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column } from \"./Column\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nvar Column3D = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Column3D, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Column3D() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Column3D\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    Column3D.prototype.createAssets = function () {\r\n        this.column3D = this.createChild(Rectangle3D);\r\n        this.column3D.shouldClone = false;\r\n        this.column3D.strokeOpacity = 0;\r\n        // some dirty hack so that if user access column, it won't get error\r\n        this.column = this.column3D;\r\n    };\r\n    /**\r\n     * @ignore Exclude from docs\r\n     */\r\n    Column3D.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        if (this.column3D) {\r\n            this.column3D.width = this.pixelWidth;\r\n            this.column3D.height = this.pixelHeight;\r\n            if (this.column3D.invalid) {\r\n                this.column3D.validate();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[Column3D]].\r\n     *\r\n     * @param {Column3D} source Source Column3D\r\n     */\r\n    Column3D.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.column3D) {\r\n            this.column3D.copyFrom(source.column3D);\r\n        }\r\n    };\r\n    return Column3D;\r\n}(Column));\r\nexport { Column3D };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column3D\"] = Column3D;\r\n//# sourceMappingURL=Column3D.js.map","/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column } from \"./Column\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nvar ConeColumn = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ConeColumn, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ConeColumn() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ConeColumn\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    ConeColumn.prototype.createAssets = function () {\r\n        this.coneColumn = this.createChild(Cone);\r\n        this.coneColumn.shouldClone = false;\r\n        // some dirty hack so that if user access column, it won't get error\r\n        this.column = this.coneColumn;\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[ConeColumn]].\r\n     *\r\n     * @param {ConeColumn} source Source ConeColumn\r\n     */\r\n    ConeColumn.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.coneColumn) {\r\n            this.coneColumn.copyFrom(source.coneColumn);\r\n        }\r\n    };\r\n    return ConeColumn;\r\n}(Column));\r\nexport { ConeColumn };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n//# sourceMappingURL=ConeColumn.js.map","/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column } from \"./Column\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar CurvedColumn = /** @class */ (function (_super) {\r\n    tslib_1.__extends(CurvedColumn, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function CurvedColumn() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"CurvedColumn\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * [createAssets description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    CurvedColumn.prototype.createAssets = function () {\r\n        this.curvedColumn = this.createChild(Sprite);\r\n        this.curvedColumn.shouldClone = false;\r\n        this.setPropertyValue(\"tension\", 0.7);\r\n        this.width = percent(120);\r\n        this.height = percent(120);\r\n        // some dirty hack so that if user access column, it won't get error\r\n        this.column = this.curvedColumn;\r\n    };\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    CurvedColumn.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var w = this.realWidth;\r\n        var h = this.realHeight;\r\n        var x = this.realX - this.pixelX;\r\n        var y = this.realY - this.pixelY;\r\n        var points;\r\n        var ww = this.width;\r\n        var pw = 0.8;\r\n        var tensionX = 1;\r\n        var tensionY = 1;\r\n        if (this.orientation == \"vertical\") {\r\n            tensionX = this.tension;\r\n            points = [{ x: 0, y: h + y }, { x: w / 2, y: y }, { x: w, y: h + y }];\r\n        }\r\n        else {\r\n            tensionY = this.tension;\r\n            points = [{ x: x, y: 0 }, { x: x + w, y: h / 2 }, { x: x, y: h }];\r\n        }\r\n        var path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\r\n        this.column.path = path;\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[CurvedColumn]].\r\n     *\r\n     * @param {CurvedColumn}  source  Source CurvedColumn\r\n     */\r\n    CurvedColumn.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.curvedColumn) {\r\n            this.curvedColumn.copyFrom(source.curvedColumn);\r\n        }\r\n    };\r\n    Object.defineProperty(CurvedColumn.prototype, \"tension\", {\r\n        /**\r\n         * @return {number} Tension (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tension\");\r\n        },\r\n        /**\r\n         * Horizontal tension of the curve.\r\n         *\r\n         * Tension defines how \"lose\" the line will be.\r\n         *\r\n         * 1 is the maximum tension which would result in pointy columns with\r\n         * straight edges.\r\n         *\r\n         * The smaller the tension th wider the column will be.\r\n         *\r\n         * @default 0.7\r\n         * @param {number}  value tension (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tension\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CurvedColumn.prototype, \"orientation\", {\r\n        /**\r\n         * @type {Orientation} Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"orientation\");\r\n        },\r\n        /**\r\n         * Orientation of the column.\r\n         *\r\n         * Available options: \"vertical\" (default) and \"horizontal\".\r\n         *\r\n         * @default \"vertical\"\r\n         * @param {Orientation}  value  Orientation\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"orientation\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return CurvedColumn;\r\n}(Column));\r\nexport { CurvedColumn };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;\r\n//# sourceMappingURL=CurvedColumn.js.map","/**\r\n * Bullet module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet } from \"./Bullet\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nvar ErrorBullet = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ErrorBullet, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ErrorBullet() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ErrorBullet\";\r\n        _this.errorLine = _this.createChild(Sprite);\r\n        _this.errorLine.shouldClone = false;\r\n        _this.width = 20;\r\n        _this.height = 20;\r\n        _this.strokeOpacity = 1;\r\n        _this.isDynamic = true;\r\n        return _this;\r\n    }\r\n    ErrorBullet.prototype.validatePosition = function () {\r\n        _super.prototype.validatePosition.call(this);\r\n        var w = this.pixelWidth / 2;\r\n        var h = this.pixelHeight / 2;\r\n        this.errorLine.path = $path.moveTo({ x: -w, y: -h }) + $path.lineTo({ x: w, y: -h }) + $path.moveTo({ x: 0, y: -h }) + $path.lineTo({ x: 0, y: h }) + $path.moveTo({ x: -w, y: h }) + $path.lineTo({ x: w, y: h });\r\n    };\r\n    /**\r\n     * Copies all proprities and related stuff from another instance of\r\n     * [[ErrorBullet]].\r\n     *\r\n     * @param {this}  source  Source element\r\n     */\r\n    ErrorBullet.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.errorLine.copyFrom(source.errorLine);\r\n    };\r\n    return ErrorBullet;\r\n}(Bullet));\r\nexport { ErrorBullet };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ErrorBullet\"] = ErrorBullet;\r\n//# sourceMappingURL=ErrorBullet.js.map","/**\r\n * FlowDiagramLink module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Flow Diagram.\r\n *\r\n * @see {@link IFlowDiagramLinkEvents} for a list of available events\r\n * @see {@link IFlowDiagramLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar FlowDiagramLink = /** @class */ (function (_super) {\r\n    tslib_1.__extends(FlowDiagramLink, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FlowDiagramLink() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"FlowDiagramLink\";\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.maskBullets = false;\r\n        _this.colorMode = \"fromNode\";\r\n        _this.layout = \"none\";\r\n        _this.isMeasured = false;\r\n        _this.startAngle = 0;\r\n        _this.endAngle = 0;\r\n        _this.strokeOpacity = 0;\r\n        // this is very important, otherwise the container will be shifted\r\n        _this.verticalCenter = \"none\";\r\n        _this.horizontalCenter = \"none\";\r\n        _this.tooltipText = \"{fromName}→{toName}:{value.value}\";\r\n        _this.tooltipLocation = 0.5;\r\n        _this.link = _this.createChild(Sprite);\r\n        _this.link.shouldClone = false;\r\n        _this.link.setElement(_this.paper.add(\"path\"));\r\n        _this.link.isMeasured = false;\r\n        _this.fillOpacity = 0.2;\r\n        _this.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Positions bullets\r\n     * @ignore\r\n     */\r\n    FlowDiagramLink.prototype.positionBullets = function () {\r\n        var _this = this;\r\n        $iter.each(this.bullets.iterator(), function (bullet) {\r\n            bullet.parent = _this.bulletsContainer;\r\n            bullet.maxWidth = _this.maxWidth;\r\n            bullet.maxHeight = _this.maxHeight;\r\n            _this.positionBullet(bullet);\r\n        });\r\n    };\r\n    Object.defineProperty(FlowDiagramLink.prototype, \"bulletsContainer\", {\r\n        /**\r\n         * Bullets container\r\n         * @type Container\r\n         */\r\n        get: function () {\r\n            if (!this._bulletsContainer) {\r\n                var bulletsContainer = this.createChild(Container);\r\n                bulletsContainer.shouldClone = false;\r\n                bulletsContainer.layout = \"none\";\r\n                this._bulletsContainer = bulletsContainer;\r\n            }\r\n            return this._bulletsContainer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramLink.prototype, \"bulletsMask\", {\r\n        /**\r\n         * Bullets mask spite\r\n         * @type Sprite\r\n         */\r\n        get: function () {\r\n            if (!this._bulletsMask) {\r\n                var bulletsMask = this.createChild(Sprite);\r\n                bulletsMask.shouldClone = false;\r\n                bulletsMask.setElement(this.paper.add(\"path\"));\r\n                bulletsMask.isMeasured = false;\r\n                this._bulletsMask = bulletsMask;\r\n            }\r\n            return this._bulletsMask;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Positions bullets at relative bullet.locationX position on the link.\r\n     * @ignore\r\n     */\r\n    FlowDiagramLink.prototype.positionBullet = function (bullet) {\r\n        var location = bullet.locationX;\r\n        if (!$type.isNumber(location)) {\r\n            location = bullet.locationY;\r\n        }\r\n        if (!$type.isNumber(location)) {\r\n            location = 0.5;\r\n        }\r\n        var point = this.middleLine.positionToPoint(location);\r\n        bullet.moveTo(point);\r\n        var rotationField = bullet.propertyFields.rotation;\r\n        var angle;\r\n        if (bullet.dataItem) {\r\n            var dataContext = bullet.dataItem.dataContext;\r\n            angle = dataContext[rotationField];\r\n        }\r\n        if (!$type.isNumber(angle)) {\r\n            angle = point.angle;\r\n        }\r\n        bullet.rotation = angle;\r\n    };\r\n    Object.defineProperty(FlowDiagramLink.prototype, \"startAngle\", {\r\n        /**\r\n         * @return {number} Start angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * [startAngle description]\r\n         *\r\n         * @todo Description\r\n         * @param {number}  value  Start angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramLink.prototype, \"endAngle\", {\r\n        /**\r\n         * @return {number} End angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endAngle\");\r\n        },\r\n        /**\r\n         * [endAngle description]\r\n         *\r\n         * @todo Description\r\n         * @param {number}  value  End angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramLink.prototype, \"colorMode\", {\r\n        /**\r\n         * @type {\"solid\" | \"gradient\"} Fill mode\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"colorMode\");\r\n        },\r\n        /**\r\n         * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n         * Some of the links, like ChordLink does not support gradiens well.\r\n         *\r\n         * @param {\"solid\" | \"gradient\" | \"fromNode\" | \"toNode\"}  value  Fill mode\r\n         */\r\n        set: function (value) {\r\n            if (value == \"gradient\") {\r\n                var color_1 = this.fill;\r\n                this.gradient.stops.clear();\r\n                if (color_1 instanceof Color) {\r\n                    this.gradient.addColor(color_1);\r\n                    this.gradient.addColor(color_1);\r\n                }\r\n                this.fill = this.gradient;\r\n                this.stroke = this.gradient;\r\n            }\r\n            this.setPropertyValue(\"colorMode\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramLink.prototype, \"maskBullets\", {\r\n        /**\r\n         * @return {boolean} mask bullets value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maskBullets\");\r\n        },\r\n        /**\r\n         * Should link bullets be masked or not\r\n         *\r\n         * @param {boolean}  value\r\n         * @default false;\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"maskBullets\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramLink.prototype, \"tooltipLocation\", {\r\n        /**\r\n         * @type {number} tooltip location value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tooltipLocation\");\r\n        },\r\n        /**\r\n         * Relative location of a tooltip.\r\n         * @default 0.5\r\n         *\r\n         * @param {number} value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tooltipLocation\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Adds color steps in the link gradient.\r\n     *\r\n     * @param {Color | Pattern | LinearGradient | RadialGradient}  value  Fill option\r\n     */\r\n    FlowDiagramLink.prototype.setFill = function (value) {\r\n        _super.prototype.setFill.call(this, value);\r\n        var gradient = this._gradient;\r\n        if (gradient && value instanceof Color) {\r\n            gradient.stops.clear();\r\n            gradient.addColor(value);\r\n            gradient.addColor(value);\r\n        }\r\n    };\r\n    /**\r\n     * Updates bounding box based on element dimension settings.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    FlowDiagramLink.prototype.measureElement = function () {\r\n    };\r\n    Object.defineProperty(FlowDiagramLink.prototype, \"bullets\", {\r\n        /**\r\n         * List of bullets\r\n         *\r\n         * @return {ListTemplate<Bullet>} [description]\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._bullets) {\r\n                this._bullets = new ListTemplate(new Bullet());\r\n                this._disposers.push(new ListDisposer(this._bullets));\r\n                this._disposers.push(this._bullets.template);\r\n                this._bullets.events.on(\"inserted\", function (event) {\r\n                    event.newValue.events.on(\"propertychanged\", function (event) {\r\n                        if (event.property == \"locationX\" || event.property == \"locationY\") {\r\n                            _this.positionBullet(event.target);\r\n                        }\r\n                    }, undefined, false);\r\n                }, undefined, false);\r\n            }\r\n            return this._bullets;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies properties from another [[FlowDiagramLink]].\r\n     *\r\n     * @param {FlowDiagramLink}  source  Source link\r\n     */\r\n    FlowDiagramLink.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.bullets.copyFrom(source.bullets);\r\n        var middleLine = this.middleLine;\r\n        if (middleLine) {\r\n            if (middleLine instanceof Line && source.middleLine instanceof Line) {\r\n                middleLine.copyFrom(source.middleLine);\r\n            }\r\n            if (middleLine instanceof Polyline && source.middleLine instanceof Polyline) {\r\n                middleLine.copyFrom(source.middleLine);\r\n            }\r\n        }\r\n        this.link.copyFrom(source.link);\r\n    };\r\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return {number} Tooltip X (px)\r\n     */\r\n    FlowDiagramLink.prototype.getTooltipX = function () {\r\n        if (this.middleLine) {\r\n            return this.middleLine.positionToPoint(this.tooltipLocation).x;\r\n        }\r\n    };\r\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return {number} Tooltip Y (px)\r\n     */\r\n    FlowDiagramLink.prototype.getTooltipY = function () {\r\n        if (this.middleLine) {\r\n            return this.middleLine.positionToPoint(this.tooltipLocation).y;\r\n        }\r\n    };\r\n    Object.defineProperty(FlowDiagramLink.prototype, \"gradient\", {\r\n        /**\r\n         * A gradiend instance that is used to provided colored gradient fills for\r\n         * the Flow link.\r\n         *\r\n         * @type {LinearGradient}\r\n         */\r\n        get: function () {\r\n            if (!this._gradient) {\r\n                this._gradient = new LinearGradient();\r\n            }\r\n            return this._gradient;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return FlowDiagramLink;\r\n}(Container));\r\nexport { FlowDiagramLink };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramLink\"] = FlowDiagramLink;\r\n//# sourceMappingURL=FlowDiagramLink.js.map","/**\r\n * FlowDiagramNode module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendSettings } from \"../Legend\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a node in a Flow Diagram.\r\n *\r\n * A Flow node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[FlowLink]] elements.\r\n *\r\n * @see {@link IFlowDiagramNodeEvents} for a list of available events\r\n * @see {@link IFlowDiagramNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar FlowDiagramNode = /** @class */ (function (_super) {\r\n    tslib_1.__extends(FlowDiagramNode, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FlowDiagramNode() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Settings for the appearance of the related legend items.\r\n         */\r\n        _this.legendSettings = new LegendSettings();\r\n        _this.className = \"FlowDiagramNode\";\r\n        _this.isMeasured = false;\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.draggable = true;\r\n        _this.inert = true;\r\n        _this.setStateOnChildren = true;\r\n        _this.events.on(\"positionchanged\", _this.invalidateLinks, _this, false);\r\n        _this.events.on(\"sizechanged\", _this.invalidateLinks, _this, false);\r\n        _this.events.on(\"hit\", _this.handleHit, _this, false);\r\n        return _this;\r\n    }\r\n    FlowDiagramNode.prototype.handleHit = function (event) {\r\n        if (this.isHidden || this.isHiding) {\r\n            this.show();\r\n        }\r\n        else {\r\n            this.hide();\r\n        }\r\n    };\r\n    /**\r\n     * Shows hidden node.\r\n     *\r\n     * @param  {number}     duration  Duration of reveal animation (ms)\r\n     * @return {Animation}            Animation\r\n     */\r\n    FlowDiagramNode.prototype.show = function (duration) {\r\n        var animation = _super.prototype.show.call(this, duration);\r\n        this.outgoingDataItems.each(function (dataItem) {\r\n            if (!dataItem.toNode || (dataItem.toNode && !dataItem.toNode.isHidden)) {\r\n                dataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n            }\r\n        });\r\n        this.incomingDataItems.each(function (dataItem) {\r\n            if (!dataItem.fromNode || (dataItem.fromNode && !dataItem.fromNode.isHidden)) {\r\n                dataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n            }\r\n        });\r\n        return animation;\r\n    };\r\n    /**\r\n     * Hides node.\r\n     *\r\n     * @param  {number}     duration  Duration of hiding animation (ms)\r\n     * @return {Animation}            Animation\r\n     */\r\n    FlowDiagramNode.prototype.hide = function (duration) {\r\n        var animation = _super.prototype.hide.call(this, duration);\r\n        this.outgoingDataItems.each(function (dataItem) {\r\n            dataItem.setWorkingValue(\"value\", 0, duration);\r\n        });\r\n        this.incomingDataItems.each(function (dataItem) {\r\n            dataItem.setWorkingValue(\"value\", 0, duration);\r\n        });\r\n        return animation;\r\n    };\r\n    /**\r\n     * Marks node as invalid, for redrawal in the next update cycle.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    FlowDiagramNode.prototype.validate = function () {\r\n        if (!this.isDisposed()) {\r\n            _super.prototype.validate.call(this);\r\n            this.invalidateLinks();\r\n        }\r\n    };\r\n    /**\r\n     * Invalidates all links, attached to this node.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    FlowDiagramNode.prototype.invalidateLinks = function () {\r\n        var _this = this;\r\n        this.outgoingDataItems.each(function (dataItem) {\r\n            var link = dataItem.link;\r\n            if (link.colorMode == \"fromNode\") {\r\n                link.fill = link.dataItem.fromNode.color;\r\n            }\r\n            if (link.colorMode == \"gradient\") {\r\n                link.fill = link.gradient;\r\n                link.stroke = link.gradient;\r\n                var stop_1 = link.gradient.stops.getIndex(0);\r\n                if (stop_1) {\r\n                    stop_1.color = _this.color;\r\n                    link.gradient.validate();\r\n                }\r\n            }\r\n        });\r\n        this.incomingDataItems.each(function (dataItem) {\r\n            var link = dataItem.link;\r\n            if (link.colorMode == \"toNode\") {\r\n                link.fill = link.dataItem.toNode.color;\r\n            }\r\n            if (link.colorMode == \"gradient\") {\r\n                link.fill = link.gradient;\r\n                link.stroke = link.gradient;\r\n                var stop_2 = link.gradient.stops.getIndex(1);\r\n                if (stop_2) {\r\n                    stop_2.color = _this.color;\r\n                    link.gradient.validate();\r\n                }\r\n            }\r\n        });\r\n    };\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"incomingDataItems\", {\r\n        /**\r\n         * List of incoming items (links).\r\n         *\r\n         * @readonly\r\n         * @return {List<FlowDiagramDataItem>} Incoming items\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._incomingDataItems) {\r\n                var incomingDataItems = new List();\r\n                incomingDataItems.events.on(\"inserted\", function () {\r\n                    if (_this.chart.sortBy == \"name\") {\r\n                        _this._incomingSorted = $iter.sort(_this._incomingDataItems.iterator(), function (x, y) { return $string.order(x.fromName, y.fromName); });\r\n                    }\r\n                    else if (_this.chart.sortBy == \"value\") {\r\n                        _this._incomingSorted = $iter.sort(_this._incomingDataItems.iterator(), function (x, y) { return $order.reverse($number.order(x.value, y.value)); });\r\n                    }\r\n                    else {\r\n                        _this._incomingSorted = _this._incomingDataItems.iterator();\r\n                    }\r\n                }, undefined, false);\r\n                this._incomingDataItems = incomingDataItems;\r\n            }\r\n            return this._incomingDataItems;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"outgoingDataItems\", {\r\n        /**\r\n         * List of outgoing items (links).\r\n         *\r\n         * @readonly\r\n         * @return {List<FlowDiagramDataItem>} Outgoing items\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._outgoingDataItems) {\r\n                var outgoingDataItems = new List();\r\n                outgoingDataItems.events.on(\"inserted\", function () {\r\n                    if (_this.chart.sortBy == \"name\") {\r\n                        _this._outgoingSorted = $iter.sort(_this._outgoingDataItems.iterator(), function (x, y) { return $string.order(x.fromName, y.fromName); });\r\n                    }\r\n                    else if (_this.chart.sortBy == \"value\") {\r\n                        _this._outgoingSorted = $iter.sort(_this._outgoingDataItems.iterator(), function (x, y) { return $order.reverse($number.order(x.value, y.value)); });\r\n                    }\r\n                    else {\r\n                        _this._outgoingSorted = _this._outgoingDataItems.iterator();\r\n                    }\r\n                }, undefined, false);\r\n                this._outgoingDataItems = outgoingDataItems;\r\n            }\r\n            return this._outgoingDataItems;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"name\", {\r\n        /**\r\n         * @return {string} Name\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"name\");\r\n        },\r\n        /**\r\n         * A name of the node.\r\n         *\r\n         * @param {string}  value  Name\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"name\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"total\", {\r\n        /**\r\n         * @return {number} Value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"total\");\r\n        },\r\n        /**\r\n         * Sum of all incoming+outgoing link values\r\n         *\r\n         * @param {number}  value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"total\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"totalIncoming\", {\r\n        /**\r\n         * @return {number} Value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"totalIncoming\");\r\n        },\r\n        /**\r\n         * Sum of all incomming link values.\r\n         *\r\n         * @param {number}  value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"totalIncoming\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"totalOutgoing\", {\r\n        /**\r\n         * @return {number} Value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"totalOutgoing\");\r\n        },\r\n        /**\r\n         * Sum of all outgoing link values.\r\n         *\r\n         * @param {number}  value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"totalOutgoing\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"color\", {\r\n        /**\r\n         * @return {Color} Color\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"color\");\r\n        },\r\n        /**\r\n         * Node's color.\r\n         *\r\n         * @param {Color}  value  Color\r\n         */\r\n        set: function (value) {\r\n            this.setColorProperty(\"color\", value);\r\n            if (this._background) {\r\n                this._background.fill = value;\r\n            }\r\n            this.fill = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates elements in related legend container, that mimics the look of this\r\n     * Series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Container}  marker  Legend item container\r\n     */\r\n    FlowDiagramNode.prototype.createLegendMarker = function (marker) {\r\n        var w = marker.pixelWidth;\r\n        var h = marker.pixelHeight;\r\n        marker.removeChildren();\r\n        var column = marker.createChild(RoundedRectangle);\r\n        column.shouldClone = false;\r\n        $object.copyProperties(this, column, visualProperties);\r\n        column.stroke = this.fill;\r\n        column.copyFrom(this);\r\n        column.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n        column.width = w;\r\n        column.height = h;\r\n        var legendDataItem = marker.dataItem;\r\n        legendDataItem.color = column.fill;\r\n        legendDataItem.colorOrig = column.fill;\r\n    };\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"legendDataItem\", {\r\n        /**\r\n         * @return {LegendDataItem<Series, ISeriesEvents>} Data item\r\n         */\r\n        get: function () {\r\n            return this._legendDataItem;\r\n        },\r\n        /**\r\n         * Legend data item that corresponds to this series.\r\n         *\r\n         * @param {LegendDataItem<Series, ISeriesEvents>}  value  Data item\r\n         */\r\n        set: function (value) {\r\n            this._legendDataItem = value;\r\n            this._legendDataItem.itemContainer.deepInvalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return FlowDiagramNode;\r\n}(Container));\r\nexport { FlowDiagramNode };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramNode\"] = FlowDiagramNode;\r\n//# sourceMappingURL=FlowDiagramNode.js.map","/**\r\n * Module that defines everything related to building Funnel slices.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to create [[FunnelSlice]] elements.\r\n *\r\n * @see {@link IFunnelSliceEvents} for a list of available events\r\n * @see {@link IFunnelSliceAdapters} for a list of available adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nvar FunnelSlice = /** @class */ (function (_super) {\r\n    tslib_1.__extends(FunnelSlice, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FunnelSlice() {\r\n        var _this = _super.call(this) || this;\r\n        _this.slice = _this.createChild(Sprite);\r\n        _this.slice.setElement(_this.paper.add(\"path\"));\r\n        _this.slice.isMeasured = false;\r\n        _this.orientation = \"vertical\";\r\n        _this.bottomWidth = percent(100);\r\n        _this.topWidth = percent(100);\r\n        _this.isMeasured = false;\r\n        _this.width = 10;\r\n        _this.height = 10;\r\n        _this.expandDistance = 0;\r\n        _this.className = \"FunnelSlice\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the element.\r\n     */\r\n    FunnelSlice.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var pt = this.pixelPaddingTop;\r\n        var pb = this.pixelPaddingBottom;\r\n        var pr = this.pixelPaddingRight;\r\n        var pl = this.pixelPaddingLeft;\r\n        var w = this.pixelWidth - pr - pl;\r\n        var h = this.pixelHeight - pt - pb;\r\n        var ed = this.expandDistance;\r\n        var path = \"\";\r\n        if (this.orientation == \"vertical\") {\r\n            var tw = $utils.relativeToValue(this.topWidth, w);\r\n            var bw = $utils.relativeToValue(this.bottomWidth, w);\r\n            var tl = { x: (w - tw) / 2 + pl, y: pt };\r\n            var tr = { x: (w + tw) / 2 + pl, y: pt };\r\n            var br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n            var bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n            var cpr = { x: tr.x + (br.x - tr.x) / 2 + ed * h, y: tr.y + 0.5 * h };\r\n            var cpl = { x: tl.x + (bl.x - tl.x) / 2 - ed * h, y: tl.y + 0.5 * h };\r\n            var qp1 = $path.lineTo(br);\r\n            var qp2 = \"\";\r\n            if (ed != 0) {\r\n                qp1 = $path.quadraticCurveTo(br, cpr);\r\n                qp2 = $path.quadraticCurveTo(tl, cpl);\r\n            }\r\n            path = $path.moveTo(tl) + $path.lineTo(tr) + qp1 + $path.lineTo(bl) + qp2;\r\n            this.tickPoint = { x: tr.x + (br.x - tr.x) / 2, y: tr.y + (br.y - tr.y) / 2 };\r\n        }\r\n        else {\r\n            var tw = $utils.relativeToValue(this.topWidth, h);\r\n            var bw = $utils.relativeToValue(this.bottomWidth, h);\r\n            var tt = { x: pl, y: (h - tw) / 2 + pt };\r\n            var tb = { x: pl, y: (h + tw) / 2 + pt };\r\n            var bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n            var bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n            var cpr = { y: tt.y + (bt.y - tt.y) / 2 - ed * w, x: tt.x + 0.5 * w };\r\n            var cpl = { y: tb.y + (bb.y - tb.y) / 2 + ed * w, x: tb.x + 0.5 * w };\r\n            var qp1 = $path.lineTo(bt);\r\n            var qp2 = \"\";\r\n            if (ed != 0) {\r\n                qp1 = $path.quadraticCurveTo(bt, cpr);\r\n                qp2 = $path.quadraticCurveTo(tb, cpl);\r\n            }\r\n            path = $path.moveTo(tb) + $path.lineTo(tt) + qp1 + $path.lineTo(bb) + qp2;\r\n            this.tickPoint = { y: tb.y + (bb.y - tb.y) / 2, x: tb.x + (bb.x - tb.x) / 2 };\r\n        }\r\n        this.slice.path = path;\r\n        this.invalidateLayout();\r\n    };\r\n    FunnelSlice.prototype.getPoint = function (locationX, locationY) {\r\n        var pt = this.pixelPaddingTop;\r\n        var pb = this.pixelPaddingBottom;\r\n        var pr = this.pixelPaddingRight;\r\n        var pl = this.pixelPaddingLeft;\r\n        var w = this.pixelWidth - pr - pl;\r\n        var h = this.pixelHeight - pt - pb;\r\n        if (this.orientation == \"vertical\") {\r\n            var tw = $utils.relativeToValue(this.topWidth, w);\r\n            var bw = $utils.relativeToValue(this.bottomWidth, w);\r\n            var tl = { x: (w - tw) / 2 + pl, y: pt };\r\n            var tr = { x: (w + tw) / 2 + pl, y: pt };\r\n            var br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n            var bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n            var mlx = tl.x + (bl.x - tl.x) * locationY;\r\n            var mrx = tr.x + (br.x - tr.x) * locationY;\r\n            return { x: mlx + (mrx - mlx) * locationX, y: tr.y + (br.y - tr.y) * locationY };\r\n        }\r\n        else {\r\n            var tw = $utils.relativeToValue(this.topWidth, h);\r\n            var bw = $utils.relativeToValue(this.bottomWidth, h);\r\n            var tt = { x: pl, y: (h - tw) / 2 + pt };\r\n            var tb = { x: pl, y: (h + tw) / 2 + pt };\r\n            var bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n            var bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n            var mty = tt.y + (bt.y - tt.y) * locationX;\r\n            var mby = tb.y + (bb.y - tb.y) * locationX;\r\n            return { y: mty + (mby - mty) * locationY, x: tt.x + (bt.x - tt.x) * locationX };\r\n        }\r\n    };\r\n    Object.defineProperty(FunnelSlice.prototype, \"bottomWidth\", {\r\n        /**\r\n         * @return {number} bottom width\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"bottomWidth\");\r\n        },\r\n        /**\r\n         * Bottom width in pixels or percent.\r\n         *\r\n         * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n         * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n         * becomes read-only as it will be automatically reset by series.\r\n         *\r\n         * @param {number}  value  Bottom width\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"bottomWidth\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FunnelSlice.prototype, \"topWidth\", {\r\n        /**\r\n         * @return {number} Top width\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"topWidth\");\r\n        },\r\n        /**\r\n         * Top width in pixels or percent.\r\n         *\r\n         * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n         * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n         * becomes read-only as it will be automatically reset by series.\r\n         *\r\n         * @param {number}  value  Top width\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"topWidth\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FunnelSlice.prototype, \"orientation\", {\r\n        /**\r\n         * @return {Orientation} Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"orientation\");\r\n        },\r\n        /**\r\n         * Orientation of the funnel slice: \"horizontal\" or \"vertical\".\r\n         *\r\n         * IMPORTANT: this setting might be used to set orintation if you use slice\r\n         * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n         * becomes read-only as it will be automatically reset by series.\r\n         *\r\n         * @param {Orientation}  value  Orientation\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"orientation\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FunnelSlice.prototype, \"expandDistance\", {\r\n        /**\r\n         * @return {number} expandDistance\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"expandDistance\");\r\n        },\r\n        /**\r\n         * A relative distance slice's sides should be bent to. It's relative to the\r\n         * height of the slice.\r\n         *\r\n         * Zero (default) will mean the sides will be perfectly straight.\r\n         *\r\n         * Positive value will make them bend outwards, resulting in \"puffed\" slices.\r\n         *\r\n         * Negative values will make them bend inwards.\r\n         *\r\n         * @default 0\r\n         * @param {number}\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"expandDistance\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all parameters from another [[Sprite]].\r\n     *\r\n     * @param {Sprite} source Source Sprite\r\n     */\r\n    FunnelSlice.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.slice) {\r\n            this.slice.copyFrom(source.slice);\r\n        }\r\n    };\r\n    return FunnelSlice;\r\n}(Container));\r\nexport { FunnelSlice };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelSlice\"] = FunnelSlice;\r\n//# sourceMappingURL=FunnelSlice.js.map","/**\r\n * Funnel tick module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick } from \"../elements/Tick\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws an tick line for a funnel slice connecting it to a related label.\r\n *\r\n * @see {@link IFunnelTickEvents} for a list of available events\r\n * @see {@link IFunnelTickAdapters} for a list of available Adapters\r\n */\r\nvar FunnelTick = /** @class */ (function (_super) {\r\n    tslib_1.__extends(FunnelTick, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FunnelTick() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * A label element this tick is attached to.\r\n         *\r\n         * @type {MutableValueDisposer}\r\n         */\r\n        _this._label = new MutableValueDisposer();\r\n        /**\r\n         * A slice element this tick is attached to.\r\n         *\r\n         * @type {MutableValueDisposer}\r\n         */\r\n        _this._slice = new MutableValueDisposer();\r\n        _this.className = \"FunnelTick\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this._disposers.push(_this._label);\r\n        _this._disposers.push(_this._slice);\r\n        _this.setPropertyValue(\"locationX\", 0);\r\n        _this.setPropertyValue(\"locationY\", 0);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the tick element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    FunnelTick.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var slice = this.slice;\r\n        var point = slice.getPoint(this.locationX, this.locationY);\r\n        if (point) {\r\n            var label = this.label;\r\n            var series = slice.dataItem.component;\r\n            if (series.orientation == \"vertical\") {\r\n                var x1 = label.pixelX;\r\n                var y1 = label.pixelY;\r\n                var p0 = $utils.spritePointToSprite(point, slice, this.parent);\r\n                var p1 = $utils.spritePointToSprite({ x: x1, y: y1 }, label.parent, this.parent);\r\n                this.path = $path.moveTo(p0) + $path.lineTo(p1);\r\n            }\r\n            else {\r\n                var x1 = label.pixelX;\r\n                var y1 = label.pixelY - label.measuredHeight;\r\n                var p0 = $utils.spritePointToSprite(point, slice, this.parent);\r\n                var p1 = $utils.spritePointToSprite({ x: x1, y: y1 }, label.parent, this.parent);\r\n                this.path = $path.moveTo(p0) + $path.lineTo(p1);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(FunnelTick.prototype, \"slice\", {\r\n        /**\r\n         * @return {FunnelSlice} FunnelSlice\r\n         */\r\n        get: function () {\r\n            return this._slice.get();\r\n        },\r\n        /**\r\n         * [[FunnelSlice]] element tick is attached to.\r\n         *\r\n         * @param {FunnelSlice}  slice  Slice\r\n         */\r\n        set: function (slice) {\r\n            this._slice.set(slice, new MultiDisposer([\r\n                slice.events.on(\"transformed\", this.invalidate, this, false),\r\n                slice.events.on(\"validated\", this.invalidate, this, false)\r\n            ]));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FunnelTick.prototype, \"label\", {\r\n        /**\r\n         * @return {AxisLabelCircular} Label\r\n         */\r\n        get: function () {\r\n            return this._label.get();\r\n        },\r\n        /**\r\n         * [[Label]] element tick is attached to.\r\n         *\r\n         * @param {Label}  label  Label\r\n         */\r\n        set: function (label) {\r\n            this._label.set(label, label.events.on(\"transformed\", this.invalidate, this, false));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FunnelTick.prototype, \"locationX\", {\r\n        /**\r\n         * @return {number} Location (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"locationX\");\r\n        },\r\n        /**\r\n         * A relative horizontal position within target element a tick is pointing\r\n         * to.\r\n         *\r\n         * A scale is from 0 to 1, where 0 means left edge, and 1 right edge.\r\n         *\r\n         * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n         * of the slice), or outside 0-1 range, which will put tick anchor position\r\n         * outside target element.\r\n         *\r\n         * @param {number}  value  Location (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"locationX\", value, false, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FunnelTick.prototype, \"locationY\", {\r\n        /**\r\n         * @return {number} Location (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"locationY\");\r\n        },\r\n        /**\r\n         * A relative vertical position within target element a tick is pointing\r\n         * to.\r\n         *\r\n         * A scale is from 0 to 1, where 0 means top edge, and 1 bottom edge.\r\n         *\r\n         * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n         * of the slice), or outside 0-1 range, which will put tick anchor position\r\n         * outside target element.\r\n         *\r\n         * @param {number}  value  Location (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"locationY\", value, false, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return FunnelTick;\r\n}(Tick));\r\nexport { FunnelTick };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelTick\"] = FunnelTick;\r\n//# sourceMappingURL=FunnelTick.js.map","/**\r\n * HeatLegend module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { ValueAxis } from \"../../charts/axes/ValueAxis\";\r\nimport { AxisRendererX } from \"../../charts/axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../../charts/axes/AxisRendererY\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $colors from \"../../core/utils/Colors\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Sankey Diagram.\r\n *\r\n * @see {@link IHeatLegendEvents} for a list of available events\r\n * @see {@link IHeatLegendAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar HeatLegend = /** @class */ (function (_super) {\r\n    tslib_1.__extends(HeatLegend, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function HeatLegend() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"HeatLegend\";\r\n        _this.markerContainer = _this.createChild(Container);\r\n        _this.markerContainer.shouldClone = false;\r\n        _this.markerCount = 1;\r\n        // Create a template container and list for the a marker\r\n        var marker = new RoundedRectangle();\r\n        marker.minHeight = 20;\r\n        marker.minWidth = 20;\r\n        marker.interactionsEnabled = false;\r\n        marker.fillOpacity = 1;\r\n        marker.cornerRadius(0, 0, 0, 0);\r\n        _this.markerContainer.minHeight = 20;\r\n        _this.markerContainer.minWidth = 20;\r\n        _this.orientation = \"horizontal\";\r\n        _this.markers = new ListTemplate(marker);\r\n        _this._disposers.push(new ListDisposer(_this.markers));\r\n        _this._disposers.push(_this.markers.template);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    HeatLegend.prototype.getMinFromRules = function (property) {\r\n        var series = this.series;\r\n        if (series) {\r\n            var minValue_1;\r\n            $iter.eachContinue(series.heatRules.iterator(), function (heatRule) {\r\n                if (heatRule.property == property) {\r\n                    minValue_1 = heatRule.min;\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n            return minValue_1;\r\n        }\r\n    };\r\n    HeatLegend.prototype.getMaxFromRules = function (property) {\r\n        var series = this.series;\r\n        if (series) {\r\n            var maxValue_1;\r\n            $iter.each(series.heatRules.iterator(), function (heatRule) {\r\n                if (heatRule.property == property) {\r\n                    maxValue_1 = heatRule.max;\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n            return maxValue_1;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    HeatLegend.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        var series = this.series;\r\n        var minColor = this.minColor;\r\n        var maxColor = this.maxColor;\r\n        if (!$type.hasValue(minColor)) {\r\n            minColor = toColor(this.getMinFromRules(\"fill\"));\r\n        }\r\n        if (!$type.hasValue(maxColor)) {\r\n            maxColor = toColor(this.getMaxFromRules(\"fill\"));\r\n        }\r\n        if (series) {\r\n            var seriesFill = series.fill;\r\n            if (!$type.hasValue(minColor) && seriesFill instanceof Color) {\r\n                minColor = seriesFill;\r\n            }\r\n            if (!$type.hasValue(maxColor) && seriesFill instanceof Color) {\r\n                maxColor = seriesFill;\r\n            }\r\n        }\r\n        if (!$type.hasValue(maxColor)) {\r\n            maxColor = toColor(this.getMaxFromRules(\"fill\"));\r\n        }\r\n        var minOpacity = $type.toNumber(this.getMinFromRules(\"fillOpacity\"));\r\n        if (!$type.isNumber(minOpacity)) {\r\n            minOpacity = 1;\r\n        }\r\n        var maxOpacity = $type.toNumber(this.getMaxFromRules(\"fillOpacity\"));\r\n        if (!$type.isNumber(maxOpacity)) {\r\n            maxOpacity = 1;\r\n        }\r\n        var minStrokeOpacity = $type.toNumber(this.getMinFromRules(\"strokeOpacity\"));\r\n        if (!$type.isNumber(minStrokeOpacity)) {\r\n            minStrokeOpacity = 1;\r\n        }\r\n        var maxStrokeOpacity = $type.toNumber(this.getMaxFromRules(\"strokeOpacity\"));\r\n        if (!$type.isNumber(maxStrokeOpacity)) {\r\n            maxStrokeOpacity = 1;\r\n        }\r\n        var minStroke = toColor(this.getMinFromRules(\"stroke\"));\r\n        var maxStroke = toColor(this.getMaxFromRules(\"stroke\"));\r\n        //if (series) {\r\n        for (var i = 0; i < this.markerCount; i++) {\r\n            var marker = this.markers.getIndex(i);\r\n            if (!marker) {\r\n                marker = this.markers.create();\r\n                marker.parent = this.markerContainer;\r\n                marker.height = percent(100);\r\n                marker.width = percent(100);\r\n            }\r\n            if (this.markerCount == 1) {\r\n                var gradient = new LinearGradient();\r\n                gradient.addColor(minColor, minOpacity);\r\n                gradient.addColor(maxColor, maxOpacity);\r\n                if (this.orientation == \"vertical\") {\r\n                    gradient.rotation = -90;\r\n                }\r\n                marker.fill = gradient;\r\n                if ($type.hasValue(minStroke) && $type.hasValue(maxStroke)) {\r\n                    var strokeGradient = new LinearGradient();\r\n                    strokeGradient.addColor(minStroke, minStrokeOpacity);\r\n                    strokeGradient.addColor(maxStroke, maxStrokeOpacity);\r\n                    if (this.orientation == \"vertical\") {\r\n                        strokeGradient.rotation = -90;\r\n                    }\r\n                    marker.stroke = strokeGradient;\r\n                }\r\n            }\r\n            else {\r\n                var color = new Color($colors.interpolate(minColor.rgb, maxColor.rgb, i / this.markerCount));\r\n                marker.fill = color;\r\n                var opacity = minOpacity + (maxOpacity - minOpacity) * i / this.markerCount;\r\n                marker.fillOpacity = opacity;\r\n                if ($type.hasValue(minStroke) && $type.hasValue(maxStroke)) {\r\n                    var color_1 = new Color($colors.interpolate(minStroke.rgb, maxStroke.rgb, i / this.markerCount));\r\n                    marker.stroke = color_1;\r\n                    var opacity_1 = minStrokeOpacity + (maxStrokeOpacity - minStrokeOpacity) * i / this.markerCount;\r\n                    marker.strokeOpacity = opacity_1;\r\n                }\r\n            }\r\n        }\r\n        var renderer = this.valueAxis.renderer;\r\n        if (this.markerCount > 1) {\r\n            if (this.orientation == \"horizontal\") {\r\n                renderer.minGridDistance = this.measuredWidth / this.markerCount;\r\n            }\r\n            else {\r\n                renderer.minGridDistance = this.measuredHeight / this.markerCount;\r\n            }\r\n        }\r\n        this.valueAxis.invalidate();\r\n        for (var i = this.markerCount, len = this.markers.length; i < len; i++) {\r\n            this.markers.getIndex(i).parent = undefined;\r\n        }\r\n    };\r\n    Object.defineProperty(HeatLegend.prototype, \"minColor\", {\r\n        /**\r\n         * Returns minColor value\r\n         * @return {Color}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minColor\");\r\n        },\r\n        /**\r\n         * Min color of a heat legend. If a series is set for the legend, minColor is taken from series.\r\n         *\r\n         * @param {Color}\r\n         */\r\n        set: function (value) {\r\n            if (!(value instanceof Color)) {\r\n                value = toColor(value);\r\n            }\r\n            this.setColorProperty(\"minColor\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HeatLegend.prototype, \"maxColor\", {\r\n        /**\r\n         * Returns maxColor value\r\n         * @return {Color}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxColor\");\r\n        },\r\n        /**\r\n         * Max color of a heat legend. If a series is set for the legend, maxColor is taken from series.\r\n         *\r\n         * @param {Color}\r\n         */\r\n        set: function (value) {\r\n            if (!$type.isObject(value)) {\r\n                value = toColor(value);\r\n            }\r\n            this.setColorProperty(\"maxColor\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HeatLegend.prototype, \"markerCount\", {\r\n        /**\r\n         * Returns number of color squares (markers).\r\n         * @return {number}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"markerCount\");\r\n        },\r\n        /**\r\n         * Number of color squares (markers) in the heat legend. If only 1 marker is used, it will be filled with gradient.\r\n         *\r\n         * @param {number}\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"markerCount\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HeatLegend.prototype, \"minValue\", {\r\n        /**\r\n         * Returns minimum value of heat legend.\r\n         * @return {number}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minValue\");\r\n        },\r\n        /**\r\n         * Minimum value of heat legend's value axis. If a series is set for the legend, min is taken from series.\r\n         *\r\n         * @param {number}\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"minValue\", value);\r\n            this.valueAxis.min = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HeatLegend.prototype, \"maxValue\", {\r\n        /**\r\n         * Returns maximum value of heat legend.\r\n         * @return {number}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxValue\");\r\n        },\r\n        /**\r\n         * Maximum value of heat legend's value axis. If a series is set for the legend, max is taken from series.\r\n         *\r\n         * @param {number}\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"maxValue\", value);\r\n            this.valueAxis.max = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HeatLegend.prototype, \"orientation\", {\r\n        /**\r\n         * Returns orientation value.\r\n         *\r\n         * @return {\"horizontal\" | \"vertical\"}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"orientation\");\r\n        },\r\n        /**\r\n        * Heat legend orientation. Note, if you change orientation of a heat legend, you must set value axis renderer properties after that, as with orientation renderer changes.\r\n        *\r\n        * @param {\"horizontal\" | \"vertical\"}\r\n        */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"orientation\", value, true);\r\n            var markerContainer = this.markerContainer;\r\n            var valueAxis = this.valueAxis;\r\n            // HORIZONTAL\r\n            if (value == \"horizontal\") {\r\n                if (!$type.hasValue(this.width)) {\r\n                    this.width = 200;\r\n                }\r\n                this.height = undefined;\r\n                valueAxis.width = percent(100);\r\n                valueAxis.height = undefined;\r\n                valueAxis.tooltip.pointerOrientation = \"vertical\";\r\n                this.layout = \"vertical\";\r\n                markerContainer.width = percent(100);\r\n                markerContainer.height = undefined;\r\n                if (!(valueAxis.renderer instanceof AxisRendererX)) {\r\n                    valueAxis.renderer = new AxisRendererX();\r\n                }\r\n            }\r\n            // VERTICAL\r\n            else {\r\n                if (!$type.hasValue(this.height)) {\r\n                    this.height = 200;\r\n                }\r\n                this.width = undefined;\r\n                this.layout = \"horizontal\";\r\n                markerContainer.width = undefined;\r\n                markerContainer.height = percent(100);\r\n                valueAxis.height = percent(100);\r\n                valueAxis.width = undefined;\r\n                valueAxis.tooltip.pointerOrientation = \"horizontal\";\r\n                if (!(valueAxis.renderer instanceof AxisRendererY)) {\r\n                    valueAxis.renderer = new AxisRendererY();\r\n                }\r\n                valueAxis.renderer.inside = true;\r\n                valueAxis.renderer.labels.template.inside = true;\r\n                this.markerContainer.reverseOrder = true;\r\n            }\r\n            var renderer = valueAxis.renderer;\r\n            renderer.grid.template.disabled = true;\r\n            renderer.axisFills.template.disabled = true;\r\n            renderer.baseGrid.disabled = true;\r\n            renderer.labels.template.padding(2, 3, 2, 3);\r\n            renderer.minHeight = undefined;\r\n            renderer.minWidth = undefined;\r\n            this.markerContainer.layout = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HeatLegend.prototype, \"valueAxis\", {\r\n        /**\r\n         * Returns valueAxis value.\r\n         * @return {ValueAxis}\r\n         */\r\n        get: function () {\r\n            if (!this._valueAxis) {\r\n                this.valueAxis = this.createChild(ValueAxis);\r\n                this.valueAxis.shouldClone = false;\r\n            }\r\n            return this._valueAxis;\r\n        },\r\n        /**\r\n         * Sets a value axis of heat legend. Value axis for heat legend is created automatically.\r\n         * @param {ValueAxis}\r\n         */\r\n        set: function (valueAxis) {\r\n            this._valueAxis = valueAxis;\r\n            valueAxis.parent = this;\r\n            valueAxis.strictMinMax = true;\r\n            this.orientation = this.orientation;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HeatLegend.prototype, \"series\", {\r\n        /**\r\n         * Returns series value.\r\n         * @return {Series}\r\n         */\r\n        get: function () {\r\n            return this._series;\r\n        },\r\n        /**\r\n         * You can set series for heat legend. It will take min, max, minColor and maxColor values from this series.\r\n         * @param {Series} series\r\n         */\r\n        set: function (series) {\r\n            var _this = this;\r\n            this._series = series;\r\n            var dataField = \"value\";\r\n            try {\r\n                var dataFieldDefined = series.heatRules.getIndex(0).dataField;\r\n                if (dataFieldDefined) {\r\n                    dataField = dataFieldDefined;\r\n                }\r\n            }\r\n            catch (err) {\r\n            }\r\n            this.updateMinMax(series.dataItem.values[dataField].low, series.dataItem.values[dataField].high);\r\n            series.dataItem.events.on(\"calculatedvaluechanged\", function (event) {\r\n                _this.updateMinMax(series.dataItem.values[dataField].low, series.dataItem.values[dataField].high);\r\n            }, undefined, false);\r\n            series.heatRules.events.on(\"inserted\", this.invalidate, this, false);\r\n            series.heatRules.events.on(\"removed\", this.invalidate, this, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates min/max of value axis.\r\n     * @ignore\r\n     */\r\n    HeatLegend.prototype.updateMinMax = function (min, max) {\r\n        var valueAxis = this.valueAxis;\r\n        if (!$type.isNumber(this.minValue)) {\r\n            valueAxis.min = min;\r\n            valueAxis.invalidate();\r\n        }\r\n        if (!$type.isNumber(this.maxValue)) {\r\n            valueAxis.max = max;\r\n            valueAxis.invalidate();\r\n        }\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {object}  config  Config\r\n     */\r\n    HeatLegend.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Set up series\r\n            if ($type.hasValue(config.series) && $type.isString(config.series)) {\r\n                if ($type.isString(config.series)) {\r\n                    if (this.map.hasKey(config.series)) {\r\n                        config.series = this.map.getKey(config.series);\r\n                    }\r\n                    else {\r\n                        var seriesId_1 = config.series;\r\n                        var disposer_1 = this.map.events.on(\"insertKey\", function (ev) {\r\n                            if (ev.key == seriesId_1) {\r\n                                this.series = ev.newValue;\r\n                                disposer_1.dispose();\r\n                            }\r\n                        }, this);\r\n                        this._disposers.push(disposer_1);\r\n                        delete config.series;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    return HeatLegend;\r\n}(Container));\r\nexport { HeatLegend };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"HeatLegend\"] = HeatLegend;\r\n//# sourceMappingURL=HeatLegend.js.map","/**\r\n * Bullet module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet } from \"./Bullet\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nvar LabelBullet = /** @class */ (function (_super) {\r\n    tslib_1.__extends(LabelBullet, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function LabelBullet() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"LabelBullet\";\r\n        var label = _this.createChild(Label);\r\n        label.shouldClone = false;\r\n        label.verticalCenter = \"middle\";\r\n        label.horizontalCenter = \"middle\";\r\n        label.truncate = true;\r\n        label.hideOversized = true;\r\n        label.maxWidth = 500;\r\n        label.maxHeight = 500;\r\n        label.stroke = color();\r\n        label.strokeOpacity = 0;\r\n        label.fill = new InterfaceColorSet().getFor(\"text\");\r\n        _this.events.on(\"maxsizechanged\", _this.handleMaxSize, _this, false);\r\n        _this.label = label;\r\n        return _this;\r\n        // not good, as lineSeries will have labels somewhere in the middle.\r\n        //this.locationX = 0.5;\r\n        //this.locationY = 0.5;\r\n    }\r\n    LabelBullet.prototype.handleMaxSize = function () {\r\n        this.label.maxWidth = this.maxWidth;\r\n        this.label.maxHeight = this.maxHeight;\r\n    };\r\n    /**\r\n     * Copies all proprities and related stuff from another instance of\r\n     * [[LabelBullet]].\r\n     *\r\n     * @param {this}  source  Source element\r\n     */\r\n    LabelBullet.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.label.copyFrom(source.label);\r\n    };\r\n    return LabelBullet;\r\n}(Bullet));\r\nexport { LabelBullet };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LabelBullet\"] = LabelBullet;\r\n//# sourceMappingURL=LabelBullet.js.map","/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component } from \"../../core/Component\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar NavigationBarDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(NavigationBarDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function NavigationBarDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"NavigationBarDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(NavigationBarDataItem.prototype, \"name\", {\r\n        /**\r\n         * @return {string} Name\r\n         */\r\n        get: function () {\r\n            return this.properties[\"name\"];\r\n        },\r\n        /**\r\n         * Name of the navigation bar item.\r\n         *\r\n         * @param {string}  value  Name\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"name\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return NavigationBarDataItem;\r\n}(DataItem));\r\nexport { NavigationBarDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nvar NavigationBar = /** @class */ (function (_super) {\r\n    tslib_1.__extends(NavigationBar, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function NavigationBar() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"NavigationBar\";\r\n        var interfaceColors = new InterfaceColorSet();\r\n        var textLink = new TextLink();\r\n        textLink.valign = \"middle\";\r\n        textLink.paddingTop = 8;\r\n        textLink.paddingBottom = 8;\r\n        _this.paddingBottom = 2;\r\n        _this.links = new ListTemplate(textLink);\r\n        _this._disposers.push(new ListDisposer(_this.links));\r\n        _this._disposers.push(textLink);\r\n        _this._linksIterator = new $iter.ListIterator(_this.links, function () { return _this.links.create(); });\r\n        _this._linksIterator.createNewItems = true;\r\n        var triangle = new Triangle();\r\n        triangle.direction = \"right\";\r\n        triangle.width = 8;\r\n        triangle.height = 12;\r\n        triangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n        triangle.fillOpacity = 0.5;\r\n        triangle.valign = \"middle\";\r\n        triangle.marginLeft = 10;\r\n        triangle.marginRight = 10;\r\n        _this.separators = new ListTemplate(triangle);\r\n        _this._disposers.push(new ListDisposer(_this.separators));\r\n        _this._disposers.push(triangle);\r\n        var activeLink = new TextLink();\r\n        _this.activeLink = activeLink;\r\n        activeLink.copyFrom(textLink);\r\n        activeLink.valign = \"middle\";\r\n        activeLink.fontWeight = \"bold\";\r\n        _this.width = percent(100);\r\n        _this.layout = \"grid\";\r\n        _this.dataFields.name = \"name\";\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Completely redraws the navigation bar.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    NavigationBar.prototype.validateDataElements = function () {\r\n        this.removeChildren();\r\n        this._linksIterator.reset();\r\n        _super.prototype.validateDataElements.call(this);\r\n        //@todo: dispose\r\n    };\r\n    /**\r\n     * Creates a visual element for a data item (nav item).\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {NavigationBarDataItem}  dataItem  Data item\r\n     */\r\n    NavigationBar.prototype.validateDataElement = function (dataItem) {\r\n        _super.prototype.validateDataElement.call(this, dataItem);\r\n        var textLink;\r\n        if (dataItem.index < this.dataItems.length - 1) {\r\n            textLink = this._linksIterator.getLast();\r\n            textLink.parent = this;\r\n            var separator = this.separators.create();\r\n            separator.parent = this;\r\n            separator.valign = \"middle\";\r\n        }\r\n        else {\r\n            textLink = this.activeLink;\r\n            textLink.events.copyFrom(this.links.template.events);\r\n            textLink.hide(0);\r\n            textLink.show();\r\n            textLink.parent = this;\r\n        }\r\n        textLink.dataItem = dataItem;\r\n        textLink.text = dataItem.name;\r\n        textLink.validate();\r\n    };\r\n    return NavigationBar;\r\n}(Component));\r\nexport { NavigationBar };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n//# sourceMappingURL=NavigationBar.js.map","/**\r\n * Module that defines everything related to building OHLCs.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Candlestick } from \"./Candlestick\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to creates OHLCs.\r\n *\r\n * @see {@link IOHLCEvents} for a list of available events\r\n * @see {@link IOHLCAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nvar OHLC = /** @class */ (function (_super) {\r\n    tslib_1.__extends(OHLC, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function OHLC() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"OHLC\";\r\n        _this.layout = \"none\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    OHLC.prototype.createAssets = function () {\r\n        //super.createAssets();\r\n        this.openLine = this.createChild(Line);\r\n        this.openLine.shouldClone = false;\r\n        this.highLowLine = this.createChild(Line);\r\n        this.highLowLine.shouldClone = false;\r\n        this.closeLine = this.createChild(Line);\r\n        this.closeLine.shouldClone = false;\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[OHLC]].\r\n     *\r\n     * @param {OHLC} source Source OHLC\r\n     */\r\n    OHLC.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.openLine) {\r\n            this.openLine.copyFrom(source.openLine);\r\n        }\r\n        if (this.highLowLine) {\r\n            this.highLowLine.copyFrom(source.highLowLine);\r\n        }\r\n        if (this.closeLine) {\r\n            this.closeLine.copyFrom(source.closeLine);\r\n        }\r\n    };\r\n    return OHLC;\r\n}(Candlestick));\r\nexport { OHLC };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLC\"] = OHLC;\r\n//# sourceMappingURL=OHLC.js.map","/**\r\n * Pie tick module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick } from \"../elements/Tick\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws an tick line for a pie slice connecting it to a related label.\r\n *\r\n * @see {@link IPieTickEvents} for a list of available events\r\n * @see {@link IPieTickAdapters} for a list of available Adapters\r\n */\r\nvar PieTick = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PieTick, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PieTick() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * A label element this tick is attached to.\r\n         *\r\n         * @type {MutableValueDisposer}\r\n         */\r\n        _this._label = new MutableValueDisposer();\r\n        /**\r\n         * A slice element this tick is attached to.\r\n         *\r\n         * @type {MutableValueDisposer}\r\n         */\r\n        _this._slice = new MutableValueDisposer();\r\n        _this.className = \"PieTick\";\r\n        _this.element = _this.paper.add(\"polyline\");\r\n        _this._disposers.push(_this._label);\r\n        _this._disposers.push(_this._slice);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the tick element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PieTick.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var slice = this.slice;\r\n        var label = this.label;\r\n        var series = slice.dataItem.component;\r\n        if (slice && slice.radius > 0 && label && label.text) {\r\n            var x0 = slice.dx + slice.slice.dx + slice.pixelX + slice.ix * slice.radius * slice.scale;\r\n            var y0 = slice.dy + slice.slice.dy + slice.pixelY + slice.iy * slice.radiusY * slice.scale;\r\n            var x1 = void 0;\r\n            var y1 = void 0;\r\n            var x2 = void 0;\r\n            var y2 = void 0;\r\n            if (series.alignLabels) {\r\n                x1 = label.pixelX - this.length;\r\n                y1 = label.pixelY;\r\n                x2 = label.pixelX;\r\n                y2 = y1;\r\n                if (label.horizontalCenter == \"right\") {\r\n                    x1 += 2 * this.length;\r\n                    x2 = x1 - this.length;\r\n                }\r\n            }\r\n            else {\r\n                var r = label.pixelRadius(slice.radius);\r\n                x1 = x0 + r * slice.ix;\r\n                y1 = y0 + r * slice.iy;\r\n                x2 = x1;\r\n                y2 = y1;\r\n            }\r\n            this.element.attr({ \"points\": [x0, y0, x1, y1, x2, y2] });\r\n        }\r\n    };\r\n    Object.defineProperty(PieTick.prototype, \"slice\", {\r\n        /**\r\n         * @return {Slice} Slice\r\n         */\r\n        get: function () {\r\n            return this._slice.get();\r\n        },\r\n        /**\r\n         * Slice element tick is attached to.\r\n         *\r\n         * @param {Slice}  slice  Slice\r\n         */\r\n        set: function (slice) {\r\n            this._slice.set(slice, new MultiDisposer([\r\n                slice.events.on(\"transformed\", this.invalidate, this),\r\n                slice.events.on(\"validated\", this.invalidate, this)\r\n            ]));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PieTick.prototype, \"label\", {\r\n        /**\r\n         * @return {AxisLabelCircular} Label\r\n         */\r\n        get: function () {\r\n            return this._label.get();\r\n        },\r\n        /**\r\n         * Label element tick is attached to.\r\n         *\r\n         * @param {AxisLabelCircular}  label  Label\r\n         */\r\n        set: function (label) {\r\n            this._label.set(label, label.events.on(\"transformed\", this.invalidate, this, false));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PieTick;\r\n}(Tick));\r\nexport { PieTick };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieTick\"] = PieTick;\r\n//# sourceMappingURL=PieTick.js.map","/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column } from \"./Column\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to creates RadarColumns.\r\n *\r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nvar RadarColumn = /** @class */ (function (_super) {\r\n    tslib_1.__extends(RadarColumn, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function RadarColumn() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"RadarColumn\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    RadarColumn.prototype.createAssets = function () {\r\n        this.radarColumn = this.createChild(Slice);\r\n        this.radarColumn.shouldClone = false;\r\n        this.radarColumn.strokeOpacity = undefined;\r\n        // some dirty hack so that if user access column, it won't get error\r\n        this.column = this.radarColumn;\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[RadarColumn]].\r\n     *\r\n     * @param {RadarColumn} source Source RadarColumn\r\n     */\r\n    RadarColumn.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.radarColumn) {\r\n            this.radarColumn.copyFrom(source.radarColumn);\r\n        }\r\n    };\r\n    /**\r\n     * X coordinate for the slice tooltip.\r\n     *\r\n     * @return {number} X\r\n     */\r\n    RadarColumn.prototype.getTooltipX = function () {\r\n        var value = this.getPropertyValue(\"tooltipX\");\r\n        if (!$type.isNumber(value)) {\r\n            value = this.radarColumn.tooltipX;\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Y coordinate for the slice tooltip.\r\n     *\r\n     * @return {number} Y\r\n     */\r\n    RadarColumn.prototype.getTooltipY = function () {\r\n        var value = this.getPropertyValue(\"tooltipX\");\r\n        if (!$type.isNumber(value)) {\r\n            value = this.radarColumn.tooltipY;\r\n        }\r\n        return value;\r\n    };\r\n    return RadarColumn;\r\n}(Column));\r\nexport { RadarColumn };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\r\n//# sourceMappingURL=RadarColumn.js.map","/**\r\n * SankeyLink module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { FlowDiagramLink } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Sankey Diagram.\r\n *\r\n * @see {@link ISankeyLinkEvents} for a list of available events\r\n * @see {@link ISankeyLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar SankeyLink = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SankeyLink, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SankeyLink() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"SankeyLink\";\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.tension = 0.8;\r\n        _this.controlPointDistance = 0.2;\r\n        _this.startAngle = 0;\r\n        _this.endAngle = 0;\r\n        _this.linkWidth = 0;\r\n        _this.startX = 0;\r\n        _this.endX = 0;\r\n        _this.startY = 0;\r\n        _this.endY = 0;\r\n        _this.middleLine = _this.createChild(Polyspline);\r\n        _this.middleLine.shouldClone = false;\r\n        _this.middleLine.strokeOpacity = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * (Re)validates (redraws) the link.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    SankeyLink.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        if (!this.isTemplate) {\r\n            var x0 = this.startX;\r\n            var y0 = this.startY;\r\n            var x1 = this.endX;\r\n            var y1 = this.endY;\r\n            if (!$type.isNumber(x1)) {\r\n                x1 = x0;\r\n            }\r\n            if (!$type.isNumber(y1)) {\r\n                y1 = y0;\r\n            }\r\n            var startAngle = this.startAngle;\r\n            var endAngle = this.endAngle;\r\n            var w = this.linkWidth;\r\n            var path = \"\";\r\n            var xt0 = x0;\r\n            var yt0 = y0;\r\n            var xt1 = x1;\r\n            var yt1 = y1;\r\n            var xb0 = x0 + w * $math.sin(startAngle);\r\n            var xb1 = x1 + w * $math.sin(endAngle);\r\n            var yb0 = y0 + w * $math.cos(startAngle);\r\n            var yb1 = y1 + w * $math.cos(endAngle);\r\n            var xm0 = x0 + w / 2 * $math.sin(startAngle);\r\n            var xm1 = x1 + w / 2 * $math.sin(endAngle);\r\n            var ym0 = y0 + w / 2 * $math.cos(startAngle);\r\n            var ym1 = y1 + w / 2 * $math.cos(endAngle);\r\n            this.zIndex = this.zIndex || this.dataItem.index;\r\n            var tensionX = this.tension + (1 - this.tension) * $math.sin(startAngle);\r\n            var tensionY = this.tension + (1 - this.tension) * $math.cos(startAngle);\r\n            this.middleLine.tensionX = tensionX;\r\n            this.middleLine.tensionY = tensionY;\r\n            if ($type.isNumber(w) && ($type.isNumber(x0) && $type.isNumber(x1) && $type.isNumber(y0) && $type.isNumber(y1))) {\r\n                // solves issues with gradient fill of straight lines\r\n                if ($math.round(xt0, 3) == $math.round(xt1, 3)) {\r\n                    xt1 += 0.01;\r\n                }\r\n                if ($math.round(yt0, 3) == $math.round(yt1, 3)) {\r\n                    yt1 += 0.01;\r\n                }\r\n                if ($math.round(xb0, 3) == $math.round(xb1, 3)) {\r\n                    xb1 += 0.01;\r\n                }\r\n                if ($math.round(yb0, 3) == $math.round(yb1, 3)) {\r\n                    yb1 += 0.01;\r\n                }\r\n                var minX = Math.min(xb0, xb1, xt0, xt1);\r\n                var minY = Math.min(yb0, yb1, yt0, yt1);\r\n                var maxX = Math.max(xb0, xb1, xt0, xt1);\r\n                var maxY = Math.max(yb0, yb1, yt0, yt1);\r\n                this._bbox = {\r\n                    x: minX,\r\n                    y: minY,\r\n                    width: maxX - minX,\r\n                    height: maxY - minY\r\n                };\r\n                var cpd = this.controlPointDistance;\r\n                var kxt0 = xt0 + (xt1 - xt0) * cpd * $math.cos(startAngle);\r\n                var kyt0 = yt0 + (yt1 - yt0) * cpd * $math.sin(startAngle);\r\n                var kxt1 = xt1 - (xt1 - xt0) * cpd * $math.cos(endAngle);\r\n                var kyt1 = yt1 - (yt1 - yt0) * cpd * $math.sin(endAngle);\r\n                var kxm0 = xm0 + (xm1 - xm0) * cpd * $math.cos(startAngle);\r\n                var kym0 = ym0 + (ym1 - ym0) * cpd * $math.sin(startAngle);\r\n                var kxm1 = xm1 - (xm1 - xm0) * cpd * $math.cos(endAngle);\r\n                var kym1 = ym1 - (ym1 - ym0) * cpd * $math.sin(endAngle);\r\n                var angle = $math.getAngle({ x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 });\r\n                var dx = (w / $math.cos(angle) - w) / $math.tan(angle) * $math.cos(startAngle);\r\n                var dy = (w / $math.sin(angle) - w) * $math.tan(angle) * $math.sin(startAngle);\r\n                var kxb0 = -dx / 2 + xb0 + (xb1 - xb0) * cpd * $math.cos(startAngle);\r\n                var kyb0 = -dy / 2 + yb0 + (yb1 - yb0) * cpd * $math.sin(startAngle);\r\n                var kxb1 = -dx / 2 + xb1 - (xb1 - xb0) * cpd * $math.cos(endAngle);\r\n                var kyb1 = -dy / 2 + yb1 - (yb1 - yb0) * cpd * $math.sin(endAngle);\r\n                this.middleLine.segments = [[{ x: xm0, y: ym0 }, { x: kxm0, y: kym0 }, { x: kxm1, y: kym1 }, { x: xm1, y: ym1 }]];\r\n                kxt0 += dx / 2;\r\n                kyt0 += dy / 2;\r\n                kxt1 += dx / 2;\r\n                kyt1 += dy / 2;\r\n                path += $path.moveTo({ x: xt0, y: yt0 });\r\n                path += new $smoothing.Tension(tensionX, tensionY).smooth([{ x: xt0, y: yt0 }, { x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 }, { x: xt1, y: yt1 }]);\r\n                path += $path.lineTo({ x: xb1, y: yb1 });\r\n                path += new $smoothing.Tension(tensionX, tensionY).smooth([{ x: xb1, y: yb1 }, { x: kxb1, y: kyb1 }, { x: kxb0, y: kyb0 }, { x: xb0, y: yb0 }]);\r\n                path += $path.closePath();\r\n            }\r\n            this.link.path = path;\r\n            if (this.maskBullets) {\r\n                this.bulletsMask.path = path;\r\n                this.bulletsContainer.mask = this.bulletsMask;\r\n            }\r\n            this.positionBullets();\r\n        }\r\n    };\r\n    Object.defineProperty(SankeyLink.prototype, \"startX\", {\r\n        /**\r\n         * @return {number} Start X\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startX\");\r\n        },\r\n        /**\r\n         * [startX description]\r\n         *\r\n         * @todo Description\r\n         * @param {number}  value  Start X\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startX\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SankeyLink.prototype, \"endX\", {\r\n        /**\r\n         * @return {number} End X\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endX\");\r\n        },\r\n        /**\r\n         * [endX description]\r\n         *\r\n         * @todo Description\r\n         * @param {number} value  End X\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endX\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SankeyLink.prototype, \"startY\", {\r\n        /**\r\n         * @return {number} Start Y\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startY\");\r\n        },\r\n        /**\r\n         * [startY description]\r\n         *\r\n         * @todo Description\r\n         * @param {number}  value  Start Y\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startY\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SankeyLink.prototype, \"endY\", {\r\n        /**\r\n         * @return {number} End Y\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endY\");\r\n        },\r\n        /**\r\n         * [endY description]\r\n         *\r\n         * @todo Description\r\n         * @param {number} value End Y\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endY\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SankeyLink.prototype, \"linkWidth\", {\r\n        /**\r\n         * @return {number} [description]\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"linkWidth\");\r\n        },\r\n        /**\r\n         * [linkWidth description]\r\n         *\r\n         * @todo Description\r\n         * @param {number} value [description]\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"linkWidth\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SankeyLink.prototype, \"controlPointDistance\", {\r\n        /**\r\n         * @return {number} relative control point distance\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"controlPointDistance\");\r\n        },\r\n        /**\r\n         * Distance of control point of a link, defines relative distance from a node at which linke should bend\r\n         * @default 0.2\r\n         * @param {number}  value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"controlPointDistance\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SankeyLink.prototype, \"tension\", {\r\n        /**\r\n         * @return {number} tension value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tension\");\r\n        },\r\n        /**\r\n         * Tension of a spline, 1 would make the link to have sharp edges\r\n         * @default 0.8\r\n         * @param {number} value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tension\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return SankeyLink;\r\n}(FlowDiagramLink));\r\nexport { SankeyLink };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyLink\"] = SankeyLink;\r\n//# sourceMappingURL=SankeyLink.js.map","/**\r\n * SankeyNode module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode } from \"./FlowDiagramNode\";\r\nimport { LabelBullet } from \"./LabelBullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a node in a Sankey Diagram.\r\n *\r\n * A Sankey node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[SankeyLink]] elements.\r\n *\r\n * @see {@link ISankeyNodeEvents} for a list of available events\r\n * @see {@link ISankeyNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar SankeyNode = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SankeyNode, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SankeyNode() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * [nextInCoord description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @type {number}\r\n         */\r\n        _this.nextInCoord = 0;\r\n        /**\r\n         * [nextOutCoord description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @type {number}\r\n         */\r\n        _this.nextOutCoord = 0;\r\n        _this.className = \"SankeyNode\";\r\n        _this.width = 10;\r\n        _this.height = 10;\r\n        var nameLabel = _this.createChild(LabelBullet);\r\n        nameLabel.shouldClone = false;\r\n        //@should we auto update these locations if position is changed?\r\n        nameLabel.locationX = 1;\r\n        nameLabel.locationY = 0.5;\r\n        nameLabel.label.text = \"{name}\";\r\n        //nameLabel.label.textElement.hideOversized = false;\r\n        nameLabel.width = 150;\r\n        nameLabel.height = 150;\r\n        nameLabel.label.horizontalCenter = \"left\";\r\n        nameLabel.label.padding(0, 5, 0, 5);\r\n        _this.nameLabel = nameLabel;\r\n        var valueLabel = _this.createChild(LabelBullet);\r\n        valueLabel.shouldClone = false;\r\n        valueLabel.label.hideOversized = false;\r\n        valueLabel.locationX = 0.5;\r\n        valueLabel.locationY = 0.5;\r\n        valueLabel.width = 150;\r\n        valueLabel.height = 150;\r\n        //valueLabel.label.text = \"{value}\";\r\n        valueLabel.label.horizontalCenter = \"middle\";\r\n        _this.valueLabel = valueLabel;\r\n        var hiddenState = _this.hiddenState;\r\n        hiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n        hiddenState.properties.opacity = 0.5;\r\n        hiddenState.properties.visible = true;\r\n        _this.background.hiddenState.copyFrom(hiddenState);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Invalidates all links, attached to this node.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    SankeyNode.prototype.invalidateLinks = function () {\r\n        var _this = this;\r\n        _super.prototype.invalidateLinks.call(this);\r\n        this.nextInCoord = 0;\r\n        this.nextOutCoord = 0;\r\n        var chart = this.chart;\r\n        if (chart) {\r\n            var orientation_1 = chart.orientation;\r\n            if (this._incomingSorted) {\r\n                $iter.each(this._incomingSorted, function (dataItem) {\r\n                    var link = dataItem.link;\r\n                    var value = dataItem.getWorkingValue(\"value\");\r\n                    if ($type.isNumber(value)) {\r\n                        link.parent = _this.chart.linksContainer;\r\n                        var x = void 0;\r\n                        var y = void 0;\r\n                        var angle = void 0;\r\n                        if (orientation_1 == \"horizontal\") {\r\n                            x = _this.pixelX + _this.dx;\r\n                            y = _this.nextInCoord + _this.pixelY + _this.dy;\r\n                            angle = 0;\r\n                        }\r\n                        else {\r\n                            y = _this.pixelY + _this.dy;\r\n                            x = _this.nextInCoord + _this.pixelX + _this.dx;\r\n                            angle = 90;\r\n                        }\r\n                        link.endX = x;\r\n                        link.endY = y;\r\n                        link.startAngle = angle;\r\n                        link.endAngle = angle;\r\n                        link.gradient.rotation = angle;\r\n                        link.linkWidth = value * chart.valueHeight;\r\n                        if (!dataItem.fromNode) {\r\n                            if (orientation_1 == \"horizontal\") {\r\n                                link.maxWidth = 200;\r\n                                link.startX = _this.pixelX + _this.dx - link.maxWidth;\r\n                                link.startY = link.endY;\r\n                            }\r\n                            else {\r\n                                link.maxHeight = 200;\r\n                                link.startX = link.endX;\r\n                                link.startY = _this.pixelY + _this.dy - link.maxHeight;\r\n                            }\r\n                            link.gradient;\r\n                            link.fill = dataItem.toNode.color;\r\n                            var stop_1 = link.gradient.stops.getIndex(0);\r\n                            if (stop_1) {\r\n                                if (link.colorMode == \"gradient\") {\r\n                                    stop_1.color = _this.color;\r\n                                }\r\n                                stop_1.opacity = 0;\r\n                                link.fill = link.gradient;\r\n                                link.stroke = link.gradient;\r\n                                link.gradient.validate();\r\n                            }\r\n                        }\r\n                        //link.validate();\r\n                        _this.nextInCoord += link.linkWidth;\r\n                    }\r\n                });\r\n            }\r\n            if (this._outgoingSorted) {\r\n                $iter.each(this._outgoingSorted, function (dataItem) {\r\n                    var link = dataItem.link;\r\n                    link.parent = _this.chart.linksContainer;\r\n                    var value = dataItem.getWorkingValue(\"value\");\r\n                    if ($type.isNumber(value)) {\r\n                        var x = void 0;\r\n                        var y = void 0;\r\n                        var angle = void 0;\r\n                        if (orientation_1 == \"horizontal\") {\r\n                            angle = 0;\r\n                            x = _this.pixelX + _this.pixelWidth + _this.dx - 1;\r\n                            y = _this.nextOutCoord + _this.pixelY + _this.dy;\r\n                        }\r\n                        else {\r\n                            angle = 90;\r\n                            x = _this.nextOutCoord + _this.pixelX + _this.dx;\r\n                            y = _this.pixelY + _this.pixelHeight + _this.dy - 1;\r\n                        }\r\n                        link.startX = x;\r\n                        link.startY = y;\r\n                        link.startAngle = angle;\r\n                        link.endAngle = angle;\r\n                        link.gradient.rotation = angle;\r\n                        link.linkWidth = value * _this.chart.valueHeight;\r\n                        if (!dataItem.toNode) {\r\n                            if (orientation_1 == \"horizontal\") {\r\n                                link.maxWidth = 200;\r\n                                link.endX = _this.pixelX + link.maxWidth + _this.dx;\r\n                                link.endY = link.startY;\r\n                            }\r\n                            else {\r\n                                link.maxHeight = 200;\r\n                                link.endX = link.startX;\r\n                                link.endY = _this.pixelY + link.maxHeight + _this.dy;\r\n                            }\r\n                            link.opacity = _this.opacity;\r\n                            var stop_2 = link.gradient.stops.getIndex(1);\r\n                            if (stop_2) {\r\n                                if (link.colorMode == \"gradient\") {\r\n                                    stop_2.color = _this.color;\r\n                                }\r\n                                stop_2.opacity = 0;\r\n                                link.fill = link.gradient;\r\n                                link.stroke = link.gradient;\r\n                                link.gradient.validate();\r\n                            }\r\n                        }\r\n                        //link.validate();\r\n                        _this.nextOutCoord += link.linkWidth;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        this.positionBullet(this.nameLabel);\r\n        this.positionBullet(this.valueLabel);\r\n    };\r\n    /**\r\n     * Positions the bullet so it is centered within the node element.\r\n     *\r\n     * @param {LabelBullet}  bullet  Target bullet\r\n     */\r\n    SankeyNode.prototype.positionBullet = function (bullet) {\r\n        if (bullet) {\r\n            bullet.x = this.measuredWidth * bullet.locationX;\r\n            bullet.y = this.measuredHeight * bullet.locationY;\r\n        }\r\n    };\r\n    Object.defineProperty(SankeyNode.prototype, \"level\", {\r\n        /**\r\n         * @return {number} Level\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"level\");\r\n        },\r\n        /**\r\n         * A level node is displayed at. (0 - ...)\r\n         *\r\n         * Levels are measured from left to right.\r\n         *\r\n         * The nodes in the left-most column will have `level = 0`.\r\n         *\r\n         * Nodes in second column - `level = 1`, etc.\r\n         *\r\n         * @param {number}  value  Level\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"level\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies properties and labels from another [[SankeyNode]].\r\n     *\r\n     * @param {SankeyNode}  source  Source node\r\n     */\r\n    SankeyNode.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.nameLabel.copyFrom(source.nameLabel);\r\n        this.valueLabel.copyFrom(source.valueLabel);\r\n    };\r\n    return SankeyNode;\r\n}(FlowDiagramNode));\r\nexport { SankeyNode };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyNode\"] = SankeyNode;\r\n//# sourceMappingURL=SankeyNode.js.map","/**\r\n * Tick module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A basic Tick class.\r\n *\r\n * A tick is a short dash, mainly connecting an object like axis or slice to\r\n * it's textual label.\r\n *\r\n * @see {@link ITickEvents} for a list of available events\r\n * @see {@link ITickAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar Tick = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Tick, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Tick() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Tick\";\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.fillOpacity = 0;\r\n        _this.length = 6;\r\n        _this.strokeOpacity = 0.2;\r\n        _this.stroke = interfaceColors.getFor(\"grid\");\r\n        _this.isMeasured = false;\r\n        _this.nonScalingStroke = true;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Tick.prototype, \"length\", {\r\n        /**\r\n         * @return {number} Length (px)\r\n         */\r\n        get: function () {\r\n            if (this.disabled) {\r\n                return 0;\r\n            }\r\n            return this.getPropertyValue(\"length\");\r\n        },\r\n        /**\r\n         * Length of the tick in pixels.\r\n         *\r\n         * @param {number}  value  Length (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"length\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Tick;\r\n}(Sprite));\r\nexport { Tick };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Tick\"] = Tick;\r\n//# sourceMappingURL=Tick.js.map","/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar XYChartScrollbar = /** @class */ (function (_super) {\r\n    tslib_1.__extends(XYChartScrollbar, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function XYChartScrollbar() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * A chart element Scrollbar is for.\r\n         *\r\n         * @type {MutableValueDisposer}\r\n         */\r\n        _this._chart = new MutableValueDisposer();\r\n        _this.className = \"XYChartScrollbar\";\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.padding(0, 0, 0, 0);\r\n        var scrollbarChart = _this.createChild(XYChart);\r\n        scrollbarChart.shouldClone = false;\r\n        scrollbarChart.margin(0, 0, 0, 0);\r\n        scrollbarChart.padding(0, 0, 0, 0);\r\n        scrollbarChart.interactionsEnabled = false;\r\n        _this._scrollbarChart = scrollbarChart;\r\n        _this._disposers.push(_this._scrollbarChart);\r\n        _this.minHeight = 60;\r\n        _this.minWidth = 60;\r\n        var unselectedOverlay = _this.createChild(Sprite);\r\n        unselectedOverlay.shouldClone = false;\r\n        unselectedOverlay.setElement(_this.paper.add(\"path\"));\r\n        unselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n        unselectedOverlay.fillOpacity = 0.8;\r\n        unselectedOverlay.interactionsEnabled = false;\r\n        unselectedOverlay.isMeasured = false;\r\n        unselectedOverlay.toBack();\r\n        _this._unselectedOverlay = unselectedOverlay;\r\n        _this._disposers.push(_this._unselectedOverlay);\r\n        scrollbarChart.toBack();\r\n        _this.background.cornerRadius(0, 0, 0, 0);\r\n        var thumbBackground = _this.thumb.background;\r\n        thumbBackground.cornerRadius(0, 0, 0, 0);\r\n        thumbBackground.fillOpacity = 0;\r\n        thumbBackground.fill = interfaceColors.getFor(\"background\");\r\n        var hoverState = thumbBackground.states.getKey(\"hover\");\r\n        if (hoverState) {\r\n            hoverState.properties.fillOpacity = 0.2;\r\n        }\r\n        var downState = thumbBackground.states.getKey(\"down\");\r\n        if (downState) {\r\n            downState.properties.fillOpacity = 0.4;\r\n        }\r\n        _this._disposers.push(_this._chart);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(XYChartScrollbar.prototype, \"series\", {\r\n        /**\r\n         * A list of series that are used to draw graph(s) on the scrollbar.\r\n         *\r\n         * @readonly\r\n         * @return {List<XYSeries>} Series\r\n         */\r\n        get: function () {\r\n            if (!this._series) {\r\n                this._series = new List();\r\n                this._disposers.push(this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false));\r\n                this._disposers.push(this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false));\r\n            }\r\n            return this._series;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Decorates a new series when they are pushed into a `series` list.\r\n     *\r\n     * @param {IListEvents<XYSeries>[\"inserted\"]} event Event\r\n     */\r\n    XYChartScrollbar.prototype.handleSeriesAdded = function (event) {\r\n        var sourceSeries = event.newValue;\r\n        var scrollbarChart = this.scrollbarChart;\r\n        scrollbarChart.zoomOutButton.disabled = true;\r\n        this.chart = sourceSeries.chart;\r\n        var addXAxis = true;\r\n        var addYAxis = true;\r\n        // check if we haven't added clone of x or y axis before\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            if (series != sourceSeries) {\r\n                if (series.xAxis == sourceSeries.xAxis) {\r\n                    addXAxis = false;\r\n                }\r\n                if (series.yAxis == sourceSeries.yAxis) {\r\n                    addYAxis = false;\r\n                }\r\n            }\r\n        });\r\n        var interfaceColors = new InterfaceColorSet();\r\n        var series = sourceSeries.clone();\r\n        if (addXAxis) {\r\n            var xAxis = sourceSeries.xAxis.clone();\r\n            scrollbarChart.xAxes.moveValue(xAxis);\r\n            xAxis.title.disabled = true;\r\n            xAxis.rangeChangeDuration = 0;\r\n            xAxis.id = sourceSeries.uid;\r\n            xAxis.title.disabled = true;\r\n            var renderer = xAxis.renderer;\r\n            renderer.ticks.template.disabled = true;\r\n            renderer.inside = true;\r\n            renderer.line.strokeOpacity = 0;\r\n            renderer.minLabelPosition = 0.02;\r\n            renderer.maxLabelPosition = 0.98;\r\n            renderer.line.disabled = true;\r\n            renderer.axisFills.template.disabled = true;\r\n            renderer.baseGrid.disabled = true;\r\n            renderer.grid.template.strokeOpacity = 0.05;\r\n            var labelsTemplate = renderer.labels.template;\r\n            labelsTemplate.fillOpacity = 0.5;\r\n            series.xAxis = xAxis;\r\n        }\r\n        else {\r\n            // @todo find clone, otherwise there might be probs with multiple axes\r\n        }\r\n        if (addYAxis) {\r\n            var yAxis = sourceSeries.yAxis.clone();\r\n            scrollbarChart.yAxes.moveValue(yAxis);\r\n            yAxis.title.disabled = true;\r\n            yAxis.rangeChangeDuration = 0;\r\n            var renderer = yAxis.renderer;\r\n            renderer.ticks.template.disabled = true;\r\n            renderer.inside = true;\r\n            renderer.line.strokeOpacity = 0;\r\n            renderer.minLabelPosition = 0.02;\r\n            renderer.maxLabelPosition = 0.98;\r\n            renderer.line.disabled = true;\r\n            renderer.axisFills.template.disabled = true;\r\n            renderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n            renderer.baseGrid.disabled = true;\r\n            renderer.grid.template.strokeOpacity = 0.05;\r\n            var labelsTemplate = renderer.labels.template;\r\n            labelsTemplate.fillOpacity = 0.5;\r\n            series.yAxis = yAxis;\r\n        }\r\n        else {\r\n            // @todo find clone, otherwise there might be probs with multiple axes\r\n        }\r\n        series.rangeChangeDuration = 0;\r\n        series.interpolationDuration = 0;\r\n        series.defaultState.transitionDuration = 0;\r\n        series.showOnInit = false;\r\n        this._disposers.push(series.events.on(\"validated\", this.zoomOutAxes, this, false));\r\n        // data might be set drectly on series\r\n        this._disposers.push(sourceSeries.events.on(\"datavalidated\", function () {\r\n            if (series.data != sourceSeries.data) { // data setter doesn't check this\r\n                series.data = sourceSeries.data;\r\n            }\r\n        }, undefined, false));\r\n        series.defaultState.properties.visible = true;\r\n        series.filters.push(new DesaturateFilter());\r\n        scrollbarChart.series.push(series);\r\n        this.updateByOrientation();\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChartScrollbar.prototype.updateByOrientation = function () {\r\n        var _this = this;\r\n        if (this._scrollbarChart) {\r\n            $iter.each(this._scrollbarChart.xAxes.iterator(), function (xAxis) {\r\n                var renderer = xAxis.renderer;\r\n                if (_this.orientation == \"vertical\") {\r\n                    renderer.grid.template.disabled = true;\r\n                    renderer.labels.template.disabled = true;\r\n                    renderer.minGridDistance = 10;\r\n                }\r\n                else {\r\n                    renderer.grid.template.disabled = false;\r\n                    renderer.labels.template.disabled = false;\r\n                    renderer.minGridDistance = xAxis.clonedFrom.renderer.minGridDistance;\r\n                }\r\n            });\r\n            $iter.each(this._scrollbarChart.yAxes.iterator(), function (yAxis) {\r\n                var renderer = yAxis.renderer;\r\n                if (_this.orientation == \"horizontal\") {\r\n                    renderer.grid.template.disabled = true;\r\n                    renderer.labels.template.disabled = true;\r\n                    renderer.minGridDistance = 10;\r\n                }\r\n                else {\r\n                    renderer.grid.template.disabled = false;\r\n                    renderer.labels.template.disabled = false;\r\n                    renderer.minGridDistance = yAxis.clonedFrom.renderer.minGridDistance;\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Cleans up after series are removed from Scrollbar.\r\n     *\r\n     * @param {IListEvents<XYSeries>[\"removed\"]}  event  Event\r\n     */\r\n    XYChartScrollbar.prototype.handleSeriesRemoved = function (event) {\r\n        var sourceSeries = event.oldValue;\r\n        sourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n    };\r\n    Object.defineProperty(XYChartScrollbar.prototype, \"scrollbarChart\", {\r\n        /**\r\n         * A chart element that is used to display graphs in the Scrollbar.\r\n         *\r\n         * This is not the same as `chart`. It's a totally independent instance of\r\n         * [[XYChart]] with separate config, series, etc.\r\n         *\r\n         * It can be configured just like any other [[XYChart]].\r\n         *\r\n         * @readonly\r\n         * @return {XYChart} Scrollbar's internal chart\r\n         */\r\n        get: function () {\r\n            return this._scrollbarChart;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYChartScrollbar.prototype, \"chart\", {\r\n        /**\r\n         * @return {XYChart} Chart\r\n         */\r\n        get: function () {\r\n            return this._chart.get();\r\n        },\r\n        /**\r\n         * A chart that Scrollbar belongs to.\r\n         *\r\n         * @param {XYChart} chart  Chart\r\n         */\r\n        set: function (chart) {\r\n            if (this._chart.get() !== chart) {\r\n                this._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this, false));\r\n                this.handleDataChanged();\r\n                this._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates Scrollbar's internal chart's data when the main chart's data\r\n     * changes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChartScrollbar.prototype.handleDataChanged = function () {\r\n        //@todo: what if raw data changed?\r\n        if (this.chart.data != this.scrollbarChart.data) {\r\n            this.scrollbarChart.data = this.chart.data;\r\n        }\r\n    };\r\n    /**\r\n     * Zooms out all axes on the internal chart.\r\n     */\r\n    XYChartScrollbar.prototype.zoomOutAxes = function () {\r\n        var scrollbarChart = this.scrollbarChart;\r\n        $iter.each(scrollbarChart.xAxes.iterator(), function (x) {\r\n            x.zoom({ start: 0, end: 1 }, true, true);\r\n        });\r\n        $iter.each(scrollbarChart.yAxes.iterator(), function (y) {\r\n            y.zoom({ start: 0, end: 1 }, true, true);\r\n        });\r\n    };\r\n    /**\r\n     * Updates scrollbar thumb.\r\n     */\r\n    XYChartScrollbar.prototype.updateThumb = function () {\r\n        _super.prototype.updateThumb.call(this);\r\n        if (this._unselectedOverlay) {\r\n            var thumb = this.thumb;\r\n            var x = thumb.pixelX || 0;\r\n            var y = thumb.pixelY || 0;\r\n            var w = thumb.pixelWidth || 0;\r\n            var h = thumb.pixelHeight || 0;\r\n            var path = \"\";\r\n            if (this.orientation == \"horizontal\") {\r\n                path = $path.rectToPath({\r\n                    x: -1,\r\n                    y: 0,\r\n                    width: x,\r\n                    height: h\r\n                });\r\n                path += $path.rectToPath({\r\n                    x: x + w,\r\n                    y: 0,\r\n                    width: (this.pixelWidth || 0) - x - w,\r\n                    height: h\r\n                });\r\n            }\r\n            else {\r\n                path = $path.rectToPath({\r\n                    x: 0,\r\n                    y: 0,\r\n                    width: w,\r\n                    height: y\r\n                });\r\n                path += $path.rectToPath({\r\n                    x: 0,\r\n                    y: y + h,\r\n                    width: w,\r\n                    height: (this.pixelHeight || 0) - y - h\r\n                });\r\n            }\r\n            this._unselectedOverlay.path = path;\r\n        }\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {object}  config  Config\r\n     */\r\n    XYChartScrollbar.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            if ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n                for (var i = 0, len = config.series.length; i < len; i++) {\r\n                    var series = config.series[i];\r\n                    if ($type.hasValue(series) && $type.isString(series)) {\r\n                        if (this.map.hasKey(series)) {\r\n                            config.series[i] = this.map.getKey(series);\r\n                        }\r\n                        else {\r\n                            throw Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    return XYChartScrollbar;\r\n}(Scrollbar));\r\nexport { XYChartScrollbar };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n//# sourceMappingURL=XYChartScrollbar.js.map","/**\r\n * Map series module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem } from \"../series/Series\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[MapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar MapSeriesDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MapSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function MapSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"MapSeriesDataItem\";\r\n        _this.values.value = {};\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MapSeriesDataItem.prototype, \"value\", {\r\n        /**\r\n         * @return {number} Value\r\n         */\r\n        get: function () {\r\n            return this.values.value.value;\r\n        },\r\n        /**\r\n         * Numeric value of the data item.\r\n         *\r\n         * Value may be used in heat-map calculations.\r\n         *\r\n         * @param {number}  value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"value\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates the item's bounding coordinates: coordinates of the East, West,\r\n     * North, and South-most points.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IGeoPoint[]}  geoPoints  Points of the element\r\n     */\r\n    MapSeriesDataItem.prototype.updateExtremes = function (geoPoints) {\r\n        for (var s = 0; s < geoPoints.length; s++) {\r\n            var longitude = geoPoints[s].longitude;\r\n            var latitude = geoPoints[s].latitude;\r\n            if ((this.west > longitude) || !$type.isNumber(this.west)) {\r\n                this.west = longitude;\r\n            }\r\n            if ((this.east < longitude) || !$type.isNumber(this.east)) {\r\n                this.east = longitude;\r\n            }\r\n            if ((this.north < latitude) || !$type.isNumber(this.north)) {\r\n                this.north = latitude;\r\n            }\r\n            if ((this.south > latitude) || !$type.isNumber(this.south)) {\r\n                this.south = latitude;\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(MapSeriesDataItem.prototype, \"zoomLevel\", {\r\n        /**\r\n         * @return {number} Zoom level\r\n         */\r\n        get: function () {\r\n            return this.properties[\"zoomLevel\"];\r\n        },\r\n        /**\r\n         * When `zoomToMapObject()` is called the map will either calculate suitable\r\n         * zoom level itself or use object's `zoomLevel` if set.\r\n         *\r\n         * @param {number}  value  Zoom level\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"zoomLevel\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MapSeriesDataItem.prototype, \"zoomGeoPoint\", {\r\n        /**\r\n         * @return {IGeoPoint} Zoom geo point\r\n         */\r\n        get: function () {\r\n            return this.properties[\"zoomGeoPoint\"];\r\n        },\r\n        /**\r\n         * When `zoomToMapObject()` is called the map will either calculate suitable\r\n         * center position itself or use object's `zoomGeoPoint` if set.\r\n         *\r\n         * @param {IGeoPoint}  value  Zoom geo point\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"zoomGeoPoint\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return MapSeriesDataItem;\r\n}(SeriesDataItem));\r\nexport { MapSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A base class for series of map objects.\r\n *\r\n * @see {@link IMapSeriesEvents} for a list of available Events\r\n * @see {@link IMapSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar MapSeries = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MapSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function MapSeries() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"MapSeries\";\r\n        // Set defaults\r\n        _this.isMeasured = false;\r\n        _this.nonScalingStroke = true;\r\n        // Set data fields\r\n        _this.dataFields.value = \"value\";\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return {MapSeriesDataItem} Data Item\r\n     */\r\n    MapSeries.prototype.createDataItem = function () {\r\n        return new MapSeriesDataItem();\r\n    };\r\n    /**\r\n     * (Re)validates series data, effectively causing the whole series to be\r\n     * redrawn.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    MapSeries.prototype.validateData = function () {\r\n        var _this = this;\r\n        _super.prototype.validateData.call(this);\r\n        $iter.each(this.dataItems.iterator(), function (dataItem) {\r\n            if ((_this.west > dataItem.west) || !$type.isNumber(_this.west)) {\r\n                _this.west = dataItem.west;\r\n            }\r\n            if ((_this.east < dataItem.east) || !$type.isNumber(_this.east)) {\r\n                _this.east = dataItem.east;\r\n            }\r\n            if ((_this.north < dataItem.north) || !$type.isNumber(_this.north)) {\r\n                _this.north = dataItem.north;\r\n            }\r\n            if ((_this.south > dataItem.south) || !$type.isNumber(_this.south)) {\r\n                _this.south = dataItem.south;\r\n            }\r\n        });\r\n        if (this.chart) {\r\n            this.chart.updateExtremes();\r\n        }\r\n    };\r\n    /**\r\n     * Checks whether object should be included in series.\r\n     *\r\n     * @param  {string[]}  includes  A list of explicitly included ids\r\n     * @param  {string[]}  excludes  A list of explicitly excluded ids\r\n     * @param  {string}    id        Id of the object\r\n     * @return {boolean}             Include?\r\n     */\r\n    MapSeries.prototype.checkInclude = function (includes, excludes, id) {\r\n        if (includes) {\r\n            if (includes.length == 0) {\r\n                return false;\r\n            }\r\n            else {\r\n                if (includes.indexOf(id) == -1) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        if (excludes && excludes.length > 0) {\r\n            if (excludes.indexOf(id) != -1) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    Object.defineProperty(MapSeries.prototype, \"useGeodata\", {\r\n        /**\r\n         * @return {boolean} Use GeoJSON data?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"useGeodata\");\r\n        },\r\n        /**\r\n         * Should the map extract all the data about element from the GeoJSON?\r\n         *\r\n         * This is especially relevant for [[MapPolygonSeries]]. If not set to `true`\r\n         * polygon series will need to contain geographical data in itself in order\r\n         * to be drawn.\r\n         *\r\n         * If this is set to `true`, series will try to extract data for its objects\r\n         * from either chart-level `geodata` or from series' `geodata` which holds\r\n         * map infor in GeoJSON format.\r\n         *\r\n         * @default false\r\n         * @param {boolean}  value  Use GeoJSON data?\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"useGeodata\", value)) {\r\n                this.invalidateData();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MapSeries.prototype, \"include\", {\r\n        /**\r\n         * @return {string[]} Included objects\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"include\");\r\n        },\r\n        /**\r\n         * A list of object ids that should be explictly included in the series.\r\n         *\r\n         * If this is not set, the series will automatically include all of the\r\n         * objects, available in the GeoJSON map. (minus the ones listed in\r\n         * `exclude`)\r\n         *\r\n         * If you need to display only specific objects, use `include`. E.g.:\r\n         *\r\n         * `include = [\"FR\", \"ES\", \"DE\"];`\r\n         *\r\n         * The above will show only France, Spain, and Germany out of the whole map.\r\n         *\r\n         * @param {string[]}  value  Included objects\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"include\", value)) {\r\n                this.processIncExc();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    MapSeries.prototype.processIncExc = function () {\r\n        //this.data = [];\r\n        this.invalidateData();\r\n    };\r\n    Object.defineProperty(MapSeries.prototype, \"exclude\", {\r\n        /**\r\n         * @return {string[]} Excluded ids\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"exclude\");\r\n        },\r\n        /**\r\n         * A list of object ids that should be excluded from the series.\r\n         *\r\n         * E.g. you want to include all of the areas from a GeoJSON map, except\r\n         * Antarctica.\r\n         *\r\n         * You'd leave `include` empty, and set `exclude = [\"AQ\"]`.\r\n         *\r\n         * @param {string[]}  value  Excluded ids\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"exclude\", value)) {\r\n                this.processIncExc();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Decorates a newly added object.\r\n     *\r\n     * @param {IListEvents<MapObject>[\"inserted\"]} event [description]\r\n     */\r\n    MapSeries.prototype.handleObjectAdded = function (event) {\r\n        var mapObject = event.newValue;\r\n        mapObject.parent = this;\r\n        mapObject.series = this;\r\n        mapObject.strokeWidth = mapObject.strokeWidth;\r\n    };\r\n    Object.defineProperty(MapSeries.prototype, \"geodata\", {\r\n        /**\r\n         * @return {Object} GeoJSON data\r\n         */\r\n        get: function () {\r\n            return this._geodata;\r\n        },\r\n        /**\r\n         * Map data in GeoJSON format.\r\n         *\r\n         * The series supports the following GeoJSON objects: `Point`, `LineString`,\r\n         * `Polygon`, `MultiPoint`, `MultiLineString`, and `MultiPolygon`.\r\n         *\r\n         * @see {@link http://geojson.org/} Official GeoJSON format specification\r\n         * @param {Object} geoJSON GeoJSON data\r\n         */\r\n        set: function (geodata) {\r\n            if (geodata != this._geodata) {\r\n                this._geodata = geodata;\r\n                this.invalidateData();\r\n                $iter.each(this._dataUsers.iterator(), function (x) {\r\n                    x.invalidateData();\r\n                });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MapSeries.prototype, \"geodataSource\", {\r\n        /**\r\n         * Returns a [[DataSource]] specifically for loading Component's data.\r\n         *\r\n         * @return {DataSource} Data source\r\n         */\r\n        get: function () {\r\n            if (!this._dataSources[\"geodata\"]) {\r\n                this.getDataSource(\"geodata\");\r\n            }\r\n            return this._dataSources[\"geodata\"];\r\n        },\r\n        /**\r\n         * Sets a [[DataSource]] to be used for loading Component's data.\r\n         *\r\n         * @param {DataSource} value Data source\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            if (this._dataSources[\"geodata\"]) {\r\n                this.removeDispose(this._dataSources[\"geodata\"]);\r\n            }\r\n            this._dataSources[\"geodata\"] = value;\r\n            this._dataSources[\"geodata\"].component = this;\r\n            this.events.on(\"inited\", function () {\r\n                _this.loadData(\"geodata\");\r\n            }, undefined, false);\r\n            this.setDataSourceEvents(value, \"geodata\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return MapSeries;\r\n}(Series));\r\nexport { MapSeries };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"MapSeries\"] = MapSeries;\r\nregistry.registeredClasses[\"MapSeriesDataItem\"] = MapSeriesDataItem;\r\n//# sourceMappingURL=MapSeries.js.map","/**\r\n * Candlestick Series module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar CandlestickSeriesDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(CandlestickSeriesDataItem, _super);\r\n    /**\r\n     * Defines a type of [[Component]] this data item is used for\r\n     * @type {CandlestickSeries}\r\n     * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n     */\r\n    //public _component!: CandlestickSeries;\r\n    /**\r\n     * Constructor\r\n     */\r\n    function CandlestickSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.values.lowValueX = {};\r\n        _this.values.lowValueY = {};\r\n        _this.values.highValueX = {};\r\n        _this.values.highValueY = {};\r\n        _this.className = \"CandlestickSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CandlestickSeriesDataItem.prototype, \"lowValueX\", {\r\n        /**\r\n         * @return {number} Value\r\n         */\r\n        get: function () {\r\n            return this.values.lowValueX.value;\r\n        },\r\n        /**\r\n         * Low value for horizontal axis.\r\n         *\r\n         * @param {number}  value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"lowValueX\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CandlestickSeriesDataItem.prototype, \"lowValueY\", {\r\n        /**\r\n         * @return {number} Value\r\n         */\r\n        get: function () {\r\n            return this.values.lowValueY.value;\r\n        },\r\n        /**\r\n         * Low value for vertical axis.\r\n         *\r\n         * @param {number}  value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"lowValueY\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CandlestickSeriesDataItem.prototype, \"highValueX\", {\r\n        /**\r\n         * @return {number} Value\r\n         */\r\n        get: function () {\r\n            return this.values.highValueX.value;\r\n        },\r\n        /**\r\n         * High value for horizontal axis.\r\n         *\r\n         * @param {number}  value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"highValueX\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CandlestickSeriesDataItem.prototype, \"highValueY\", {\r\n        /**\r\n         * @return {number} Value\r\n         */\r\n        get: function () {\r\n            return this.values.highValueY.value;\r\n        },\r\n        /**\r\n         * High value for vertical axis.\r\n         *\r\n         * @param {number}  value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"highValueY\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CandlestickSeriesDataItem.prototype, \"closeValueX\", {\r\n        /**\r\n         * @return {number} Value\r\n         */\r\n        get: function () {\r\n            return this.values.valueX.value;\r\n        },\r\n        /**\r\n         * Close value for horizontal axis.\r\n         *\r\n         * This is an alias for `valueX` added for convenience only.\r\n         *\r\n         * @param {number}  value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"valueX\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CandlestickSeriesDataItem.prototype, \"closeValueY\", {\r\n        /**\r\n         * @return {number} Value\r\n         */\r\n        get: function () {\r\n            return this.values.valueY.value;\r\n        },\r\n        /**\r\n         * Close value for vertical axis.\r\n         *\r\n         * This is an alias for `valueX` added for convenience only.\r\n         *\r\n         * @param {number}  value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"valueY\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return CandlestickSeriesDataItem;\r\n}(ColumnSeriesDataItem));\r\nexport { CandlestickSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar CandlestickSeries = /** @class */ (function (_super) {\r\n    tslib_1.__extends(CandlestickSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function CandlestickSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"CandlestickSeries\";\r\n        _this.strokeOpacity = 1;\r\n        var interfaceColors = new InterfaceColorSet();\r\n        var positiveColor = interfaceColors.getFor(\"positive\");\r\n        var negativeColor = interfaceColors.getFor(\"negative\");\r\n        _this.dropFromOpenState.properties.fill = negativeColor;\r\n        _this.dropFromOpenState.properties.stroke = negativeColor;\r\n        _this.riseFromOpenState.properties.fill = positiveColor;\r\n        _this.riseFromOpenState.properties.stroke = positiveColor;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    CandlestickSeries.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Candlestick Series\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return {CandlestickSeriesDataItem} Data Item\r\n     */\r\n    CandlestickSeries.prototype.createDataItem = function () {\r\n        return new CandlestickSeriesDataItem();\r\n    };\r\n    /**\r\n     * Validates data item's element, effectively redrawing it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {CandlestickSeriesDataItem}  dataItem  Data item\r\n     */\r\n    CandlestickSeries.prototype.validateDataElementReal = function (dataItem) {\r\n        _super.prototype.validateDataElementReal.call(this, dataItem);\r\n        this.validateCandlestick(dataItem);\r\n    };\r\n    CandlestickSeries.prototype.validateCandlestick = function (dataItem) {\r\n        var column = dataItem.column;\r\n        if (column) {\r\n            var lowLine_1 = column.lowLine;\r\n            var highLine_1 = column.highLine;\r\n            if (this.baseAxis == this.xAxis) {\r\n                var x = column.pixelWidth / 2;\r\n                lowLine_1.x = x;\r\n                highLine_1.x = x;\r\n                var open_1 = dataItem.getWorkingValue(this.yOpenField);\r\n                var close_1 = dataItem.getWorkingValue(this.yField);\r\n                var yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n                var yClose = this.yAxis.getY(dataItem, this.yField);\r\n                var yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n                var yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n                var pixelY = column.pixelY;\r\n                lowLine_1.y1 = yLow - pixelY;\r\n                highLine_1.y1 = yHigh - pixelY;\r\n                if (open_1 < close_1) {\r\n                    lowLine_1.y2 = yOpen - pixelY;\r\n                    highLine_1.y2 = yClose - pixelY;\r\n                }\r\n                else {\r\n                    lowLine_1.y2 = yClose - pixelY;\r\n                    highLine_1.y2 = yOpen - pixelY;\r\n                }\r\n            }\r\n            if (this.baseAxis == this.yAxis) {\r\n                var y = column.pixelHeight / 2;\r\n                lowLine_1.y = y;\r\n                highLine_1.y = y;\r\n                var open_2 = dataItem.getWorkingValue(this.xOpenField);\r\n                var close_2 = dataItem.getWorkingValue(this.xField);\r\n                var xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n                var xClose = this.xAxis.getX(dataItem, this.xField);\r\n                var xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n                var xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n                var pixelX = column.pixelX;\r\n                lowLine_1.x1 = xLow - pixelX;\r\n                highLine_1.x1 = xHigh - pixelX;\r\n                if (open_2 < close_2) {\r\n                    lowLine_1.x2 = xOpen - pixelX;\r\n                    highLine_1.x2 = xClose - pixelX;\r\n                }\r\n                else {\r\n                    lowLine_1.x2 = xClose - pixelX;\r\n                    highLine_1.x2 = xOpen - pixelX;\r\n                }\r\n            }\r\n            $iter.each(this.axisRanges.iterator(), function (axisRange) {\r\n                // LOW LINE\r\n                var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n                if (rangeColumn) {\r\n                    var rangeLowLine = rangeColumn.lowLine;\r\n                    rangeLowLine.x = lowLine_1.x;\r\n                    rangeLowLine.y = lowLine_1.y;\r\n                    rangeLowLine.x1 = lowLine_1.x1;\r\n                    rangeLowLine.x2 = lowLine_1.x2;\r\n                    rangeLowLine.y1 = lowLine_1.y1;\r\n                    rangeLowLine.y2 = lowLine_1.y2;\r\n                    // HIGH LINE\r\n                    var rangehighLine = rangeColumn.highLine;\r\n                    rangehighLine.x = highLine_1.x;\r\n                    rangehighLine.y = highLine_1.y;\r\n                    rangehighLine.x1 = highLine_1.x1;\r\n                    rangehighLine.x2 = highLine_1.x2;\r\n                    rangehighLine.y1 = highLine_1.y1;\r\n                    rangehighLine.y2 = highLine_1.y2;\r\n                }\r\n            });\r\n        }\r\n    };\r\n    Object.defineProperty(CandlestickSeries.prototype, \"xLowField\", {\r\n        /**\r\n         * A data field to look for \"low\" value for horizontal axis.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {string} Field name\r\n         */\r\n        get: function () {\r\n            return this._xLowField;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CandlestickSeries.prototype, \"yLowField\", {\r\n        /**\r\n         * A data field to look for \"low\" value for vertical axis.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {string} Field name\r\n         */\r\n        get: function () {\r\n            return this._yLowField;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CandlestickSeries.prototype, \"xHighField\", {\r\n        /**\r\n         * A data field to look for \"high\" value for horizontal axis.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {string} Field name\r\n         */\r\n        get: function () {\r\n            return this._xHighField;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CandlestickSeries.prototype, \"yHighField\", {\r\n        /**\r\n         * A data field to look for \"high\" value for vertical axis.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {string} Field name\r\n         */\r\n        get: function () {\r\n            return this._yHighField;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets up which data fields to use for data access.\r\n     */\r\n    CandlestickSeries.prototype.defineFields = function () {\r\n        _super.prototype.defineFields.call(this);\r\n        if (this.baseAxis == this.xAxis) {\r\n            var yAxisFieldName = $utils.capitalize(this.yAxis.axisFieldName);\r\n            this._yLowField = (\"low\" + yAxisFieldName + \"Y\");\r\n            this._yHighField = (\"high\" + yAxisFieldName + \"Y\");\r\n        }\r\n        if (this.baseAxis == this.yAxis) {\r\n            var xAxisFieldName = $utils.capitalize(this.xAxis.axisFieldName);\r\n            this._xLowField = (\"low\" + xAxisFieldName + \"X\");\r\n            this._xHighField = (\"high\" + xAxisFieldName + \"X\");\r\n        }\r\n        this.addValueField(this.xAxis, this._xValueFields, this._xLowField);\r\n        this.addValueField(this.xAxis, this._xValueFields, this._xHighField);\r\n        this.addValueField(this.yAxis, this._yValueFields, this._yLowField);\r\n        this.addValueField(this.yAxis, this._yValueFields, this._yHighField);\r\n    };\r\n    /**\r\n     * Creates elements in related legend container, that mimics the look of this\r\n     * Series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Container}  marker  Legend item container\r\n     */\r\n    CandlestickSeries.prototype.createLegendMarker = function (marker) {\r\n        var w = marker.pixelWidth;\r\n        var h = marker.pixelHeight;\r\n        marker.removeChildren();\r\n        var column = marker.createChild(Candlestick);\r\n        column.shouldClone = false;\r\n        column.copyFrom(this.columns.template);\r\n        var cw;\r\n        var ch;\r\n        var highLine = column.lowLine;\r\n        var lowLine = column.highLine;\r\n        if (this.baseAxis == this.yAxis) {\r\n            cw = w / 3;\r\n            ch = h;\r\n            highLine.y = h / 2;\r\n            lowLine.y = h / 2;\r\n            highLine.x2 = w / 3;\r\n            lowLine.x2 = w / 3;\r\n            lowLine.x = w / 3 * 2;\r\n            column.column.x = w / 3;\r\n        }\r\n        else {\r\n            cw = w;\r\n            ch = h / 3;\r\n            highLine.x = w / 2;\r\n            lowLine.x = w / 2;\r\n            highLine.y2 = h / 3;\r\n            lowLine.y2 = h / 3;\r\n            lowLine.y = h / 3 * 2;\r\n            column.column.y = h / 3;\r\n        }\r\n        column.width = cw;\r\n        column.height = ch;\r\n        $object.copyProperties(this, marker, visualProperties);\r\n        $object.copyProperties(this.columns.template, column, visualProperties);\r\n        column.stroke = this.riseFromOpenState.properties.stroke;\r\n        column.fill = column.stroke;\r\n        var legendDataItem = marker.dataItem;\r\n        legendDataItem.color = column.fill;\r\n        legendDataItem.colorOrig = column.fill;\r\n    };\r\n    /**\r\n     * Returns an element to use for Candlestick\r\n     * @ignore\r\n     * @return {this[\"_column\"]} Element.\r\n     */\r\n    CandlestickSeries.prototype.createColumnTemplate = function () {\r\n        return new Candlestick();\r\n    };\r\n    return CandlestickSeries;\r\n}(ColumnSeries));\r\nexport { CandlestickSeries };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\r\n//# sourceMappingURL=CandlestickSeries.js.map","/**\r\n * Column series module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem } from \"./XYSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar ColumnSeriesDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ColumnSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ColumnSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ColumnSeriesDataItem\";\r\n        _this.locations[\"dateX\"] = 0.5;\r\n        _this.locations[\"dateY\"] = 0.5;\r\n        _this.locations[\"categoryX\"] = 0.5;\r\n        _this.locations[\"categoryY\"] = 0.5;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ColumnSeriesDataItem.prototype, \"column\", {\r\n        /**\r\n         * @return {Column} Column\r\n         */\r\n        get: function () {\r\n            return this._column;\r\n        },\r\n        /**\r\n         * A column used to draw a column for this data item.\r\n         *\r\n         * @param {Column}  column\r\n         */\r\n        set: function (column) {\r\n            this.setColumn(column);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ColumnSeriesDataItem.prototype.setColumn = function (column) {\r\n        var _this = this;\r\n        if (this._column && column != this._column) {\r\n            $array.remove(this.sprites, this._column);\r\n        }\r\n        this._column = column;\r\n        if (column) {\r\n            var prevDataItem = column.dataItem;\r\n            if (prevDataItem && prevDataItem != this) {\r\n                prevDataItem.column = undefined;\r\n            }\r\n            this.addSprite(column);\r\n            this._disposers.push(new Disposer(function () {\r\n                // TODO investigate why component is undefined\r\n                // https://codepen.io/team/amcharts/pen/dac4be245d658233a6d7e5597df2208b?editors=0010\r\n                if (_this.component) {\r\n                    _this.component.columns.removeValue(column);\r\n                }\r\n            }));\r\n        }\r\n    };\r\n    Object.defineProperty(ColumnSeriesDataItem.prototype, \"rangesColumns\", {\r\n        /**\r\n         * A dictionary storing axes ranges columns by axis uid\r\n         *\r\n         * @type {Dictionary<string, this[\"_column\"]>}\r\n         */\r\n        get: function () {\r\n            if (!this._rangesColumns) {\r\n                this._rangesColumns = new Dictionary();\r\n            }\r\n            return this._rangesColumns;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ColumnSeriesDataItem;\r\n}(XYSeriesDataItem));\r\nexport { ColumnSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar ColumnSeries = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ColumnSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ColumnSeries() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Start location within cell for columns.\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this._startLocation = 0;\r\n        /**\r\n         * End location within cell for columns.\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this._endLocation = 1;\r\n        _this.className = \"ColumnSeries\";\r\n        _this.width = percent(100);\r\n        _this.height = percent(100);\r\n        _this.strokeOpacity = 0;\r\n        _this.fillOpacity = 1;\r\n        _this.clustered = true;\r\n        var columnsContainer = _this.mainContainer.createChild(Container);\r\n        columnsContainer.shouldClone = false;\r\n        columnsContainer.isMeasured = false;\r\n        columnsContainer.layout = \"none\";\r\n        _this._columnsContainer = columnsContainer;\r\n        _this.columns;\r\n        _this.columns.template.pixelPerfect = false;\r\n        _this.tooltipColorSource = _this.columns.template;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ColumnSeries.prototype, \"columnsContainer\", {\r\n        /**\r\n         * A container that columns are created in.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        get: function () {\r\n            return this._columnsContainer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    ColumnSeries.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Column Series\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return {ColumnSeriesDataItem} Data Item\r\n     */\r\n    ColumnSeries.prototype.createDataItem = function () {\r\n        return new ColumnSeriesDataItem();\r\n    };\r\n    /**\r\n     * (Re)validates the whole series, effectively causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ColumnSeries.prototype.validate = function () {\r\n        var _this = this;\r\n        //@todo Check if we can do better than use `instanceof`\r\n        // find start/end locations based on clustered/stacked settings\r\n        // go through chart series instead of base axis series, because axis series doesn't maintain order\r\n        var baseAxisSeries = this.chart.series;\r\n        var clusterCount = 0;\r\n        var index = 0;\r\n        $iter.each(baseAxisSeries.iterator(), function (series) {\r\n            if (series instanceof ColumnSeries) {\r\n                if (_this.baseAxis == series.baseAxis) {\r\n                    if ((!series.stacked && series.clustered) || clusterCount === 0) {\r\n                        clusterCount++;\r\n                    }\r\n                    if (series == _this) {\r\n                        index = clusterCount - 1;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        var renderer = this.baseAxis.renderer;\r\n        var cellStartLocation = renderer.cellStartLocation;\r\n        var cellEndLocation = renderer.cellEndLocation;\r\n        this._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n        this._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n        _super.prototype.validate.call(this);\r\n        for (var i = 0; i < this.startIndex; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            this.disableUnusedColumns(dataItem);\r\n        }\r\n        for (var i = this.dataItems.length - 1; i > this.endIndex; i--) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            this.disableUnusedColumns(dataItem);\r\n        }\r\n    };\r\n    /**\r\n     * Validates data item's element, effectively redrawing it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n     */\r\n    ColumnSeries.prototype.validateDataElement = function (dataItem) {\r\n        // important oder here, first real, then super. we need this to know size\r\n        this.validateDataElementReal(dataItem);\r\n        _super.prototype.validateDataElement.call(this, dataItem);\r\n    };\r\n    /**\r\n     * Returns relative start location for the data item.\r\n     *\r\n     * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n     * @return {number}                       Location (0-1)\r\n     */\r\n    ColumnSeries.prototype.getStartLocation = function (dataItem) {\r\n        var startLocation = this._startLocation;\r\n        if (this.baseAxis == this.xAxis) {\r\n            startLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n        }\r\n        else {\r\n            startLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n        }\r\n        return startLocation;\r\n    };\r\n    /**\r\n     * [handleDataItemWorkingValueChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ColumnSeries.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\r\n        if (this.simplifiedProcessing) {\r\n            this.validateDataElement(dataItem);\r\n        }\r\n        else {\r\n            _super.prototype.handleDataItemWorkingValueChange.call(this, dataItem, name);\r\n        }\r\n    };\r\n    /**\r\n     * Returns relative end location for the data item.\r\n     *\r\n     * @param  {this[\"_dataItem\"]}  dataItem  Data item\r\n     * @return {number}                       Location (0-1)\r\n     */\r\n    ColumnSeries.prototype.getEndLocation = function (dataItem) {\r\n        var endLocation = this._endLocation;\r\n        if (this.baseAxis == this.xAxis) {\r\n            endLocation += dataItem.locations[this.xField] - 0.5;\r\n        }\r\n        else {\r\n            endLocation += dataItem.locations[this.yField] - 0.5;\r\n        }\r\n        return endLocation;\r\n    };\r\n    /**\r\n     * Validates data item's elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n     */\r\n    ColumnSeries.prototype.validateDataElementReal = function (dataItem) {\r\n        var _this = this;\r\n        //\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n        var l;\r\n        var r;\r\n        var t;\r\n        var b;\r\n        var startLocation = this.getStartLocation(dataItem);\r\n        var endLocation = this.getEndLocation(dataItem);\r\n        var xField = this.xField;\r\n        var xOpenField = this.xOpenField;\r\n        var yField = this.yField;\r\n        var yOpenField = this.yOpenField;\r\n        var template = this.columns.template;\r\n        var percentWidth = template.percentWidth;\r\n        var percentHeight = template.percentHeight;\r\n        var pixelWidth = template.pixelWidth;\r\n        var pixelHeight = template.pixelHeight;\r\n        var maxWidth = template.maxWidth;\r\n        var maxHeight = template.maxHeight;\r\n        var paddingLeft = template.pixelPaddingLeft;\r\n        var paddingRight = template.pixelPaddingRight;\r\n        var paddingTop = template.pixelPaddingTop;\r\n        var paddingBottom = template.pixelPaddingBottom;\r\n        var outOfBounds = false;\r\n        // two category axes\r\n        if ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n            if (!dataItem.hasValue(this._xValueFields) || !dataItem.hasValue(this._yValueFields)) {\r\n                return;\r\n            }\r\n            startLocation = 0;\r\n            endLocation = 1;\r\n            if (!$type.isNaN(percentWidth)) {\r\n                var offset = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n                startLocation += offset;\r\n                endLocation -= offset;\r\n            }\r\n            l = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n            r = this.xAxis.getX(dataItem, xField, endLocation);\r\n            // in case width is set in pixels\r\n            if ($type.isNaN(percentWidth)) {\r\n                var offset = ((r - l) - pixelWidth) / 2;\r\n                l += offset;\r\n                r -= offset;\r\n            }\r\n            // in case max width is set in pixels\r\n            if (!$type.isNaN(maxWidth)) {\r\n                var offset = ((r - l) - maxWidth) / 2;\r\n                l += offset;\r\n                r -= offset;\r\n            }\r\n            startLocation = 0;\r\n            endLocation = 1;\r\n            if (!$type.isNaN(percentHeight)) {\r\n                var offset = $math.round((1 - percentHeight / 100) / 2, 5);\r\n                startLocation += offset;\r\n                endLocation -= offset;\r\n            }\r\n            t = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n            b = this.yAxis.getY(dataItem, yField, endLocation);\r\n            // in case width is set in pixels\r\n            if ($type.isNaN(percentHeight)) {\r\n                var offset = ((b - t) - pixelHeight) / 2;\r\n                b += offset;\r\n                t -= offset;\r\n            }\r\n            // in case max width is set in pixels\r\n            if (!$type.isNaN(maxHeight)) {\r\n                var offset = ((b - t) - maxHeight) / 2;\r\n                b += offset;\r\n                t -= offset;\r\n            }\r\n            r = this.fixHorizontalCoordinate(r);\r\n            l = this.fixHorizontalCoordinate(l);\r\n            t = this.fixVerticalCoordinate(t);\r\n            b = this.fixVerticalCoordinate(b);\r\n        }\r\n        else if (this.baseAxis == this.xAxis) {\r\n            if (!dataItem.hasValue(this._yValueFields)) {\r\n                return;\r\n            }\r\n            // in case width is set in percent\r\n            if (!$type.isNaN(percentWidth)) {\r\n                var offset = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n                startLocation += offset;\r\n                endLocation -= offset;\r\n            }\r\n            l = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n            r = this.xAxis.getX(dataItem, xField, endLocation);\r\n            // in case width is set in pixels\r\n            if ($type.isNaN(percentWidth)) {\r\n                var offset = ((r - l) - pixelWidth) / 2;\r\n                l += offset;\r\n                r -= offset;\r\n            }\r\n            // in case width is set in pixels\r\n            if (!$type.isNaN(maxWidth)) {\r\n                var offset = ((r - l) - maxWidth) / 2;\r\n                l += offset;\r\n                r -= offset;\r\n            }\r\n            var bottomLocation = dataItem.locations[yOpenField];\r\n            var topLocation = dataItem.locations[yField];\r\n            // otherwise gantt chart will start items in the middle of a cell\r\n            if (this.yAxis instanceof ValueAxis) {\r\n                bottomLocation = 0;\r\n                topLocation = 0;\r\n            }\r\n            b = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n            t = this.yAxis.getY(dataItem, yField, topLocation);\r\n            // used to save location for bullets, but it's not a good approach\r\n            // dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n            var axisLenght = this.yAxis.axisLength;\r\n            if ((t < 0 && b < 0) || (t > axisLenght && b > axisLenght)) {\r\n                outOfBounds = true;\r\n            }\r\n            t = this.fixVerticalCoordinate(t);\r\n            b = this.fixVerticalCoordinate(b);\r\n            if (Math.abs(r - l) - paddingLeft - paddingRight == 0) {\r\n                outOfBounds = true;\r\n            }\r\n        }\r\n        // horizontal bars\r\n        else {\r\n            if (!dataItem.hasValue(this._xValueFields)) {\r\n                return;\r\n            }\r\n            if (!$type.isNaN(percentHeight)) {\r\n                var offset = $math.round((endLocation - startLocation) * (1 - percentHeight / 100) / 2, 5);\r\n                startLocation += offset;\r\n                endLocation -= offset;\r\n            }\r\n            t = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n            b = this.yAxis.getY(dataItem, yField, endLocation);\r\n            // in case height is set in pixels\r\n            if ($type.isNaN(percentHeight)) {\r\n                var offset = ((b - t) - pixelHeight) / 2;\r\n                b -= offset;\r\n                t += offset;\r\n            }\r\n            // in case height is set in pixels\r\n            if (!$type.isNaN(maxHeight)) {\r\n                var offset = ((b - t) - maxHeight) / 2;\r\n                b -= offset;\r\n                t += offset;\r\n            }\r\n            var rightLocation = dataItem.locations[xField];\r\n            var leftLocation = dataItem.locations[xOpenField];\r\n            // otherwise gantt chart will start items in the middle of a cell\r\n            if (this.xAxis instanceof ValueAxis) {\r\n                rightLocation = 0;\r\n                leftLocation = 0;\r\n            }\r\n            r = this.xAxis.getX(dataItem, xField, rightLocation);\r\n            l = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n            // used to save location for bullets, but it's not a good approach\r\n            // dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n            var axisLenght = this.xAxis.axisLength;\r\n            if ((r < 0 && l < 0) || (r > axisLenght && l > axisLenght)) {\r\n                outOfBounds = true;\r\n            }\r\n            r = this.fixHorizontalCoordinate(r);\r\n            l = this.fixHorizontalCoordinate(l);\r\n            if (Math.abs(t - b) - paddingTop - paddingBottom == 0) {\r\n                outOfBounds = true;\r\n            }\r\n        }\r\n        var w = Math.abs(r - l);\r\n        var h = Math.abs(b - t);\r\n        var x = Math.min(l, r);\r\n        var y = Math.min(t, b);\r\n        if (!outOfBounds) {\r\n            var column_1;\r\n            if (!dataItem.column) {\r\n                column_1 = this.columns.create();\r\n                //$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n                $object.copyProperties(this, column_1, visualProperties); // need this because 3d columns are not in the same container\r\n                $object.copyProperties(this.columns.template, column_1, visualProperties); // second time, no force, so that columns.template would override series properties\r\n                dataItem.addSprite(column_1);\r\n                dataItem.column = column_1;\r\n                // accessibility\r\n                if (this.itemsFocusable()) {\r\n                    column_1.role = \"menuitem\";\r\n                    column_1.focusable = true;\r\n                }\r\n                else {\r\n                    column_1.role = \"listitem\";\r\n                    column_1.focusable = false;\r\n                }\r\n                if (column_1.focusable) {\r\n                    column_1.events.once(\"focus\", function (ev) {\r\n                        column_1.readerTitle = _this.populateString(_this.itemReaderText, dataItem);\r\n                    }, undefined, false);\r\n                    column_1.events.once(\"blur\", function (ev) {\r\n                        column_1.readerTitle = \"\";\r\n                    }, undefined, false);\r\n                }\r\n                if (column_1.hoverable) {\r\n                    column_1.events.once(\"over\", function (ev) {\r\n                        column_1.readerTitle = _this.populateString(_this.itemReaderText, dataItem);\r\n                    }, undefined, false);\r\n                    column_1.events.once(\"out\", function (ev) {\r\n                        column_1.readerTitle = \"\";\r\n                    }, undefined, false);\r\n                }\r\n            }\r\n            else {\r\n                column_1 = dataItem.column;\r\n            }\r\n            column_1.width = w;\r\n            column_1.height = h;\r\n            column_1.x = x;\r\n            column_1.y = y;\r\n            column_1.realX = l;\r\n            column_1.realY = t;\r\n            column_1.realWidth = r - l;\r\n            column_1.realHeight = b - t;\r\n            column_1.parent = this.columnsContainer;\r\n            column_1.virtualParent = this;\r\n            this.setColumnStates(column_1);\r\n            if (column_1.invalid) {\r\n                column_1.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n            }\r\n            column_1.__disabled = false;\r\n            //column.returnAfterTemp();\r\n            $iter.each(this.axisRanges.iterator(), function (axisRange) {\r\n                var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n                if (!rangeColumn) {\r\n                    rangeColumn = _this.columns.create();\r\n                    //$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n                    $object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n                    dataItem.addSprite(rangeColumn);\r\n                    dataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n                }\r\n                rangeColumn.parent = axisRange.contents;\r\n                rangeColumn.width = w;\r\n                rangeColumn.height = h;\r\n                rangeColumn.x = x;\r\n                rangeColumn.y = y;\r\n                _this.setColumnStates(rangeColumn);\r\n                if (rangeColumn.invalid) {\r\n                    rangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n                }\r\n                rangeColumn.__disabled = false;\r\n                //rangeColumn.returnAfterTemp();\r\n            });\r\n        }\r\n        else {\r\n            this.disableUnusedColumns(dataItem);\r\n        }\r\n        dataItem.itemWidth = w;\r\n        dataItem.itemHeight = h;\r\n    };\r\n    ColumnSeries.prototype.disableUnusedColumns = function (dataItem) {\r\n        if (dataItem) {\r\n            if (dataItem.column) {\r\n                // otherwise might flicker when enabling\r\n                dataItem.column.width = 0;\r\n                dataItem.column.height = 0;\r\n                dataItem.column.__disabled = true;\r\n            }\r\n            $iter.each(this.axisRanges.iterator(), function (axisRange) {\r\n                var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n                if (rangeColumn) {\r\n                    // otherwise might flicker when enabling\r\n                    rangeColumn.width = 0;\r\n                    rangeColumn.height = 0;\r\n                    rangeColumn.__disabled = true;\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Apply different state/coloring to columns based on the change value.\r\n     *\r\n     * @param {Sprite}  sprite  Sprite to apply state to\r\n     * @todo Do not apply accessibility to wicks of the candlesticks\r\n     */\r\n    ColumnSeries.prototype.setColumnStates = function (sprite) {\r\n        var dataItem = sprite.dataItem;\r\n        if (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n            var open_1;\r\n            var value = void 0;\r\n            var change = void 0;\r\n            if (this.baseAxis == this.yAxis) {\r\n                if (this.xOpenField && this.xField) {\r\n                    open_1 = dataItem.getValue(this.xOpenField);\r\n                    value = dataItem.getValue(this.xField);\r\n                    change = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n                }\r\n            }\r\n            else {\r\n                if (this.yOpenField && this.yField) {\r\n                    open_1 = dataItem.getValue(this.yOpenField);\r\n                    value = dataItem.getValue(this.yField);\r\n                    change = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n                }\r\n            }\r\n            if (value < open_1) {\r\n                dataItem.droppedFromOpen = true;\r\n                sprite.defaultState.copyFrom(this._dropFromOpenState);\r\n                sprite.setState(this._dropFromOpenState, 0);\r\n            }\r\n            else {\r\n                dataItem.droppedFromOpen = false;\r\n                sprite.defaultState.copyFrom(this._riseFromOpenState);\r\n                sprite.setState(this._riseFromOpenState, 0);\r\n            }\r\n            if (change < 0) {\r\n                dataItem.droppedFromPrevious = true;\r\n                sprite.defaultState.copyFrom(this._dropFromPreviousState);\r\n                sprite.setState((this._dropFromPreviousState), 0);\r\n            }\r\n            else {\r\n                dataItem.droppedFromPrevious = false;\r\n                sprite.defaultState.copyFrom(this._riseFromPreviousState);\r\n                sprite.setState((this._riseFromPreviousState), 0);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(ColumnSeries.prototype, \"columns\", {\r\n        /**\r\n         * A list of column elements in the series.\r\n         *\r\n         * @return {ListTemplate<this[\"_column\"]>} Columns\r\n         */\r\n        get: function () {\r\n            if (!this._columns) {\r\n                this._columns = new ListTemplate(this.createColumnTemplate());\r\n                this._disposers.push(new ListDisposer(this._columns));\r\n                this._disposers.push(this._columns.template);\r\n            }\r\n            return this._columns;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates and returns a column element to use as a template.\r\n     *\r\n     * @return {this[\"_column\"]} Column template\r\n     */\r\n    ColumnSeries.prototype.createColumnTemplate = function () {\r\n        return new Column();\r\n    };\r\n    Object.defineProperty(ColumnSeries.prototype, \"clustered\", {\r\n        /**\r\n         * @return {boolean} Clustered?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"clustered\");\r\n        },\r\n        /**\r\n         * Cluster this series columns?\r\n         *\r\n         * Setting to `false` will make columns overlap with pther series.\r\n         *\r\n         * @default true\r\n         * @param {boolean}  value  Clustered?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"clustered\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ColumnSeries.prototype, \"dropFromOpenState\", {\r\n        /**\r\n         * A state to apply to a column when close value is lower than open value.\r\n         *\r\n         * Can be used to differentiate appearance based on value relations.\r\n         *\r\n         * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n         *\r\n         * @readonly You can modify state object, but can't overwrite it\r\n         * @return {SpriteState} State\r\n         */\r\n        get: function () {\r\n            if (!this._dropFromOpenState) {\r\n                this._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n            }\r\n            return this._dropFromOpenState;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ColumnSeries.prototype, \"dropFromPreviousState\", {\r\n        /**\r\n         * A state to apply to a column when its value is lower value of a previous\r\n         * column.\r\n         *\r\n         * Can be used to differentiate appearance based on value relations.\r\n         *\r\n         * @readonly You can modify state object, but can't overwrite it\r\n         * @return {SpriteState} State\r\n         */\r\n        get: function () {\r\n            if (!this._dropFromPreviousState) {\r\n                this._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n            }\r\n            return this._dropFromPreviousState;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ColumnSeries.prototype, \"riseFromOpenState\", {\r\n        /**\r\n         * A state to apply to a column when close value is same or higher than open\r\n         * value.\r\n         *\r\n         * Can be used to differentiate appearance based on value relations.\r\n         *\r\n         * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n         *\r\n         * @readonly You can modify state object, but can't overwrite it\r\n         * @return {SpriteState} State\r\n         */\r\n        get: function () {\r\n            if (!this._riseFromOpenState) {\r\n                this._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n            }\r\n            return this._riseFromOpenState;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ColumnSeries.prototype, \"riseFromPreviousState\", {\r\n        /**\r\n         * A state to apply to a column when its value is same or higher than value\r\n         * of a previous column.\r\n         *\r\n         * Can be used to differentiate appearance based on value relations.\r\n         *\r\n         * @readonly You can modify state object, but can't overwrite it\r\n         * @return {SpriteState} State\r\n         */\r\n        get: function () {\r\n            if (!this._riseFromPreviousState) {\r\n                this._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n            }\r\n            return this._riseFromPreviousState;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates value of the related legend item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {ColumnSeriesDataItem}  dataItem  Data item\r\n     */\r\n    ColumnSeries.prototype.updateLegendValue = function (dataItem) {\r\n        var _this = this;\r\n        _super.prototype.updateLegendValue.call(this, dataItem);\r\n        if (this.legendDataItem) {\r\n            var marker = this.legendDataItem.marker;\r\n            var fromOpenState_1;\r\n            var fromPreviousState_1;\r\n            if (dataItem) {\r\n                if (dataItem.droppedFromOpen) {\r\n                    fromOpenState_1 = this._dropFromOpenState;\r\n                }\r\n                else {\r\n                    fromOpenState_1 = this._riseFromOpenState;\r\n                }\r\n                if (dataItem.droppedFromPrevious) {\r\n                    fromPreviousState_1 = this._dropFromPreviousState;\r\n                }\r\n                else {\r\n                    fromPreviousState_1 = this._riseFromPreviousState;\r\n                }\r\n            }\r\n            $iter.each(marker.children.iterator(), function (child) {\r\n                if (dataItem) {\r\n                    child.setState(fromPreviousState_1);\r\n                    child.setState(fromOpenState_1);\r\n                }\r\n                else {\r\n                    // todo: think what to do here, maybe apply above states based on totals?\r\n                    child.setState(_this._riseFromPreviousState);\r\n                    child.setState(_this._riseFromOpenState);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Creates elements in related legend container, that mimics the look of this\r\n     * Series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Container}  marker  Legend item container\r\n     */\r\n    ColumnSeries.prototype.createLegendMarker = function (marker) {\r\n        var w = marker.pixelWidth;\r\n        var h = marker.pixelHeight;\r\n        marker.removeChildren();\r\n        var column = marker.createChild(RoundedRectangle);\r\n        column.shouldClone = false;\r\n        $object.copyProperties(this, column, visualProperties);\r\n        column.copyFrom(this.columns.template);\r\n        column.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n        column.width = w;\r\n        column.height = h;\r\n        var legendDataItem = marker.dataItem;\r\n        legendDataItem.color = this.fill;\r\n        legendDataItem.colorOrig = this.fill;\r\n    };\r\n    /**\r\n     * Copies all properties from another instance of [[ColumnSeries]].\r\n     *\r\n     * @param {ColumnSeries}  source  Source series\r\n     */\r\n    ColumnSeries.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.columns.template.copyFrom(source.columns.template);\r\n    };\r\n    /**\r\n    * returns bullet x location\r\n    * @ignore\r\n    */\r\n    ColumnSeries.prototype.getBulletLocationX = function (bullet, field) {\r\n        if (this.baseAxis == this.xAxis) {\r\n            return (this._startLocation + this._endLocation) / 2;\r\n        }\r\n        else {\r\n            return _super.prototype.getBulletLocationX.call(this, bullet, field);\r\n        }\r\n    };\r\n    /**\r\n    * returns bullet y location\r\n    * @ignore\r\n    */\r\n    ColumnSeries.prototype.getBulletLocationY = function (bullet, field) {\r\n        if (this.baseAxis == this.yAxis) {\r\n            return (this._startLocation + this._endLocation) / 2;\r\n        }\r\n        else {\r\n            return _super.prototype.getBulletLocationY.call(this, bullet, field);\r\n        }\r\n    };\r\n    /**\r\n     * @ignore Exclude from docs\r\n     */\r\n    ColumnSeries.prototype.fixVerticalCoordinate = function (coordinate) {\r\n        var paddingBottom = this.columns.template.pixelPaddingBottom;\r\n        var paddingTop = this.columns.template.pixelPaddingTop;\r\n        var minY = -paddingTop;\r\n        var maxY = this.yAxis.axisLength + paddingBottom;\r\n        return $math.fitToRange(coordinate, minY, maxY);\r\n    };\r\n    /**\r\n     * @ignore Exclude from docs\r\n     */\r\n    ColumnSeries.prototype.fixHorizontalCoordinate = function (coordinate) {\r\n        var paddingLeft = this.columns.template.pixelPaddingLeft;\r\n        var paddingRight = this.columns.template.pixelPaddingRight;\r\n        var minX = -paddingLeft;\r\n        var maxX = this.xAxis.axisLength + paddingRight;\r\n        return $math.fitToRange(coordinate, minX, maxX);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    ColumnSeries.prototype.disposeData = function () {\r\n        _super.prototype.disposeData.call(this);\r\n        this.columns.clear();\r\n    };\r\n    return ColumnSeries;\r\n}(XYSeries));\r\nexport { ColumnSeries };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n//# sourceMappingURL=ColumnSeries.js.map","/**\r\n * 3D column series module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\nvar ColumnSeries3DDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ColumnSeries3DDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ColumnSeries3DDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ColumnSeries3DDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return ColumnSeries3DDataItem;\r\n}(ColumnSeriesDataItem));\r\nexport { ColumnSeries3DDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar ColumnSeries3D = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ColumnSeries3D, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ColumnSeries3D() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ColumnSeries3D\";\r\n        _this.columns.template.column3D.applyOnClones = true;\r\n        _this.columns.template.hiddenState.properties.visible = true;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ColumnSeries3D.prototype, \"columnsContainer\", {\r\n        /**\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            if (this.chart && this.chart.columnsContainer) {\r\n                return this.chart.columnsContainer;\r\n            }\r\n            else {\r\n                return this._columnsContainer;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Validates data item's elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n     */\r\n    ColumnSeries3D.prototype.validateDataElementReal = function (dataItem) {\r\n        _super.prototype.validateDataElementReal.call(this, dataItem);\r\n        if (dataItem.column) {\r\n            dataItem.column.dx = this.dx;\r\n            dataItem.column.dy = this.dy;\r\n        }\r\n    };\r\n    /**\r\n     * Validates data item's elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ColumnSeries3D.prototype.validateDataElements = function () {\r\n        _super.prototype.validateDataElements.call(this);\r\n        if (this.chart) {\r\n            this.chart.invalidateLayout();\r\n        }\r\n    };\r\n    /**\r\n     * Returns an element to use for 3D bar.\r\n     * @ignore\r\n     * @return {this[\"_column\"]} Element.\r\n     */\r\n    ColumnSeries3D.prototype.createColumnTemplate = function () {\r\n        return new Column3D();\r\n    };\r\n    Object.defineProperty(ColumnSeries3D.prototype, \"depth\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {number} Depth (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"depth\");\r\n        },\r\n        /**\r\n         * Depth (height) of the slices in the series in pixels.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {number}  value  Depth (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"depth\", value, true);\r\n            var template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n            template.column3D.depth = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ColumnSeries3D.prototype, \"angle\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {number} Angle (0-360)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"angle\");\r\n        },\r\n        /**\r\n         * Angle of view for the slices in series. (0-360)\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {number}  value  Angle (0-360)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"angle\", value);\r\n            var template = this.columns.template;\r\n            template.column3D.angle = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ColumnSeries3D;\r\n}(ColumnSeries));\r\nexport { ColumnSeries3D };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n//# sourceMappingURL=ColumnSeries3D.js.map","/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar ConeSeriesDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ConeSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ConeSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ConeSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return ConeSeriesDataItem;\r\n}(ColumnSeriesDataItem));\r\nexport { ConeSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar ConeSeries = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ConeSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ConeSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ConeSeries\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns an element to use for Candlestick\r\n     * @ignore\r\n     * @return {this[\"_column\"]} Element.\r\n     */\r\n    ConeSeries.prototype.createColumnTemplate = function () {\r\n        return new ConeColumn();\r\n    };\r\n    /**\r\n     * Returns an SVG path to use as series mask.\r\n     *\r\n     * @return {string} SVG path\r\n     */\r\n    ConeSeries.prototype.getMaskPath = function () {\r\n        var dx = 0;\r\n        var dy = 0;\r\n        var column = this.columns.getIndex(0);\r\n        if (column) {\r\n            if (this.baseAxis == this.xAxis) {\r\n                dy = column.coneColumn.bottom.radiusY + 1;\r\n            }\r\n            else {\r\n                dx = column.coneColumn.bottom.radiusY + 1;\r\n            }\r\n            return $path.rectToPath({\r\n                x: -dx,\r\n                y: 0,\r\n                width: this.xAxis.axisLength + dx,\r\n                height: this.yAxis.axisLength + dy\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Validates data item's elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n     */\r\n    ConeSeries.prototype.validateDataElementReal = function (dataItem) {\r\n        _super.prototype.validateDataElementReal.call(this, dataItem);\r\n        var column = dataItem.column;\r\n        if (column) {\r\n            var coneColumn = dataItem.column.coneColumn;\r\n            coneColumn.fill = dataItem.column.fill;\r\n            if (this.baseAxis == this.yAxis) {\r\n                coneColumn.orientation = \"horizontal\";\r\n            }\r\n            else {\r\n                coneColumn.orientation = \"vertical\";\r\n            }\r\n        }\r\n    };\r\n    return ConeSeries;\r\n}(ColumnSeries));\r\nexport { ConeSeries };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n//# sourceMappingURL=ConeSeries.js.map","/**\r\n * CurvedColumnSeries module.\r\n *\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { CurvedColumn } from \"../elements/CurvedColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar CurvedColumnSeriesDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(CurvedColumnSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function CurvedColumnSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"CurvedColumnSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return CurvedColumnSeriesDataItem;\r\n}(ColumnSeriesDataItem));\r\nexport { CurvedColumnSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a curved columns graph.\r\n *\r\n * @see {@link ICurvedColumnSeriesEvents} for a list of available Events\r\n * @see {@link ICurvedColumnSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar CurvedColumnSeries = /** @class */ (function (_super) {\r\n    tslib_1.__extends(CurvedColumnSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function CurvedColumnSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"CurvedColumnSeries\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns an element to use for the curved column.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {this[\"_column\"]} Element.\r\n     */\r\n    CurvedColumnSeries.prototype.createColumnTemplate = function () {\r\n        return new CurvedColumn();\r\n    };\r\n    /**\r\n     * Validates data item's elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n     */\r\n    CurvedColumnSeries.prototype.validateDataElementReal = function (dataItem) {\r\n        var column = dataItem.column;\r\n        if (column) {\r\n            var curvedColumn = dataItem.column.curvedColumn;\r\n            curvedColumn.fill = dataItem.column.fill;\r\n            if (this.baseAxis == this.yAxis) {\r\n                column.orientation = \"horizontal\";\r\n            }\r\n            else {\r\n                column.orientation = \"vertical\";\r\n            }\r\n        }\r\n        _super.prototype.validateDataElementReal.call(this, dataItem);\r\n    };\r\n    return CurvedColumnSeries;\r\n}(ColumnSeries));\r\nexport { CurvedColumnSeries };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumnSeries\"] = CurvedColumnSeries;\r\nregistry.registeredClasses[\"CurvedColumnSeriesDataItem\"] = CurvedColumnSeriesDataItem;\r\n//# sourceMappingURL=CurvedColumnSeries.js.map","/**\r\n * Defines Funnel Chart Series.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo: sequenced?\r\n/**\r\n * Defines a [[DataItem]] for [[FunnelSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar FunnelSeriesDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(FunnelSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FunnelSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"FunnelSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(FunnelSeriesDataItem.prototype, \"sliceLink\", {\r\n        /**\r\n         * A [[FunnelSlice]] element, related to this data item ([[FunnelSlice]]).\r\n         *\r\n         * @readonly\r\n         * @return {FunnelSlice} Slice element\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._sliceLink) {\r\n                var sliceLink_1 = this.component.sliceLinks.create();\r\n                this._sliceLink = sliceLink_1;\r\n                this._disposers.push(sliceLink_1);\r\n                sliceLink_1.parent = this.component.slicesContainer;\r\n                this._disposers.push(new Disposer(function () {\r\n                    if (_this.component) {\r\n                        _this.component.sliceLinks.removeValue(sliceLink_1);\r\n                    }\r\n                }));\r\n                this.addSprite(sliceLink_1);\r\n                sliceLink_1.visible = this.visible;\r\n            }\r\n            return this._sliceLink;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return FunnelSeriesDataItem;\r\n}(PercentSeriesDataItem));\r\nexport { FunnelSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IFunnelSeriesEvents} for a list of available Events\r\n * @see {@link IFunnelSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nvar FunnelSeries = /** @class */ (function (_super) {\r\n    tslib_1.__extends(FunnelSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FunnelSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this._nextY = 0;\r\n        _this.className = \"FunnelSeries\";\r\n        _this.orientation = \"vertical\";\r\n        _this.width = percent(100);\r\n        _this.height = percent(100);\r\n        _this.slicesContainer.width = percent(100);\r\n        _this.slicesContainer.height = percent(100);\r\n        _this.bottomRatio = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creates a [[FunnelSlice]] element.\r\n     *\r\n     * @return {FunnelSlice} Slice\r\n     */\r\n    FunnelSeries.prototype.createSlice = function () {\r\n        return new FunnelSlice();\r\n    };\r\n    /**\r\n     * Creates a [[FunnelTick]] element.\r\n     *\r\n     * @return {FunnelTick} Tick\r\n     */\r\n    FunnelSeries.prototype.createTick = function () {\r\n        return new FunnelTick();\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    FunnelSeries.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Funnel Series\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return {FunnelSeriesDataItem} Data Item\r\n     */\r\n    FunnelSeries.prototype.createDataItem = function () {\r\n        return new FunnelSeriesDataItem();\r\n    };\r\n    /**\r\n     * Inits FunnelSlice.\r\n     *\r\n     * @param  {FunnelSlice} slice to init\r\n     */\r\n    FunnelSeries.prototype.initSlice = function (slice) {\r\n        slice.isMeasured = false;\r\n        slice.defaultState.properties.scale = 1;\r\n        slice.observe(\"scale\", this.handleSliceScale, this);\r\n        slice.observe([\"dx\", \"dy\", \"x\", \"y\"], this.handleSliceMove, this);\r\n        slice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n        var hoverState = slice.states.create(\"hover\");\r\n        hoverState.properties.expandDistance = 0.2;\r\n    };\r\n    /**\r\n     * [initLabel description]\r\n     *\r\n     * @todo Description\r\n     * @param {this[\"_label\"]} label [description]\r\n     */\r\n    FunnelSeries.prototype.initLabel = function (label) {\r\n        _super.prototype.initLabel.call(this, label);\r\n        label.verticalCenter = \"middle\";\r\n        label.horizontalCenter = \"middle\";\r\n        label.isMeasured = true;\r\n        label.padding(5, 5, 5, 5);\r\n    };\r\n    /**\r\n     * (Re)validates the whole series, effectively causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    FunnelSeries.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        this._nextY = 0;\r\n    };\r\n    /**\r\n     * [validateDataElements description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    FunnelSeries.prototype.validateDataElements = function () {\r\n        var slicesContainer = this.slicesContainer;\r\n        var labelsContainer = this.labelsContainer;\r\n        var labelTemplate = this.labels.template;\r\n        labelsContainer.layout = \"absolute\";\r\n        if (this.alignLabels) {\r\n            labelTemplate.interactionsEnabled = true;\r\n            slicesContainer.isMeasured = true;\r\n            labelsContainer.isMeasured = true;\r\n            labelsContainer.margin(10, 10, 10, 10);\r\n            labelTemplate.horizontalCenter = \"left\";\r\n            if (this.orientation == \"horizontal\") {\r\n                this.layout = \"vertical\";\r\n            }\r\n            else {\r\n                this.layout = \"horizontal\";\r\n            }\r\n        }\r\n        else {\r\n            this.layout = \"absolute\";\r\n            labelTemplate.interactionsEnabled = false;\r\n            slicesContainer.isMeasured = false;\r\n            labelsContainer.isMeasured = true;\r\n            labelTemplate.horizontalCenter = \"middle\";\r\n        }\r\n        var total = 0;\r\n        var count = 0;\r\n        this.dataItems.each(function (dItem) {\r\n            if ($type.hasValue(dItem.value)) {\r\n                count++;\r\n                if (dItem.value > 0) {\r\n                    total += dItem.getWorkingValue(\"value\") / dItem.value;\r\n                }\r\n                else {\r\n                    total += 1;\r\n                }\r\n            }\r\n        });\r\n        this._total = 1 / count * total;\r\n        this._count = count;\r\n        _super.prototype.validateDataElements.call(this);\r\n        this.arrangeLabels();\r\n    };\r\n    /**\r\n     * [getNextValue description]\r\n     *\r\n     * @todo Description\r\n     * @param  {FunnelSeriesDataItem}  dataItem  [description]\r\n     * @return {number}                          [description]\r\n     */\r\n    FunnelSeries.prototype.getNextValue = function (dataItem) {\r\n        var index = dataItem.index;\r\n        var nextValue = dataItem.getWorkingValue(\"value\");\r\n        if (index < this.dataItems.length - 1) {\r\n            var nextItem = this.dataItems.getIndex(index + 1);\r\n            nextValue = nextItem.getWorkingValue(\"value\");\r\n            if (!nextItem.visible || nextItem.isHiding) {\r\n                return this.getNextValue(nextItem);\r\n            }\r\n        }\r\n        return nextValue;\r\n    };\r\n    /**\r\n     * [formDataElement description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    FunnelSeries.prototype.formDataElement = function () {\r\n    };\r\n    /**\r\n     * Validates data item's element, effectively redrawing it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {FunnelSeriesDataItem}  dataItem  Data item\r\n     */\r\n    FunnelSeries.prototype.validateDataElement = function (dataItem) {\r\n        var percentValue = dataItem.values.value.percent;\r\n        if ($type.hasValue(dataItem.value)) {\r\n            // FunnelSlice\r\n            var slice = dataItem.slice;\r\n            slice.orientation = this.orientation;\r\n            var sliceLink = dataItem.sliceLink;\r\n            sliceLink.orientation = this.orientation;\r\n            var tick = dataItem.tick;\r\n            var label = dataItem.label;\r\n            tick.slice = slice;\r\n            tick.label = label;\r\n            this.decorateSlice(dataItem);\r\n            sliceLink.fill = slice.fill;\r\n            if (dataItem.index == this.dataItems.length - 1) {\r\n                sliceLink.disabled = true;\r\n            }\r\n            // do this at the end, otherwise bullets won't be positioned properly\r\n            _super.prototype.validateDataElement.call(this, dataItem);\r\n        }\r\n    };\r\n    /**\r\n     * [decorateSlice description]\r\n     *\r\n     * @todo Description\r\n     * @param {this[\"_dataItem\"]} dataItem [description]\r\n     */\r\n    FunnelSeries.prototype.decorateSlice = function (dataItem) {\r\n        var slice = dataItem.slice;\r\n        var sliceLink = dataItem.sliceLink;\r\n        var label = dataItem.label;\r\n        var tick = dataItem.tick;\r\n        var maxWidth = this.slicesContainer.innerWidth;\r\n        var maxHeight = this.slicesContainer.innerHeight;\r\n        var nextValue = this.getNextValue(dataItem);\r\n        var workingValue = dataItem.getWorkingValue(\"value\");\r\n        var bottomRatio = this.bottomRatio;\r\n        var d = 1;\r\n        if (dataItem.value > 0) {\r\n            d = workingValue / dataItem.value;\r\n        }\r\n        if (this.orientation == \"vertical\") {\r\n            var linkHeight = sliceLink.pixelHeight * d;\r\n            maxHeight = maxHeight + linkHeight; // to avoid one link gap in the bottom\r\n            slice.topWidth = workingValue / this.dataItem.values.value.high * maxWidth;\r\n            slice.bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / this.dataItem.values.value.high * maxWidth;\r\n            sliceLink.topWidth = slice.bottomWidth;\r\n            sliceLink.bottomWidth = (workingValue - (workingValue - nextValue)) / this.dataItem.values.value.high * maxWidth;\r\n            slice.y = this._nextY;\r\n            slice.height = $math.max(0, maxHeight / this._count * d / this._total - linkHeight);\r\n            slice.x = maxWidth / 2;\r\n            if (!this.alignLabels) {\r\n                label.x = slice.x;\r\n            }\r\n            else {\r\n                label.x = 0;\r\n            }\r\n            label.y = slice.pixelY + slice.pixelHeight * tick.locationY;\r\n            this._nextY += slice.pixelHeight + linkHeight;\r\n            sliceLink.y = this._nextY - linkHeight;\r\n            sliceLink.x = slice.x;\r\n        }\r\n        else {\r\n            var linkWidth = sliceLink.pixelWidth * d;\r\n            maxWidth = maxWidth + linkWidth; // to avoid one link gap in the bottom\r\n            slice.topWidth = workingValue / this.dataItem.values.value.high * maxHeight;\r\n            slice.bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / this.dataItem.values.value.high * maxHeight;\r\n            sliceLink.topWidth = slice.bottomWidth;\r\n            sliceLink.bottomWidth = (workingValue - (workingValue - nextValue)) / this.dataItem.values.value.high * maxHeight;\r\n            slice.x = this._nextY;\r\n            slice.width = maxWidth / this._count * d * 1 / this._total - linkWidth;\r\n            slice.y = maxHeight / 2;\r\n            if (!this.alignLabels) {\r\n                label.y = slice.y;\r\n            }\r\n            else {\r\n                label.y = this.labelsContainer.measuredHeight;\r\n            }\r\n            label.x = slice.pixelX + slice.pixelWidth * tick.locationX;\r\n            this._nextY += slice.pixelWidth + linkWidth;\r\n            sliceLink.x = this._nextY - linkWidth;\r\n            sliceLink.y = slice.y;\r\n        }\r\n    };\r\n    /**\r\n     * [arrangeLabels description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    FunnelSeries.prototype.arrangeLabels = function () {\r\n        if (this.alignLabels) {\r\n            var count = this.labels.length;\r\n            if (count > 1) {\r\n                var lastLabel = this.labels.getIndex(count - 1);\r\n                var lastY = lastLabel.pixelY;\r\n                var lastX = lastLabel.pixelX;\r\n                if (this.labels.length > 1) {\r\n                    for (var i = count - 2; i >= 0; i--) {\r\n                        var label = this.labels.getIndex(i);\r\n                        if (label.visible) {\r\n                            if (label.invalid) {\r\n                                label.validate();\r\n                            }\r\n                            if (this.orientation == \"vertical\") {\r\n                                if (label.pixelY + label.measuredHeight > lastY) {\r\n                                    label.y = lastY - label.measuredHeight;\r\n                                }\r\n                            }\r\n                            // horizontal\r\n                            else {\r\n                                if (label.pixelX + label.measuredWidth > lastX) {\r\n                                    label.x = lastX - label.measuredWidth;\r\n                                }\r\n                            }\r\n                            lastY = label.pixelY;\r\n                            lastX = label.pixelX;\r\n                        }\r\n                    }\r\n                    lastY = 0;\r\n                    lastX = 0;\r\n                    for (var i = 0; i < count; i++) {\r\n                        var label = this.labels.getIndex(i);\r\n                        if (label.visible) {\r\n                            if (label.invalid) {\r\n                                label.validate();\r\n                            }\r\n                            if (this.orientation == \"vertical\") {\r\n                                if (label.pixelY < lastY) {\r\n                                    label.y = lastY;\r\n                                }\r\n                            }\r\n                            // horizontal\r\n                            else {\r\n                                if (label.pixelX < lastX) {\r\n                                    label.x = lastX;\r\n                                }\r\n                            }\r\n                            lastY += label.measuredHeight;\r\n                            lastX += label.measuredWidth;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Positions series bullet.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Bullet}  bullet  Bullet\r\n     */\r\n    FunnelSeries.prototype.positionBullet = function (bullet) {\r\n        _super.prototype.positionBullet.call(this, bullet);\r\n        var dataItem = bullet.dataItem;\r\n        var slice = dataItem.slice;\r\n        var locationX = bullet.locationX;\r\n        if (!$type.isNumber(locationX)) {\r\n            locationX = 0.5;\r\n        }\r\n        var locationY = bullet.locationY;\r\n        if (!$type.isNumber(locationY)) {\r\n            locationY = 1;\r\n        }\r\n        bullet.x = slice.pixelX + slice.measuredWidth * locationX;\r\n        bullet.y = slice.pixelY + slice.measuredHeight * locationY;\r\n    };\r\n    Object.defineProperty(FunnelSeries.prototype, \"orientation\", {\r\n        /**\r\n         * @return {Orientation} Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"orientation\");\r\n        },\r\n        /**\r\n         * Orientation of the funnel slices: \"horizontal\" or \"vertical\" (default).\r\n         *\r\n         * @default \"vertical\"\r\n         * @param {Orientation} value Orientation\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"orientation\", value)) {\r\n                this.invalidate();\r\n                if (value == \"vertical\") {\r\n                    this.ticks.template.locationX = 1;\r\n                    this.ticks.template.locationY = 0.5;\r\n                    this.labels.template.rotation = 0;\r\n                }\r\n                else {\r\n                    this.ticks.template.locationX = 0.5;\r\n                    this.ticks.template.locationY = 1;\r\n                    this.labels.template.rotation = -90;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FunnelSeries.prototype, \"bottomRatio\", {\r\n        /**\r\n         * @return {number}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"bottomRatio\");\r\n        },\r\n        /**\r\n         * Indicates how slice's bottom will change in relation to slices top AND\r\n         * next slices top.\r\n         *\r\n         * Basically it's a relative value (0-1) that indicates bottom width\r\n         * position between current slice's top width and the top withd of the next\r\n         * one.\r\n         *\r\n         * The scale goes from 0 (closer to current slice width) to 1 (closer to next\r\n         * slice with).\r\n         *\r\n         * `0` (default) will mean that bottom will be the same as top, resulting in\r\n         * a prefectly square slice.\r\n         *\r\n         * From the data-viz standpoint `0` is a correct setting, since area of the\r\n         * slices will depict their value correctly.\r\n         *\r\n         * `1` will mean that slice will become trapezoid with its bottom matching\r\n         * width of the next slice.\r\n         *\r\n         * `0.5` will make bottom width be in the middle of width of current slice\r\n         * and the next slice.\r\n         *\r\n         * @default 0\r\n         * @param {number}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"bottomRatio\", value)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FunnelSeries.prototype, \"sliceLinks\", {\r\n        /**\r\n         * A list of elements linking each actual slice.\r\n         *\r\n         * Please note that links are [[FunnelSlice]] objects, just like real links,\r\n         * so they have all the same configuration options.\r\n         *\r\n         * You can use `template` of this link, to specify how links will look.\r\n         *\r\n         * ```TypeScript\r\n         * series.sliceLinks.template.fillOpacity = 0.5;\r\n         * ```\r\n         * ```JavaScript\r\n         * series.sliceLinks.template.fillOpacity = 0.5;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"series\": [{\r\n         *     \"type\": \"FunnelSeries\",\r\n         *      // ...\r\n         *      \"sliceLinks\": {\r\n         *        \"fillOpacity\": 0.5\r\n         *      }\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * @return {ListTemplate} Funnel links\r\n         */\r\n        get: function () {\r\n            if (!this._sliceLinks) {\r\n                var sliceLink = new FunnelSlice();\r\n                sliceLink.applyOnClones = true;\r\n                sliceLink.fillOpacity = 0.5;\r\n                sliceLink.expandDistance = -0.3;\r\n                sliceLink.hiddenState.properties.opacity = 0;\r\n                this._disposers.push(sliceLink);\r\n                this._sliceLinks = new ListTemplate(sliceLink);\r\n                this._disposers.push(new ListDisposer(this._sliceLinks));\r\n            }\r\n            return this._sliceLinks;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Shows hidden series.\r\n     *\r\n     * @param  {number}     duration  Duration of reveal animation (ms)\r\n     * @return {Animation}            Animation\r\n     */\r\n    FunnelSeries.prototype.show = function (duration) {\r\n        var _this = this;\r\n        var startIndex = this.startIndex;\r\n        var endIndex = this.endIndex;\r\n        var interpolationDuration = this.defaultState.transitionDuration;\r\n        if ($type.isNumber(duration)) {\r\n            interpolationDuration = duration;\r\n        }\r\n        var delay = 0;\r\n        $iter.each($iter.indexed(this.dataItems.iterator()), function (a) {\r\n            var i = a[0];\r\n            var dataItem = a[1];\r\n            if (_this.sequencedInterpolation) {\r\n                delay = _this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n            }\r\n            dataItem.show(interpolationDuration, delay, [\"value\"]);\r\n        });\r\n        var animation = _super.prototype.show.call(this, duration);\r\n        return animation;\r\n    };\r\n    /**\r\n     * Hides series.\r\n     *\r\n     * @param  {number}     duration  Duration of hiding animation (ms)\r\n     * @return {Animation}            Animation\r\n     */\r\n    FunnelSeries.prototype.hide = function (duration) {\r\n        var _this = this;\r\n        var fields = [\"value\"];\r\n        var value = 0;\r\n        var startIndex = this.startIndex;\r\n        var endIndex = this.endIndex;\r\n        var delay = 0;\r\n        var interpolationDuration = this.hiddenState.transitionDuration;\r\n        if ($type.isNumber(duration)) {\r\n            interpolationDuration = duration;\r\n        }\r\n        $iter.each($iter.indexed(this.dataItems.iterator()), function (a) {\r\n            var i = a[0];\r\n            var dataItem = a[1];\r\n            if (_this.sequencedInterpolation) {\r\n                delay = _this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n            }\r\n            dataItem.hide(interpolationDuration, delay, value, fields);\r\n        });\r\n        var animation = _super.prototype.hide.call(this, duration);\r\n        if (animation && !animation.isFinished()) {\r\n            animation.delay(delay);\r\n        }\r\n        return animation;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    FunnelSeries.prototype.setAlignLabels = function (value) {\r\n        _super.prototype.setAlignLabels.call(this, value);\r\n        this.ticks.template.disabled = !value;\r\n    };\r\n    return FunnelSeries;\r\n}(PercentSeries));\r\nexport { FunnelSeries };\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelSeries\"] = FunnelSeries;\r\nregistry.registeredClasses[\"FunnelSeriesDataItem\"] = FunnelSeriesDataItem;\r\n//# sourceMappingURL=FunnelSeries.js.map","/**\r\n * Line series module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem } from \"./XYSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[LineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar LineSeriesDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(LineSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function LineSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"LineSeriesDataItem\";\r\n        return _this;\r\n    }\r\n    return LineSeriesDataItem;\r\n}(XYSeriesDataItem));\r\nexport { LineSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a line graph.\r\n *\r\n * @see {@link ILineSeriesEvents} for a list of available Events\r\n * @see {@link ILineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar LineSeries = /** @class */ (function (_super) {\r\n    tslib_1.__extends(LineSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function LineSeries() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Minimum distance in pixels between two adjacent points.\r\n         *\r\n         * If the distance is less than this setting, a point is skipped.\r\n         *\r\n         * This allows acceptable performance with huge amounts of data points.\r\n         *\r\n         * @default 0.5\r\n         * @type {number}\r\n         */\r\n        _this.minDistance = 0.5;\r\n        _this.segments = new ListTemplate(_this.createSegment());\r\n        _this.segments.template.applyOnClones = true;\r\n        _this._disposers.push(new ListDisposer(_this.segments));\r\n        _this._disposers.push(_this.segments.template);\r\n        _this._segmentsIterator = new $iter.ListIterator(_this.segments, function () { return _this.segments.create(); });\r\n        _this._segmentsIterator.createNewItems = true;\r\n        _this.className = \"LineSeries\";\r\n        _this.strokeOpacity = 1;\r\n        _this.fillOpacity = 0;\r\n        _this.connect = true;\r\n        _this.tensionX = 1;\r\n        _this.tensionY = 1;\r\n        _this.segmentsContainer = _this.mainContainer.createChild(Container);\r\n        _this.segmentsContainer.isMeasured = false;\r\n        // line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments\r\n        // todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.\r\n        // this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);\r\n        _this.bulletsContainer.toFront();\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    LineSeries.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Line Series\");\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    LineSeries.prototype.createSegment = function () {\r\n        return new LineSeriesSegment();\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return {LineSeriesDataItem} Data Item\r\n     */\r\n    LineSeries.prototype.createDataItem = function () {\r\n        return new LineSeriesDataItem();\r\n    };\r\n    /**\r\n     * Inits data item's working values.\r\n     *\r\n     * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n     * @param {number}             index     Data item's index\r\n     */\r\n    LineSeries.prototype.setInitialWorkingValues = function (dataItem) {\r\n        // this makes data items animate when added\r\n        if (this.appeared && this.visible) {\r\n            var yAxis = this._yAxis.get();\r\n            var xAxis = this._xAxis.get();\r\n            var previousDataItem = this.dataItems.getIndex(dataItem.index - 1);\r\n            dataItem.component = this; // as these values are set before, we don't know component yet\r\n            if (this.baseAxis == xAxis) {\r\n                if (yAxis instanceof ValueAxis) {\r\n                    var initialY = yAxis.minZoomed;\r\n                    if (previousDataItem) {\r\n                        initialY = previousDataItem.values[\"valueY\"].workingValue;\r\n                    }\r\n                    // this makes line animate from previous point to newly added point\r\n                    dataItem.setWorkingValue(\"valueY\", initialY, 0);\r\n                    dataItem.setWorkingValue(\"valueY\", dataItem.values.valueY.value);\r\n                    if (xAxis instanceof DateAxis) {\r\n                        dataItem.setWorkingLocation(\"dateX\", -0.5, 0); // instantly move it to previous\r\n                        dataItem.setWorkingLocation(\"dateX\", 0.5); // animate to it's location\r\n                    }\r\n                }\r\n            }\r\n            if (this.baseAxis == yAxis) {\r\n                if (xAxis instanceof ValueAxis) {\r\n                    var initialX = xAxis.minZoomed;\r\n                    if (previousDataItem) {\r\n                        initialX = previousDataItem.values[\"valueX\"].workingValue;\r\n                    }\r\n                    dataItem.setWorkingValue(\"valueX\", initialX, 0);\r\n                    dataItem.setWorkingValue(\"valueX\", dataItem.values.valueX.value);\r\n                    if (yAxis instanceof DateAxis) {\r\n                        dataItem.setWorkingLocation(\"dateY\", -0.5, 0); // instantly move it to previous\r\n                        dataItem.setWorkingLocation(\"dateY\", 0.5); // animate to it's location\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates corresponding legend data item with current values.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n     */\r\n    LineSeries.prototype.updateLegendValue = function (dataItem) {\r\n        _super.prototype.updateLegendValue.call(this, dataItem);\r\n        //This is hack to save some methos, used to set tooltip color source only\r\n        if (dataItem && dataItem.segment) {\r\n            this.tooltipColorSource = dataItem.segment;\r\n        }\r\n    };\r\n    /**\r\n     * (Re)validates the whole series, effectively causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    LineSeries.prototype.validate = function () {\r\n        var _this = this;\r\n        _super.prototype.validate.call(this);\r\n        this._segmentsIterator.reset();\r\n        this.openSegment(this._adjustedStartIndex);\r\n        $iter.each(this.axisRanges.iterator(), function (range) {\r\n            _this.openSegment(_this._adjustedStartIndex, range);\r\n        });\r\n        $iter.each(this._segmentsIterator.iterator(), function (segment) {\r\n            segment.__disabled = true;\r\n        });\r\n    };\r\n    /**\r\n     * [sliceData description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    LineSeries.prototype.sliceData = function () {\r\n        var startIndex = this.startIndex;\r\n        var endIndex = this.endIndex;\r\n        // we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling\r\n        // find first to the left\r\n        // TODO use iterator instead\r\n        for (var i = this.startIndex - 1; i >= 0; i--) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            if (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n                startIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        this._adjustedStartIndex = this.findAdjustedIndex(startIndex, [\"stroke\", \"strokeWidth\", \"strokeDasharray\", \"strokeOpacity\", \"fill\", \"fillOpacity\", \"opacity\"]);\r\n        // find first to the right\r\n        // TODO use iterator instead\r\n        for (var i = this.endIndex, len = this.dataItems.length; i < len; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            if (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n                endIndex = i + 1;\r\n                break;\r\n            }\r\n        }\r\n        this._workingStartIndex = startIndex;\r\n        this._workingEndIndex = endIndex;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    LineSeries.prototype.findAdjustedIndex = function (adjustedIndex, properties) {\r\n        var _this = this;\r\n        var propertyFields = this.propertyFields;\r\n        var startIndex = adjustedIndex;\r\n        $array.each(properties, function (property) {\r\n            if ($type.hasValue(propertyFields[property])) {\r\n                for (var i = startIndex; i >= 0; i--) {\r\n                    var dataItem = _this.dataItems.getIndex(i);\r\n                    if ($type.hasValue(dataItem.properties[property])) {\r\n                        if (adjustedIndex > i) {\r\n                            adjustedIndex = i;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return adjustedIndex;\r\n    };\r\n    /**\r\n     * [openSegment description]\r\n     *\r\n     * @todo Description\r\n     * @param {number}        openIndex  [description]\r\n     * @param {AxisDataItem}  axisRange  [description]\r\n     */\r\n    LineSeries.prototype.openSegment = function (openIndex, axisRange) {\r\n        var points = [];\r\n        var endIndex = this._workingEndIndex;\r\n        var closeIndex;\r\n        var propertiesChanged = false;\r\n        var segment = this._segmentsIterator.getFirst();\r\n        segment.__disabled = false;\r\n        if (axisRange) {\r\n            segment.parent = axisRange.contents;\r\n            $object.copyProperties(axisRange.contents, segment, visualProperties);\r\n        }\r\n        else {\r\n            $object.copyProperties(this, segment, visualProperties);\r\n            segment.filters.clear();\r\n            segment.parent = this.segmentsContainer;\r\n        }\r\n        for (var i = openIndex; i < endIndex; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            dataItem.segment = segment;\r\n            if (dataItem.hasProperties) {\r\n                // if this is first item of segment\r\n                if (i == openIndex) {\r\n                    this.updateSegmentProperties(dataItem.properties, segment);\r\n                }\r\n                else {\r\n                    // this time we only need to know if properties changed, so we don't pass segment\r\n                    propertiesChanged = this.updateSegmentProperties(dataItem.properties, segment, true);\r\n                }\r\n            }\r\n            if (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n                this.addPoints(points, dataItem, this.xField, this.yField);\r\n            }\r\n            else {\r\n                // if no values in first data item, go to next\r\n                if (i == openIndex) {\r\n                    continue;\r\n                }\r\n                else {\r\n                    var connect = this.connect;\r\n                    // todo: other connect conditions\r\n                    // stop cycle\r\n                    if (!connect) {\r\n                        closeIndex = i;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            closeIndex = i;\r\n            if (propertiesChanged) {\r\n                break;\r\n            }\r\n        }\r\n        this.closeSegment(segment, points, openIndex, closeIndex, axisRange);\r\n    };\r\n    /**\r\n     * [addPoints description]\r\n     *\r\n     * @todo Description\r\n     * @param {IPoint[]}          points    [description]\r\n     * @param {this[\"_dataItem\"]} dataItem  [description]\r\n     * @param {string}            xField    [description]\r\n     * @param {string}            yField    [description]\r\n     * @param {boolean}           backwards [description]\r\n     */\r\n    LineSeries.prototype.addPoints = function (points, dataItem, xField, yField, backwards) {\r\n        var point = this.getPoint(dataItem, xField, yField, dataItem.workingLocations[xField], dataItem.workingLocations[yField]);\r\n        if (!backwards) {\r\n            dataItem.point = point;\r\n        }\r\n        points.push(point);\r\n    };\r\n    /**\r\n     * [closeSegment description]\r\n     *\r\n     * @todo Description\r\n     * @param {LineSeriesSegment} segment    [description]\r\n     * @param {IPoint[]}          points     [description]\r\n     * @param {number}            openIndex  [description]\r\n     * @param {number}            closeIndex [description]\r\n     * @param {AxisDataItem}      axisRange  [description]\r\n     */\r\n    LineSeries.prototype.closeSegment = function (segment, points, openIndex, closeIndex, axisRange) {\r\n        var closePoints = [];\r\n        if (this.dataFields[this._xOpenField] ||\r\n            this.dataFields[this._yOpenField] ||\r\n            this.stacked) {\r\n            for (var i = closeIndex; i >= openIndex; i--) {\r\n                var dataItem = this.dataItems.getIndex(i);\r\n                if (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.\r\n                    this.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var baseAxis = this.baseAxis;\r\n            var count = points.length;\r\n            var xAxis = this.xAxis;\r\n            var yAxis = this.yAxis;\r\n            if (baseAxis == xAxis) {\r\n                closePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x\r\n                closePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x\r\n            }\r\n            else {\r\n                closePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y\r\n                closePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y\r\n            }\r\n        }\r\n        this.drawSegment(segment, points, closePoints);\r\n        if (closeIndex < this._workingEndIndex - 1) {\r\n            this.openSegment(closeIndex, axisRange);\r\n        }\r\n    };\r\n    /**\r\n     * Draws the line segment.\r\n     *\r\n     * @param {LineSeriesSegment}  segment     Segment\r\n     * @param {IPoint[]}           points      Segment points\r\n     * @param {IPoint[]}           closePoints Segment close points\r\n     */\r\n    LineSeries.prototype.drawSegment = function (segment, points, closePoints) {\r\n        segment.drawSegment(points, closePoints, this.tensionX, this.tensionY);\r\n    };\r\n    /**\r\n     * Segement will get its colors from `this.dataItem`, as thats how\r\n     * `getPropertyValue()` method works.\r\n     *\r\n     * We pass `lineSeriesDataItem.properties` as item here each time when a flag\r\n     * `hasProperties` is set to `true` on data item (this means it can contain\r\n     * some properties set).\r\n     *\r\n     * @param  {object}             itemProperties  Item properties\r\n     * @param  {LineSeriesSegment}  segment         Segment\r\n     * @return {boolean}                            Properties changed?\r\n     */\r\n    LineSeries.prototype.updateSegmentProperties = function (itemProperties, segment, checkOnly) {\r\n        var changed = false;\r\n        $object.each(itemProperties, function (propertyName, value) {\r\n            // some value must be defined\r\n            if ($type.hasValue(value)) {\r\n                var currentValue = segment[propertyName];\r\n                var currentValueStr = void 0;\r\n                // current value can be Color, number, anything. So we check if it has toString, otherwise just do String().\r\n                // toString() will return hex if it's color. The only problem is that it will return lowercased hex and if we have uppercase in data, it will think that it changed\r\n                if (currentValue) {\r\n                    if (currentValue.toString) {\r\n                        currentValueStr = currentValue.toString();\r\n                    }\r\n                    else {\r\n                        currentValueStr = currentValue; // not doing String(currentValue) as this will make all Objects the same\r\n                    }\r\n                }\r\n                var valueStr = void 0;\r\n                if (value) {\r\n                    if (value.toString) {\r\n                        valueStr = value.toString();\r\n                    }\r\n                    else {\r\n                        valueStr = value; // not doing String(currentValue) as this will make all Objects the same\r\n                    }\r\n                }\r\n                if (currentValue == value || (currentValueStr != undefined && valueStr != undefined && currentValueStr == valueStr)) {\r\n                    // void\r\n                }\r\n                else {\r\n                    if (!checkOnly) {\r\n                        segment[propertyName] = value;\r\n                    }\r\n                    changed = true;\r\n                }\r\n            }\r\n        });\r\n        return changed;\r\n    };\r\n    Object.defineProperty(LineSeries.prototype, \"connect\", {\r\n        /**\r\n         * @return {boolean} Connect?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"connect\");\r\n        },\r\n        /**\r\n         * Connect the lines over empty data points?\r\n         *\r\n         * If set to `true` the line will connect two adjacent data points by a\r\n         * straight line. Even if there are data points with missing values\r\n         * in-between.\r\n         *\r\n         * If you set this to `false`, the line will break when there are missing\r\n         * values.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#Line_series_with_gaps} for more information about this feature\r\n         * @default true\r\n         * @param {boolean}  value  Connect?\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"connect\", value)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LineSeries.prototype, \"tensionX\", {\r\n        /**\r\n         * @return {number} Horizontal tension (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tensionX\");\r\n        },\r\n        /**\r\n         * Horizontal tension setting of the line (0-1).\r\n         *\r\n         * Can be used to create smoothed lines. It works like this:\r\n         *\r\n         * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n         * will mean that the \"tension\" is very high, so the line is maximally\r\n         * attracted to the points it connects, hence the straight line.\r\n         *\r\n         * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n         *\r\n         * The smaller the tension setting, the more relaxed the line and the more\r\n         * wide the curve.\r\n         *\r\n         * This setting is for horizontal tension, meaning the curve will bend in\r\n         * such way that it never goes below or above connecting points. To enable\r\n         * vertical bending as well, use `tensionY`.\r\n         *\r\n         * @default 1\r\n         * @param {number}  value  Horizontal tension (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tensionX\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LineSeries.prototype, \"tensionY\", {\r\n        /**\r\n         * @return {number} Vertical tension (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tensionY\");\r\n        },\r\n        /**\r\n         * Can be used to create smoothed lines. It works like this:\r\n         *\r\n         * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n         * will mean that the \"tension\" is very high, so the line is maximally\r\n         * attracted to the points it connects, hence the straight line.\r\n         *\r\n         * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n         *\r\n         * The smaller the tension setting, the more relaxed the line and the more\r\n         * wide the curve.\r\n         *\r\n         * This setting is for vertical tension, meaning the curve might bend in\r\n         * such way that it will go below or above connected points.\r\n         *\r\n         * Combine this setting with `tensionX` to create beautifully looking\r\n         * smoothed line series.\r\n         *\r\n         * @default 1\r\n         * @param {number}  value  Vertical tension (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tensionY\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /*\r\n   public positionBullet(bullet: Bullet): void {\r\n       super.positionBullet(bullet);\r\n\r\n       let dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n       if (dataItem.segment) {\r\n           $object.softCopyProperties(dataItem.segment, bullet, visualProperties);\r\n       }\r\n   }*/\r\n    /**\r\n     * Creates elements in related legend container, that mimics the look of this\r\n     * Series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Container}  marker  Legend item container\r\n     */\r\n    LineSeries.prototype.createLegendMarker = function (marker) {\r\n        var _this = this;\r\n        var w = marker.pixelWidth;\r\n        var h = marker.pixelHeight;\r\n        marker.disposeChildren();\r\n        var line = marker.createChild(Line);\r\n        line.shouldClone = false;\r\n        //line.copyFrom(<any>this); coppies events which is not good\r\n        $object.copyProperties(this, line, visualProperties);\r\n        line.x2 = w;\r\n        line.y = h / 2;\r\n        line.visible = true;\r\n        if (this.fillOpacity > 0) {\r\n            var fill = marker.createChild(Rectangle);\r\n            //fill.copyFrom(<any>this); coppies events which is not good\r\n            $object.copyProperties(this, fill, visualProperties);\r\n            fill.width = w;\r\n            fill.height = h;\r\n            fill.y = 0;\r\n            fill.strokeOpacity = 0;\r\n            fill.visible = true;\r\n            line.y = 0;\r\n        }\r\n        var legendDataItem = marker.dataItem;\r\n        legendDataItem.color = this.stroke;\r\n        legendDataItem.colorOrig = this.fill;\r\n        $iter.eachContinue(this.bullets.iterator(), function (bullet) {\r\n            if (bullet.copyToLegendMarker) {\r\n                // do not copy bullets with labels\r\n                var hasLabels_1 = false;\r\n                $iter.each(bullet.children.iterator(), function (child) {\r\n                    if (child instanceof Label) {\r\n                        hasLabels_1 = true;\r\n                        return true;\r\n                    }\r\n                });\r\n                if (!hasLabels_1) {\r\n                    var clone = bullet.clone();\r\n                    clone.parent = marker;\r\n                    clone.isMeasured = true;\r\n                    clone.tooltipText = undefined;\r\n                    clone.x = w / 2;\r\n                    if (_this.fillOpacity > 0) {\r\n                        clone.y = 0;\r\n                    }\r\n                    else {\r\n                        clone.y = h / 2;\r\n                    }\r\n                    clone.visible = true;\r\n                    // otherwise will not transit to color after hiding\r\n                    if (!$type.hasValue(clone.fill)) {\r\n                        clone.fill = _this.fill;\r\n                    }\r\n                    if (!$type.hasValue(clone.stroke)) {\r\n                        clone.stroke = _this.stroke;\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    LineSeries.prototype.disposeData = function () {\r\n        _super.prototype.disposeData.call(this);\r\n        this.segments.clear();\r\n    };\r\n    return LineSeries;\r\n}(XYSeries));\r\nexport { LineSeries };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeries\"] = LineSeries;\r\nregistry.registeredClasses[\"LineSeriesDataItem\"] = LineSeriesDataItem;\r\n//# sourceMappingURL=LineSeries.js.map","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nvar LineSeriesSegment = /** @class */ (function (_super) {\r\n    tslib_1.__extends(LineSeriesSegment, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function LineSeriesSegment() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"LineSeriesSegment\";\r\n        // Set defaults\r\n        _this.isMeasured = false;\r\n        _this.interactionsEnabled = false;\r\n        _this.layout = \"none\";\r\n        // Create fill element\r\n        var fillSprite = _this.createChild(Sprite);\r\n        _this.fillSprite = fillSprite;\r\n        fillSprite.shouldClone = false;\r\n        fillSprite.setElement(_this.paper.add(\"path\"));\r\n        fillSprite.isMeasured = false;\r\n        _this._disposers.push(fillSprite);\r\n        // Create line element\r\n        var strokeSprite = _this.createChild(Sprite);\r\n        _this.strokeSprite = strokeSprite;\r\n        strokeSprite.shouldClone = false;\r\n        strokeSprite.setElement(_this.paper.add(\"path\"));\r\n        strokeSprite.isMeasured = false;\r\n        _this._disposers.push(strokeSprite);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the series segment.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IPoint[]}  points       Points to connect\r\n     * @param {IPoint[]}  closePoints  ?\r\n     * @param {number}    smoothnessX  Horizontal bezier setting (?)\r\n     * @param {number}    smoothnessY  Vertical bezier setting (?)\r\n     */\r\n    LineSeriesSegment.prototype.drawSegment = function (points, closePoints, smoothnessX, smoothnessY) {\r\n        if (!this.disabled) {\r\n            if (points.length > 0 && closePoints.length > 0) {\r\n                // first moveTo helps to avoid Chrome straight line in the mask bug.\r\n                var path = $path.moveTo({ x: points[0].x - 0.2, y: points[0].y - 0.2 }) + $path.moveTo(points[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n                if (this.strokeOpacity == 0 || this.strokeSprite.strokeOpacity == 0) {\r\n                    // like this and not if != 0, otherwise ranges stroke won't be drawn.\r\n                }\r\n                else {\r\n                    this.strokeSprite.path = path;\r\n                }\r\n                if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n                    path += $path.lineTo(closePoints[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n                    path += $path.lineTo(points[0]);\r\n                    path += $path.closePath();\r\n                    this.fillSprite.path = path;\r\n                }\r\n            }\r\n            else {\r\n                this.fillSprite.path = \"\";\r\n                this.strokeSprite.path = \"\";\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Copies properties from a [[Sprite]] to both line and fill elements.\r\n     *\r\n     * @param {Sprite} source Source [[Sprite]] to copy properties from\r\n     */\r\n    LineSeriesSegment.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        var lineElement = this.strokeSprite;\r\n        $object.copyProperties(source, lineElement.properties, visualProperties);\r\n        lineElement.fillOpacity = 0;\r\n        var fillElement = this.fillSprite;\r\n        $object.copyProperties(source, fillElement.properties, visualProperties);\r\n        fillElement.strokeOpacity = 0;\r\n    };\r\n    return LineSeriesSegment;\r\n}(Container));\r\nexport { LineSeriesSegment };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n//# sourceMappingURL=LineSeriesSegment.js.map","/**\r\n * Candlestick Series module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CandlestickSeries, CandlestickSeriesDataItem } from \"./CandlestickSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { OHLC } from \"../elements/OHLC\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[OHLCSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar OHLCSeriesDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(OHLCSeriesDataItem, _super);\r\n    /**\r\n     * Defines a type of [[Component]] this data item is used for\r\n     * @type {OHLCSeries}\r\n     * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n     */\r\n    //public _component!: OHLCSeries;\r\n    /**\r\n     * Constructor\r\n     */\r\n    function OHLCSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"OHLCSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return OHLCSeriesDataItem;\r\n}(CandlestickSeriesDataItem));\r\nexport { OHLCSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link IOHLCSeriesEvents} for a list of available Events\r\n * @see {@link IOHLCSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar OHLCSeries = /** @class */ (function (_super) {\r\n    tslib_1.__extends(OHLCSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function OHLCSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"OHLCSeries\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    OHLCSeries.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"OHLC Series\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return {OHLCSeriesDataItem} Data Item\r\n     */\r\n    OHLCSeries.prototype.createDataItem = function () {\r\n        return new OHLCSeriesDataItem();\r\n    };\r\n    OHLCSeries.prototype.validateCandlestick = function (dataItem) {\r\n        var column = dataItem.column;\r\n        if (column) {\r\n            var openLine_1 = column.openLine;\r\n            var highLowLine_1 = column.highLowLine;\r\n            var closeLine_1 = column.closeLine;\r\n            if (this.baseAxis == this.xAxis) {\r\n                var x = column.pixelWidth / 2;\r\n                highLowLine_1.x = x;\r\n                var open_1 = dataItem.getWorkingValue(this.yOpenField);\r\n                var close_1 = dataItem.getWorkingValue(this.yField);\r\n                var yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n                var yClose = this.yAxis.getY(dataItem, this.yField);\r\n                var yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n                var yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n                var pixelY = column.pixelY;\r\n                openLine_1.y1 = yOpen - pixelY;\r\n                openLine_1.y2 = yOpen - pixelY;\r\n                openLine_1.x1 = 0;\r\n                openLine_1.x2 = x;\r\n                closeLine_1.y1 = yClose - pixelY;\r\n                closeLine_1.y2 = yClose - pixelY;\r\n                closeLine_1.x1 = x;\r\n                closeLine_1.x2 = 2 * x;\r\n                highLowLine_1.y1 = yHigh - pixelY;\r\n                highLowLine_1.y2 = yLow - pixelY;\r\n            }\r\n            if (this.baseAxis == this.yAxis) {\r\n                var y = column.pixelHeight / 2;\r\n                highLowLine_1.y = y;\r\n                var open_2 = dataItem.getWorkingValue(this.xOpenField);\r\n                var close_2 = dataItem.getWorkingValue(this.xField);\r\n                var xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n                var xClose = this.xAxis.getX(dataItem, this.xField);\r\n                var xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n                var xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n                var pixelX = column.pixelX;\r\n                openLine_1.x1 = xOpen - pixelX;\r\n                openLine_1.x2 = xOpen - pixelX;\r\n                openLine_1.y1 = y;\r\n                openLine_1.y2 = 2 * y;\r\n                closeLine_1.x1 = xClose - pixelX;\r\n                closeLine_1.x2 = xClose - pixelX;\r\n                closeLine_1.y1 = 0;\r\n                closeLine_1.y2 = y;\r\n                highLowLine_1.x1 = xHigh - pixelX;\r\n                highLowLine_1.x2 = xLow - pixelX;\r\n            }\r\n            $iter.each(this.axisRanges.iterator(), function (axisRange) {\r\n                var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n                if (rangeColumn) {\r\n                    var rangeOpenLine = rangeColumn.openLine;\r\n                    rangeOpenLine.x = openLine_1.x;\r\n                    rangeOpenLine.y = openLine_1.y;\r\n                    rangeOpenLine.x1 = openLine_1.x1;\r\n                    rangeOpenLine.x2 = openLine_1.x2;\r\n                    rangeOpenLine.y1 = openLine_1.y1;\r\n                    rangeOpenLine.y2 = openLine_1.y2;\r\n                    var rangeCloseLine = rangeColumn.closeLine;\r\n                    rangeCloseLine.x = closeLine_1.x;\r\n                    rangeCloseLine.y = closeLine_1.y;\r\n                    rangeCloseLine.x1 = closeLine_1.x1;\r\n                    rangeCloseLine.x2 = closeLine_1.x2;\r\n                    rangeCloseLine.y1 = closeLine_1.y1;\r\n                    rangeCloseLine.y2 = closeLine_1.y2;\r\n                    var rangeHighLowLine = rangeColumn.highLowLine;\r\n                    rangeHighLowLine.x = highLowLine_1.x;\r\n                    rangeHighLowLine.y = highLowLine_1.y;\r\n                    rangeHighLowLine.x1 = highLowLine_1.x1;\r\n                    rangeHighLowLine.x2 = highLowLine_1.x2;\r\n                    rangeHighLowLine.y1 = highLowLine_1.y1;\r\n                    rangeHighLowLine.y2 = highLowLine_1.y2;\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Creates elements in related legend container, that mimics the look of this\r\n     * Series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Container}  marker  Legend item container\r\n     */\r\n    OHLCSeries.prototype.createLegendMarker = function (marker) {\r\n        var w = marker.pixelWidth;\r\n        var h = marker.pixelHeight;\r\n        marker.removeChildren();\r\n        var column = marker.createChild(OHLC);\r\n        column.shouldClone = false;\r\n        column.copyFrom(this.columns.template);\r\n        var cw;\r\n        var ch;\r\n        var openLine = column.openLine;\r\n        var closeLine = column.closeLine;\r\n        var highLowLine = column.highLowLine;\r\n        if (this.baseAxis == this.yAxis) {\r\n            cw = w / 3;\r\n            ch = h;\r\n            highLowLine.y = h / 2;\r\n            highLowLine.x2 = w;\r\n            openLine.x = w / 3 * 2;\r\n            openLine.y2 = h / 2;\r\n            closeLine.x = w / 3;\r\n            closeLine.y2 = h;\r\n            closeLine.y1 = h / 2;\r\n        }\r\n        else {\r\n            cw = w;\r\n            ch = h / 3;\r\n            highLowLine.x = w / 2;\r\n            highLowLine.y2 = h;\r\n            openLine.y = h / 3 * 2;\r\n            openLine.x2 = w / 2;\r\n            closeLine.y = h / 3;\r\n            closeLine.x2 = w;\r\n            closeLine.x1 = w / 2;\r\n        }\r\n        column.width = cw;\r\n        column.height = ch;\r\n        $object.copyProperties(this, marker, visualProperties);\r\n        $object.copyProperties(this.columns.template, column, visualProperties);\r\n        column.stroke = this.riseFromOpenState.properties.stroke;\r\n        var legendDataItem = marker.dataItem;\r\n        legendDataItem.color = column.stroke;\r\n        legendDataItem.colorOrig = column.stroke;\r\n    };\r\n    /**\r\n     * Returns an element to use for Candlestick\r\n     * @ignore\r\n     * @return {this[\"_column\"]} Element.\r\n     */\r\n    OHLCSeries.prototype.createColumnTemplate = function () {\r\n        return new OHLC();\r\n    };\r\n    return OHLCSeries;\r\n}(CandlestickSeries));\r\nexport { OHLCSeries };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLCSeries\"] = OHLCSeries;\r\nregistry.registeredClasses[\"OHLCSeriesDataItem\"] = OHLCSeriesDataItem;\r\n//# sourceMappingURL=OHLCSeries.js.map","/**\r\n * Defines Percent Chart Series.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Tick } from \"../elements/Tick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo: sequenced?\r\n/**\r\n * Defines a [[DataItem]] for [[PercentSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar PercentSeriesDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PercentSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PercentSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PercentSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Adds an `id` attribute the the slice element and returns its id.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PercentSeriesDataItem.prototype.uidAttr = function () {\r\n        return this.slice.uidAttr();\r\n    };\r\n    /**\r\n     * Hide the data item (and corresponding visual elements).\r\n     *\r\n     * @param {number}    duration  Duration (ms)\r\n     * @param {number}    delay     Delay hiding (ms)\r\n     * @param {number}    toValue   Target value for animation\r\n     * @param {string[]}  fields    Fields to animate while hiding\r\n     */\r\n    PercentSeriesDataItem.prototype.hide = function (duration, delay, toValue, fields) {\r\n        if (!fields) {\r\n            fields = [\"value\"];\r\n        }\r\n        return _super.prototype.hide.call(this, duration, delay, 0, fields);\r\n    };\r\n    /**\r\n     * Sets visibility of the Data Item.\r\n     *\r\n     * @param {boolean} value Data Item\r\n     */\r\n    PercentSeriesDataItem.prototype.setVisibility = function (value, noChangeValues) {\r\n        if (!noChangeValues) {\r\n            if (value) {\r\n                this.setWorkingValue(\"value\", this.values[\"value\"].value, 0, 0);\r\n            }\r\n            else {\r\n                this.setWorkingValue(\"value\", 0, 0, 0);\r\n            }\r\n        }\r\n        _super.prototype.setVisibility.call(this, value, noChangeValues);\r\n    };\r\n    /**\r\n     * Show hidden data item (and corresponding cisual elements).\r\n     *\r\n     * @param {number}    duration  Duration (ms)\r\n     * @param {number}    delay     Delay hiding (ms)\r\n     * @param {string[]}  fields    Fields to animate while hiding\r\n     */\r\n    PercentSeriesDataItem.prototype.show = function (duration, delay, fields) {\r\n        if (!fields) {\r\n            fields = [\"value\"];\r\n        }\r\n        return _super.prototype.show.call(this, duration, delay, fields);\r\n    };\r\n    Object.defineProperty(PercentSeriesDataItem.prototype, \"category\", {\r\n        /**\r\n         * @return {string} Category\r\n         */\r\n        get: function () {\r\n            return this.properties.category;\r\n        },\r\n        /**\r\n         * Category.\r\n         *\r\n         * @param {string}  value  Category\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"category\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates a marker used in the legend for this slice.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Container}  marker  Marker container\r\n     */\r\n    PercentSeriesDataItem.prototype.createLegendMarker = function (marker) {\r\n        this.component.createLegendMarker(marker, this);\r\n    };\r\n    Object.defineProperty(PercentSeriesDataItem.prototype, \"legendDataItem\", {\r\n        /**\r\n         * @return {LegendDataItem<DataItem, IDataItemEvents>} Legend data item\r\n         */\r\n        get: function () {\r\n            return this._legendDataItem;\r\n        },\r\n        /**\r\n         * A legend's data item, that corresponds to this data item.\r\n         *\r\n         * @param {LegendDataItem<DataItem, IDataItemEvents>}  value  Legend data item\r\n         */\r\n        set: function (value) {\r\n            this._legendDataItem = value;\r\n            if (value.label) {\r\n                value.label.dataItem = this;\r\n            }\r\n            if (value.valueLabel) {\r\n                value.valueLabel.dataItem = this;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PercentSeriesDataItem.prototype, \"tick\", {\r\n        /**\r\n         * A Tick element, related to this data item. (slice)\r\n         *\r\n         * @readonly\r\n         * @return {this[\"_tick\"]} Tick element\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._tick) {\r\n                var tick_1 = this.component.ticks.create();\r\n                this._tick = tick_1;\r\n                this._disposers.push(tick_1);\r\n                tick_1.parent = this.component.ticksContainer;\r\n                this._disposers.push(new Disposer(function () {\r\n                    if (_this.component) {\r\n                        _this.component.ticks.removeValue(tick_1);\r\n                    }\r\n                }));\r\n                this.addSprite(tick_1);\r\n                tick_1.visible = this.visible;\r\n            }\r\n            return this._tick;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PercentSeriesDataItem.prototype, \"label\", {\r\n        /**\r\n         * A Label element, related to this data item. (slice)\r\n         *\r\n         * @readonly\r\n         * @return {this[\"_label\"]} Label element\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._label) {\r\n                var label_1 = this.component.labels.create();\r\n                this._label = label_1;\r\n                this._disposers.push(label_1);\r\n                label_1.parent = this.component.labelsContainer;\r\n                this._disposers.push(new Disposer(function () {\r\n                    if (_this.component) {\r\n                        _this.component.labels.removeValue(label_1);\r\n                    }\r\n                }));\r\n                this.addSprite(label_1);\r\n                label_1.visible = this.visible;\r\n            }\r\n            return this._label;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PercentSeriesDataItem.prototype, \"slice\", {\r\n        /**\r\n         * An element, related to this data item. (slice)\r\n         *\r\n         * @readonly\r\n         * @return {Sprite} Slice element\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._slice) {\r\n                var component_1 = this.component;\r\n                var slice_1 = component_1.slices.create();\r\n                this._slice = slice_1;\r\n                this._disposers.push(slice_1);\r\n                slice_1.parent = component_1.slicesContainer;\r\n                this._disposers.push(new Disposer(function () {\r\n                    component_1.slices.removeValue(slice_1);\r\n                }));\r\n                this.addSprite(slice_1);\r\n                slice_1.visible = this.visible;\r\n                // Apply accessibility\r\n                if (component_1.itemsFocusable()) {\r\n                    slice_1.role = \"menuitem\";\r\n                    slice_1.focusable = true;\r\n                }\r\n                else {\r\n                    slice_1.role = \"listitem\";\r\n                    slice_1.focusable = false;\r\n                }\r\n                // Apply screen reader label\r\n                if (slice_1.focusable) {\r\n                    slice_1.events.once(\"focus\", function (ev) {\r\n                        slice_1.readerTitle = component_1.populateString(component_1.itemReaderText, _this);\r\n                    }, undefined, false);\r\n                    slice_1.events.once(\"blur\", function (ev) {\r\n                        slice_1.readerTitle = \"\";\r\n                    }, undefined, false);\r\n                }\r\n                if (slice_1.hoverable) {\r\n                    slice_1.events.once(\"over\", function (ev) {\r\n                        slice_1.readerTitle = component_1.populateString(component_1.itemReaderText, _this);\r\n                    }, undefined, false);\r\n                    slice_1.events.once(\"out\", function (ev) {\r\n                        slice_1.readerTitle = \"\";\r\n                    }, undefined, false);\r\n                }\r\n            }\r\n            return this._slice;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PercentSeriesDataItem.prototype, \"hiddenInLegend\", {\r\n        /**\r\n         * @return {boolean} Disabled in legend?\r\n         */\r\n        get: function () {\r\n            return this.properties.hiddenInLegend;\r\n        },\r\n        /**\r\n         * Should dataItem (slice) be hidden in legend?\r\n         *\r\n         * @param {boolean} value Visible in legend?\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"hiddenInLegend\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PercentSeriesDataItem;\r\n}(SeriesDataItem));\r\nexport { PercentSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[PercentSeries]] which is a base class for [[PieSeries]],\r\n * [[FunnelSeries]], and [[PyramidSeries]].\r\n *\r\n * @see {@link IPercentSeriesEvents} for a list of available Events\r\n * @see {@link IPercentSeriesAdapters} for a list of available Adapters\r\n */\r\nvar PercentSeries = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PercentSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PercentSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PercentSeries\";\r\n        _this._addAllDataItems = false;\r\n        _this.alignLabels = false;\r\n        _this.colors = new ColorSet();\r\n        _this.colors.step = 1;\r\n        _this.isMeasured = true;\r\n        _this.calculatePercent = true;\r\n        var slicesContainer = _this.createChild(Container);\r\n        slicesContainer.shouldClone = false;\r\n        slicesContainer.isMeasured = false;\r\n        _this.slicesContainer = slicesContainer;\r\n        var ticksContainer = _this.createChild(Container);\r\n        ticksContainer.shouldClone = false;\r\n        ticksContainer.isMeasured = false;\r\n        ticksContainer.layout = \"none\";\r\n        _this.ticksContainer = ticksContainer;\r\n        var labelsContainer = _this.createChild(Container);\r\n        labelsContainer.shouldClone = false;\r\n        labelsContainer.isMeasured = false;\r\n        labelsContainer.layout = \"none\";\r\n        _this.labelsContainer = labelsContainer;\r\n        _this.bulletsContainer.toFront();\r\n        // Make all slices focusable\r\n        _this.skipFocusThreshold = 50;\r\n        var defaultState = _this.defaultState;\r\n        defaultState.transitionEasing = $ease.sinOut;\r\n        // Accessibility\r\n        _this.itemReaderText = \"{category}: {value.percent.formatNumber('#.#')}%\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creates a slice element.\r\n     *\r\n     * @return {FunnelSlice} Slice\r\n     */\r\n    PercentSeries.prototype.createSlice = function () {\r\n        return new Sprite();\r\n    };\r\n    /**\r\n     * Creates a tick element.\r\n     *\r\n     * @return {Tick} Tick\r\n     */\r\n    PercentSeries.prototype.createTick = function () {\r\n        return new Tick();\r\n    };\r\n    /**\r\n     * Sreates label element.\r\n     *\r\n     * @return {Label} label\r\n     */\r\n    PercentSeries.prototype.createLabel = function () {\r\n        return new Label();\r\n    };\r\n    Object.defineProperty(PercentSeries.prototype, \"slices\", {\r\n        get: function () {\r\n            if (!this._slices) {\r\n                var slice = this.createSlice();\r\n                slice.applyOnClones = true;\r\n                this._disposers.push(slice);\r\n                this.initSlice(slice);\r\n                this._slices = new ListTemplate(slice);\r\n                this._disposers.push(new ListDisposer(this._slices));\r\n            }\r\n            return this._slices;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PercentSeries.prototype, \"ticks\", {\r\n        get: function () {\r\n            if (!this._ticks) {\r\n                var tick = this.createTick();\r\n                tick.applyOnClones = true;\r\n                this._disposers.push(tick);\r\n                this.initTick(tick);\r\n                this._ticks = new ListTemplate(tick);\r\n                this._disposers.push(new ListDisposer(this._ticks));\r\n            }\r\n            return this._ticks;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PercentSeries.prototype, \"labels\", {\r\n        get: function () {\r\n            if (!this._labels) {\r\n                var label = this.createLabel();\r\n                label.applyOnClones = true;\r\n                this._disposers.push(label);\r\n                this.initLabel(label);\r\n                this._labels = new ListTemplate(label);\r\n                this._disposers.push(new ListDisposer(this._labels));\r\n            }\r\n            return this._labels;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return {PercentSeriesDataItem} Data Item\r\n     */\r\n    PercentSeries.prototype.createDataItem = function () {\r\n        return new PercentSeriesDataItem();\r\n    };\r\n    /**\r\n     * Creates and returns a new slice element.\r\n     *\r\n     * @param  {typeof Slice}  sliceType  Type of the slice element\r\n     * @return {Slice}                    Slice\r\n     */\r\n    PercentSeries.prototype.initSlice = function (slice) {\r\n    };\r\n    PercentSeries.prototype.initLabel = function (label) {\r\n        label.text = \"{category}: {value.percent.formatNumber('#.0')}%\";\r\n        label.isMeasured = false;\r\n        label.padding(5, 5, 5, 5);\r\n    };\r\n    PercentSeries.prototype.initTick = function (label) {\r\n    };\r\n    /**\r\n     * Validates data item's element, effectively redrawing it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {PercentSeriesDataItem}  dataItem  Data item\r\n     */\r\n    PercentSeries.prototype.validateDataElement = function (dataItem) {\r\n        var slice = dataItem.slice;\r\n        if (slice) {\r\n            if (slice.fill == undefined) {\r\n                slice.fill = this.colors.getIndex(dataItem.index * this.colors.step);\r\n            }\r\n            if (slice.stroke == undefined) {\r\n                slice.stroke = this.colors.getIndex(dataItem.index * this.colors.step);\r\n            }\r\n        }\r\n        // do this at the end, otherwise bullets won't be positioned properly\r\n        _super.prototype.validateDataElement.call(this, dataItem);\r\n        if (slice) {\r\n            dataItem.bullets.each(function (key, bullet) {\r\n                if (bullet.fill == undefined) {\r\n                    bullet.fill = slice.fill;\r\n                }\r\n                if (bullet.stroke == undefined) {\r\n                    bullet.stroke = slice.stroke;\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Validates (processes) data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PercentSeries.prototype.validateData = function () {\r\n        _super.prototype.validateData.call(this);\r\n        if (this.chart) {\r\n            this.chart.feedLegend();\r\n        }\r\n    };\r\n    /**\r\n     * Arranges slice labels according to position settings.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {this[\"_dataItem\"][]}  dataItems  Data items\r\n     */\r\n    PercentSeries.prototype.arrangeLabels = function (dataItems) {\r\n        for (var i = 0, len = dataItems.length; i < len; i++) {\r\n            var dataItem = dataItems[i];\r\n            var label = dataItem.label;\r\n            if (label) {\r\n                var nextLabel = this.getNextLabel(i + 1, dataItems);\r\n                if (label.invalid) {\r\n                    label.validate();\r\n                }\r\n                var bottom = label.pixelY + label.measuredHeight;\r\n                if (nextLabel) {\r\n                    if (nextLabel.y < bottom) {\r\n                        nextLabel.y = bottom;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns the next label according to `index`.\r\n     *\r\n     * @param  {number}              index      Current index\r\n     * @param  {PieSerisDataItem[]}  dataItems  Data items\r\n     * @return {AxisLabelCircular}              Label element\r\n     */\r\n    PercentSeries.prototype.getNextLabel = function (index, dataItems) {\r\n        if (dataItems.length >= index) {\r\n            var nextDataItem = dataItems[index];\r\n            if (nextDataItem) {\r\n                if (nextDataItem.label) {\r\n                    return nextDataItem.label;\r\n                }\r\n                else {\r\n                    return this.getNextLabel(index + 1, dataItems);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(PercentSeries.prototype, \"colors\", {\r\n        /**\r\n         * @return {ColorSet} Color set\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"colors\");\r\n        },\r\n        /**\r\n         * A color set to be used for slices.\r\n         *\r\n         * For each new subsequent slice, the chart will assign the next color in\r\n         * this set.\r\n         *\r\n         * @param {ColorSet}  value  Color set\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"colors\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Binds related legend data item's visual settings to this series' visual\r\n     * settings.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Container}          marker    Container\r\n     * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n     */\r\n    PercentSeries.prototype.createLegendMarker = function (marker, dataItem) {\r\n        $iter.each(marker.children.iterator(), function (child) {\r\n            var slice = dataItem.slice;\r\n            child.defaultState.properties.fill = slice.fill;\r\n            child.defaultState.properties.stroke = slice.stroke;\r\n            child.defaultState.properties.fillOpacity = slice.fillOpacity;\r\n            child.defaultState.properties.strokeOpacity = slice.strokeOpacity;\r\n            child.fill = slice.fill;\r\n            child.stroke = slice.stroke;\r\n            child.fillOpacity = slice.fillOpacity;\r\n            child.strokeOpacity = slice.strokeOpacity;\r\n            if (child.fill == undefined) {\r\n                child.__disabled = true;\r\n            }\r\n            var legendDataItem = marker.dataItem;\r\n            legendDataItem.color = slice.fill;\r\n            legendDataItem.colorOrig = slice.fill;\r\n            slice.events.on(\"propertychanged\", function (ev) {\r\n                if (ev.property == \"fill\") {\r\n                    child.__disabled = false;\r\n                    if (!child.isActive) {\r\n                        child.fill = slice.fill;\r\n                    }\r\n                    child.defaultState.properties.fill = slice.fill;\r\n                    legendDataItem.color = slice.fill;\r\n                    legendDataItem.colorOrig = slice.fill;\r\n                }\r\n                if (ev.property == \"stroke\") {\r\n                    if (!child.isActive) {\r\n                        child.stroke = slice.stroke;\r\n                    }\r\n                    child.defaultState.properties.stroke = slice.stroke;\r\n                }\r\n            }, undefined, false);\r\n        });\r\n    };\r\n    /**\r\n     * Repositions bullets when slice's size changes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]}  event  Event\r\n     */\r\n    PercentSeries.prototype.handleSliceScale = function (event) {\r\n        var _this = this;\r\n        var slice = event.target;\r\n        var dataItem = slice.dataItem;\r\n        $iter.each(dataItem.bullets.iterator(), function (a) {\r\n            var value = a[1];\r\n            _this.positionBullet(value);\r\n        });\r\n    };\r\n    /**\r\n     * Repositions bullet and labels when slice moves.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]}  event  Event\r\n     */\r\n    PercentSeries.prototype.handleSliceMove = function (event) {\r\n    };\r\n    /**\r\n     * Copies all properties from another instance of [[PercentSeries]].\r\n     *\r\n     * @param {ColumnSeries}  source  Source series\r\n     */\r\n    PercentSeries.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.slices.template.copyFrom(source.slices.template);\r\n        this.labels.template.copyFrom(source.labels.template);\r\n        this.ticks.template.copyFrom(source.ticks.template);\r\n    };\r\n    Object.defineProperty(PercentSeries.prototype, \"alignLabels\", {\r\n        /**\r\n         * @return {boolean} Align labels?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"alignLabels\");\r\n        },\r\n        /**\r\n         * Align labels into nice vertical columns?\r\n         *\r\n         * This will ensure that labels never overlap with each other.\r\n         *\r\n         * Arranging labels into columns makes them more readble, and better user\r\n         * experience.\r\n         *\r\n         * If set to `false` labels will be positioned at `label.radius` distance,\r\n         * and may, in some cases, overlap.\r\n         *\r\n         * @default true\r\n         * @param {boolean}  value  Align labels?\r\n         */\r\n        set: function (value) {\r\n            this.setAlignLabels(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    PercentSeries.prototype.setAlignLabels = function (value) {\r\n        this.setPropertyValue(\"alignLabels\", value, true);\r\n    };\r\n    return PercentSeries;\r\n}(Series));\r\nexport { PercentSeries };\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PercentSeries\"] = PercentSeries;\r\nregistry.registeredClasses[\"PercentSeriesDataItem\"] = PercentSeriesDataItem;\r\n//# sourceMappingURL=PercentSeries.js.map","/**\r\n * Defines Pictorial Stacked Series.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PyramidSeries, PyramidSeriesDataItem } from \"./PyramidSeries\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo: sequenced?\r\n/**\r\n * Defines a [[DataItem]] for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar PictorialStackedSeriesDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PictorialStackedSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PictorialStackedSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PictorialStackedSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return PictorialStackedSeriesDataItem;\r\n}(PyramidSeriesDataItem));\r\nexport { PictorialStackedSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a PictorialStacked series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPictorialStackedSeriesEvents} for a list of available Events\r\n * @see {@link IPictorialStackedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nvar PictorialStackedSeries = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PictorialStackedSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PictorialStackedSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PictorialStackedSeries\";\r\n        _this.topWidth = percent(100);\r\n        _this.bottomWidth = percent(100);\r\n        _this.valueIs = \"height\";\r\n        _this.applyTheme();\r\n        _this._maskSprite = _this.slicesContainer.createChild(Sprite);\r\n        _this._maskSprite.visible = false;\r\n        _this._maskSprite.zIndex = 100;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sizes the mask to fit the series.\r\n     *\r\n     * @ignore\r\n     */\r\n    PictorialStackedSeries.prototype.validateDataElements = function () {\r\n        var maxWidth = this.slicesContainer.maxWidth;\r\n        var maxHeight = this.slicesContainer.maxHeight;\r\n        var maskSprite = this._maskSprite;\r\n        //maskSprite.validatePosition(); // for some reason size of the maskSprite is 0x0 after we removed validatePosition in afterdraw\r\n        var pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\r\n        var pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\r\n        var scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\r\n        if (scale == Infinity) {\r\n            scale = 1; // can't return here, won't draw legend properly\r\n        }\r\n        scale = $math.max(0.001, scale);\r\n        var newWidth = $math.min(maxWidth, pictureWidth * scale);\r\n        var newHeight = $math.min(maxHeight, pictureHeight * scale);\r\n        maskSprite.scale = scale;\r\n        if (this.orientation == \"vertical\") {\r\n            this.topWidth = newWidth + 4;\r\n            this.bottomWidth = newWidth + 4;\r\n            this.pyramidHeight = newHeight;\r\n            maskSprite.x = maxWidth / 2;\r\n            maskSprite.y = newHeight / 2;\r\n        }\r\n        else {\r\n            this.topWidth = newHeight + 4;\r\n            this.bottomWidth = newHeight + 4;\r\n            this.pyramidHeight = newWidth;\r\n            maskSprite.valign = \"middle\";\r\n            maskSprite.x = newWidth / 2;\r\n            maskSprite.y = maxHeight / 2;\r\n        }\r\n        maskSprite.verticalCenter = \"middle\";\r\n        maskSprite.horizontalCenter = \"middle\";\r\n        this.slicesContainer.mask = this._maskSprite;\r\n        _super.prototype.validateDataElements.call(this);\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    PictorialStackedSeries.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Pyramid Series\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return {PictorialStackedSeriesDataItem} Data Item\r\n     */\r\n    PictorialStackedSeries.prototype.createDataItem = function () {\r\n        return new PictorialStackedSeriesDataItem();\r\n    };\r\n    Object.defineProperty(PictorialStackedSeries.prototype, \"maskSprite\", {\r\n        /**\r\n         * A [[Sprite]] element that is used as a series mask.\r\n         *\r\n         * If set, this element's shape will be used to apply shape to the whole\r\n         * stacked pictorial series.\r\n         *\r\n         * You can use this element's `path` property to set an SVG path for the\r\n         * shape:\r\n         *\r\n         * ```TypeScript\r\n         * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n         * // ...\r\n         * series.maskSprite.path = iconPath;\r\n         * ```\r\n         * ```JavaScript\r\n         * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n         * // ...\r\n         * series.maskSprite.path = iconPath;\r\n         * ```\r\n         * ```JSON\r\n         * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n         * // ...\r\n         * {\r\n         *   // ...\r\n         *   \"series\": [{\r\n         *     \"type\": \"PictorialStackedSeries\",\r\n         *     // ...\r\n         *     \"maskSprite\": {\r\n         *       \"path\": iconPath\r\n         *     }\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * @return {Sprite} Mask sprite\r\n         */\r\n        get: function () {\r\n            return this._maskSprite;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Inits FunnelSlice.\r\n     *\r\n     * @param  {FunnelSlice} slice to init\r\n     */\r\n    PictorialStackedSeries.prototype.initSlice = function (slice) {\r\n        _super.prototype.initSlice.call(this, slice);\r\n        var hs = slice.states.getKey(\"hover\");\r\n        if (hs) {\r\n            hs.properties.expandDistance = 0;\r\n        }\r\n    };\r\n    return PictorialStackedSeries;\r\n}(PyramidSeries));\r\nexport { PictorialStackedSeries };\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PictorialStackedSeries\"] = PictorialStackedSeries;\r\nregistry.registeredClasses[\"PictorialStackedSeriesDataItem\"] = PictorialStackedSeriesDataItem;\r\n//# sourceMappingURL=PictorialStackedSeries.js.map","/**\r\n * Defines Pie Chart Series.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\n//import { Slice3D } from \"../../core/elements/3D/Slice3D\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { PieTick } from \"../elements/PieTick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo: sequenced?\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar PieSeriesDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PieSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PieSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PieSeriesDataItem\";\r\n        _this.values.radiusValue = {};\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(PieSeriesDataItem.prototype, \"radiusValue\", {\r\n        /**\r\n         * @return {number} Radius\r\n         */\r\n        get: function () {\r\n            return this.values.radiusValue.value;\r\n        },\r\n        /**\r\n         * Slice's radius, if other than default.\r\n         *\r\n         * @param {number}  value  Radius\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"radiusValue\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Hide the data item (and corresponding visual elements).\r\n     *\r\n     * @param {number}    duration  Duration (ms)\r\n     * @param {number}    delay     Delay hiding (ms)\r\n     * @param {number}    toValue   Target value for animation\r\n     * @param {string[]}  fields    Fields to animate while hiding\r\n     */\r\n    PieSeriesDataItem.prototype.hide = function (duration, delay, toValue, fields) {\r\n        return _super.prototype.hide.call(this, duration, delay, 0, [\"value\", \"radiusValue\"]);\r\n    };\r\n    /**\r\n     * Show hidden data item (and corresponding cisual elements).\r\n     *\r\n     * @param {number}    duration  Duration (ms)\r\n     * @param {number}    delay     Delay hiding (ms)\r\n     * @param {string[]}  fields    Fields to animate while hiding\r\n     */\r\n    PieSeriesDataItem.prototype.show = function (duration, delay, fields) {\r\n        return _super.prototype.show.call(this, duration, delay, [\"value\", \"radiusValue\"]);\r\n    };\r\n    return PieSeriesDataItem;\r\n}(PercentSeriesDataItem));\r\nexport { PieSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a slice series on a Pie chart.\r\n *\r\n * @see {@link IPieSeriesEvents} for a list of available Events\r\n * @see {@link IPieSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar PieSeries = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PieSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PieSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PieSeries\";\r\n        _this.alignLabels = true;\r\n        _this.startAngle = -90;\r\n        _this.endAngle = 270;\r\n        _this.labels.template.radius = percent(5);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * creates slice\r\n     */\r\n    PieSeries.prototype.createSlice = function () {\r\n        return new Slice();\r\n    };\r\n    /**\r\n     * creates tick\r\n     */\r\n    PieSeries.prototype.createTick = function () {\r\n        return new PieTick();\r\n    };\r\n    /**\r\n     * creates label\r\n     */\r\n    PieSeries.prototype.createLabel = function () {\r\n        return new AxisLabelCircular();\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    PieSeries.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Pie Slice Series\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return {PieSeriesDataItem} Data Item\r\n     */\r\n    PieSeries.prototype.createDataItem = function () {\r\n        return new PieSeriesDataItem();\r\n    };\r\n    /**\r\n     * Inits slice.\r\n     *\r\n     * @param  {Slice} slice to init\r\n     */\r\n    PieSeries.prototype.initSlice = function (slice) {\r\n        slice.isMeasured = false;\r\n        slice.defaultState.properties.scale = 1;\r\n        slice.observe(\"scale\", this.handleSliceScale, this);\r\n        slice.observe([\"dx\", \"dy\", \"x\", \"y\", \"shiftRadius\"], this.handleSliceMove, this);\r\n        slice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n        var hoverState = slice.states.create(\"hover\");\r\n        hoverState.properties.scale = 1.05;\r\n        var defaultState = slice.defaultState;\r\n        defaultState.properties.shiftRadius = 0;\r\n        slice.togglable = true;\r\n        slice.events.on(\"toggled\", function (event) {\r\n            event.target.hideTooltip();\r\n        });\r\n        var activeState = slice.states.create(\"active\");\r\n        activeState.properties.shiftRadius = 0.10;\r\n    };\r\n    /**\r\n     * (Re)validates the whole series, effectively causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PieSeries.prototype.validate = function () {\r\n        this._leftItems = [];\r\n        this._rightItems = [];\r\n        this._currentStartAngle = this.startAngle;\r\n        this._arcRect = $math.getArcRect(this.startAngle, this.endAngle);\r\n        this._maxRadiusPercent = 0;\r\n        for (var i = this.startIndex; i < this.endIndex; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            var radiusValuePercent = dataItem.values.radiusValue.percent;\r\n            if (radiusValuePercent > this._maxRadiusPercent) {\r\n                this._maxRadiusPercent = radiusValuePercent;\r\n            }\r\n        }\r\n        _super.prototype.validate.call(this);\r\n        if (this.alignLabels) {\r\n            if (this.startAngle > this.endAngle) {\r\n                this._rightItems.reverse();\r\n            }\r\n            else {\r\n                this._leftItems.reverse();\r\n            }\r\n            this._rightItems.sort(function (a, b) {\r\n                var aAngle = (a.slice.middleAngle + 360) % 360;\r\n                var bAngle = (b.slice.middleAngle + 360) % 360;\r\n                if (aAngle > 270) {\r\n                    aAngle -= 360;\r\n                }\r\n                if (bAngle > 270) {\r\n                    bAngle -= 360;\r\n                }\r\n                if (aAngle < bAngle) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            });\r\n            this._leftItems.sort(function (a, b) {\r\n                var aAngle = (a.slice.middleAngle + 360) % 360;\r\n                var bAngle = (b.slice.middleAngle + 360) % 360;\r\n                if (aAngle < bAngle) {\r\n                    return 1;\r\n                }\r\n                else {\r\n                    return -1;\r\n                }\r\n            });\r\n            this.arrangeLabels(this._rightItems);\r\n            this.arrangeLabels(this._leftItems);\r\n        }\r\n    };\r\n    /**\r\n     * Validates data item's element, effectively redrawing it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {PieSeriesDataItem}  dataItem  Data item\r\n     */\r\n    PieSeries.prototype.validateDataElement = function (dataItem) {\r\n        if (this.pixelRadius > 0) {\r\n            var percent_1 = dataItem.values.value.percent;\r\n            // SLICE\r\n            var slice = dataItem.slice;\r\n            slice.radius = this.pixelRadius;\r\n            if ($type.isNumber(dataItem.radiusValue)) {\r\n                slice.radius = this.pixelInnerRadius + (this.pixelRadius - this.pixelInnerRadius) * dataItem.values.radiusValue.percent / this._maxRadiusPercent;\r\n            }\r\n            if (!(slice.innerRadius instanceof Percent)) {\r\n                slice.innerRadius = this.pixelInnerRadius;\r\n            }\r\n            slice.startAngle = this._currentStartAngle;\r\n            slice.arc = dataItem.values.value.percent * (this.endAngle - this.startAngle) / 100;\r\n            // LABEL\r\n            var label = dataItem.label;\r\n            var tick = dataItem.tick;\r\n            tick.slice = slice;\r\n            tick.label = label;\r\n            var normalizedMiddleAngle = (slice.middleAngle + 360) % 360; // force angle to be 0 - 360;\r\n            var point = void 0;\r\n            if (this.alignLabels) {\r\n                var labelRadius = label.pixelRadius(slice.radius);\r\n                var x = tick.length + labelRadius;\r\n                label.dx = 0;\r\n                label.dy = 0;\r\n                label.verticalCenter = \"middle\";\r\n                var arcRect = this._arcRect;\r\n                // right half\r\n                if (normalizedMiddleAngle >= 270 || normalizedMiddleAngle <= 90) { // 91 makes less chances for flickering\r\n                    x += (arcRect.width + arcRect.x) * this.pixelRadius;\r\n                    label.horizontalCenter = \"left\";\r\n                    this._rightItems.push(dataItem);\r\n                }\r\n                // left half\r\n                else {\r\n                    x -= arcRect.x * this.pixelRadius;\r\n                    label.horizontalCenter = \"right\";\r\n                    this._leftItems.push(dataItem);\r\n                    x *= -1;\r\n                }\r\n                var distance = slice.radius + tick.length + labelRadius;\r\n                point = { x: x, y: slice.iy * distance };\r\n                label.moveTo(point);\r\n            }\r\n            else {\r\n                var depth = slice[\"depth\"];\r\n                if (!$type.isNumber(depth)) {\r\n                    depth = 0;\r\n                }\r\n                label.fixPosition(slice.middleAngle, slice.radius, slice.radiusY, 0, -depth);\r\n            }\r\n            this._currentStartAngle += slice.arc;\r\n            // do this at the end, otherwise bullets won't be positioned properly\r\n            _super.prototype.validateDataElement.call(this, dataItem);\r\n        }\r\n    };\r\n    Object.defineProperty(PieSeries.prototype, \"radius\", {\r\n        /**\r\n         * @return {number | Percent} Radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Outer radius for the series' slices in pixels or [[Percent]].\r\n         *\r\n         * @param {number | Percent}  value  Radius\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"radius\", value, true, false, 10, false)) {\r\n                this.invalidateDataItems();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PieSeries.prototype, \"pixelRadius\", {\r\n        /**\r\n         * @return {number} Radius\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            return this._pixelRadius;\r\n        },\r\n        /**\r\n         * @ignore\r\n         */\r\n        set: function (value) {\r\n            if (this._pixelRadius != value) {\r\n                this._pixelRadius = value;\r\n                this.invalidateDataItems();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PieSeries.prototype, \"pixelInnerRadius\", {\r\n        /**\r\n         * @return {number} Pixel inner radius\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            return this._pixelInnerRadius;\r\n        },\r\n        /**\r\n         * @ignore\r\n         */\r\n        set: function (value) {\r\n            if (this._pixelInnerRadius != value) {\r\n                this._pixelInnerRadius = value;\r\n                this.invalidateDataItems();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PieSeries.prototype, \"innerRadius\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {number | Percent} Radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius for the series' slices in pixels.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Redo so that users can set it\r\n         * @param {number | Percent}  value  Radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PieSeries.prototype, \"startAngle\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {number} Angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * Start angle for the series' slices in degrees. (0-360)\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Redo so that users can set it\r\n         * @param {number}  value  Angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PieSeries.prototype, \"endAngle\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {number} Angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endAngle\");\r\n        },\r\n        /**\r\n         * End angle for the series' slices in degrees. (0-360)\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Redo so that users can set it\r\n         * @param {number}  value  Angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Positions series bullet.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Bullet}  bullet  Bullet\r\n     */\r\n    PieSeries.prototype.positionBullet = function (bullet) {\r\n        _super.prototype.positionBullet.call(this, bullet);\r\n        var dataItem = bullet.dataItem;\r\n        var slice = dataItem.slice;\r\n        var locationX = bullet.locationX;\r\n        if (!$type.isNumber(locationX)) {\r\n            locationX = 0.5;\r\n        }\r\n        var locationY = bullet.locationY;\r\n        if (!$type.isNumber(locationY)) {\r\n            locationY = 1;\r\n        }\r\n        var angle = slice.startAngle + slice.arc * locationX;\r\n        bullet.x = locationY * slice.radius * $math.cos(angle);\r\n        bullet.y = locationY * slice.radiusY * $math.sin(angle);\r\n    };\r\n    /**\r\n     * Repositions bullet and labels when slice moves.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AMEvent<Slice, ISpriteEvents>[\"propertychanged\"]}  event  Event\r\n     */\r\n    PieSeries.prototype.handleSliceMove = function (event) {\r\n        if (!this.alignLabels) {\r\n            var slice = event.target;\r\n            var dataItem = slice.dataItem;\r\n            // moving textelement, as label dx and dy are already employed for aligning\r\n            //@labeltodo\r\n            if (dataItem) {\r\n                var label = dataItem.label;\r\n                if (label) {\r\n                    label.dx = label.fdx + slice.dx + slice.pixelX;\r\n                    label.dy = label.fdy + slice.dy + slice.pixelY;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(PieSeries.prototype, \"bbox\", {\r\n        /**\r\n         * Returns bounding box (square) for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {IRectangle}\r\n         */\r\n        get: function () {\r\n            if (this.definedBBox) {\r\n                return this.definedBBox;\r\n            }\r\n            var chart = this.chart;\r\n            if (chart) {\r\n                return $math.getArcRect(chart.startAngle, chart.endAngle, this.pixelRadius);\r\n            }\r\n            return $math.getArcRect(this.startAngle, this.endAngle, this.pixelRadius);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PieSeries;\r\n}(PercentSeries));\r\nexport { PieSeries };\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries\"] = PieSeries;\r\nregistry.registeredClasses[\"PieSeriesDataItem\"] = PieSeriesDataItem;\r\n//# sourceMappingURL=PieSeries.js.map","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { PieSeries, PieSeriesDataItem } from \"../series/PieSeries\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar PieSeries3DDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PieSeries3DDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PieSeries3DDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PieSeries3DDataItem\";\r\n        _this.values.depthValue = {};\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(PieSeries3DDataItem.prototype, \"depthValue\", {\r\n        /**\r\n         * @return {number} Depth\r\n         */\r\n        get: function () {\r\n            return this.values[\"depthValue\"].value;\r\n        },\r\n        /**\r\n         * Slice depth (height).\r\n         *\r\n         * @param {number}  value  Depth\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"depthValue\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PieSeries3DDataItem;\r\n}(PieSeriesDataItem));\r\nexport { PieSeries3DDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar PieSeries3D = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PieSeries3D, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PieSeries3D() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PieSeries3D\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object\r\n     * @see {@link DataItem}\r\n     * @return {PieSeries3DDataItem} Data Item\r\n     */\r\n    PieSeries3D.prototype.createDataItem = function () {\r\n        return new PieSeries3DDataItem();\r\n    };\r\n    /**\r\n     * creates slice\r\n     */\r\n    PieSeries3D.prototype.createSlice = function () {\r\n        return new Slice3D();\r\n    };\r\n    /**\r\n     * Validates data item's element, effectively redrawing it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {PieSeries3DDataItem}  dataItem  Data item\r\n     */\r\n    PieSeries3D.prototype.validateDataElement = function (dataItem) {\r\n        var slice = dataItem.slice;\r\n        var depth = this.depth;\r\n        if (!$type.isNumber(depth)) {\r\n            depth = this.chart.depth;\r\n        }\r\n        var depthPercent = dataItem.values.depthValue.percent;\r\n        if (!$type.isNumber(depthPercent)) {\r\n            depthPercent = 100;\r\n        }\r\n        slice.depth = depthPercent * depth / 100;\r\n        var angle = this.angle;\r\n        if (!$type.isNumber(angle)) {\r\n            angle = this.chart.angle;\r\n        }\r\n        slice.angle = angle;\r\n        _super.prototype.validateDataElement.call(this, dataItem);\r\n    };\r\n    /**\r\n     * (Re)validates the whole series, effectively causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PieSeries3D.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        for (var i = this._workingStartIndex; i < this._workingEndIndex; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            var slice = dataItem.slice;\r\n            var startAngle = slice.startAngle;\r\n            // find quarter\r\n            //q0 || q1\r\n            if ((startAngle >= -90 && startAngle < 90)) {\r\n                slice.toFront();\r\n            }\r\n            //q2 || q3\r\n            else if ((startAngle >= 90)) {\r\n                slice.toBack();\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(PieSeries3D.prototype, \"depth\", {\r\n        /**\r\n         * @return {number} Depth (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"depth\");\r\n        },\r\n        /**\r\n         * Depth (height) of the pie slice in pixels.\r\n         *\r\n         * @param {number}  value  Depth (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"depth\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PieSeries3D.prototype, \"angle\", {\r\n        /**\r\n         * @return {number} Angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"angle\");\r\n        },\r\n        /**\r\n         * Angle of the view point of the 3D pie. (0-360)\r\n         *\r\n         * @param {number}  value  Angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"angle\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Positions series bullet.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Bullet}  bullet  Bullet\r\n     */\r\n    PieSeries3D.prototype.positionBullet = function (bullet) {\r\n        _super.prototype.positionBullet.call(this, bullet);\r\n        var dataItem = bullet.dataItem;\r\n        var slice = dataItem.slice;\r\n        bullet.y = bullet.pixelY - slice.depth;\r\n    };\r\n    return PieSeries3D;\r\n}(PieSeries));\r\nexport { PieSeries3D };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n//# sourceMappingURL=PieSeries3D.js.map","/**\r\n * Defines Pyramid Series.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo: sequenced?\r\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar PyramidSeriesDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PyramidSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PyramidSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PyramidSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return PyramidSeriesDataItem;\r\n}(FunnelSeriesDataItem));\r\nexport { PyramidSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nvar PyramidSeries = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PyramidSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PyramidSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PyramidSeries\";\r\n        _this.topWidth = percent(0);\r\n        _this.bottomWidth = percent(100);\r\n        _this.pyramidHeight = percent(100);\r\n        _this.valueIs = \"area\";\r\n        _this.sliceLinks.template.width = 0;\r\n        _this.sliceLinks.template.height = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    PyramidSeries.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Pyramid Series\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return {PyramidSeriesDataItem} Data Item\r\n     */\r\n    PyramidSeries.prototype.createDataItem = function () {\r\n        return new PyramidSeriesDataItem();\r\n    };\r\n    /**\r\n     * (Re)validates the whole series, effectively causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PyramidSeries.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        this._nextWidth = undefined;\r\n    };\r\n    /**\r\n     * [getNextValue description]\r\n     *\r\n     * @todo Description\r\n     * @param  {FunnelSeriesDataItem} dataItem [description]\r\n     * @return {number}                        [description]\r\n     */\r\n    PyramidSeries.prototype.getNextValue = function (dataItem) {\r\n        var index = dataItem.index;\r\n        var nextValue = dataItem.getWorkingValue(\"value\");\r\n        if (index < this.dataItems.length - 1) {\r\n            var nextItem = this.dataItems.getIndex(index + 1);\r\n            nextValue = nextItem.getWorkingValue(\"value\");\r\n        }\r\n        if (nextValue == 0) {\r\n            nextValue = 0.000001;\r\n        }\r\n        return nextValue;\r\n    };\r\n    /**\r\n     * [validateDataElements description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    PyramidSeries.prototype.validateDataElements = function () {\r\n        var _this = this;\r\n        var maxWidth = this.slicesContainer.innerWidth;\r\n        var maxHeight = this.slicesContainer.innerHeight;\r\n        this.dataItems.each(function (dataItem) {\r\n            var relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\r\n            var sliceLink = dataItem.sliceLink;\r\n            if (_this.orientation == \"vertical\") {\r\n                maxHeight -= (sliceLink.pixelHeight * relValue);\r\n            }\r\n            else {\r\n                maxWidth -= (sliceLink.pixelWidth * relValue);\r\n            }\r\n        });\r\n        this._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\r\n        this._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\r\n        if (this.orientation == \"vertical\") {\r\n            var y = (maxHeight - this._pyramidHeight) / 2;\r\n            this.slicesContainer.y = y;\r\n            this.labelsContainer.y = y;\r\n            this.ticksContainer.y = y;\r\n        }\r\n        else {\r\n            var x = (maxWidth - this._pyramidWidth) / 2;\r\n            this.slicesContainer.x = x;\r\n            this.labelsContainer.x = x;\r\n            this.ticksContainer.x = x;\r\n        }\r\n        _super.prototype.validateDataElements.call(this);\r\n    };\r\n    /**\r\n     * [decorateSlice description]\r\n     *\r\n     * @todo Description\r\n     * @param {this[\"_dataItem\"]} dataItem [description]\r\n     */\r\n    PyramidSeries.prototype.decorateSlice = function (dataItem) {\r\n        var sum = this.dataItem.values.value.sum;\r\n        if (sum == 0) {\r\n            return;\r\n        }\r\n        var slice = dataItem.slice;\r\n        var sliceLink = dataItem.sliceLink;\r\n        var label = dataItem.label;\r\n        var tick = dataItem.tick;\r\n        var nextValue = this.getNextValue(dataItem);\r\n        var workingValue = dataItem.getWorkingValue(\"value\");\r\n        if (workingValue == 0) {\r\n            workingValue = 0.000001;\r\n        }\r\n        var pyramidWidth = this._pyramidWidth;\r\n        var pyramidHeight = this._pyramidHeight;\r\n        var maxWidth = this.slicesContainer.innerWidth;\r\n        var maxHeight = this.slicesContainer.innerHeight;\r\n        var linkWidth = sliceLink.pixelWidth;\r\n        var linkHeight = sliceLink.pixelHeight;\r\n        if (this.orientation == \"vertical\") {\r\n            var topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\r\n            if (!$type.isNumber(this._nextWidth)) {\r\n                this._nextWidth = topWidth;\r\n            }\r\n            var bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\r\n            var sliceTopWidth = this._nextWidth;\r\n            var angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n            var c = Math.tan(Math.PI / 2 - angle);\r\n            if (c == 0) {\r\n                c = 0.00000001;\r\n            }\r\n            var sliceHeight = void 0;\r\n            var sliceBottomWidth = void 0;\r\n            if (this.valueIs == \"area\") {\r\n                var totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n                var square = totalSquare * workingValue / sum;\r\n                var s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\r\n                sliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\r\n                sliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n            }\r\n            else {\r\n                var sum_1 = this.dataItem.values.value.sum;\r\n                sliceHeight = pyramidHeight * workingValue / sum_1;\r\n                sliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n            }\r\n            slice.height = sliceHeight;\r\n            slice.width = maxWidth;\r\n            slice.bottomWidth = sliceBottomWidth;\r\n            slice.topWidth = sliceTopWidth;\r\n            sliceLink.topWidth = slice.bottomWidth;\r\n            sliceLink.bottomWidth = slice.bottomWidth;\r\n            slice.y = this._nextY;\r\n            //slice.x = maxWidth / 2;\t\t\t\r\n            if (!this.alignLabels) {\r\n                label.x = maxWidth / 2;\r\n            }\r\n            else {\r\n                label.x = 0;\r\n            }\r\n            label.y = slice.pixelY + slice.pixelHeight * tick.locationY;\r\n            this._nextY += slice.pixelHeight + linkHeight * workingValue / dataItem.value;\r\n            sliceLink.y = this._nextY - linkHeight;\r\n            sliceLink.x = maxWidth / 2;\r\n        }\r\n        else {\r\n            var topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\r\n            if (!$type.isNumber(this._nextWidth)) {\r\n                this._nextWidth = topWidth;\r\n            }\r\n            var bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\r\n            var sliceTopWidth = this._nextWidth;\r\n            var angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\r\n            var c = Math.tan(Math.PI / 2 - angle);\r\n            if (c == 0) {\r\n                c = 0.00000001;\r\n            }\r\n            var sliceWidth = void 0;\r\n            var sliceBottomWidth = void 0;\r\n            if (this.valueIs == \"area\") {\r\n                var totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\r\n                var square = totalSquare * workingValue / this.dataItem.values.value.sum;\r\n                sliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n                sliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\r\n            }\r\n            else {\r\n                sliceWidth = pyramidWidth * workingValue / this.dataItem.values.value.sum;\r\n                sliceBottomWidth = sliceTopWidth - sliceWidth * c;\r\n            }\r\n            slice.width = sliceWidth;\r\n            slice.height = maxHeight;\r\n            slice.bottomWidth = sliceBottomWidth;\r\n            slice.topWidth = sliceTopWidth;\r\n            sliceLink.topWidth = slice.bottomWidth;\r\n            sliceLink.bottomWidth = slice.bottomWidth;\r\n            slice.x = this._nextY;\r\n            if (!this.alignLabels) {\r\n                label.y = maxHeight / 2;\r\n            }\r\n            else {\r\n                label.y = this.labelsContainer.measuredHeight;\r\n            }\r\n            label.x = slice.pixelX + slice.pixelWidth * tick.locationX;\r\n            this._nextY += slice.pixelWidth + linkWidth * workingValue / dataItem.value;\r\n            sliceLink.x = this._nextY - linkWidth;\r\n            sliceLink.y = maxHeight / 2;\r\n        }\r\n        this._nextWidth = slice.bottomWidth;\r\n    };\r\n    Object.defineProperty(PyramidSeries.prototype, \"topWidth\", {\r\n        /**\r\n         * @return {number | Percent}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"topWidth\");\r\n        },\r\n        /**\r\n         * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n         *\r\n         * `0%` (default) means the pyramid will be perfectly pointy.\r\n         * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n         * `100%` will take the whole width of the chart.\r\n         *\r\n         * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n         * `100%` and `bottomWidth` to `0%`.\r\n         *\r\n         * @default 0%\r\n         * @param {number | Percent}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PyramidSeries.prototype, \"pyramidHeight\", {\r\n        /**\r\n         * @return {number | Percent}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"pyramidHeight\");\r\n        },\r\n        /**\r\n         * Height of pyramid\r\n         *\r\n         *\r\n         * @default 100%\r\n         * @param {number | Percent}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PyramidSeries.prototype, \"bottomWidth\", {\r\n        /**\r\n         * @return {number | Percent}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"bottomWidth\");\r\n        },\r\n        /**\r\n         * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n         *\r\n         * `0%` means the pyramid's botto will be pointy.\r\n         * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n         * `100%` (default) will take the whole width of the chart.\r\n         *\r\n         * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n         * `100%` and `bottomWidth` to `0%`.\r\n         *\r\n         * @param {number | Percent}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PyramidSeries.prototype, \"valueIs\", {\r\n        /**\r\n         * @return {\"area\" | \"height\"}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"valueIs\");\r\n        },\r\n        /**\r\n         * Indicates how slice's value will influence its size.\r\n         *\r\n         * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n         * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n         * slices based on their value.\r\n         *\r\n         * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n         * will represent their value relatively to values of the other slices.\r\n         *\r\n         * This is a correct way to depict \"weight\" of each slice based on their\r\n         * values.\r\n         *\r\n         * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n         * divvied up between slices. Actual slice width or area is not counted in.\r\n         *\r\n         * From the data-viz standpoint this does not make a lot of sense, since\r\n         * slices with lesser values might appear more prominent if they are placed\r\n         * towards thick end of the pyramid since their areas will be bigger.\r\n         *\r\n         * @default \"area\"\r\n         * @param {\"area\" | \"height\"}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"valueIs\", value)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PyramidSeries;\r\n}(FunnelSeries));\r\nexport { PyramidSeries };\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\r\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;\r\n//# sourceMappingURL=PyramidSeries.js.map","/**\r\n * Radar column series module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar RadarColumnSeriesDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(RadarColumnSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function RadarColumnSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ColumnSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return RadarColumnSeriesDataItem;\r\n}(ColumnSeriesDataItem));\r\nexport { RadarColumnSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar RadarColumnSeries = /** @class */ (function (_super) {\r\n    tslib_1.__extends(RadarColumnSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function RadarColumnSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"RadarColumnSeries\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creates and returns a RadarColumn element to use as column in radar chart.\r\n     *\r\n     * @return {this[\"_column\"]} RadarColumn.\r\n     */\r\n    RadarColumnSeries.prototype.createColumnTemplate = function () {\r\n        return new RadarColumn();\r\n    };\r\n    /**\r\n     * (Re)validates the whole series, effectively causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    RadarColumnSeries.prototype.validate = function () {\r\n        // so that radius would be updated\r\n        if (this.chart.invalid) {\r\n            this.chart.validate();\r\n        }\r\n        _super.prototype.validate.call(this);\r\n    };\r\n    /**\r\n     * Validates data item's element, effectively redrawing it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {RadarColumnSeriesDataItem}  dataItem  Data item\r\n     */\r\n    RadarColumnSeries.prototype.validateDataElementReal = function (dataItem) {\r\n        var _this = this;\r\n        var startAngle = this.chart.startAngle;\r\n        var endAngle = this.chart.endAngle;\r\n        var yField = this.yField;\r\n        var yOpenField = this.yOpenField;\r\n        var xField = this.xField;\r\n        var xOpenField = this.xOpenField;\r\n        var lAngle;\r\n        var rAngle;\r\n        var tRadius;\r\n        var bRadius;\r\n        var startLocation = this.getStartLocation(dataItem);\r\n        var endLocation = this.getEndLocation(dataItem);\r\n        var cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n        startAngle = startAngle + startLocation * cellAngle;\r\n        endAngle = endAngle - (1 - endLocation) * cellAngle;\r\n        var template = this.columns.template;\r\n        var percentWidth = template.percentWidth;\r\n        if ($type.isNaN(percentWidth)) {\r\n            percentWidth = 100;\r\n        }\r\n        var offset = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n        startLocation += offset;\r\n        endLocation -= offset;\r\n        if (this.baseAxis == this.xAxis) {\r\n            tRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n            bRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n            lAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n            rAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n        }\r\n        else {\r\n            tRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n            bRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n            lAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n            rAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n        }\r\n        if (rAngle < lAngle) {\r\n            var temp = rAngle;\r\n            rAngle = lAngle;\r\n            lAngle = temp;\r\n        }\r\n        lAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n        rAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n        var radarColumn = dataItem.column;\r\n        if (!radarColumn) {\r\n            radarColumn = this.columns.create();\r\n            dataItem.column = radarColumn;\r\n            $object.forceCopyProperties(this.columns.template, radarColumn, visualProperties);\r\n            dataItem.addSprite(radarColumn);\r\n            this.setColumnStates(radarColumn);\r\n        }\r\n        var slice = radarColumn.radarColumn;\r\n        slice.startAngle = lAngle;\r\n        var arc = rAngle - lAngle;\r\n        if (arc > 0) {\r\n            slice.arc = arc;\r\n            slice.radius = tRadius;\r\n            slice.innerRadius = bRadius;\r\n            radarColumn.__disabled = false;\r\n            radarColumn.parent = this.columnsContainer;\r\n            $iter.each(this.axisRanges.iterator(), function (axisRange) {\r\n                var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n                if (!rangeColumn) {\r\n                    rangeColumn = _this.columns.create();\r\n                    $object.forceCopyProperties(_this.columns.template, rangeColumn, visualProperties);\r\n                    $object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n                    if (rangeColumn.dataItem) {\r\n                        $array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n                    }\r\n                    dataItem.addSprite(rangeColumn);\r\n                    _this.setColumnStates(rangeColumn);\r\n                    dataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n                }\r\n                var slice = radarColumn.radarColumn;\r\n                slice.startAngle = lAngle;\r\n                slice.arc = arc;\r\n                slice.radius = tRadius;\r\n                slice.innerRadius = bRadius;\r\n                if (slice.invalid) {\r\n                    slice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n                }\r\n                rangeColumn.__disabled = false;\r\n                rangeColumn.parent = _this.columnsContainer;\r\n            });\r\n        }\r\n        else {\r\n            this.disableUnusedColumns(dataItem);\r\n        }\r\n    };\r\n    /**\r\n     * [getPoint description]\r\n     *\r\n     * @todo Description\r\n     * @param {RadarColumnSeriesDataItem} dataItem  [description]\r\n     * @param {string}                    xKey      [description]\r\n     * @param {string}                    yKey      [description]\r\n     * @param {number}                    locationX [description]\r\n     * @param {number}                    locationY [description]\r\n     * @param {string}                    stackKeyX [description]\r\n     * @param {string}                    stackKeyY [description]\r\n     */\r\n    RadarColumnSeries.prototype.getPoint = function (dataItem, xKey, yKey, locationX, locationY, stackKeyX, stackKeyY) {\r\n        if (!stackKeyX) {\r\n            stackKeyX = \"valueX\";\r\n        }\r\n        if (!stackKeyY) {\r\n            stackKeyY = \"valueY\";\r\n        }\r\n        var x = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n        var y = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n        var radius = $math.getDistance({ x: x, y: y });\r\n        // hack to be able to determine angle later\r\n        if (radius == 0) {\r\n            radius = 0.00001;\r\n        }\r\n        var angle = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n        return { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n    };\r\n    /**\r\n     * Returns an SVG path to be used as a mask for the series.\r\n     *\r\n     * @return {string} SVG path\r\n     */\r\n    RadarColumnSeries.prototype.getMaskPath = function () {\r\n        var renderer = this.yAxis.renderer;\r\n        return $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n    };\r\n    return RadarColumnSeries;\r\n}(ColumnSeries));\r\nexport { RadarColumnSeries };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n//# sourceMappingURL=RadarColumnSeries.js.map","/**\r\n * Radar series module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem } from \"./LineSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar RadarSeriesDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(RadarSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function RadarSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"RadarSeriesDataItem\";\r\n        _this.setLocation(\"dateX\", 0, 0);\r\n        _this.setLocation(\"dateY\", 0, 0);\r\n        _this.setLocation(\"categoryX\", 0, 0);\r\n        _this.setLocation(\"categoryY\", 0, 0);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return RadarSeriesDataItem;\r\n}(LineSeriesDataItem));\r\nexport { RadarSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar RadarSeries = /** @class */ (function (_super) {\r\n    tslib_1.__extends(RadarSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function RadarSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"RadarSeries\";\r\n        _this.connectEnds = true;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * (Re)validates the whole series, effectively causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    RadarSeries.prototype.validate = function () {\r\n        // so that radius would be updated\r\n        if (this.chart.invalid) {\r\n            this.chart.validate();\r\n        }\r\n        _super.prototype.validate.call(this);\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return {RadarSeriesDataItem} Data Item\r\n     */\r\n    RadarSeries.prototype.createDataItem = function () {\r\n        return new RadarSeriesDataItem();\r\n    };\r\n    /**\r\n     * [getPoint description]\r\n     *\r\n     * @todo Description\r\n     * @param {RadarSeriesDataItem} dataItem  [description]\r\n     * @param {string}              xKey      [description]\r\n     * @param {string}              yKey      [description]\r\n     * @param {number}              locationX [description]\r\n     * @param {number}              locationY [description]\r\n     * @param {string}              stackKeyX [description]\r\n     * @param {string}              stackKeyY [description]\r\n     */\r\n    RadarSeries.prototype.getPoint = function (dataItem, xKey, yKey, locationX, locationY, stackKeyX, stackKeyY) {\r\n        if (!stackKeyX) {\r\n            stackKeyX = \"valueX\";\r\n        }\r\n        if (!stackKeyY) {\r\n            stackKeyY = \"valueY\";\r\n        }\r\n        var x = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n        var y = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n        var radius = $math.getDistance({ x: x, y: y });\r\n        // hack to be able to determine angle later\r\n        if (radius == 0) {\r\n            radius = 0.00001;\r\n        }\r\n        var angle = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n        var startAngle = this.chart.startAngle;\r\n        var endAngle = this.chart.endAngle;\r\n        //\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n        if (angle < startAngle || angle > endAngle) {\r\n            return undefined;\r\n        }\r\n        else {\r\n            return { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n        }\r\n    };\r\n    /**\r\n     * [addPoints description]\r\n     *\r\n     * @todo Description\r\n     * @param {IPoint[]}          points    [description]\r\n     * @param {this[\"_dataItem\"]} dataItem  [description]\r\n     * @param {string}            xField    [description]\r\n     * @param {string}            yField    [description]\r\n     * @param {boolean}           backwards [description]\r\n     */\r\n    RadarSeries.prototype.addPoints = function (points, dataItem, xField, yField, backwards) {\r\n        var point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n        if (point) {\r\n            points.push(point);\r\n        }\r\n    };\r\n    /**\r\n     * Returns an SVG path to be used as a mask for the series.\r\n     *\r\n     * @return {string} SVG path\r\n     */\r\n    RadarSeries.prototype.getMaskPath = function () {\r\n        var renderer = this.yAxis.renderer;\r\n        return $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n    };\r\n    /**\r\n     * [drawSegment description]\r\n     *\r\n     * @todo Description\r\n     * @param {LineSeriesSegment}  segment      [description]\r\n     * @param {IPoint[]}           points       [description]\r\n     * @param {IPoint[]}           closePoints  [description]\r\n     */\r\n    RadarSeries.prototype.drawSegment = function (segment, points, closePoints) {\r\n        var axis = this.yAxis;\r\n        var renderer = axis.renderer;\r\n        if (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n            // adds one point to the beginning of closePoints array, if needed\r\n            if (this.dataFields[this._xOpenField] ||\r\n                this.dataFields[this._yOpenField] ||\r\n                this.stacked) {\r\n                points.push(points[0]);\r\n                if (closePoints.length > 0) {\r\n                    closePoints.unshift(closePoints[closePoints.length - 1]);\r\n                }\r\n            }\r\n        }\r\n        _super.prototype.drawSegment.call(this, segment, points, closePoints);\r\n    };\r\n    Object.defineProperty(RadarSeries.prototype, \"connectEnds\", {\r\n        /**\r\n         * @return {boolean} Connect?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"connectEnds\");\r\n        },\r\n        /**\r\n         * Should the last and and first data points be connected, forming a complete\r\n         * closed circle?\r\n         *\r\n         * @default true\r\n         * @param {boolean}  value  Connect?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"connectEnds\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return RadarSeries;\r\n}(LineSeries));\r\nexport { RadarSeries };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n//# sourceMappingURL=RadarSeries.js.map","/**\r\n * Functionality for any series-based elements, like Line Series (graphs),\r\n * Pie slice lists, etc.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component } from \"../../core/Component\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { List, ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { LegendSettings } from \"../Legend\";\r\nimport { options } from \"../../core/Options\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $colors from \"../../core/utils/Colors\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[Series]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar SeriesDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * A dictionary of data items bullets, where key is uid of a bullet template.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo review description\r\n         * @type {Dictionary}\r\n         */\r\n        _this.bullets = new Dictionary();\r\n        _this.className = \"SeriesDataItem\";\r\n        //@todo Should we make `bullets` list disposable?\r\n        _this._disposers.push(new DictionaryDisposer(_this.bullets));\r\n        _this.values.value = {};\r\n        _this.values.value = {};\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Destroys this object and all related data.\r\n     */\r\n    SeriesDataItem.prototype.dispose = function () {\r\n        this.bullets.clear();\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    Object.defineProperty(SeriesDataItem.prototype, \"value\", {\r\n        /**\r\n         * @return {number} Value\r\n         */\r\n        get: function () {\r\n            return this.values.value.value;\r\n        },\r\n        /**\r\n         * data items's numeric value.\r\n         *\r\n         * @param {number}  value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"value\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return SeriesDataItem;\r\n}(DataItem));\r\nexport { SeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines base class for any kind of serial data.\r\n *\r\n * @see {@link ISeriesEvents} for a list of available Events\r\n * @see {@link ISeriesAdapters} for a list of available Adapters\r\n * @todo Separate axis-related stuff to some other class so that MapSeries would not have unrelated stuff\r\n */\r\nvar Series = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Series, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Series() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Should this series excluded from the axis scale calculations?\r\n         *\r\n         * @default false\r\n         * @type {boolean}\r\n         */\r\n        _this._ignoreMinMax = false;\r\n        /**\r\n         * Should series' bullets?\r\n         *\r\n         * @default true\r\n         * @type {boolean}\r\n         */\r\n        _this._showBullets = true;\r\n        /**\r\n         * Settings for the appearance of the related legend items.\r\n         */\r\n        _this.legendSettings = new LegendSettings();\r\n        /**\r\n         * Lowest overal values by type.\r\n         *\r\n         * @type {Dictionary}\r\n         */\r\n        _this._tmin = new Dictionary();\r\n        /**\r\n         * Highest overal values by type.\r\n         *\r\n         * @type {Dictionary}\r\n         */\r\n        _this._tmax = new Dictionary();\r\n        /**\r\n         * Lowest values in current selection by type.\r\n         *\r\n         * @type {Dictionary}\r\n         */\r\n        _this._smin = new Dictionary();\r\n        /**\r\n         * Highest values in current selection by type.\r\n         *\r\n         * @type {Dictionary}\r\n         */\r\n        _this._smax = new Dictionary();\r\n        /**\r\n         * [dataItemsByAxis description]\r\n         *\r\n         * Both by category and date.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @type {Dictionary}\r\n         */\r\n        _this.dataItemsByAxis = new Dictionary();\r\n        /**\r\n         * Normally series items are focusable using keyboard, so that people can\r\n         * select them with a TAB key. However, if there are a lot of data points on\r\n         * screen it might be long and useless to tab through all o fthem.\r\n         *\r\n         * This is where `skipFocusThreshold` comes in. If there are more items than\r\n         * the value set here, we will not make those focusable and rather let screen\r\n         * reader software rely on the series summary, or authors provide alternative\r\n         * detailed information display, such as HTML table.\r\n         *\r\n         * Different series might have different threshold defaults.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        _this.skipFocusThreshold = 20;\r\n        /**\r\n         * As calculating totals is expensive operation and not often needed, by default we do not do it. In case you use percent for your charts, you must set this to true.\r\n         * Pie chart, which uses percent sets this to true by default.\r\n         * @todo review description\r\n         * @type {boolean}\r\n         */\r\n        _this.calculatePercent = false;\r\n        /**\r\n         * Specifies if series should be automatically disposed when removing from chart's series list.\r\n         * @default true\r\n         */\r\n        _this.autoDispose = true;\r\n        /**\r\n         * When working value of dataItem changes, we must process all the values to calculate sum, min, max etc. Also update stack values. This is quite expensive operation.\r\n         * Unfortunately we do not know if user needs this processed values or not. By setting simplifiedProcessing = true you disable this processing and in case working\r\n         * value changes, we only redraw the particular column. Do not do this if you have staked chart or use calculated values in bullets or in tooltips.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this.simplifiedProcessing = false;\r\n        _this.className = \"Series\";\r\n        _this.isMeasured = false;\r\n        _this.layout = \"none\";\r\n        _this.shouldClone = false;\r\n        _this.setPropertyValue(\"hidden\", false);\r\n        _this.axisRanges = new List();\r\n        _this.axisRanges.events.on(\"inserted\", _this.processAxisRange, _this, false);\r\n        _this.minBulletDistance = 0; // otherwise we'll have a lot of cases when people won't see bullets and think it's a bug\r\n        _this.mainContainer = _this.createChild(Container);\r\n        _this.mainContainer.shouldClone = false;\r\n        _this.mainContainer.mask = _this.createChild(Sprite);\r\n        _this._disposers.push(_this.mainContainer);\r\n        // all bullets should go on top of lines/fills. So we add a separate container for bullets and later set it's parent to chart.bulletsContainer\r\n        var bulletsContainer = _this.mainContainer.createChild(Container);\r\n        _this._shouldBeReady.push(bulletsContainer);\r\n        bulletsContainer.shouldClone = false;\r\n        bulletsContainer.layout = \"none\";\r\n        bulletsContainer.virtualParent = _this;\r\n        _this._disposers.push(bulletsContainer);\r\n        _this.bulletsContainer = bulletsContainer;\r\n        _this.tooltip = new Tooltip();\r\n        _this.tooltip.virtualParent = _this;\r\n        _this._disposers.push(_this.tooltip);\r\n        _this.hiddenState.transitionEasing = $ease.cubicIn;\r\n        // this data item holds sums, averages, etc\r\n        _this.dataItem = _this.createDataItem();\r\n        _this._disposers.push(_this.dataItem);\r\n        _this.dataItem.component = _this;\r\n        // Apply accessibility\r\n        _this.role = \"group\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    Series.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Series\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return {SeriesDataItem} Data Item\r\n     */\r\n    Series.prototype.createDataItem = function () {\r\n        return new SeriesDataItem();\r\n    };\r\n    Object.defineProperty(Series.prototype, \"chart\", {\r\n        /**\r\n         * @return {this} Chart\r\n         */\r\n        get: function () {\r\n            return this._chart;\r\n        },\r\n        /**\r\n         * Chart series is used on.\r\n         *\r\n         * @param {this[\"_chart\"]}  value  Chart\r\n         */\r\n        set: function (value) {\r\n            this._chart = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Positions bullet.\r\n     *\r\n     * @param {Bullet}  bullet  Bullet\r\n     */\r\n    Series.prototype.positionBullet = function (bullet) {\r\n        // Placeholder method for extending classes to override.\r\n    };\r\n    /**\r\n     * Decorates newly created bullet after it has been instert into the list.\r\n     *\r\n     * @param {IListEvents<Bullet>[\"inserted\"]}  event  List event\r\n     * @todo investigate why itemReaderText is undefined\r\n     */\r\n    Series.prototype.processBullet = function (event) {\r\n        var bullet = event.newValue;\r\n        bullet.isTemplate = true;\r\n        // Add accessibility options to bullet\r\n        // If there are relatively few bullets, make them focusable\r\n        if (this.itemsFocusable()) {\r\n            bullet.focusable = true;\r\n        }\r\n    };\r\n    /**\r\n     * removes bullets\r\n     *\r\n     * @param {IListEvents<Bullet>[\"inserted\"]}  event  List event\r\n     */\r\n    Series.prototype.removeBullet = function (event) {\r\n        var bullet = event.oldValue;\r\n        this.dataItems.each(function (dataItem) {\r\n            var eachBullet = dataItem.bullets.getKey(bullet.uid);\r\n            if (eachBullet) {\r\n                eachBullet.dispose();\r\n            }\r\n        });\r\n        this.invalidate();\r\n    };\r\n    /**\r\n     * Validates data items.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Series.prototype.validateDataItems = function () {\r\n        _super.prototype.validateDataItems.call(this);\r\n        this.processValues(false);\r\n    };\r\n    /**\r\n     * Returns first value for the specific key in the series.\r\n     *\r\n     * @param  {string}  key  Key\r\n     * @return {number}       Value\r\n     * @todo Description\r\n     * @todo Convert to propert object property iterator\r\n     */\r\n    Series.prototype.getFirstValue = function (key, startIndex) {\r\n        // find first\r\n        /*\r\n        return $iter.findMap(this.dataItems.iterator(), (dataItem) => {\r\n            for (let key in dataItem.values) {\r\n                if ($object.hasKey(dataItem.values, key)) {\r\n                    let value: number = dataItem.values[key].workingValue;\r\n                    if ($type.isNumber(value)) {\r\n                        return value;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return null;\r\n        });*/\r\n        if (startIndex > 0 && startIndex < this.dataItems.length - 1) {\r\n            startIndex++;\r\n        }\r\n        for (var i = startIndex; i >= 0; i--) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            var value = dataItem.values[key].workingValue;\r\n            if ($type.isNumber(value)) {\r\n                return value;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * [rangeChangeUpdate description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    Series.prototype.rangeChangeUpdate = function () {\r\n        _super.prototype.rangeChangeUpdate.call(this);\r\n        this.processValues(true);\r\n    };\r\n    /**\r\n     * [processValues description]\r\n     *\r\n     * @todo Description\r\n     * @todo Convert to propert object property iterator\r\n     * @param {OrderedList<this[\"_dataItem\"]>} dataItems [description]\r\n     */\r\n    Series.prototype.processValues = function (working) {\r\n        var _this = this;\r\n        if (!this.simplifiedProcessing) {\r\n            var dataItems = this.dataItems;\r\n            var count_1 = {};\r\n            var sum_1 = {};\r\n            var low_1 = {};\r\n            var high_1 = {};\r\n            var open_1 = {};\r\n            var close_1 = {};\r\n            var previous_1 = {};\r\n            var first_1 = {};\r\n            //let duration: number = 0; // todo: check if series uses selection.change or selection.change.percent and set duration to interpolationduration\r\n            var startIndex_1 = $math.max(0, this._workingStartIndex);\r\n            startIndex_1 = $math.min(startIndex_1, this.dataItems.length);\r\n            var endIndex = $math.min(this._workingEndIndex, this.dataItems.length);\r\n            if (!$type.isNumber(startIndex_1)) {\r\n                startIndex_1 = 0;\r\n            }\r\n            if (!$type.isNumber(endIndex)) {\r\n                endIndex = this.dataItems.length;\r\n            }\r\n            if (startIndex_1 > 0) {\r\n                var dataItem_1 = dataItems.getIndex(startIndex_1 - 1);\r\n                $object.each(dataItem_1.values, function (key, values) {\r\n                    var value = values.workingValue;\r\n                    if ($type.isNumber(value)) {\r\n                        // save previous\r\n                        previous_1[key] = value;\r\n                    }\r\n                });\r\n            }\r\n            var _loop_1 = function (i) {\r\n                var dataItem_2 = dataItems.getIndex(i);\r\n                $object.each(dataItem_2.values, function (key, values) {\r\n                    var value = values.workingValue;\r\n                    //if (i >= startIndex && i <= endIndex) { // do not add to count, sum etc if it is not within start/end index\r\n                    if ($type.isNumber(value)) {\r\n                        // count values\r\n                        if (!$type.isNumber(count_1[key])) {\r\n                            count_1[key] = 0;\r\n                        }\r\n                        count_1[key]++;\r\n                        // sum values\r\n                        if (!$type.isNumber(sum_1[key])) {\r\n                            sum_1[key] = 0;\r\n                        }\r\n                        sum_1[key] += value;\r\n                        // open\r\n                        if (!$type.isNumber(open_1[key])) {\r\n                            open_1[key] = value;\r\n                        }\r\n                        // close\r\n                        close_1[key] = value;\r\n                        // low\r\n                        if (!$type.isNumber(low_1[key])) {\r\n                            low_1[key] = value;\r\n                        }\r\n                        else {\r\n                            if (low_1[key] > value) {\r\n                                low_1[key] = value;\r\n                            }\r\n                        }\r\n                        // high\r\n                        if (!$type.isNumber(high_1[key])) {\r\n                            high_1[key] = value;\r\n                        }\r\n                        else {\r\n                            if (high_1[key] < value) {\r\n                                high_1[key] = value;\r\n                            }\r\n                        }\r\n                        if (!$type.isNumber(first_1[key])) {\r\n                            first_1[key] = _this.getFirstValue(key, startIndex_1);\r\n                        }\r\n                        // change\r\n                        dataItem_2.setCalculatedValue(key, value - first_1[key], \"change\");\r\n                        // change from start percent\r\n                        // will fail if first value is 0\r\n                        dataItem_2.setCalculatedValue(key, (value - first_1[key]) / first_1[key] * 100, \"changePercent\");\r\n                        // previous change\r\n                        var prevValue = previous_1[key];\r\n                        if (!$type.isNumber(prevValue)) {\r\n                            prevValue = value;\r\n                        }\r\n                        dataItem_2.setCalculatedValue(key, value - prevValue, \"previousChange\");\r\n                        // previous change percent\r\n                        dataItem_2.setCalculatedValue(key, (value - prevValue) / prevValue * 100, \"previousChangePercent\");\r\n                        // save previous\r\n                        previous_1[key] = value;\r\n                    }\r\n                });\r\n            };\r\n            for (var i = startIndex_1; i < endIndex; i++) {\r\n                _loop_1(i);\r\n            }\r\n            if (this.calculatePercent) {\r\n                var _loop_2 = function (i) {\r\n                    var dataItem_3 = dataItems.getIndex(i);\r\n                    $object.each(dataItem_3.values, function (key) {\r\n                        var ksum = sum_1[key];\r\n                        var value = dataItem_3.values[key].workingValue;\r\n                        if ($type.isNumber(value) && ksum > 0) {\r\n                            // this hack is made in order to make it possible to animate single slice to 0\r\n                            // if there is only one slice left, percent value is always 100%, so it won't animate\r\n                            // so we use real value of a slice instead of current value\r\n                            if (value == ksum) {\r\n                                ksum = dataItem_3.values[key].value;\r\n                            }\r\n                            var percent = value / ksum * 100;\r\n                            dataItem_3.setCalculatedValue(key, percent, \"percent\");\r\n                        }\r\n                    });\r\n                };\r\n                for (var i = startIndex_1; i < endIndex; i++) {\r\n                    _loop_2(i);\r\n                }\r\n            }\r\n            // calculate one before first (cant do that in cycle, as we don't know open yet\r\n            // when drawing line chart we should draw line to the invisible data point to the left, otherwise the line will always look like it starts from the selected point\r\n            // so we do startIndex - 1\r\n            if (startIndex_1 > 0) {\r\n                var zeroItem_1 = dataItems.getIndex(startIndex_1 - 1);\r\n                $object.each(zeroItem_1.values, function (key) {\r\n                    var value = zeroItem_1.values[key].value;\r\n                    // change\r\n                    zeroItem_1.setCalculatedValue(key, value - open_1[key], \"change\");\r\n                    // change percent\r\n                    zeroItem_1.setCalculatedValue(key, (value - open_1[key]) / open_1[key] * 100, \"changePercent\");\r\n                });\r\n            }\r\n            // we save various data like sum, average to dataPoint of the series\r\n            var dataItem_4 = this.dataItem;\r\n            $object.each(dataItem_4.values, function (key) {\r\n                dataItem_4.setCalculatedValue(key, sum_1[key], \"sum\");\r\n                dataItem_4.setCalculatedValue(key, sum_1[key] / count_1[key], \"average\");\r\n                dataItem_4.setCalculatedValue(key, open_1[key], \"open\");\r\n                dataItem_4.setCalculatedValue(key, close_1[key], \"close\");\r\n                dataItem_4.setCalculatedValue(key, low_1[key], \"low\");\r\n                dataItem_4.setCalculatedValue(key, high_1[key], \"high\");\r\n                dataItem_4.setCalculatedValue(key, count_1[key], \"count\");\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * (Re)validates the whole series, effectively causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Series.prototype.validate = function () {\r\n        $iter.each(this.axisRanges.iterator(), function (axisRange) {\r\n            //axisRange.contents.disposeChildren(); // not good for columns, as they are reused\r\n            //\t\t\taxisRange.appendChildren();\r\n            axisRange.validate();\r\n        });\r\n        _super.prototype.validate.call(this);\r\n        this.bulletsContainer.fill = this.fill;\r\n        this.bulletsContainer.stroke = this.stroke;\r\n        if (this.bulletsContainer.children.length > 0) {\r\n            for (var i = 0; i < this.startIndex; i++) {\r\n                var dataItem = this.dataItems.getIndex(i);\r\n                if (dataItem) {\r\n                    dataItem.bullets.each(function (key, bullet) {\r\n                        bullet.__disabled = true;\r\n                    });\r\n                }\r\n            }\r\n            for (var i = this.dataItems.length - 1; i > this.endIndex; i--) {\r\n                var dataItem = this.dataItems.getIndex(i);\r\n                if (dataItem) {\r\n                    dataItem.bullets.each(function (key, bullet) {\r\n                        bullet.__disabled = true;\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        this.updateTooltipBounds();\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Series.prototype.updateTooltipBounds = function () {\r\n        if (this.topParent) {\r\n            this.tooltip.setBounds({ x: 0, y: 0, width: this.topParent.maxWidth, height: this.topParent.maxHeight });\r\n        }\r\n    };\r\n    /**\r\n     * Validates data item's element, effectively redrawing it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {SeriesDataItem}  dataItem  Data item\r\n     */\r\n    Series.prototype.validateDataElement = function (dataItem) {\r\n        var _this = this;\r\n        _super.prototype.validateDataElement.call(this, dataItem);\r\n        if (this._showBullets) {\r\n            this.bulletsContainer.visible = true;\r\n            $iter.each(this.bullets.iterator(), function (bulletTemplate) {\r\n                // always better to use the same, this helps to avoid redrawing\r\n                var bullet = dataItem.bullets.getKey(bulletTemplate.uid);\r\n                if (!bullet) {\r\n                    bullet = bulletTemplate.clone();\r\n                    dataItem.addSprite(bullet);\r\n                    if (!_this.visible || _this.isHiding) {\r\n                        bullet.hide(0);\r\n                    }\r\n                }\r\n                var currentDataItem = bullet.dataItem;\r\n                if (currentDataItem != dataItem) {\r\n                    // set to undefined in order not to reuse\r\n                    if (currentDataItem) {\r\n                        currentDataItem.bullets.setKey(bulletTemplate.uid, undefined);\r\n                    }\r\n                    // Add accessibility to bullet\r\n                    var readerText_1 = _this.itemReaderText || (\"{\" + bullet.xField + \"}: {\" + bullet.yField + \"}\");\r\n                    if (bullet.focusable) {\r\n                        bullet.events.once(\"focus\", function (ev) {\r\n                            bullet.readerTitle = _this.populateString(readerText_1, bullet.dataItem);\r\n                        }, undefined, false);\r\n                        bullet.events.once(\"blur\", function (ev) {\r\n                            bullet.readerTitle = \"\";\r\n                        }, undefined, false);\r\n                    }\r\n                    if (bullet.hoverable) {\r\n                        bullet.events.once(\"over\", function (ev) {\r\n                            bullet.readerTitle = _this.populateString(readerText_1, bullet.dataItem);\r\n                        }, undefined, false);\r\n                        bullet.events.once(\"out\", function (ev) {\r\n                            bullet.readerTitle = \"\";\r\n                        }, undefined, false);\r\n                    }\r\n                    if (bullet.isDynamic) {\r\n                        dataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n                        //dataItem.events.on(\"calculatedvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n                        _this.dataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n                    }\r\n                    bullet.deepInvalidate();\r\n                }\r\n                bullet.parent = _this.bulletsContainer;\r\n                dataItem.bullets.setKey(bulletTemplate.uid, bullet);\r\n                // pass max w/h so we'd know if we should show/hide somethings\r\n                bullet.maxWidth = dataItem.itemWidth;\r\n                bullet.maxHeight = dataItem.itemHeight;\r\n                bullet.__disabled = false;\r\n                _this.positionBullet(bullet);\r\n            });\r\n        }\r\n        else {\r\n            this.bulletsContainer.visible = false;\r\n        }\r\n    };\r\n    /**\r\n     * [handleDataItemWorkingValueChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Series.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\r\n        if (!this.dataRangeInvalid) {\r\n            this.invalidateProcessedData();\r\n        }\r\n    };\r\n    Object.defineProperty(Series.prototype, \"ignoreMinMax\", {\r\n        /**\r\n         * @return {boolean} Exclude from calculations?\r\n         */\r\n        get: function () {\r\n            return this._ignoreMinMax;\r\n        },\r\n        /**\r\n         * Should this series excluded from the axis scale calculations?\r\n         *\r\n         * @default false\r\n         * @param {boolean}  value  Exclude from calculations?\r\n         */\r\n        set: function (value) {\r\n            this._ignoreMinMax = value;\r\n            this.invalidateDataItems();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Create a mask for the series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Series.prototype.createMask = function () {\r\n        // A placeholder method for extending classes to override.\r\n    };\r\n    /**\r\n     * Process axis range after it has been added to the list.\r\n     *\r\n     * @param {IListEvents<AxisDataItem>[\"inserted\"]}  event  Event\r\n     */\r\n    Series.prototype.processAxisRange = function (event) {\r\n        // create container if not existing\r\n        if (!this.rangesContainer) {\r\n            this.rangesContainer = this.createChild(Container);\r\n            this.rangesContainer.shouldClone = false;\r\n            this.rangesContainer.isMeasured = false;\r\n        }\r\n        var axisRange = event.newValue;\r\n        if (axisRange) {\r\n            axisRange.contents.parent = this.rangesContainer;\r\n            axisRange.isRange = true;\r\n        }\r\n    };\r\n    /**\r\n     * [getAxisField description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param  {Axis}    axis  [description]\r\n     * @return {string}        [description]\r\n     */\r\n    Series.prototype.getAxisField = function (axis) {\r\n        return;\r\n    };\r\n    /**\r\n     * Shows the tooltip at specific position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {number}  xPosition  X\r\n     * @param {number}  yPosition  Y\r\n     */\r\n    Series.prototype.showTooltipAtPosition = function (xPosition, yPosition) {\r\n        // Placeholder method for extending classes to override.\r\n    };\r\n    Object.defineProperty(Series.prototype, \"minBulletDistance\", {\r\n        /**\r\n         * @return {number} Distance (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minBulletDistance\");\r\n        },\r\n        /**\r\n         * Minimal distance between two adjacent bullets in pixels.\r\n         *\r\n         * If bullet is closer, it will be skipped and not shown.\r\n         *\r\n         * This allows to avoid crammed up graphs wil a lot of bullets.\r\n         *\r\n         * @default 0\r\n         * @param {number}  value  Distance (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"minBulletDistance\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Series.prototype, \"bullets\", {\r\n        /**\r\n         * A list of bullets that will be added to each and every items in the\r\n         * series.\r\n         *\r\n         * You can push any object that is a descendant of a [[Bullet]] here. All\r\n         * items added to this list will be copied and used as a bullet on all data\r\n         * items, including their properties, events, etc.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/bullets/} for more info about the concept of Bullets\r\n         * @return {ListTemplate<Bullet>} List of bullets.\r\n         */\r\n        get: function () {\r\n            if (!this._bullets) {\r\n                this._bullets = new ListTemplate(new Bullet());\r\n                this._bullets.template.virtualParent = this;\r\n                this._bullets.events.on(\"inserted\", this.processBullet, this, false);\r\n                this._bullets.events.on(\"removed\", this.removeBullet, this, false);\r\n                this._disposers.push(new ListDisposer(this._bullets));\r\n                this._disposers.push(this._bullets.template);\r\n            }\r\n            return this._bullets;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Binds related legend data item's visual settings to this series' visual\r\n     * settings.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Container}  marker  Legend item container\r\n     */\r\n    Series.prototype.createLegendMarker = function (marker) {\r\n        // This is a placeholder method for extending classes to override.\r\n    };\r\n    Object.defineProperty(Series.prototype, \"hiddenInLegend\", {\r\n        /**\r\n         * @return {boolean} Hidden in legend?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"hiddenInLegend\");\r\n        },\r\n        /**\r\n         * Should the series be hidden in legend?\r\n         *\r\n         * @param {boolean} value Hidden in legend?\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"hiddenInLegend\", value)) {\r\n                if (this.chart) {\r\n                    this.chart.feedLegend();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Series.prototype, \"name\", {\r\n        /**\r\n         * @return {string} Name\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"name\", this._title);\r\n        },\r\n        /**\r\n         * Series' name.\r\n         *\r\n         * @param {string}  value  Name\r\n         */\r\n        set: function (value) {\r\n            this._title = value;\r\n            this.readerTitle = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Series.prototype, \"itemReaderText\", {\r\n        /**\r\n         * @return {string} Screen reader text template\r\n         */\r\n        get: function () {\r\n            // Get explicitly set reader text\r\n            var readerText = this._itemReaderText;\r\n            // Not set? Let's try something else\r\n            if (!readerText) {\r\n                // Tooltip text?\r\n                if (this.tooltipText) {\r\n                    readerText = $utils.plainText(this.tooltipText);\r\n                }\r\n                else if (this.tooltipHTML) {\r\n                    readerText = $utils.plainText(this.tooltipHTML);\r\n                }\r\n            }\r\n            return this.adapter.apply(\"itemReaderText\", readerText);\r\n        },\r\n        /**\r\n         * Screen reader text to be applied to each individual data item, such\r\n         * as bullets, columns or slices.\r\n         *\r\n         * The template can contain field reference meta codes, i.e. `{dateX}`,\r\n         * `{valueY}`, etc.\r\n         *\r\n         * Any text formatting options, e.g. `[bold]` will be ignored.\r\n         *\r\n         * @param {string} value Screen reader text template\r\n         */\r\n        set: function (value) {\r\n            this._itemReaderText = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns if number of data items in the series are beyond non-focusable\r\n     * count and should not be available for TAB-through.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {boolean} Items focusable?\r\n     */\r\n    Series.prototype.itemsFocusable = function () {\r\n        return this.dataItems.length >= this.skipFocusThreshold ? false : true;\r\n    };\r\n    Object.defineProperty(Series.prototype, \"legendDataItem\", {\r\n        /**\r\n         * @return {LegendDataItem<Series, ISeriesEvents>} Data item\r\n         */\r\n        get: function () {\r\n            return this._legendDataItem;\r\n        },\r\n        /**\r\n         * Legend data item that corresponds to this series.\r\n         *\r\n         * @param {LegendDataItem<Series, ISeriesEvents>}  value  Data item\r\n         */\r\n        set: function (value) {\r\n            this._legendDataItem = value;\r\n            this._legendDataItem.itemContainer.deepInvalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates corresponding legend data item with current values.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n     */\r\n    Series.prototype.updateLegendValue = function (dataItem) {\r\n        // if this series has legend item\r\n        if (this.legendDataItem) {\r\n            var legendSettings = this.legendSettings;\r\n            var legendDataItem = this.legendDataItem;\r\n            var label = legendDataItem.label;\r\n            var valueLabel = legendDataItem.valueLabel;\r\n            // update legend\r\n            if (dataItem) {\r\n                if (valueLabel) {\r\n                    if (legendSettings.itemValueText) {\r\n                        valueLabel.text = legendSettings.itemValueText;\r\n                    }\r\n                    valueLabel.dataItem = dataItem;\r\n                }\r\n                if (label) {\r\n                    if (legendSettings.itemLabelText) {\r\n                        label.text = legendSettings.itemLabelText;\r\n                    }\r\n                    label.dataItem = this.dataItem;\r\n                }\r\n            }\r\n            else {\r\n                if (label) {\r\n                    // if itemLabelText is set, means we have to reset label even if labelText is not set\r\n                    if (legendSettings.labelText || legendSettings.itemLabelText != undefined) {\r\n                        label.text = legendSettings.labelText;\r\n                    }\r\n                    label.dataItem = this.dataItem;\r\n                }\r\n                if (valueLabel) {\r\n                    if (legendSettings.valueText || legendSettings.itemValueText != undefined) {\r\n                        valueLabel.text = legendSettings.valueText;\r\n                    }\r\n                    valueLabel.dataItem = this.dataItem;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Copies all properties from another instance of [[Series]].\r\n     *\r\n     * @param {Series}  source  Source series\r\n     */\r\n    Series.prototype.copyFrom = function (source) {\r\n        this.bullets.copyFrom(source.bullets);\r\n        this.bulletsContainer.copyFrom(source.bulletsContainer);\r\n        this.calculatePercent = source.calculatePercent;\r\n        _super.prototype.copyFrom.call(this, source);\r\n    };\r\n    /**\r\n     * Displays a modal or console message with error, and halts any further\r\n     * processing of this element.\r\n     *\r\n     * @param {Error} e Error\r\n     */\r\n    Series.prototype.raiseCriticalError = function (e) {\r\n        this._chart.modal.content = e.message;\r\n        this._chart.modal.closable = false;\r\n        this._chart.modal.open();\r\n        this._chart.disabled = true;\r\n        if (options.verbose) {\r\n            console.log(e);\r\n        }\r\n    };\r\n    /**\r\n     * Applies filters to the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Series.prototype.applyFilters = function () {\r\n        var _this = this;\r\n        _super.prototype.applyFilters.call(this);\r\n        this.bulletsContainer.filters.clear();\r\n        // copyFrom of a list copies, does not clone\r\n        $iter.each(this.filters.iterator(), function (filter) {\r\n            _this.bulletsContainer.filters.push(filter.clone());\r\n        });\r\n    };\r\n    Object.defineProperty(Series.prototype, \"heatRules\", {\r\n        /**\r\n         * @todo Description\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._heatRules) {\r\n                this._heatRules = new List();\r\n                this._heatRules.events.on(\"inserted\", function (event) {\r\n                    var heatRule = event.newValue;\r\n                    var target = heatRule.target;\r\n                    if (target) {\r\n                        var dataField_1 = heatRule.dataField;\r\n                        if (!$type.hasValue(dataField_1)) {\r\n                            dataField_1 = \"value\";\r\n                        }\r\n                        var min_1 = heatRule.min;\r\n                        var max_1 = heatRule.max;\r\n                        var seriesDataItem_1 = _this.dataItem;\r\n                        var property_1 = heatRule.property;\r\n                        var minValue = $type.toNumber(heatRule.minValue);\r\n                        var maxValue = $type.toNumber(heatRule.maxValue);\r\n                        if (!$type.isNumber(minValue) && !$type.isNumber(maxValue)) {\r\n                            _this.dataItem.events.on(\"calculatedvaluechanged\", function (event) {\r\n                                if (event.property == dataField_1) {\r\n                                    $iter.each(_this.dataItems.iterator(), function (dataItem) {\r\n                                        var foundSprite = false;\r\n                                        $array.each(dataItem.sprites, function (sprite) {\r\n                                            if (sprite.clonedFrom == target) {\r\n                                                var anySprite = sprite;\r\n                                                anySprite[property_1] = anySprite[property_1];\r\n                                                foundSprite = true;\r\n                                            }\r\n                                        });\r\n                                        if (!foundSprite) {\r\n                                            $array.each(dataItem.sprites, function (sprite) {\r\n                                                if (sprite instanceof Container) {\r\n                                                    $iter.each(sprite.children.iterator(), function (child) {\r\n                                                        if (child.className == target.className) {\r\n                                                            var anyChild = child;\r\n                                                            anyChild[property_1] = anyChild[property_1];\r\n                                                        }\r\n                                                        // giveup here\r\n                                                        else if (child instanceof Container) {\r\n                                                            child.deepInvalidate();\r\n                                                        }\r\n                                                    });\r\n                                                }\r\n                                            });\r\n                                        }\r\n                                    });\r\n                                }\r\n                            });\r\n                        }\r\n                        _this.dataItems.template.events.on(\"workingvaluechanged\", function (event) {\r\n                            if (event.property == dataField_1) {\r\n                                var dataItem = event.target;\r\n                                var foundSprite_1 = false;\r\n                                $array.each(dataItem.sprites, function (sprite) {\r\n                                    if (sprite.clonedFrom == target) {\r\n                                        var anySprite = sprite;\r\n                                        anySprite[property_1] = anySprite[property_1];\r\n                                        foundSprite_1 = true;\r\n                                    }\r\n                                });\r\n                                if (!foundSprite_1) {\r\n                                    $array.each(dataItem.sprites, function (sprite) {\r\n                                        if (sprite instanceof Container) {\r\n                                            $iter.each(sprite.children.iterator(), function (child) {\r\n                                                if (child.className == target.className) {\r\n                                                    var anyChild = child;\r\n                                                    anyChild[property_1] = anyChild[property_1];\r\n                                                }\r\n                                                // givup here\r\n                                                else if (child instanceof Container) {\r\n                                                    child.deepInvalidate();\r\n                                                }\r\n                                            });\r\n                                        }\r\n                                    });\r\n                                }\r\n                            }\r\n                        });\r\n                        target.adapter.add(property_1, function (value, ruleTarget, property) {\r\n                            var minValue = $type.toNumber(heatRule.minValue);\r\n                            var maxValue = $type.toNumber(heatRule.maxValue);\r\n                            if (ruleTarget instanceof Sprite) {\r\n                                var anySprite = ruleTarget;\r\n                                var propertyField = anySprite.propertyFields[property];\r\n                                if (propertyField && ruleTarget.dataItem) {\r\n                                    var dataContext = ruleTarget.dataItem.dataContext;\r\n                                    if (dataContext && $type.hasValue(dataContext[propertyField])) {\r\n                                        return value;\r\n                                    }\r\n                                }\r\n                            }\r\n                            var dataItem = ruleTarget.dataItem;\r\n                            if (!$type.isNumber(minValue)) {\r\n                                minValue = seriesDataItem_1.values[dataField_1].low;\r\n                            }\r\n                            if (!$type.isNumber(maxValue)) {\r\n                                maxValue = seriesDataItem_1.values[dataField_1].high;\r\n                            }\r\n                            if (dataItem) {\r\n                                var fieldValues = dataItem.values[dataField_1];\r\n                                if (fieldValues) {\r\n                                    var workingValue = fieldValues.workingValue;\r\n                                    if ($type.hasValue(min_1) && $type.hasValue(max_1) && $type.isNumber(minValue) && $type.isNumber(maxValue) && $type.isNumber(workingValue)) {\r\n                                        var percent = (workingValue - minValue) / (maxValue - minValue);\r\n                                        if ($type.isNumber(workingValue) && !$type.isNumber(percent)) {\r\n                                            percent = 0.5;\r\n                                        }\r\n                                        // fixes problems if all values are the same\r\n                                        if ($type.isNumber(min_1)) {\r\n                                            return min_1 + (max_1 - min_1) * percent;\r\n                                        }\r\n                                        else if (min_1 instanceof Color) {\r\n                                            return new Color($colors.interpolate(min_1.rgb, max_1.rgb, percent));\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            return value;\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            return this._heatRules;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {object}  config  Config\r\n     */\r\n    Series.prototype.processConfig = function (config) {\r\n        var heatRules;\r\n        if (config) {\r\n            // Set up bullets\r\n            if ($type.hasValue(config.bullets) && $type.isArray(config.bullets)) {\r\n                for (var i = 0, len = config.bullets.length; i < len; i++) {\r\n                    var bullets = config.bullets[i];\r\n                    if (!$type.hasValue(bullets.type)) {\r\n                        bullets.type = \"Bullet\";\r\n                    }\r\n                }\r\n            }\r\n            // Let's take heatRules out of the config, so that we can process\r\n            // them later, when bullets are already there\r\n            if ($type.hasValue(config.heatRules) && $type.isArray(config.heatRules)) {\r\n                heatRules = config.heatRules;\r\n                delete config.heatRules;\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n        // Process heat rules again, when all other elements are ready\r\n        if (heatRules) {\r\n            for (var i = 0, len = heatRules.length; i < len; i++) {\r\n                var rule = heatRules[i];\r\n                // Resolve target\r\n                var target = this;\r\n                if ($type.hasValue(rule.target) && $type.isString(rule.target)) {\r\n                    // Check if we can find this element by id\r\n                    if (this.map.hasKey(rule.target)) {\r\n                        target = this.map.getKey(rule.target);\r\n                    }\r\n                    else {\r\n                        var parts = rule.target.split(\".\");\r\n                        for (var x = 0; x < parts.length; x++) {\r\n                            if (target instanceof List) {\r\n                                var listitem = target.getIndex($type.toNumber(parts[x]));\r\n                                if (!listitem) {\r\n                                    target = target[parts[x]];\r\n                                }\r\n                                else {\r\n                                    target = listitem;\r\n                                }\r\n                            }\r\n                            else {\r\n                                target = target[parts[x]];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                rule.target = target;\r\n                // Resolve colors and percents\r\n                if ($type.hasValue(rule.min)) {\r\n                    rule.min = this.maybeColorOrPercent(rule.min);\r\n                }\r\n                if ($type.hasValue(rule.max)) {\r\n                    rule.max = this.maybeColorOrPercent(rule.max);\r\n                }\r\n            }\r\n            _super.prototype.processConfig.call(this, {\r\n                heatRules: heatRules\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Returns visibility value\r\n     * @ignore\r\n     */\r\n    /*\r\n        protected getVisibility(): boolean {\r\n            let hidden = this.getPropertyValue(\"hidden\");\r\n            if (hidden) {\r\n                return false;\r\n            }\r\n            else {\r\n                return super.getVisibility();\r\n            }\r\n        }*/\r\n    /**\r\n     * This function is used to sort element's JSON config properties, so that\r\n     * some properties that absolutely need to be processed last, can be put at\r\n     * the end.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}  a  Element 1\r\n     * @param  {string}  b  Element 2\r\n     * @return {Ordering}   Sorting number\r\n     */\r\n    Series.prototype.configOrder = function (a, b) {\r\n        if (a == b) {\r\n            return 0;\r\n        }\r\n        // Must come last\r\n        else if (a == \"heatRules\") {\r\n            return 1;\r\n        }\r\n        else if (b == \"heatRules\") {\r\n            return -1;\r\n        }\r\n        else {\r\n            return _super.prototype.configOrder.call(this, a, b);\r\n        }\r\n    };\r\n    return Series;\r\n}(Component));\r\nexport { Series };\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Series\"] = Series;\r\nregistry.registeredClasses[\"SeriesDataItem\"] = SeriesDataItem;\r\n//# sourceMappingURL=Series.js.map","/**\r\n * Step line series module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem } from \"./LineSeries\";\r\nimport { StepLineSeriesSegment } from \"./StepLineSeriesSegment\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar StepLineSeriesDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(StepLineSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function StepLineSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"StepLineSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return StepLineSeriesDataItem;\r\n}(LineSeriesDataItem));\r\nexport { StepLineSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar StepLineSeries = /** @class */ (function (_super) {\r\n    tslib_1.__extends(StepLineSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function StepLineSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"StepLineSeries\";\r\n        _this.applyTheme();\r\n        _this.startLocation = 0;\r\n        _this.endLocation = 1;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return {StepLineSeriesDataItem} Data Item\r\n     */\r\n    StepLineSeries.prototype.createDataItem = function () {\r\n        return new StepLineSeriesDataItem();\r\n    };\r\n    /**\r\n     * [addPoints description]\r\n     *\r\n     * @todo Description\r\n     * @param {IPoint[]}           points     [description]\r\n     * @param {this[\"_dataItem\"]}  dataItem   [description]\r\n     * @param {string}             xField     [description]\r\n     * @param {string}             yField     [description]\r\n     * @param {boolean}            backwards  [description]\r\n     */\r\n    StepLineSeries.prototype.addPoints = function (points, dataItem, xField, yField, backwards) {\r\n        var startLocation = this.startLocation;\r\n        var endLocation = this.endLocation;\r\n        var x0 = this.xAxis.getX(dataItem, xField, startLocation);\r\n        var y0 = this.yAxis.getY(dataItem, yField, startLocation);\r\n        var x1 = this.xAxis.getX(dataItem, xField, endLocation);\r\n        var y1 = this.yAxis.getY(dataItem, yField, endLocation);\r\n        x0 = $math.fitToRange(x0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n        y0 = $math.fitToRange(y0, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n        x1 = $math.fitToRange(x1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n        y1 = $math.fitToRange(y1, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n        // this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n        if (!this.noRisers && this.connect) {\r\n            if (points.length > 1) {\r\n                var prevPoint = points[points.length - 1];\r\n                if (this.baseAxis == this.xAxis) {\r\n                    if (backwards) {\r\n                        points.push({ x: prevPoint.x, y: y1 });\r\n                    }\r\n                    else {\r\n                        points.push({ x: x0, y: prevPoint.y });\r\n                    }\r\n                }\r\n                if (this.baseAxis == this.yAxis) {\r\n                    if (backwards) {\r\n                        points.push({ x: x1, y: prevPoint.y });\r\n                    }\r\n                    else {\r\n                        points.push({ x: prevPoint.x, y: y0 });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        var point0 = { x: x0, y: y0 };\r\n        var point1 = { x: x1, y: y1 };\r\n        if (backwards) {\r\n            points.push(point1, point0);\r\n        }\r\n        else {\r\n            points.push(point0, point1);\r\n        }\r\n    };\r\n    /**\r\n     * Draws the line segment.\r\n     *\r\n     * @param {LineSeriesSegment}  segment     Segment\r\n     * @param {IPoint[]}           points      Segment points\r\n     * @param {IPoint[]}           closePoints Segment close points\r\n     */\r\n    StepLineSeries.prototype.drawSegment = function (segment, points, closePoints) {\r\n        var vertical = false;\r\n        if (this.yAxis == this.baseAxis) {\r\n            vertical = true;\r\n        }\r\n        segment.drawSegment(points, closePoints, this.tensionX, this.tensionY, this.noRisers, vertical);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    StepLineSeries.prototype.createSegment = function () {\r\n        return new StepLineSeriesSegment();\r\n    };\r\n    Object.defineProperty(StepLineSeries.prototype, \"noRisers\", {\r\n        /**\r\n         * @return {boolean} No risers\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"noRisers\");\r\n        },\r\n        /**\r\n         * Specifies if step line series should draw only horizontal (or only\r\n         * vertical, depending on base axis) lines, instead of connecting them with\r\n         * vertical (or horizontal) lines.\r\n         *\r\n         * @default false\r\n         * @param {boolean}  value  No risers\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"noRisers\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StepLineSeries.prototype, \"startLocation\", {\r\n        /**\r\n         * @return {number} Location (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startLocation\");\r\n        },\r\n        /**\r\n         * start location of the step\r\n         *\r\n         * @param {number} value Location (0-1)\r\n         * @default 0\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startLocation\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StepLineSeries.prototype, \"endLocation\", {\r\n        /**\r\n         * @return {number} Location (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endLocation\");\r\n        },\r\n        /**\r\n         * Step end location.\r\n         *\r\n         * @param {number} value Location (0-1)\r\n         * #default 1\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endLocation\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return StepLineSeries;\r\n}(LineSeries));\r\nexport { StepLineSeries };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n//# sourceMappingURL=StepLineSeries.js.map","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nvar StepLineSeriesSegment = /** @class */ (function (_super) {\r\n    tslib_1.__extends(StepLineSeriesSegment, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function StepLineSeriesSegment() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"StepLineSeriesSegment\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the series segment.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IPoint[]}  points       Points to connect\r\n     * @param {IPoint[]}  closePoints  ?\r\n     * @param {number}    smoothnessX  Horizontal bezier setting (?)\r\n     * @param {number}    smoothnessY  Vertical bezier setting (?)\r\n     */\r\n    StepLineSeriesSegment.prototype.drawSegment = function (points, closePoints, smoothnessX, smoothnessY, noRisers, vertical) {\r\n        if (points.length > 0 && closePoints.length > 0) {\r\n            if (noRisers) {\r\n                var path = $path.moveTo(points[0]);\r\n                if (points.length > 0) {\r\n                    for (var i = 1; i < points.length; i++) {\r\n                        var point = points[i];\r\n                        if (i / 2 == Math.round(i / 2)) {\r\n                            path += $path.moveTo(point);\r\n                        }\r\n                        else {\r\n                            path += $path.lineTo(point);\r\n                        }\r\n                    }\r\n                }\r\n                this.strokeSprite.path = path;\r\n                if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n                    path = $path.moveTo(points[0]) + $path.polyline(points);\r\n                    path += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n                    path += $path.lineTo(points[0]);\r\n                    path += $path.closePath();\r\n                    this.fillSprite.path = path;\r\n                }\r\n                else {\r\n                }\r\n            }\r\n            else {\r\n                var path = $path.moveTo(points[0]) + $path.polyline(points);\r\n                this.strokeSprite.path = path;\r\n                if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n                    path += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n                    path += $path.lineTo(points[0]);\r\n                    path += $path.closePath();\r\n                    this.fillSprite.path = path;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return StepLineSeriesSegment;\r\n}(LineSeriesSegment));\r\nexport { StepLineSeriesSegment };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;\r\n//# sourceMappingURL=StepLineSeriesSegment.js.map","/**\r\n * TreeMap series module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar TreeMapSeriesDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(TreeMapSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function TreeMapSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"TreeMapSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(TreeMapSeriesDataItem.prototype, \"parentName\", {\r\n        /**\r\n         * Data for the this particular item.\r\n         *\r\n         * @param {Object}  value  Item's data\r\n         */\r\n        //public set dataContext(value: Object) {\r\n        //\tthis._dataContext = value;\r\n        //}\r\n        /**\r\n         * @return {Object} Item's data\r\n         */\r\n        /*\r\n       public get dataContext(): Object {\r\n           // It's because data of tree series is TreeMapDataItems.\r\n           if (this._dataContext) {\r\n               return (<any>this._dataContext).dataContext;\r\n           }\r\n       }*/\r\n        /**\r\n         * The name of the item's parent item.\r\n         *\r\n         * @return {string} Parent name\r\n         */\r\n        get: function () {\r\n            var treeMapDataItem = this.treeMapDataItem;\r\n            if (treeMapDataItem && treeMapDataItem.parent) {\r\n                return treeMapDataItem.parent.name;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapSeriesDataItem.prototype, \"value\", {\r\n        /**\r\n         * Item's numeric value.\r\n         *\r\n         * @readonly\r\n         * @return {number} Value\r\n         */\r\n        get: function () {\r\n            return this.treeMapDataItem.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapSeriesDataItem.prototype, \"treeMapDataItem\", {\r\n        /**\r\n         * A corresponding data item from the tree map.\r\n         *\r\n         * @readonly\r\n         * @return {TreeMapDataItem} Data item\r\n         */\r\n        get: function () {\r\n            return this._dataContext;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return TreeMapSeriesDataItem;\r\n}(ColumnSeriesDataItem));\r\nexport { TreeMapSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar TreeMapSeries = /** @class */ (function (_super) {\r\n    tslib_1.__extends(TreeMapSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function TreeMapSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"TreeMapSeries\";\r\n        _this.applyTheme();\r\n        _this.fillOpacity = 1;\r\n        _this.strokeOpacity = 1;\r\n        _this.minBulletDistance = 0;\r\n        _this.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n        _this.columns.template.configField = \"config\";\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.stroke = interfaceColors.getFor(\"background\");\r\n        _this.dataFields.openValueX = \"x0\";\r\n        _this.dataFields.valueX = \"x1\";\r\n        _this.dataFields.openValueY = \"y0\";\r\n        _this.dataFields.valueY = \"y1\";\r\n        _this.sequencedInterpolation = false;\r\n        _this.showOnInit = false;\r\n        // otherwise nodes don't stack nicely to each other\r\n        _this.columns.template.pixelPerfect = false;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Processes data item.\r\n     *\r\n     * @param {TreeMapSeriesDataItem}  dataItem     Data item\r\n     * @param {Object}                 dataContext  Raw data\r\n     * @param {number}                 index        Index of the data item\r\n     */\r\n    TreeMapSeries.prototype.processDataItem = function (dataItem, dataContext) {\r\n        dataContext.seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n        _super.prototype.processDataItem.call(this, dataItem, dataContext);\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return {TreeMapSeriesDataItem} Data Item\r\n     */\r\n    TreeMapSeries.prototype.createDataItem = function () {\r\n        return new TreeMapSeriesDataItem();\r\n    };\r\n    /**\r\n     * Shows series.\r\n     *\r\n     * @param  {number}     duration  Duration of fade in (ms)\r\n     * @return {Animation}            Animation\r\n     */\r\n    TreeMapSeries.prototype.show = function (duration) {\r\n        var interpolationDuration = this.defaultState.transitionDuration;\r\n        if ($type.isNumber(duration)) {\r\n            interpolationDuration = duration;\r\n        }\r\n        this.dataItems.each(function (dataItem) {\r\n            dataItem.treeMapDataItem.setWorkingValue(\"value\", dataItem.treeMapDataItem.values.value.value);\r\n        });\r\n        var animation = _super.prototype.showReal.call(this, interpolationDuration);\r\n        var chart = this.chart;\r\n        if (chart) {\r\n            if (animation && !animation.isFinished()) {\r\n                animation.events.on(\"animationended\", function () {\r\n                    chart.invalidateLayout();\r\n                });\r\n            }\r\n            else {\r\n                chart.invalidateLayout();\r\n            }\r\n            chart.invalidateLayout();\r\n        }\r\n        return animation;\r\n    };\r\n    /**\r\n     * Hides series.\r\n     *\r\n     * @param  {number}     duration  Duration of fade out (ms)\r\n     * @return {Animation}            Animation\r\n     */\r\n    TreeMapSeries.prototype.hide = function (duration) {\r\n        var interpolationDuration = this.defaultState.transitionDuration;\r\n        if ($type.isNumber(duration)) {\r\n            interpolationDuration = duration;\r\n        }\r\n        var animation = _super.prototype.hideReal.call(this, interpolationDuration);\r\n        this.dataItems.each(function (dataItem) {\r\n            dataItem.treeMapDataItem.setWorkingValue(\"value\", 0);\r\n        });\r\n        var chart = this.chart;\r\n        if (chart) {\r\n            if (animation && !animation.isFinished()) {\r\n                animation.events.on(\"animationended\", function () {\r\n                    chart.invalidateLayout();\r\n                });\r\n            }\r\n            else {\r\n                chart.invalidateLayout();\r\n            }\r\n            chart.invalidateLayout();\r\n        }\r\n        return animation;\r\n    };\r\n    /**\r\n     * Process values.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    TreeMapSeries.prototype.processValues = function () {\r\n        // Just overriding so that inherited method does not kick in.\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    TreeMapSeries.prototype.dataChangeUpdate = function () {\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {object}  config  Config\r\n     */\r\n    TreeMapSeries.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Add empty data fields if the they are not set, so that XYSeries\r\n            // dataField check does not result in error.\r\n            if (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n                config.dataFields = {};\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    /**\r\n     * Creates elements in related legend container, that mimics the look of this\r\n     * Series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Container}  marker  Legend item container\r\n     */\r\n    TreeMapSeries.prototype.createLegendMarker = function (marker) {\r\n        var w = marker.pixelWidth;\r\n        var h = marker.pixelHeight;\r\n        marker.removeChildren();\r\n        var column = marker.createChild(RoundedRectangle);\r\n        column.shouldClone = false;\r\n        $object.copyProperties(this, column, visualProperties);\r\n        //column.copyFrom(<any>this.columns.template);\r\n        column.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n        column.width = w;\r\n        column.height = h;\r\n        var legendDataItem = marker.dataItem;\r\n        legendDataItem.color = column.fill;\r\n        legendDataItem.colorOrig = column.fill;\r\n    };\r\n    return TreeMapSeries;\r\n}(ColumnSeries));\r\nexport { TreeMapSeries };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n//# sourceMappingURL=TreeMapSeries.js.map","/**\r\n * XY series module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem } from \"./Series\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar XYSeriesDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(XYSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function XYSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"XYSeriesDataItem\";\r\n        _this.values.valueX = { stack: 0 };\r\n        _this.values.valueY = { stack: 0 };\r\n        _this.values.openValueX = {};\r\n        _this.values.openValueY = {};\r\n        _this.values.dateX = {};\r\n        _this.values.dateY = {};\r\n        _this.values.openDateX = {};\r\n        _this.values.openDateY = {};\r\n        _this.setLocation(\"dateX\", 0.5, 0);\r\n        _this.setLocation(\"dateY\", 0.5, 0);\r\n        _this.setLocation(\"categoryX\", 0.5, 0);\r\n        _this.setLocation(\"categoryY\", 0.5, 0);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"valueX\", {\r\n        /**\r\n         * @return {number} Value\r\n         */\r\n        get: function () {\r\n            return this.values.valueX.value;\r\n        },\r\n        /**\r\n         * Item's numeric value on X value axis.\r\n         *\r\n         * @param {number}  value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"valueX\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"valueY\", {\r\n        /**\r\n         * @return {number} Value\r\n         */\r\n        get: function () {\r\n            return this.values.valueY.value;\r\n        },\r\n        /**\r\n         * Item's numeric value on Y value axis.\r\n         *\r\n         * @param {number}  value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"valueY\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"dateX\", {\r\n        /**\r\n         * @return {Date} Date\r\n         */\r\n        get: function () {\r\n            return this.getDate(\"dateX\");\r\n        },\r\n        /**\r\n         * Item's date value on X date-based axis.\r\n         *\r\n         * @param {Date}  date  Date\r\n         */\r\n        set: function (date) {\r\n            this.setDate(\"dateX\", date);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"dateY\", {\r\n        /**\r\n         * @return {Date} Date\r\n         */\r\n        get: function () {\r\n            return this.getDate(\"dateY\");\r\n        },\r\n        /**\r\n         * Item's date value on Y date-based axis.\r\n         *\r\n         * @param {Date}  date  Date\r\n         */\r\n        set: function (date) {\r\n            this.setDate(\"dateY\", date);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"categoryX\", {\r\n        /**\r\n         * @return {string} Category\r\n         */\r\n        get: function () {\r\n            return this.categories.categoryX;\r\n        },\r\n        /**\r\n         * Item's category on X category axis.\r\n         *\r\n         * @param {string}  category  Category\r\n         */\r\n        set: function (category) {\r\n            this.setCategory(\"categoryX\", category);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"categoryY\", {\r\n        /**\r\n         * @return {string} Category\r\n         */\r\n        get: function () {\r\n            return this.categories.categoryY;\r\n        },\r\n        /**\r\n         * Item's category on Y category axis.\r\n         *\r\n         * @param {string}  category  Category\r\n         */\r\n        set: function (category) {\r\n            this.setCategory(\"categoryY\", category);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"openValueX\", {\r\n        /**\r\n         * @return {number} Value\r\n         */\r\n        get: function () {\r\n            return this.values.openValueX.value;\r\n        },\r\n        /**\r\n         * Item's open numeric value on X value axis.\r\n         *\r\n         * @param {number}  value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"openValueX\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"openValueY\", {\r\n        /**\r\n         * @return {number} Value\r\n         */\r\n        get: function () {\r\n            return this.values.openValueY.value;\r\n        },\r\n        /**\r\n         * Item's open numeric value on Y value axis.\r\n         *\r\n         * @param {number}  value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"openValueY\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"openDateX\", {\r\n        /**\r\n         * @return {Date} Date\r\n         */\r\n        get: function () {\r\n            return this.getDate(\"openDateX\");\r\n        },\r\n        /**\r\n         * Item's open date value on X date-based axis.\r\n         *\r\n         * @param {Date}  date  Date\r\n         */\r\n        set: function (date) {\r\n            this.setDate(\"openDateX\", date);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"openDateY\", {\r\n        /**\r\n         * @return {Date} Date\r\n         */\r\n        get: function () {\r\n            return this.getDate(\"openDateY\");\r\n        },\r\n        /**\r\n         * Item's open date value on Y date-based axis.\r\n         *\r\n         * @param {Date}  date  Date\r\n         */\r\n        set: function (date) {\r\n            this.setDate(\"openDateY\", date);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"openCategoryX\", {\r\n        /**\r\n         * @return {string} Category\r\n         */\r\n        get: function () {\r\n            return this.categories.openCategoryX;\r\n        },\r\n        /**\r\n         * Item's open category on X category axis.\r\n         *\r\n         * @param {string}  category  Category\r\n         */\r\n        set: function (category) {\r\n            this.setProperty(\"openCategoryX\", category);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeriesDataItem.prototype, \"openCategoryY\", {\r\n        /**\r\n         * @return {string} Category\r\n         */\r\n        get: function () {\r\n            return this.categories.openCategoryY;\r\n        },\r\n        /**\r\n         * Item's open category on Y category axis.\r\n         *\r\n         * @param {string}  category  Category\r\n         */\r\n        set: function (category) {\r\n            this.setProperty(\"openCategoryY\", category);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Return smallest value out of all item's value fields.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string[]}  fields      Fields to check in\r\n     * @param  {boolean}   working     Include working (temporary) values\r\n     * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n     * @return {number}                Value\r\n     */\r\n    XYSeriesDataItem.prototype.getMin = function (fields, working, stackValue) {\r\n        var _this = this;\r\n        //if (this.visible) {  // dumped because of non smooth zooming\r\n        var min;\r\n        if (!$type.isNumber(stackValue)) {\r\n            stackValue = 0;\r\n        }\r\n        $array.each(fields, function (field) {\r\n            var value;\r\n            if (working) {\r\n                value = _this.getWorkingValue(field);\r\n            }\r\n            else {\r\n                value = _this.getValue(field);\r\n            }\r\n            value += stackValue;\r\n            if (value < min || !$type.isNumber(min)) {\r\n                min = value;\r\n            }\r\n        });\r\n        return min;\r\n        //}\r\n    };\r\n    /**\r\n     * Return biggest value out of all item's value fields.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string[]}  fields      Fields to check in\r\n     * @param  {boolean}   working     Include working (temporary) values\r\n     * @param  {number}    stackValue  If item is in a stack, the value item starts as\r\n     * @return {number}                Value\r\n     */\r\n    XYSeriesDataItem.prototype.getMax = function (fields, working, stackValue) {\r\n        var _this = this;\r\n        //if (this.visible) { // dumped because of non smooth zooming\r\n        var max;\r\n        if (!$type.isNumber(stackValue)) {\r\n            stackValue = 0;\r\n        }\r\n        $array.each(fields, function (field) {\r\n            var value;\r\n            if (working) {\r\n                value = _this.getWorkingValue(field);\r\n            }\r\n            else {\r\n                value = _this.getValue(field);\r\n            }\r\n            value += stackValue;\r\n            if (value > max || !$type.isNumber(max)) {\r\n                max = value;\r\n            }\r\n        });\r\n        return max;\r\n        //}\r\n    };\r\n    return XYSeriesDataItem;\r\n}(SeriesDataItem));\r\nexport { XYSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nvar XYSeries = /** @class */ (function (_super) {\r\n    tslib_1.__extends(XYSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function XYSeries() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * X axis the series is attached to.\r\n         *\r\n         * @type {MutableValueDisposer}\r\n         */\r\n        _this._xAxis = new MutableValueDisposer();\r\n        /**\r\n         * Y axis the series is attached to.\r\n         *\r\n         * @type {MutableValueDisposer}\r\n         */\r\n        _this._yAxis = new MutableValueDisposer();\r\n        /**\r\n         * [_xValueFields description]\r\n         *\r\n         * @todo Description\r\n         * @type {Array<string>}\r\n         */\r\n        _this._xValueFields = [];\r\n        /**\r\n         * [_yValueFields description]\r\n         *\r\n         * @todo Description\r\n         * @type {Array<string>}\r\n         */\r\n        _this._yValueFields = [];\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this._baseInterval = {};\r\n        _this.className = \"XYSeries\";\r\n        _this.isMeasured = false;\r\n        _this.cursorTooltipEnabled = true;\r\n        _this.mainContainer.mask = new Sprite();\r\n        _this.mainContainer.mask.setElement(_this.paper.add(\"path\"));\r\n        _this.stacked = false;\r\n        _this.snapTooltip = false;\r\n        _this.tooltip.pointerOrientation = \"horizontal\";\r\n        _this.tooltip.events.on(\"hidden\", function () {\r\n            _this.returnBulletDefaultState();\r\n        }, undefined, false);\r\n        _this._disposers.push(_this._xAxis);\r\n        _this._disposers.push(_this._yAxis);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    XYSeries.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"X/Y Series\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return {XYSeriesDataItem} Data Item\r\n     */\r\n    XYSeries.prototype.createDataItem = function () {\r\n        return new XYSeriesDataItem();\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYSeries.prototype.dataChangeUpdate = function () {\r\n        this._tmin.clear();\r\n        this._tmax.clear();\r\n        this._smin.clear();\r\n        this._smax.clear();\r\n        if (this.xAxis) {\r\n            this.xAxis.seriesDataChangeUpdate(this);\r\n        }\r\n        if (this.yAxis) {\r\n            this.yAxis.seriesDataChangeUpdate(this);\r\n        }\r\n    };\r\n    /**\r\n     * (Re)validates the series' data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYSeries.prototype.validateData = function () {\r\n        this.defineFields();\r\n        if (this.data.length > 0) {\r\n            this.dataChangeUpdate();\r\n        }\r\n        _super.prototype.validateData.call(this);\r\n        this.updateItemReaderText();\r\n        if (!$type.hasValue(this.dataFields[this._xField]) || !$type.hasValue(this.dataFields[this._yField])) {\r\n            throw Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n        }\r\n    };\r\n    /**\r\n     * Processes data item.\r\n     *\r\n     * @param {XYSeriesDataItem}  dataItem     Data item\r\n     * @param {Object}            dataContext  Raw data\r\n     * @param {number}            index        Index of the data item\r\n     */\r\n    XYSeries.prototype.processDataItem = function (dataItem, dataContext) {\r\n        try {\r\n            _super.prototype.processDataItem.call(this, dataItem, dataContext);\r\n            dataItem.events.disable();\r\n            this.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n            this.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n            dataItem.events.enable();\r\n            this.setInitialWorkingValues(dataItem);\r\n        }\r\n        catch (e) {\r\n            this._chart.raiseCriticalError(e);\r\n        }\r\n    };\r\n    /**\r\n     * Inits data item's working values.\r\n     *\r\n     * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n     * @param {number}             index     Data item's index\r\n     */\r\n    XYSeries.prototype.setInitialWorkingValues = function (dataItem) {\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYSeries.prototype.disposeData = function () {\r\n        _super.prototype.disposeData.call(this);\r\n        if (this.xAxis) {\r\n            var dataItemsX = this.dataItemsByAxis.getKey(this.xAxis.uid);\r\n            if (dataItemsX) {\r\n                dataItemsX.clear();\r\n            }\r\n        }\r\n        if (this.yAxis) {\r\n            var dataItemsY = this.dataItemsByAxis.getKey(this.yAxis.uid);\r\n            if (dataItemsY) {\r\n                dataItemsY.clear();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets up which data fields to use for data access.\r\n     */\r\n    XYSeries.prototype.defineFields = function () {\r\n        var xAxis = this.xAxis;\r\n        var yAxis = this.yAxis;\r\n        var xAxisFieldName = xAxis.axisFieldName;\r\n        var xField = (xAxisFieldName + \"X\");\r\n        var xOpenField = (\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n        var yAxisFieldName = yAxis.axisFieldName;\r\n        var yField = (yAxisFieldName + \"Y\");\r\n        var yOpenField = (\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n        this._xField = xField;\r\n        this._yField = yField;\r\n        if (this.dataFields[xOpenField]) {\r\n            this._xOpenField = xOpenField;\r\n        }\r\n        if (this.dataFields[yOpenField]) {\r\n            this._yOpenField = yOpenField;\r\n        }\r\n        if (!this.dataFields[yOpenField] && this.baseAxis == this.yAxis) {\r\n            this._yOpenField = yField;\r\n        }\r\n        if (!this.dataFields[xOpenField] && this.baseAxis == this.xAxis) {\r\n            this._xOpenField = xField;\r\n        }\r\n        if (this.stacked && this.baseAxis == this.xAxis) {\r\n            this._xOpenField = xField;\r\n        }\r\n        if (this.stacked && this.baseAxis == this.yAxis) {\r\n            this._yOpenField = yField;\r\n        }\r\n        if ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n            if (!this._yOpenField) {\r\n                this._yOpenField = yField;\r\n            }\r\n        }\r\n        this._xValueFields = [];\r\n        this._yValueFields = [];\r\n        this.addValueField(this.xAxis, this._xValueFields, this._xField);\r\n        this.addValueField(this.xAxis, this._xValueFields, this._xOpenField);\r\n        this.addValueField(this.yAxis, this._yValueFields, this._yField);\r\n        this.addValueField(this.yAxis, this._yValueFields, this._yOpenField);\r\n    };\r\n    /**\r\n     * [axis description]\r\n     *\r\n     * @todo Description\r\n     * @param {Axis}        axis    Axis\r\n     * @param {Array<Key>}  fields  Fields (?)\r\n     * @param {Key}         field   Field\r\n     */\r\n    XYSeries.prototype.addValueField = function (axis, fields, field) {\r\n        if (axis instanceof ValueAxis) {\r\n            if ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n                fields.push(field);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets category field from the category axis.\r\n     *\r\n     * User might set field for category axis only, but not for series. In such\r\n     * case, we take field value from axis and set it for series.\r\n     *\r\n     * @param {Key}           field  Field\r\n     * @param {CategoryAxis}  axis   Axis\r\n     */\r\n    XYSeries.prototype.setCategoryAxisField = function (field, axis) {\r\n        if (!$type.hasValue(this.dataFields[field])) {\r\n            this.dataFields[field] = axis.dataFields.category;\r\n        }\r\n    };\r\n    /**\r\n     * Sets date field from the date axis.\r\n     *\r\n     * User might set field for category axis only, but not for series. In such\r\n     * case, we take field value from axis and set it for series.\r\n     *\r\n     * @param {Key}       field  Field\r\n     * @param {DateAxis}  axis   Axis\r\n     */\r\n    XYSeries.prototype.setDateAxisField = function (field, axis) {\r\n        if (!$type.hasValue(this.dataFields[field])) {\r\n            this.dataFields[field] = axis.dataFields.date;\r\n        }\r\n    };\r\n    /**\r\n     * Performs after-draw tasks, e.g. creates masks.\r\n     */\r\n    XYSeries.prototype.afterDraw = function () {\r\n        _super.prototype.afterDraw.call(this);\r\n        this.createMask();\r\n    };\r\n    /**\r\n     * Create a mask for the series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYSeries.prototype.createMask = function () {\r\n        // this mask from which we cut out ranges. does not work well if ranges overlap.\r\n        if (this.mainContainer.mask) {\r\n            var path_1 = this.getMaskPath();\r\n            // @todo: this approach won't work well on circluar or other non x/y axes\r\n            $iter.each(this.axisRanges.iterator(), function (range) {\r\n                if (range.axisFill.fillPath) {\r\n                    range.axisFill.validate();\r\n                    path_1 += range.axisFill.fillPath;\r\n                }\r\n            });\r\n            this.mainContainer.mask.path = path_1;\r\n        }\r\n    };\r\n    /**\r\n     * Returns an SVG path to use as series mask.\r\n     *\r\n     * @return {string} SVG path\r\n     */\r\n    XYSeries.prototype.getMaskPath = function () {\r\n        return $path.rectToPath({\r\n            x: 0,\r\n            y: 0,\r\n            width: this.xAxis.axisLength,\r\n            height: this.yAxis.axisLength\r\n        });\r\n    };\r\n    /**\r\n     * Returns axis data field to use.\r\n     *\r\n     * @param  {Axis}    axis  Axis\r\n     * @return {string}        Field name\r\n     */\r\n    XYSeries.prototype.getAxisField = function (axis) {\r\n        if (axis == this.xAxis) {\r\n            return this.xField;\r\n        }\r\n        if (axis == this.yAxis) {\r\n            return this.yField;\r\n        }\r\n    };\r\n    /**\r\n     * Validates data items.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYSeries.prototype.validateDataItems = function () {\r\n        // this helps date axis to check which baseInterval we should use\r\n        this.xAxis.updateAxisBySeries();\r\n        this.yAxis.updateAxisBySeries();\r\n        _super.prototype.validateDataItems.call(this);\r\n        this.xAxis.postProcessSeriesDataItems();\r\n        this.yAxis.postProcessSeriesDataItems();\r\n    };\r\n    /**\r\n     * Validates data range.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYSeries.prototype.validateDataRange = function () {\r\n        if (this.xAxis.dataRangeInvalid) {\r\n            this.xAxis.validateDataRange();\r\n        }\r\n        if (this.yAxis.dataRangeInvalid) {\r\n            this.yAxis.validateDataRange();\r\n        }\r\n        _super.prototype.validateDataRange.call(this);\r\n    };\r\n    /**\r\n     * (Re)validates the whole series, effectively causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYSeries.prototype.validate = function () {\r\n        if (this.xAxis.invalid) {\r\n            this.xAxis.validate();\r\n        }\r\n        if (this.yAxis.invalid) {\r\n            this.yAxis.validate();\r\n        }\r\n        this._showBullets = true;\r\n        var minBulletDistance = this.minBulletDistance;\r\n        if ($type.isNumber(minBulletDistance)) {\r\n            if (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n                this._showBullets = false;\r\n            }\r\n        }\r\n        _super.prototype.validate.call(this);\r\n    };\r\n    Object.defineProperty(XYSeries.prototype, \"xAxis\", {\r\n        /**\r\n         * @return {Axis} Axis\r\n         */\r\n        get: function () {\r\n            if (this.chart) {\r\n                if (!this._xAxis.get()) {\r\n                    var axis = this.chart.xAxes.getIndex(0);\r\n                    if (!axis) {\r\n                        throw Error(\"There are no X axes on chart.\");\r\n                    }\r\n                    this.xAxis = axis;\r\n                }\r\n                return this._xAxis.get();\r\n            }\r\n        },\r\n        /**\r\n         * X axis the series is attached to.\r\n         *\r\n         * @param {Axis}  axis  Axis\r\n         */\r\n        set: function (axis) {\r\n            var oldAxis = this._xAxis.get();\r\n            if (oldAxis != axis) {\r\n                if (oldAxis) {\r\n                    this.dataItemsByAxis.removeKey(oldAxis.uid);\r\n                    // TODO why is this here ?\r\n                    this._xAxis.dispose();\r\n                    // temp @todo: why it is not disposed?\r\n                    oldAxis.series.removeValue(this);\r\n                }\r\n                this._xAxis.set(axis, axis.registerSeries(this));\r\n                this.dataItemsByAxis.setKey(axis.uid, new Dictionary());\r\n                this.invalidateData();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeries.prototype, \"yAxis\", {\r\n        /**\r\n         * @return {Axis} Axis\r\n         */\r\n        get: function () {\r\n            if (this.chart) {\r\n                if (!this._yAxis.get()) {\r\n                    var axis = this.chart.yAxes.getIndex(0);\r\n                    if (!axis) {\r\n                        throw Error(\"There are no Y axes on chart.\");\r\n                    }\r\n                    this.yAxis = axis;\r\n                }\r\n                return this._yAxis.get();\r\n            }\r\n        },\r\n        /**\r\n         * Y axis the series is attached to.\r\n         *\r\n         * @param {Axis}  axis  Axis\r\n         */\r\n        set: function (axis) {\r\n            var oldAxis = this._yAxis.get();\r\n            if (oldAxis != axis) {\r\n                if (oldAxis) {\r\n                    this.dataItemsByAxis.removeKey(oldAxis.uid);\r\n                    // TODO why is this here ?\r\n                    this._yAxis.dispose();\r\n                    // temp @todo: why it is not disposed?\r\n                    oldAxis.series.removeValue(this);\r\n                }\r\n                this._yAxis.set(axis, axis.registerSeries(this));\r\n                this.dataItemsByAxis.setKey(axis.uid, new Dictionary());\r\n                this.invalidateData();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeries.prototype, \"baseAxis\", {\r\n        /**\r\n         * @return {Axis} Axis\r\n         */\r\n        get: function () {\r\n            if (!this._baseAxis) {\r\n                if (this.yAxis instanceof DateAxis) {\r\n                    this._baseAxis = this.yAxis;\r\n                }\r\n                if (this.xAxis instanceof DateAxis) {\r\n                    this._baseAxis = this.xAxis;\r\n                }\r\n                if (this.yAxis instanceof CategoryAxis) {\r\n                    this._baseAxis = this.yAxis;\r\n                }\r\n                if (this.xAxis instanceof CategoryAxis) {\r\n                    this._baseAxis = this.xAxis;\r\n                }\r\n                if (!this._baseAxis) {\r\n                    this._baseAxis = this.xAxis;\r\n                }\r\n            }\r\n            return this._baseAxis;\r\n        },\r\n        /**\r\n         * The main (base) axis.\r\n         *\r\n         * This is the axis that series fills will go to, or grow animations will\r\n         * happen from.\r\n         *\r\n         * @param {Axis}  value  Axis\r\n         */\r\n        set: function (value) {\r\n            if (this._baseAxis != value) {\r\n                this._baseAxis = value;\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Processes values after data items' were added.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {OrderedListTemplate<this[\"_dataItem\"]>}  dataItems  Data items\r\n     */\r\n    XYSeries.prototype.processValues = function (working) {\r\n        // todo: if this is stacked, ensure that series to which this one can be stacked are processed before.\r\n        _super.prototype.processValues.call(this, working);\r\n        var dataItems = this.dataItems;\r\n        var minX = Infinity;\r\n        var maxX = -Infinity;\r\n        var minY = Infinity;\r\n        var maxY = -Infinity;\r\n        var startIndex = this.startIndex;\r\n        var endIndex = this.endIndex;\r\n        if (!working) {\r\n            startIndex = 0;\r\n            endIndex = this.dataItems.length;\r\n        }\r\n        for (var i = startIndex; i < endIndex; i++) {\r\n            var dataItem = dataItems.getIndex(i);\r\n            this.getStackValue(dataItem, working);\r\n            var stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n            var stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n            minX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n            minY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n            maxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n            maxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n            // if it's stacked, pay attention to stack value\r\n            if (this.stacked) {\r\n                if (this.baseAxis == this.xAxis) {\r\n                    minY = $math.min(minY, stackY);\r\n                }\r\n                if (this.baseAxis == this.yAxis) {\r\n                    minX = $math.min(minX, stackX);\r\n                }\r\n            }\r\n        }\r\n        // this is mainly for value axis to calculate total and perecent.total of each series category\r\n        this.xAxis.processSeriesDataItems();\r\n        this.yAxis.processSeriesDataItems();\r\n        var xAxisId = this.xAxis.uid;\r\n        var yAxisId = this.yAxis.uid;\r\n        if (!working) {\r\n            if (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n                this._tmin.setKey(xAxisId, minX);\r\n                this._tmax.setKey(xAxisId, maxX);\r\n                this._tmin.setKey(yAxisId, minY);\r\n                this._tmax.setKey(yAxisId, maxY);\r\n                if (this.stackedSeries) {\r\n                    this.stackedSeries.processValues(false);\r\n                }\r\n                this.dispatchImmediately(\"extremeschanged\");\r\n            }\r\n        }\r\n        if (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n            this._smin.setKey(xAxisId, minX);\r\n            this._smax.setKey(xAxisId, maxX);\r\n            this._smin.setKey(yAxisId, minY);\r\n            this._smax.setKey(yAxisId, maxY);\r\n            if (this.appeared) {\r\n                this.dispatchImmediately(\"selectionextremeschanged\");\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Hides element's [[Tooltip]].\r\n     *\r\n     * @see {@link Tooltip}\r\n     */\r\n    XYSeries.prototype.hideTooltip = function () {\r\n        _super.prototype.hideTooltip.call(this);\r\n        this.returnBulletDefaultState();\r\n        this._prevTooltipDataItem = undefined;\r\n    };\r\n    /**\r\n     * Shows series tooltip at specific position.\r\n     *\r\n     * @param {number}  xPosition  X\r\n     * @param {number}  yPosition  Y\r\n     */\r\n    XYSeries.prototype.showTooltipAtPosition = function (xPosition, yPosition) {\r\n        if (this.cursorTooltipEnabled) {\r\n            var dataItem = void 0;\r\n            if (this.visible && !this.isHiding && !this.isShowing) {\r\n                var xAxis = this._xAxis.get();\r\n                var yAxis = this._yAxis.get();\r\n                if (xAxis == this.baseAxis) {\r\n                    dataItem = xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition), this.snapTooltip);\r\n                }\r\n                if (yAxis == this.baseAxis) {\r\n                    dataItem = yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition), this.snapTooltip);\r\n                }\r\n                var point = this.showTooltipAtDataItem(dataItem);\r\n                if (point) {\r\n                    return point;\r\n                }\r\n                // so that if tooltip is shown on columns or bullets for it not to be hidden\r\n                if (!this.tooltipText) {\r\n                    return;\r\n                }\r\n            }\r\n            this.hideTooltip();\r\n        }\r\n    };\r\n    /**\r\n     * Shows series tooltip at specific dataItem.\r\n     *\r\n     * @param {this[\"_dataItem\"]}  dataItem\r\n     */\r\n    XYSeries.prototype.showTooltipAtDataItem = function (dataItem) {\r\n        this.returnBulletDefaultState(dataItem);\r\n        if (dataItem && dataItem.visible) {\r\n            this.updateLegendValue(dataItem);\r\n            this.tooltipDataItem = dataItem;\r\n            // todo: add tooltipXField and tooltipYField.\r\n            var tooltipXField = this.tooltipXField;\r\n            var tooltipYField = this.tooltipYField;\r\n            if ($type.hasValue(dataItem[tooltipXField]) && $type.hasValue(dataItem[tooltipYField])) {\r\n                var tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, dataItem.locations[tooltipXField], dataItem.locations[tooltipYField]);\r\n                if (tooltipPoint) {\r\n                    this.tooltipX = tooltipPoint.x;\r\n                    this.tooltipY = tooltipPoint.y;\r\n                    if (this._prevTooltipDataItem != dataItem) {\r\n                        this.dispatchImmediately(\"tooltipshownat\", {\r\n                            type: \"tooltipshownat\",\r\n                            target: this,\r\n                            dataItem: dataItem\r\n                        });\r\n                        this._prevTooltipDataItem = dataItem;\r\n                    }\r\n                    try {\r\n                        for (var _a = tslib_1.__values(dataItem.bullets), _b = _a.next(); !_b.done; _b = _a.next()) {\r\n                            var a = _b.value;\r\n                            var bullet = a[1];\r\n                            bullet.isHover = true;\r\n                        }\r\n                    }\r\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n                    finally {\r\n                        try {\r\n                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\r\n                        }\r\n                        finally { if (e_1) throw e_1.error; }\r\n                    }\r\n                    if (this.showTooltip()) {\r\n                        return $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        var e_1, _c;\r\n    };\r\n    /**\r\n     * returns default state to bullets when tooltip is shown at some other data item or hidden\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYSeries.prototype.returnBulletDefaultState = function (dataItem) {\r\n        if (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\r\n            try {\r\n                for (var _a = tslib_1.__values(this._prevTooltipDataItem.bullets), _b = _a.next(); !_b.done; _b = _a.next()) {\r\n                    var a = _b.value;\r\n                    var bullet = a[1];\r\n                    if (!bullet.isDisposed()) {\r\n                        bullet.isHover = false;\r\n                    }\r\n                    else {\r\n                        this._prevTooltipDataItem = undefined;\r\n                    }\r\n                }\r\n            }\r\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\r\n                }\r\n                finally { if (e_2) throw e_2.error; }\r\n            }\r\n        }\r\n        var e_2, _c;\r\n    };\r\n    /**\r\n     * Positions series bullet.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Bullet}  bullet  Bullet\r\n     */\r\n    XYSeries.prototype.positionBullet = function (bullet) {\r\n        _super.prototype.positionBullet.call(this, bullet);\r\n        var dataItem = bullet.dataItem;\r\n        // use series xField/yField if bullet doesn't have fields set\r\n        var xField = bullet.xField;\r\n        if (!$type.hasValue(xField)) {\r\n            xField = this.xField;\r\n        }\r\n        var yField = bullet.yField;\r\n        if (!$type.hasValue(yField)) {\r\n            yField = this.yField;\r\n        }\r\n        if ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n            bullet.visible = false;\r\n        }\r\n        else {\r\n            var bulletLocationX = this.getBulletLocationX(bullet, xField);\r\n            var bulletLocationY = this.getBulletLocationY(bullet, yField);\r\n            var point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n            if (point) {\r\n                var x = point.x;\r\n                var y = point.y;\r\n                if ($type.isNumber(bullet.locationX) && this.xOpenField != this.xField) {\r\n                    var openX = this.xAxis.getX(dataItem, this.xOpenField);\r\n                    x = x - (x - openX) * bullet.locationX;\r\n                }\r\n                if ($type.isNumber(bullet.locationY) && this.yOpenField != this.yField) {\r\n                    var openY = this.yAxis.getY(dataItem, this.yOpenField);\r\n                    y = y - (y - openY) * bullet.locationY;\r\n                }\r\n                bullet.moveTo({ x: x, y: y });\r\n            }\r\n            else {\r\n                bullet.visible = false;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n    * returns bullet x location\r\n    * @ignore\r\n    */\r\n    XYSeries.prototype.getBulletLocationX = function (bullet, field) {\r\n        var bulletLocation = bullet.locationX;\r\n        var dataItem = bullet.dataItem;\r\n        if (!$type.isNumber(bulletLocation)) {\r\n            bulletLocation = dataItem.workingLocations[field];\r\n        }\r\n        return bulletLocation;\r\n    };\r\n    /**\r\n    * returns bullet x location\r\n    * @ignore\r\n    */\r\n    XYSeries.prototype.getBulletLocationY = function (bullet, field) {\r\n        var bulletLocation = bullet.locationY;\r\n        var dataItem = bullet.dataItem;\r\n        if (!$type.isNumber(bulletLocation)) {\r\n            bulletLocation = dataItem.workingLocations[field];\r\n        }\r\n        return bulletLocation;\r\n    };\r\n    Object.defineProperty(XYSeries.prototype, \"stacked\", {\r\n        /**\r\n         * @return {boolean} Can be stacked?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"stacked\");\r\n        },\r\n        /**\r\n         * Can items from this series be included into stacks?\r\n         *\r\n         * @default false\r\n         * @param {boolean}  stacked  Can be stacked?\r\n         */\r\n        set: function (stacked) {\r\n            this.setPropertyValue(\"stacked\", stacked, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeries.prototype, \"snapTooltip\", {\r\n        /**\r\n         * @return {boolean} Should snap?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"snapTooltip\");\r\n        },\r\n        /**\r\n         * Should the nearest tooltip be shown if no data item is found on the\r\n         * current cursor position?\r\n         *\r\n         * @default false\r\n         * @param {boolean}  value  Should snap?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"snapTooltip\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Shows hidden series.\r\n     *\r\n     * @param  {number}     duration  Duration of reveal animation (ms)\r\n     * @return {Animation}            Animation\r\n     */\r\n    XYSeries.prototype.show = function (duration) {\r\n        var _this = this;\r\n        var fields;\r\n        if (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n            fields = this._xValueFields;\r\n        }\r\n        if (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n            fields = this._yValueFields;\r\n        }\r\n        var startIndex = this.startIndex;\r\n        var endIndex = this.endIndex;\r\n        var delay = 0;\r\n        var interpolationDuration = this.defaultState.transitionDuration;\r\n        if ($type.isNumber(duration)) {\r\n            interpolationDuration = duration;\r\n        }\r\n        var anim;\r\n        $iter.each($iter.indexed(this.dataItems.iterator()), function (a) {\r\n            var i = a[0];\r\n            var dataItem = a[1];\r\n            if (_this.sequencedInterpolation && interpolationDuration > 0) {\r\n                delay = _this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n            }\r\n            anim = dataItem.show(interpolationDuration, delay, fields);\r\n        });\r\n        var animation = _super.prototype.show.call(this, duration);\r\n        if (anim && !anim.isFinished()) {\r\n            animation = anim;\r\n        }\r\n        return animation;\r\n    };\r\n    /**\r\n     * Hides series.\r\n     *\r\n     * @param  {number}     duration  Duration of hiding animation (ms)\r\n     * @return {Animation}            Animation\r\n     */\r\n    XYSeries.prototype.hide = function (duration) {\r\n        var _this = this;\r\n        var fields;\r\n        var value;\r\n        var xAxis = this.xAxis;\r\n        if (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n            fields = this._xValueFields;\r\n            // animate to zero if 0 is within zoomMin/zoomMax\r\n            if (this.stacked || (xAxis.minZoomed < 0 && xAxis.maxZoomed > 0) || this.stackedSeries) {\r\n                value = 0;\r\n            }\r\n            else {\r\n                value = xAxis.min;\r\n            }\r\n        }\r\n        var yAxis = this.yAxis;\r\n        if (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n            fields = this._yValueFields;\r\n            // animate to zero if 0 is within zoomMin/zoomMax\r\n            if (this.stacked || (yAxis.minZoomed < 0 && yAxis.maxZoomed > 0) || this.stackedSeries) {\r\n                value = 0;\r\n            }\r\n            else {\r\n                value = yAxis.min;\r\n            }\r\n        }\r\n        //if ($type.hasValue(fields)) {\r\n        var startIndex = this.startIndex;\r\n        var endIndex = this.endIndex;\r\n        var interpolationDuration = this.hiddenState.transitionDuration;\r\n        if ($type.isNumber(duration)) {\r\n            interpolationDuration = duration;\r\n        }\r\n        var delay = 0;\r\n        var anim;\r\n        $iter.each($iter.indexed(this.dataItems.iterator()), function (a) {\r\n            var i = a[0];\r\n            var dataItem = a[1];\r\n            if (interpolationDuration == 0) {\r\n                dataItem.hide(0, 0, value, fields);\r\n            }\r\n            else {\r\n                if (_this.sequencedInterpolation && interpolationDuration > 0) {\r\n                    delay = _this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n                }\r\n                anim = dataItem.hide(interpolationDuration, delay, value, fields);\r\n            }\r\n        });\r\n        var animation = _super.prototype.hide.call(this, interpolationDuration);\r\n        if (animation && !animation.isFinished()) {\r\n            animation.delay(delay);\r\n        }\r\n        if (anim && !anim.isFinished()) {\r\n            animation = anim;\r\n        }\r\n        // helps to avoid flicker. otherwise columns will show up at full size and only on next frame will animate from 0\r\n        this.validateDataElements();\r\n        //}\r\n        return animation;\r\n    };\r\n    /**\r\n     * [handleDataItemWorkingValueChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYSeries.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\r\n        _super.prototype.handleDataItemWorkingValueChange.call(this, dataItem, name);\r\n        // to calculate stack values\r\n        var axisSeries = this.baseAxis.series;\r\n        $iter.each(axisSeries.iterator(), function (series) {\r\n            if (series.stacked) {\r\n                series.invalidateProcessedData();\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * [getStackValue description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param {this[\"_dataItem\"]}  dataItem  Data item\r\n     */\r\n    XYSeries.prototype.getStackValue = function (dataItem, working) {\r\n        // todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n        // if this series is not stacked or new stack begins, return.\r\n        var _this = this;\r\n        if (!this.stacked) {\r\n            return;\r\n        }\r\n        else {\r\n            // it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n            var chart = this.chart;\r\n            var index = chart.series.indexOf(this);\r\n            var field_1;\r\n            if (this.xAxis != this.baseAxis && this.xAxis instanceof ValueAxis) {\r\n                field_1 = this.xField;\r\n            }\r\n            if (this.yAxis != this.baseAxis && this.yAxis instanceof ValueAxis) {\r\n                field_1 = this.yField;\r\n            }\r\n            //this is good for removing series, otherwise stack values will remain the same and chart won't pay atention when adding/removing series\r\n            dataItem.setCalculatedValue(field_1, 0, \"stack\");\r\n            $iter.eachContinue(chart.series.range(0, index).backwards().iterator(), function (prevSeries) {\r\n                // stacking is only possible if both axes are the same\r\n                if (prevSeries.xAxis == _this.xAxis && prevSeries.yAxis == _this.yAxis) {\r\n                    // saving value\r\n                    prevSeries.stackedSeries = _this;\r\n                    var prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n                    if (prevDataItem && prevDataItem.hasValue(_this._xValueFields) && prevDataItem.hasValue(_this._yValueFields)) {\r\n                        var value = dataItem.getValue(field_1);\r\n                        var prevValue = void 0;\r\n                        if (working) {\r\n                            prevValue = prevDataItem.getWorkingValue(field_1) + prevDataItem.getValue(field_1, \"stack\");\r\n                        }\r\n                        else {\r\n                            prevValue = prevDataItem.getValue(field_1) + prevDataItem.getValue(field_1, \"stack\");\r\n                        }\r\n                        if ((value >= 0 && prevValue >= 0) || (value < 0 && prevValue < 0)) {\r\n                            //dataItem.events.disable();\r\n                            dataItem.setCalculatedValue(field_1, prevValue, \"stack\");\r\n                            //dataItem.events.enable();\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else if (!prevSeries.stacked) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            });\r\n        }\r\n    };\r\n    Object.defineProperty(XYSeries.prototype, \"xField\", {\r\n        /**\r\n         * [xField description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @return {string} [description]\r\n         */\r\n        get: function () {\r\n            return this._xField;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeries.prototype, \"yField\", {\r\n        /**\r\n         * [yField description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @return {string} [description]\r\n         */\r\n        get: function () {\r\n            return this._yField;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeries.prototype, \"xOpenField\", {\r\n        /**\r\n         * [xOpenField description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @return {string} [description]\r\n         */\r\n        get: function () {\r\n            return this._xOpenField;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeries.prototype, \"yOpenField\", {\r\n        /**\r\n         * [yOpenField description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @return {string} [description]\r\n         */\r\n        get: function () {\r\n            return this._yOpenField;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeries.prototype, \"tooltipXField\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @return {string} [description]\r\n         */\r\n        get: function () {\r\n            if (this._tooltipXField) {\r\n                return this._tooltipXField;\r\n            }\r\n            return this._xField;\r\n        },\r\n        /**\r\n         * [tooltipXField description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @param {string} value [description]\r\n         */\r\n        set: function (value) {\r\n            this._tooltipXField = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYSeries.prototype, \"tooltipYField\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @return {string} [description]\r\n         */\r\n        get: function () {\r\n            if (this._tooltipYField) {\r\n                return this._tooltipYField;\r\n            }\r\n            return this._yField;\r\n        },\r\n        /**\r\n         * [tooltipYField description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @param {string} value [description]\r\n         */\r\n        set: function (value) {\r\n            this._tooltipYField = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns lowest value in the series for the specific axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {ValueAxis}  axis  Axis\r\n     * @return {number}           value\r\n     */\r\n    XYSeries.prototype.min = function (axis) {\r\n        return this._tmin.getKey(axis.uid);\r\n    };\r\n    /**\r\n     * Returns highest value in the series for the specific axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {ValueAxis}  axis  Axis\r\n     * @return {number}           value\r\n     */\r\n    XYSeries.prototype.max = function (axis) {\r\n        return this._tmax.getKey(axis.uid);\r\n    };\r\n    /**\r\n     * Returns lowest value in the series for the specific axis within current\r\n     * selection.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {ValueAxis}  axis  Axis\r\n     * @return {number}           value\r\n     */\r\n    XYSeries.prototype.selectionMin = function (axis) {\r\n        var value = this._smin.getKey(axis.uid);\r\n        if (!$type.isNumber(value)) {\r\n            value = this.min(axis);\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Returns highest value in the series for the specific axis within current\r\n     * selection.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {ValueAxis}  axis  Axis\r\n     * @return {number}           value\r\n     */\r\n    XYSeries.prototype.selectionMax = function (axis) {\r\n        var value = this._smax.getKey(axis.uid);\r\n        if (!$type.isNumber(value)) {\r\n            value = this.max(axis);\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {object}  config  Config\r\n     */\r\n    XYSeries.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Set up axes\r\n            if ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n                if (this.map.hasKey(config.xAxis)) {\r\n                    config.xAxis = this.map.getKey(config.xAxis);\r\n                }\r\n                else {\r\n                    this.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`.\");\r\n                    delete config.xAxis;\r\n                }\r\n            }\r\n            if ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n                if (this.map.hasKey(config.yAxis)) {\r\n                    config.yAxis = this.map.getKey(config.yAxis);\r\n                }\r\n                else {\r\n                    this.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`.\");\r\n                    delete config.yAxis;\r\n                }\r\n            }\r\n            // Set up axis ranges\r\n            if ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n                for (var i = 0, len = config.axisRanges.length; i < len; i++) {\r\n                    var range = config.axisRanges[i];\r\n                    if (!$type.hasValue(range.type)) {\r\n                        range.type = \"AxisDataItem\";\r\n                    }\r\n                    if ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n                        range.component = this.map.getKey(range.axis);\r\n                    }\r\n                    else if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n                        range.component = this.map.getKey(range.component);\r\n                    }\r\n                }\r\n            }\r\n            // Parse date fields based on the series fields\r\n            if (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n                this.processingErrors.push(\"`dataFields` is not set for series [\" + (this.name || \"unnamed\") + \"]\");\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    /**\r\n     * [getPoint description]\r\n     *\r\n     * @todo Description\r\n     * @param {XYSeriesDataItem}  dataItem   [description]\r\n     * @param {string}          xKey       [description]\r\n     * @param {string}          yKey       [description]\r\n     * @param {number}          locationX  [description]\r\n     * @param {number}          locationY  [description]\r\n     * @param {string}          stackKeyX  [description]\r\n     * @param {string}          stackKeyY  [description]\r\n     */\r\n    XYSeries.prototype.getPoint = function (dataItem, xKey, yKey, locationX, locationY, stackKeyX, stackKeyY) {\r\n        var x = this.xAxis.getX(dataItem, xKey, locationX);\r\n        var y = this.yAxis.getY(dataItem, yKey, locationY);\r\n        x = $math.fitToRange(x, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n        y = $math.fitToRange(y, -20000, 20000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n        return { x: x, y: y };\r\n    };\r\n    /**\r\n     * Updates item reader text based on the type and set up of axis.\r\n     */\r\n    XYSeries.prototype.updateItemReaderText = function () {\r\n        var text = \"\";\r\n        $object.each(this.dataFields, function (key, val) {\r\n            text += \"{\" + key + \"} \";\r\n        });\r\n        this.itemReaderText = text;\r\n    };\r\n    Object.defineProperty(XYSeries.prototype, \"cursorTooltipEnabled\", {\r\n        /**\r\n         * @return {boolean} Display tooltip?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"cursorTooltipEnabled\");\r\n        },\r\n        /**\r\n         * Indicates if series should display a tooltip for chart's cursor.\r\n         *\r\n         * If set to `true` (default), the tooltips set for all series item's\r\n         * elements like columns and bullets will be automatically shown\r\n         * when [[XYCursor]] passes over category/date, even if its not hovered\r\n         * directly over the item.\r\n         *\r\n         * Set this to `false` to disable such behavior and display item-specific\r\n         * tooltips only when hovered directly over them\r\n         *\r\n         * @default true\r\n         * @param {boolean} value Display tooltip?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"cursorTooltipEnabled\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return XYSeries;\r\n}(Series));\r\nexport { XYSeries };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n//# sourceMappingURL=XYSeries.js.map","/**\r\n * Chord diagram module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { FlowDiagram, FlowDiagramDataItem } from \"./FlowDiagram\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo rearange notes after dragged\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar ChordDiagramDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ChordDiagramDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ChordDiagramDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ChordDiagramDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return ChordDiagramDataItem;\r\n}(FlowDiagramDataItem));\r\nexport { ChordDiagramDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nvar ChordDiagram = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ChordDiagram, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ChordDiagram() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * [valueAngle description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @type {number}\r\n         */\r\n        _this.valueAngle = 0;\r\n        _this.className = \"ChordDiagram\";\r\n        _this.startAngle = -90;\r\n        _this.endAngle = 270;\r\n        _this.radius = percent(80);\r\n        _this.innerRadius = -15;\r\n        _this.nodePadding = 5;\r\n        var chordContainer = _this.chartContainer.createChild(Container);\r\n        chordContainer.align = \"center\";\r\n        chordContainer.valign = \"middle\";\r\n        chordContainer.shouldClone = false;\r\n        chordContainer.layout = \"absolute\";\r\n        _this.chordContainer = chordContainer;\r\n        _this.nodesContainer.parent = chordContainer;\r\n        _this.linksContainer.parent = chordContainer;\r\n        _this.chartContainer.events.on(\"maxsizechanged\", _this.invalidate, _this, false);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Redraws the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ChordDiagram.prototype.validate = function () {\r\n        var _this = this;\r\n        var chartContainer = this.chartContainer;\r\n        var nodesContainer = this.nodesContainer;\r\n        var endAngle = this.endAngle;\r\n        var startAngle = this.startAngle + this.nodePadding / 2;\r\n        var rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n        var innerRect = { x: 0, y: 0, width: 0, height: 0 };\r\n        rect = $math.getCommonRectangle([rect, innerRect]);\r\n        var maxRadius = Math.min(chartContainer.innerWidth / rect.width, chartContainer.innerHeight / rect.height);\r\n        if (!$type.isNumber(maxRadius)) {\r\n            maxRadius = 0;\r\n        }\r\n        var chartRadius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n        var radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n        var pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n        var total = this.dataItem.values.value.sum;\r\n        var count = 0;\r\n        var newTotal = 0;\r\n        $iter.each(this._sorted, function (strNode) {\r\n            var node = strNode[1];\r\n            _this.getNodeValue(node);\r\n            count++;\r\n            var value = node.total;\r\n            if (node.total / total < _this.minNodeSize) {\r\n                value = total * _this.minNodeSize;\r\n            }\r\n            newTotal += value;\r\n        });\r\n        this.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\r\n        $iter.each(this._sorted, function (strNode) {\r\n            var node = strNode[1];\r\n            var slice = node.slice;\r\n            slice.radius = radius;\r\n            slice.innerRadius = pixelInnerRadius;\r\n            var value = node.total;\r\n            if (node.total / total < _this.minNodeSize) {\r\n                value = total * _this.minNodeSize;\r\n            }\r\n            node.adjustedTotal = value;\r\n            var arc;\r\n            if (_this.nonRibbon) {\r\n                arc = (endAngle - _this.startAngle) / count - _this.nodePadding;\r\n            }\r\n            else {\r\n                arc = _this.valueAngle * value;\r\n            }\r\n            slice.arc = arc;\r\n            slice.startAngle = startAngle;\r\n            node.trueStartAngle = startAngle;\r\n            node.parent = _this.nodesContainer;\r\n            node.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\r\n            startAngle += arc + _this.nodePadding;\r\n        });\r\n        this.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n        this.chordContainer.invalidateLayout();\r\n        _super.prototype.validate.call(this);\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    ChordDiagram.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Chord diagram\");\r\n        }\r\n    };\r\n    /**\r\n     * Creates and returns a new data item.\r\n     *\r\n     * @return {this} Data item\r\n     */\r\n    ChordDiagram.prototype.createDataItem = function () {\r\n        return new ChordDiagramDataItem();\r\n    };\r\n    Object.defineProperty(ChordDiagram.prototype, \"startAngle\", {\r\n        /**\r\n         * @return {number} Start angle (degrees)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * Starting angle of the Radar face. (degrees)\r\n         *\r\n         * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n         * top center. (at -90 degrees)\r\n         *\r\n         * You can use `startAngle` to change this setting.\r\n         *\r\n         * E.g. setting this to 0 will make the radial axis start horizontally to\r\n         * the right, as opposed to vertical.\r\n         *\r\n         * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n         * needs to be 360.\r\n         *\r\n         * However, it's **not** necessary to do so. You can set those to lesser\r\n         * numbers, to create semi-circles.\r\n         *\r\n         * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n         * looks like a quarter of a circle.\r\n         *\r\n         * @default -90\r\n         * @param {number}  value  Start angle (degrees)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ChordDiagram.prototype, \"endAngle\", {\r\n        /**\r\n         * @return {number} End angle (degrees)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endAngle\");\r\n        },\r\n        /**\r\n         * Starting angle of the Radar face. (degrees)\r\n         *\r\n         * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n         * where it has started, forming a full 360 circle. (at 270 degrees)\r\n         *\r\n         * You can use `endAngle` to end the circle somewhere else.\r\n         *\r\n         * E.g. setting this to 180 will make the radar face end at horizontal line\r\n         * to the left off the center.\r\n         *\r\n         * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n         * needs to be 360.\r\n         *\r\n         * However, it's **not** necessary to do so. You can set those to lesser\r\n         * numbers, to create semi-circles.\r\n         *\r\n         * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n         * looks like a quarter of a circle.\r\n         *\r\n         * @default -90\r\n         * @param {number}  value  End angle (degrees)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ChordDiagram.prototype, \"radius\", {\r\n        /**\r\n         * @return {number} Outer radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Outer radius of the Radar face.\r\n         *\r\n         * This can either be in absolute pixel value, or relative [[Percent]].\r\n         *\r\n         * @param {number | Percent}  value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ChordDiagram.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return {number} Inner radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius of the Chord nodes.\r\n         *\r\n         * This can either be in absolute pixel value, or relative [[Percent]].\r\n         *\r\n         * @param {number | Percent}  value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ChordDiagram.prototype, \"nonRibbon\", {\r\n        /**\r\n         * @return {boolean} Non-ribbon\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"nonRibbon\");\r\n        },\r\n        /**\r\n         *\r\n         * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n         *\r\n         * @param {boolean}  value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"nonRibbon\", value, true);\r\n            this.links.template.middleLine.strokeOpacity = 1;\r\n            this.links.template.link.fillOpacity = 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    ChordDiagram.prototype.createNode = function () {\r\n        var node = new ChordNode();\r\n        this._disposers.push(node);\r\n        return node;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    ChordDiagram.prototype.createLink = function () {\r\n        var link = new ChordLink();\r\n        this._disposers.push(link);\r\n        return link;\r\n    };\r\n    return ChordDiagram;\r\n}(FlowDiagram));\r\nexport { ChordDiagram };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n//# sourceMappingURL=ChordDiagram.js.map","/**\r\n * FlowDiagram module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, ChartDataItem } from \"../Chart\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { FlowDiagramNode } from \"../elements/FlowDiagramNode\";\r\nimport { FlowDiagramLink } from \"../elements/FlowDiagramLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo rearange notes after dragged\r\n/**\r\n * Defines a [[DataItem]] for [[FlowDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar FlowDiagramDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(FlowDiagramDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FlowDiagramDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"FlowDiagramDataItem\";\r\n        _this.values.value = {};\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(FlowDiagramDataItem.prototype, \"fromName\", {\r\n        /**\r\n         * @return {string} name\r\n         */\r\n        get: function () {\r\n            return this.properties.fromName;\r\n        },\r\n        /**\r\n         * Source node's name.\r\n         *\r\n         * @param {string}  value  Name\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"fromName\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramDataItem.prototype, \"toName\", {\r\n        /**\r\n         * @return {string} name\r\n         */\r\n        get: function () {\r\n            return this.properties.toName;\r\n        },\r\n        /**\r\n         * Destination node's name.\r\n         *\r\n         * @param {string}  value  Name\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"toName\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramDataItem.prototype, \"color\", {\r\n        /**\r\n         * @return {string} color\r\n         */\r\n        get: function () {\r\n            return this.properties.color;\r\n        },\r\n        /**\r\n         * Node color\r\n         *\r\n         * @param {string}  value  Name\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"color\", toColor(value));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramDataItem.prototype, \"value\", {\r\n        /**\r\n         * @return {number} Value\r\n         */\r\n        get: function () {\r\n            return this.values.value.value;\r\n        },\r\n        /**\r\n         * Link's value.\r\n         *\r\n         * @param {number}  value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"value\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramDataItem.prototype, \"link\", {\r\n        /**\r\n         * A visual element, representing link between the source and target nodes.\r\n         *\r\n         * Link's actual thickness will be determined by `value` of this link and\r\n         * `value` of the source node.\r\n         *\r\n         * @readonly\r\n         * @return {FlowDiagramLink} Link element\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._link) {\r\n                var link_1 = this.component.links.create();\r\n                this._link = link_1;\r\n                this.addSprite(link_1);\r\n                this._disposers.push(new Disposer(function () {\r\n                    if (_this.component) {\r\n                        _this.component.links.removeValue(link_1);\r\n                    }\r\n                }));\r\n            }\r\n            return this._link;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return FlowDiagramDataItem;\r\n}(ChartDataItem));\r\nexport { FlowDiagramDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a Pie chart\r\n * @see {@link IFlowDiagramEvents} for a list of available Events\r\n * @see {@link IFlowDiagramAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar FlowDiagram = /** @class */ (function (_super) {\r\n    tslib_1.__extends(FlowDiagram, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FlowDiagram() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * A Color Set to use when applying/generating colors for each subsequent\r\n         * node.\r\n         *\r\n         * @type {ColorSet}\r\n         */\r\n        _this.colors = new ColorSet();\r\n        _this.className = \"FlowDiagram\";\r\n        _this.nodePadding = 20;\r\n        _this.sortBy = \"none\";\r\n        _this.sequencedInterpolation = true;\r\n        _this.colors.step = 2;\r\n        _this.minNodeSize = 0.02;\r\n        var linksContainer = _this.chartContainer.createChild(Container);\r\n        linksContainer.shouldClone = false;\r\n        linksContainer.layout = \"none\";\r\n        linksContainer.isMeasured = false;\r\n        _this.linksContainer = linksContainer;\r\n        var nodesContainer = _this.chartContainer.createChild(Container);\r\n        nodesContainer.shouldClone = false;\r\n        nodesContainer.layout = \"none\";\r\n        nodesContainer.isMeasured = false;\r\n        _this.nodesContainer = nodesContainer;\r\n        // this data item holds sums, averages, etc\r\n        _this.dataItem = _this.createDataItem();\r\n        _this.dataItem.component = _this;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    FlowDiagram.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        this.dataItem.dispose();\r\n    };\r\n    /**\r\n     * (Re)validates chart's data, effectively causing the chart to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    FlowDiagram.prototype.validateData = function () {\r\n        var _this = this;\r\n        if (this._parseDataFrom == 0) {\r\n            this.nodes.clear();\r\n        }\r\n        this.sortNodes();\r\n        this.colors.reset();\r\n        _super.prototype.validateData.call(this);\r\n        var sum = 0;\r\n        var count = 0;\r\n        var low;\r\n        var high;\r\n        // build blocks\r\n        $iter.each(this.dataItems.iterator(), function (dataItem) {\r\n            var fromName = dataItem.fromName;\r\n            if (fromName) {\r\n                var node = _this.nodes.getKey(fromName);\r\n                if (!node) {\r\n                    node = _this.nodes.create(fromName);\r\n                    node.name = fromName;\r\n                    node.chart = _this;\r\n                    node.dataItem = dataItem;\r\n                }\r\n                dataItem.fromNode = node;\r\n                dataItem.fromNode.outgoingDataItems.push(dataItem);\r\n            }\r\n            var toName = dataItem.toName;\r\n            if (toName) {\r\n                var node = _this.nodes.getKey(toName);\r\n                if (!node) {\r\n                    node = _this.nodes.create(toName);\r\n                    node.name = toName;\r\n                    node.chart = _this;\r\n                    node.dataItem = dataItem;\r\n                }\r\n                dataItem.toNode = node;\r\n                dataItem.toNode.incomingDataItems.push(dataItem);\r\n            }\r\n            if (!dataItem.fromNode) {\r\n                var strokeModifier = new LinearGradientModifier();\r\n                strokeModifier.opacities = [0, 1];\r\n                dataItem.link.strokeModifier = strokeModifier;\r\n            }\r\n            if (!dataItem.toNode) {\r\n                var fillModifier = new LinearGradientModifier();\r\n                fillModifier.opacities = [1, 0];\r\n                dataItem.link.strokeModifier = fillModifier;\r\n            }\r\n            var value = dataItem.value;\r\n            if ($type.isNumber(value)) {\r\n                sum += value;\r\n                count++;\r\n                if (low > value || !$type.isNumber(low)) {\r\n                    low = value;\r\n                }\r\n                if (high < value || !$type.isNumber(high)) {\r\n                    high = value;\r\n                }\r\n            }\r\n        });\r\n        var key = \"value\";\r\n        this.dataItem.setCalculatedValue(key, high, \"high\");\r\n        this.dataItem.setCalculatedValue(key, low, \"low\");\r\n        this.dataItem.setCalculatedValue(key, sum, \"sum\");\r\n        this.dataItem.setCalculatedValue(key, sum / count, \"average\");\r\n        this.dataItem.setCalculatedValue(key, count, \"count\");\r\n        $iter.each(this.nodes.iterator(), function (strNode) {\r\n            var node = strNode[1];\r\n            if (node.fill instanceof Color) {\r\n                node.color = node.fill;\r\n            }\r\n            if (node.color == undefined) {\r\n                node.color = _this.colors.next();\r\n            }\r\n            if (node.dataItem.color != undefined) {\r\n                node.color = node.dataItem.color;\r\n            }\r\n            if (!node.dataItem.visible) {\r\n                node.hide(0);\r\n            }\r\n            _this.getNodeValue(node);\r\n        });\r\n        this.sortNodes();\r\n        this.feedLegend();\r\n    };\r\n    /**\r\n     * [handleDataItemWorkingValueChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    FlowDiagram.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\r\n        this.invalidate();\r\n    };\r\n    /**\r\n     * Sorts nodes by either their values or names, based on `sortBy` setting.\r\n     */\r\n    FlowDiagram.prototype.sortNodes = function () {\r\n        if (this.sortBy == \"name\") {\r\n            this._sorted = this.nodes.sortedIterator();\r\n        }\r\n        else if (this.sortBy == \"value\") {\r\n            this._sorted = $iter.sort(this.nodes.iterator(), function (x, y) { return $order.reverse($number.order(x[1].total, y[1].total)); });\r\n        }\r\n        else {\r\n            this._sorted = this.nodes.iterator();\r\n        }\r\n    };\r\n    /**\r\n     * Updates a cummulative value of the node.\r\n     *\r\n     * A node's value is determined by summing values of all of the incoming\r\n     * links or all of the outgoing links, whichever results in bigger number.\r\n     *\r\n     * @param {FlowDiagramNode}  node  Node value\r\n     */\r\n    FlowDiagram.prototype.getNodeValue = function (node) {\r\n        // todo: totalIncomming totalOutgoing, total\r\n        var incomingTotal = 0;\r\n        var outgoingTotal = 0;\r\n        $iter.each(node.incomingDataItems.iterator(), function (dataItem) {\r\n            var value = dataItem.getWorkingValue(\"value\");\r\n            if ($type.isNumber(value)) {\r\n                incomingTotal += value;\r\n            }\r\n        });\r\n        $iter.each(node.outgoingDataItems.iterator(), function (dataItem) {\r\n            var value = dataItem.getWorkingValue(\"value\");\r\n            if ($type.isNumber(value)) {\r\n                outgoingTotal += value;\r\n            }\r\n        });\r\n        node.total = incomingTotal + outgoingTotal;\r\n        node.totalIncoming = incomingTotal;\r\n        node.totalOutgoing = outgoingTotal;\r\n    };\r\n    ;\r\n    /**\r\n     * Changes the sort type of the nodes.\r\n     *\r\n     * This will actually reshuffle nodes using nice animation.\r\n     */\r\n    FlowDiagram.prototype.changeSorting = function () {\r\n        this.sortNodes();\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    FlowDiagram.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Flow diagram\");\r\n        }\r\n    };\r\n    /**\r\n     * Creates and returns a new data item.\r\n     *\r\n     * @return {this} Data item\r\n     */\r\n    FlowDiagram.prototype.createDataItem = function () {\r\n        return new FlowDiagramDataItem();\r\n    };\r\n    Object.defineProperty(FlowDiagram.prototype, \"nodePadding\", {\r\n        /**\r\n         * @return {number} Padding (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"nodePadding\");\r\n        },\r\n        /**\r\n         * Padding for node square in pixels.\r\n         *\r\n         * Padding will add extra space around node's name label.\r\n         *\r\n         * @param {number} value Padding (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"nodePadding\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagram.prototype, \"sortBy\", {\r\n        /**\r\n         * @returns {\"none\" | name\" | \"value\"} Node sorting\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"sortBy\");\r\n        },\r\n        /**\r\n         * Sort nodes by \"name\" or \"value\" or do not sort at all. If not sorted, nodes will appear in the same order as they are in the data.\r\n         * @default \"none\"\r\n         * @param {\"none\" | \"name\" | \"value\"}  value  Node sorting\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"sortBy\", value);\r\n            this.changeSorting();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagram.prototype, \"minNodeSize\", {\r\n        /**\r\n         * @returns {number} min node size\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minNodeSize\");\r\n        },\r\n        /**\r\n         * Sometimes nodes can get very small if their value is little. With this setting you\r\n         * can set min size of a node (this is relative value from the total size of all nodes)\r\n         * @default 0.02\r\n         * @param {\"none\" | \"name\" | \"value\"}  value  Node sorting\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"minNodeSize\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagram.prototype, \"nodes\", {\r\n        /**\r\n         * A list of chart's nodes.\r\n         *\r\n         * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n         */\r\n        get: function () {\r\n            if (!this._nodes) {\r\n                this._nodes = new DictionaryTemplate(this.createNode());\r\n                this._disposers.push(new DictionaryDisposer(this._nodes));\r\n            }\r\n            return this._nodes;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    FlowDiagram.prototype.createNode = function () {\r\n        var node = new FlowDiagramNode();\r\n        this._disposers.push(node);\r\n        return node;\r\n    };\r\n    Object.defineProperty(FlowDiagram.prototype, \"links\", {\r\n        /**\r\n         * A list of chart's links.\r\n         *\r\n         * @param {ListTemplate<this[\"_link\"]>}\r\n         */\r\n        get: function () {\r\n            if (!this._links) {\r\n                this._links = new ListTemplate(this.createLink());\r\n                this._disposers.push(new ListDisposer(this._links));\r\n            }\r\n            return this._links;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    FlowDiagram.prototype.createLink = function () {\r\n        var link = new FlowDiagramLink();\r\n        this._disposers.push(link);\r\n        return link;\r\n    };\r\n    /**\r\n     * Setups the legend to use the chart's data.\r\n     * @ignore\r\n     */\r\n    FlowDiagram.prototype.feedLegend = function () {\r\n        var legend = this.legend;\r\n        if (legend) {\r\n            var legendData_1 = [];\r\n            this.nodes.each(function (key, node) {\r\n                legendData_1.push(node);\r\n            });\r\n            legend.data = legendData_1;\r\n            legend.dataFields.name = \"name\";\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    FlowDiagram.prototype.disposeData = function () {\r\n        _super.prototype.disposeData.call(this);\r\n        this.nodes.clear();\r\n    };\r\n    return FlowDiagram;\r\n}(Chart));\r\nexport { FlowDiagram };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagram\"] = FlowDiagram;\r\n//# sourceMappingURL=FlowDiagram.js.map","/**\r\n * Module for building Gauge charts.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, RadarChartDataItem } from \"./RadarChart\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar GaugeChartDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(GaugeChartDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function GaugeChartDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"GaugeChartDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return GaugeChartDataItem;\r\n}(RadarChartDataItem));\r\nexport { GaugeChartDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\r\nvar GaugeChart = /** @class */ (function (_super) {\r\n    tslib_1.__extends(GaugeChart, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function GaugeChart() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"GaugeChart\";\r\n        _this.startAngle = 180;\r\n        _this.endAngle = 360;\r\n        _this.hands = new ListTemplate(new ClockHand());\r\n        _this.hands.events.on(\"inserted\", _this.processHand, _this, false);\r\n        _this._disposers.push(new ListDisposer(_this.hands));\r\n        _this._disposers.push(_this.hands.template);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    GaugeChart.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Gauge chart\");\r\n        }\r\n    };\r\n    /**\r\n     * Decorates a [[ClockHand]] when it is added to the chart.\r\n     *\r\n     * @param {IListEvents<ClockHand>[\"inserted\"]}  event  Event\r\n     */\r\n    GaugeChart.prototype.processHand = function (event) {\r\n        var hand = event.newValue;\r\n        if (!hand.axis) {\r\n            hand.axis = this.xAxes.getIndex(0);\r\n        }\r\n    };\r\n    return GaugeChart;\r\n}(RadarChart));\r\nexport { GaugeChart };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n//# sourceMappingURL=GaugeChart.js.map","/**\r\n * Percent chart module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, SerialChartDataItem } from \"./SerialChart\";\r\nimport { PercentSeries } from \"../series/PercentSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[PercentChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar PercentChartDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PercentChartDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PercentChartDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PercentChartDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return PercentChartDataItem;\r\n}(SerialChartDataItem));\r\nexport { PercentChartDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This is a base class for \"percent-based\" chart types like Pie and Funnel.\r\n *\r\n * @see {@link IPercentChartEvents} for a list of available Events\r\n * @see {@link IPercentChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for Pie chart documentation\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for Sliced chart documentation\r\n */\r\nvar PercentChart = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PercentChart, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PercentChart() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"PercentChart\";\r\n        _this.align = \"none\";\r\n        _this.valign = \"none\";\r\n        // so that the chart is always drawn, even the legend wants all the space\r\n        _this.chartContainer.minHeight = 50;\r\n        _this.chartContainer.minWidth = 50;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * (Re)validates chart data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PercentChart.prototype.validateData = function () {\r\n        _super.prototype.validateData.call(this);\r\n        this.feedLegend();\r\n    };\r\n    /**\r\n     * Setups the legend to use the chart's data.\r\n     * @ignore\r\n     */\r\n    PercentChart.prototype.feedLegend = function () {\r\n        var legend = this.legend;\r\n        if (legend) {\r\n            var legendData_1 = [];\r\n            $iter.each(this.series.iterator(), function (series) {\r\n                $iter.each(series.dataItems.iterator(), function (dataItem) {\r\n                    if (!dataItem.hiddenInLegend) {\r\n                        legendData_1.push(dataItem);\r\n                        var legendSettings = series.legendSettings;\r\n                        if (legendSettings) {\r\n                            if (legendSettings.labelText) {\r\n                                legend.labels.template.text = legendSettings.labelText;\r\n                            }\r\n                            if (legendSettings.itemLabelText) {\r\n                                legend.labels.template.text = legendSettings.itemLabelText;\r\n                            }\r\n                            if (legendSettings.valueText) {\r\n                                legend.valueLabels.template.text = legendSettings.valueText;\r\n                            }\r\n                            if (legendSettings.itemValueText) {\r\n                                legend.valueLabels.template.text = legendSettings.itemValueText;\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n            legend.data = legendData_1;\r\n            legend.dataFields.name = \"category\";\r\n        }\r\n    };\r\n    /**\r\n     * Creates a new [[PercentSeries]].\r\n     *\r\n     * @return {PercentSeries} New series\r\n     */\r\n    PercentChart.prototype.createSeries = function () {\r\n        return new PercentSeries();\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    PercentChart.prototype.setLegend = function (legend) {\r\n        _super.prototype.setLegend.call(this, legend);\r\n        if (legend) {\r\n            legend.labels.template.text = \"{category}\";\r\n            legend.valueLabels.template.text = \"{value.percent.formatNumber('#.0')}%\";\r\n            legend.itemContainers.template.events.on(\"over\", function (event) {\r\n                var PercentSeriesDataItem = event.target.dataItem.dataContext;\r\n                if (PercentSeriesDataItem.visible && !PercentSeriesDataItem.isHiding) {\r\n                    PercentSeriesDataItem.slice.isHover = true;\r\n                }\r\n            });\r\n            legend.itemContainers.template.events.on(\"out\", function (event) {\r\n                var PercentSeriesDataItem = event.target.dataItem.dataContext;\r\n                PercentSeriesDataItem.slice.isHover = false;\r\n            });\r\n        }\r\n    };\r\n    return PercentChart;\r\n}(SerialChart));\r\nexport { PercentChart };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @hidden\r\n */\r\nregistry.registeredClasses[\"PercentChart\"] = PercentChart;\r\nregistry.registeredClasses[\"PercentChartDataItem\"] = PercentChartDataItem;\r\n//# sourceMappingURL=PercentChart.js.map","/**\r\n * Pie chart module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, PercentChartDataItem } from \"./PercentChart\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PieSeries } from \"../series/PieSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar PieChartDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PieChartDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PieChartDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PieChartDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return PieChartDataItem;\r\n}(PercentChartDataItem));\r\nexport { PieChartDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czechia\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nvar PieChart = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PieChart, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PieChart() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"PieChart\";\r\n        // Set defaults\r\n        _this.innerRadius = 0;\r\n        _this.radius = percent(80);\r\n        _this.align = \"none\";\r\n        _this.valign = \"none\";\r\n        _this.startAngle = -90;\r\n        _this.endAngle = 270;\r\n        var seriesContainer = _this.seriesContainer;\r\n        seriesContainer.isMeasured = true;\r\n        seriesContainer.valign = \"middle\";\r\n        seriesContainer.align = \"center\";\r\n        seriesContainer.layout = \"absolute\";\r\n        seriesContainer.width = undefined;\r\n        seriesContainer.height = undefined;\r\n        // so that the pie is always drawn, even the legend wants all the space\r\n        _this.chartContainer.minHeight = 50;\r\n        _this.chartContainer.minWidth = 50;\r\n        _this.chartContainer.events.on(\"maxsizechanged\", _this.updateRadius, _this, false); // need this for the chart to change radius if legend is removed/disabled\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    PieChart.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Pie chart\");\r\n        }\r\n    };\r\n    /**\r\n     * (Re)validates the chart, causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PieChart.prototype.validateLayout = function () {\r\n        _super.prototype.validateLayout.call(this);\r\n        this.updateRadius();\r\n    };\r\n    /**\r\n     * Decorates a new [[Series]] object with required parameters when it is\r\n     * added to the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IListEvents<Series>[\"inserted\"]}  event  Event\r\n     */\r\n    PieChart.prototype.handleSeriesAdded = function (event) {\r\n        _super.prototype.handleSeriesAdded.call(this, event);\r\n        this.updateSeriesAngles();\r\n    };\r\n    PieChart.prototype.updateSeriesAngles = function () {\r\n        var _this = this;\r\n        this.series.each(function (series) {\r\n            series.startAngle = _this.startAngle;\r\n            series.endAngle = _this.endAngle;\r\n            series.defaultState.properties.startAngle = _this.startAngle;\r\n            series.defaultState.properties.endAngle = _this.endAngle;\r\n        });\r\n    };\r\n    /**\r\n     * Recalculates pie's radius, based on a number of criteria.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PieChart.prototype.updateRadius = function () {\r\n        var chartCont = this.chartContainer;\r\n        var rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n        var innerRect = { x: 0, y: 0, width: 0, height: 0 };\r\n        var innerRadius = this.innerRadius;\r\n        if (innerRadius instanceof Percent) {\r\n            innerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\r\n        }\r\n        // @todo handle this when innerRadius set in pixels (do it for radar also)\r\n        rect = $math.getCommonRectangle([rect, innerRect]);\r\n        var maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\r\n        if (!$type.isNumber(maxRadius)) {\r\n            maxRadius = 0;\r\n        }\r\n        var chartRadius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n        var chartPixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\r\n        var seriesRadius = (chartRadius - chartPixelInnerRadius) / this.series.length;\r\n        //@todo: make it possible to set series radius in percent\r\n        $iter.each($iter.indexed(this.series.iterator()), function (a) {\r\n            var i = a[0];\r\n            var series = a[1];\r\n            var radius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.radius, chartRadius - chartPixelInnerRadius);\r\n            var innerRadius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.innerRadius, chartRadius - chartPixelInnerRadius);\r\n            if (!$type.isNumber(radius)) {\r\n                radius = chartPixelInnerRadius + seriesRadius * (i + 1);\r\n            }\r\n            if (!$type.isNumber(innerRadius)) {\r\n                innerRadius = chartPixelInnerRadius + seriesRadius * i;\r\n            }\r\n            series.pixelRadius = radius;\r\n            series.pixelInnerRadius = innerRadius;\r\n        });\r\n        this.seriesContainer.definedBBox = { x: chartRadius * rect.x, y: chartRadius * rect.y, width: chartRadius * rect.width, height: chartRadius * rect.height };\r\n        this.seriesContainer.invalidateLayout();\r\n        this.bulletsContainer.x = this.seriesContainer.x;\r\n        this.bulletsContainer.y = this.seriesContainer.y;\r\n    };\r\n    Object.defineProperty(PieChart.prototype, \"radius\", {\r\n        /**\r\n         * @return {number} Radius (px or relative)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Sets radius of the pie chart.\r\n         *\r\n         * Setting to a number will mean a fixed pixel radius.\r\n         *\r\n         * Setting to an instance of [[Percent]] will mean a relative radius to\r\n         * available space.\r\n         *\r\n         * E.g.:\r\n         *\r\n         * ```TypeScript\r\n         * // Set pie chart to be at 50% of the available space\r\n         * pieChart.radius = am4core.percent.percent(50);\r\n         * ```\r\n         * ```JavaScript\r\n         * // Set pie chart to be at 50% of the available space\r\n         * pieChart.radius = am4core.percent.percent(50);\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // Set pie chart to be at 50% of the available space\r\n         *   \"radius\": \"50%\"\r\n         * }\r\n         * ```\r\n         *\r\n         * @param {number | Percent}  value  Radius (px or relative)\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"radius\", value, true, false, 10, false)) {\r\n                this.invalidateLayout();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PieChart.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return {number} Relative inner radius (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Sets relative inner radius (to create a donut chart).\r\n         *\r\n         * The inner radius is relative to pie's radius:\r\n         * * 0 - solid pie (no hole inside);\r\n         * * 0.5 - hole is half the radius of the pie;\r\n         * * 1 - does not make sense, because the hole will take up the whole radius.\r\n         *\r\n         * @param {number | Percent}  value  Relative inner radius (0-1)\r\n         * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates a new [[PieSeries]].\r\n     *\r\n     * @return {PieSeries} New series\r\n     */\r\n    PieChart.prototype.createSeries = function () {\r\n        return new PieSeries();\r\n    };\r\n    Object.defineProperty(PieChart.prototype, \"startAngle\", {\r\n        /**\r\n         * @return {number} Start angle (degrees)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * Starting angle of the Pie circle. (degrees)\r\n         *\r\n         * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n         * at the top center. (at -90 degrees)\r\n         *\r\n         * You can use `startAngle` to change this setting.\r\n         *\r\n         * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n         *\r\n         * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n         * needs to be 360.\r\n         *\r\n         * However, it's **not** necessary to do so. You can set to those lesser\r\n         * numbers, to create semi-circles.\r\n         *\r\n         * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n         * looks like a quarter of a circle.\r\n         *\r\n         * NOTE: This setting is not supported in a 3D pie chart.\r\n         *\r\n         * @default -90\r\n         * @param {number}  value  Start angle (degrees)\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"startAngle\", value)) {\r\n                this.updateRadius();\r\n                this.updateSeriesAngles();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PieChart.prototype, \"endAngle\", {\r\n        /**\r\n         * @return {number} End angle (degrees)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endAngle\");\r\n        },\r\n        /**\r\n         * End angle of the Pie circle. (degrees)\r\n         *\r\n         * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n         * at the top center. (at 270 degrees)\r\n         *\r\n         * You can use `endAngle` to change this setting.\r\n         *\r\n         * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n         * needs to be 360.\r\n         *\r\n         * However, it's **not** necessary to do so. You can set to those lesser\r\n         * numbers, to create semi-circles.\r\n         *\r\n         * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n         * looks like a quarter of a circle.\r\n         *\r\n         * NOTE: This setting is not supported in a 3D pie chart.\r\n         *\r\n         * @default 270\r\n         * @param {number}  value  End angle (degrees)\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"endAngle\", value)) {\r\n                this.updateRadius();\r\n                this.updateSeriesAngles();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PieChart;\r\n}(PercentChart));\r\nexport { PieChart };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart\"] = PieChart;\r\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;\r\n//# sourceMappingURL=PieChart.js.map","/**\r\n * 3D Pie chart module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PieChart, PieChartDataItem } from \"./PieChart\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar PieChart3DDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PieChart3DDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PieChart3DDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PieChart3DDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return PieChart3DDataItem;\r\n}(PieChartDataItem));\r\nexport { PieChart3DDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czechia\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nvar PieChart3D = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PieChart3D, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PieChart3D() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"PieChart3D\";\r\n        _this.depth = 20;\r\n        _this.angle = 10;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(PieChart3D.prototype, \"depth\", {\r\n        /**\r\n         * @return {number} Depth (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"depth\");\r\n        },\r\n        /**\r\n         * Depth of the 3D pie in pixels.\r\n         *\r\n         * This will determine \"height\" of the pie.\r\n         *\r\n         * @default 20\r\n         * @param {number}  value  Depth (px)\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"depth\", value)) {\r\n                this.invalidateDataUsers();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PieChart3D.prototype, \"angle\", {\r\n        /**\r\n         * @return {number} Angle (degrees)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"angle\");\r\n        },\r\n        /**\r\n         * An angle of a \"point of view\" in degrees. Possible range 0 - 90.\r\n         *\r\n         * @default 10\r\n         * @param {number}  value  Angle (degrees)\r\n         */\r\n        set: function (value) {\r\n            value = $math.fitToRange(value, 0, 90);\r\n            if (this.setPropertyValue(\"angle\", value)) {\r\n                this.invalidateDataUsers();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates and returns a new Series.\r\n     *\r\n     * @return {PieSeries3D} New series\r\n     */\r\n    PieChart3D.prototype.createSeries = function () {\r\n        return new PieSeries3D();\r\n    };\r\n    return PieChart3D;\r\n}(PieChart));\r\nexport { PieChart3D };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\r\n//# sourceMappingURL=PieChart3D.js.map","/**\r\n * Radar chart module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, XYChartDataItem } from \"./XYChart\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar RadarChartDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(RadarChartDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function RadarChartDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"RadarChartDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return RadarChartDataItem;\r\n}(XYChartDataItem));\r\nexport { RadarChartDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\r\nvar RadarChart = /** @class */ (function (_super) {\r\n    tslib_1.__extends(RadarChart, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function RadarChart() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Defines X axis renderer type.\r\n         *\r\n         * @type {AxisRendererCircular}\r\n         */\r\n        _this._axisRendererX = AxisRendererCircular;\r\n        /**\r\n         * Defines Y axis renderer type.\r\n         *\r\n         * @type {AxisRendererRadial}\r\n         */\r\n        _this._axisRendererY = AxisRendererRadial;\r\n        /**\r\n         * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.innerRadiusModifyer = 1;\r\n        _this.className = \"RadarChart\";\r\n        _this.startAngle = -90;\r\n        _this.endAngle = 270;\r\n        _this.radius = percent(80);\r\n        _this.innerRadius = 0;\r\n        var radarContainer = _this.plotContainer.createChild(Container);\r\n        radarContainer.shouldClone = false;\r\n        radarContainer.layout = \"absolute\";\r\n        radarContainer.align = \"center\";\r\n        radarContainer.valign = \"middle\";\r\n        _this.seriesContainer.parent = radarContainer;\r\n        _this.radarContainer = radarContainer;\r\n        _this.bulletsContainer.parent = radarContainer;\r\n        _this._cursorContainer = radarContainer;\r\n        _this._bulletMask = radarContainer.createChild(Circle);\r\n        _this._bulletMask.shouldClone = false;\r\n        _this._bulletMask.element = _this.paper.add(\"path\");\r\n        _this._bulletMask.opacity = 0;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    RadarChart.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Radar chart\");\r\n        }\r\n    };\r\n    /**\r\n     * Decorates Axis with required properties for this chart.\r\n     *\r\n     * @param {Axis}  axis  Axis\r\n     */\r\n    RadarChart.prototype.processAxis = function (axis) {\r\n        _super.prototype.processAxis.call(this, axis);\r\n        var renderer = axis.renderer;\r\n        renderer.gridContainer.parent = renderer;\r\n        renderer.breakContainer.parent = renderer;\r\n        axis.parent = this.radarContainer;\r\n        renderer.toBack();\r\n    };\r\n    /**\r\n     * Updates all X axes after range change event.\r\n     */\r\n    RadarChart.prototype.handleXAxisRangeChange = function () {\r\n        _super.prototype.handleXAxisRangeChange.call(this);\r\n        $iter.each(this.yAxes.iterator(), function (axis) {\r\n            axis.invalidate();\r\n        });\r\n    };\r\n    /**\r\n     * Updates all Y axes after range change event.\r\n     */\r\n    RadarChart.prototype.handleYAxisRangeChange = function () {\r\n        _super.prototype.handleYAxisRangeChange.call(this);\r\n        $iter.each(this.xAxes.iterator(), function (axis) {\r\n            axis.invalidate();\r\n        });\r\n    };\r\n    /**\r\n     * Creates and returns a new Cursor, of type suitable for RadarChart.\r\n     *\r\n     * @return {RadarCursor} Cursor\r\n     */\r\n    RadarChart.prototype.createCursor = function () {\r\n        return new RadarCursor();\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {object}  config  Config\r\n     */\r\n    RadarChart.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Set up cursor\r\n            if ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n                config.cursor.type = \"RadarCursor\";\r\n            }\r\n            // Set up series\r\n            if ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n                for (var i = 0, len = config.series.length; i < len; i++) {\r\n                    config.series[i].type = config.series[i].type || \"RadarSeries\";\r\n                }\r\n            }\r\n            // Set up axes\r\n            /*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n                for (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n                    config.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n                }\r\n            }\r\n            if ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n                for (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n                    config.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n                }\r\n            }*/\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    /**\r\n     * Does calculations before drawing the chart.\r\n     */\r\n    RadarChart.prototype.beforeDraw = function () {\r\n        _super.prototype.beforeDraw.call(this);\r\n        var radarCont = this.radarContainer;\r\n        var plotContainer = this.plotContainer;\r\n        var rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n        var innerRect = { x: 0, y: 0, width: 0, height: 0 };\r\n        var wr = plotContainer.innerWidth / rect.width;\r\n        var hr = plotContainer.innerHeight / rect.height;\r\n        var innerRadius = this.innerRadius;\r\n        if (innerRadius instanceof Percent) {\r\n            var value = innerRadius.value;\r\n            var mr = Math.min(wr, hr);\r\n            value = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n            innerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n            this.innerRadiusModifyer = value / innerRadius.value;\r\n            innerRadius = percent(value * 100);\r\n        }\r\n        // @todo handle this when innerRadius set in pixels (do it for pie also)\r\n        rect = $math.getCommonRectangle([rect, innerRect]);\r\n        var maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n        var diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2 || 0;\r\n        var radius = diameter / 2;\r\n        var startAngle = this.startAngle;\r\n        var endAngle = this.endAngle;\r\n        this._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n        this._bulletMask.path = $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius);\r\n        $iter.each(this.xAxes.iterator(), function (axis) {\r\n            if (axis.renderer.useChartAngles) {\r\n                axis.renderer.startAngle = startAngle;\r\n                axis.renderer.endAngle = endAngle;\r\n            }\r\n            axis.width = diameter;\r\n            axis.height = diameter;\r\n            //axis.renderer.width = diameter;\r\n            //axis.renderer.height = diameter;\r\n            axis.renderer.pixelRadiusReal = radius;\r\n            axis.renderer.innerRadius = innerRadius;\r\n        });\r\n        $iter.each(this.yAxes.iterator(), function (axis) {\r\n            axis.renderer.startAngle = startAngle;\r\n            axis.renderer.endAngle = endAngle;\r\n            axis.width = diameter;\r\n            axis.height = diameter;\r\n            //axis.renderer.width = diameter;\r\n            //axis.renderer.height = diameter;\r\n            axis.renderer.pixelRadiusReal = radius;\r\n            axis.renderer.innerRadius = innerRadius;\r\n        });\r\n        var cursor = this.cursor;\r\n        if (cursor) {\r\n            cursor.width = diameter;\r\n            cursor.height = diameter;\r\n            cursor.startAngle = startAngle;\r\n            cursor.endAngle = endAngle;\r\n        }\r\n        this.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n        this.radarContainer.validatePosition();\r\n    };\r\n    /**\r\n     * Creates and returns a new Series, suitable for RadarChart.\r\n     *\r\n     * @return {RadarSeries} New Series\r\n     */\r\n    RadarChart.prototype.createSeries = function () {\r\n        return new RadarSeries();\r\n    };\r\n    Object.defineProperty(RadarChart.prototype, \"startAngle\", {\r\n        /**\r\n         * @return {number} Start angle (degrees)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * Starting angle of the Radar face. (degrees)\r\n         *\r\n         * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n         * top center. (at -90 degrees)\r\n         *\r\n         * You can use `startAngle` to change this setting.\r\n         *\r\n         * E.g. setting this to 0 will make the radial axis start horizontally to\r\n         * the right, as opposed to vertical.\r\n         *\r\n         * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n         * needs to be 360.\r\n         *\r\n         * However, it's **not** necessary to do so. You can set those to lesser\r\n         * numbers, to create semi-circles.\r\n         *\r\n         * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n         * looks like a quarter of a circle.\r\n         *\r\n         * @default -90\r\n         * @param {number}  value  Start angle (degrees)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarChart.prototype, \"endAngle\", {\r\n        /**\r\n         * @return {number} End angle (degrees)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endAngle\");\r\n        },\r\n        /**\r\n         * Starting angle of the Radar face. (degrees)\r\n         *\r\n         * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n         * where it has started, forming a full 360 circle. (at 270 degrees)\r\n         *\r\n         * You can use `endAngle` to end the circle somewhere else.\r\n         *\r\n         * E.g. setting this to 180 will make the radar face end at horizontal line\r\n         * to the left off the center.\r\n         *\r\n         * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n         * needs to be 360.\r\n         *\r\n         * However, it's **not** necessary to do so. You can set those to lesser\r\n         * numbers, to create semi-circles.\r\n         *\r\n         * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n         * looks like a quarter of a circle.\r\n         *\r\n         * @default -90\r\n         * @param {number}  value  End angle (degrees)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarChart.prototype, \"radius\", {\r\n        /**\r\n         * @return {number} Outer radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Outer radius of the Radar face.\r\n         *\r\n         * This can either be in absolute pixel value, or relative [[Percent]].\r\n         *\r\n         * @param {number | Percent}  value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarChart.prototype, \"pixelInnerRadius\", {\r\n        /**\r\n         * @return {number} Inner radius in pixels\r\n         */\r\n        get: function () {\r\n            return this._pixelInnerRadius;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarChart.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return {number} Inner radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius of the radar face.\r\n         *\r\n         * This can either be in absolute pixel value, or relative [[Percent]].\r\n         *\r\n         * If set in Percent, it will be relative to `radius`. (outer radius)\r\n         *\r\n         * @param {number | Percent} value Inner radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Triggers (re)rendering of the horizontal (X) axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Axis} axis Axis\r\n     */\r\n    RadarChart.prototype.updateXAxis = function (renderer) {\r\n        //do not call super!\r\n        if (renderer) {\r\n            renderer.processRenderer();\r\n        }\r\n    };\r\n    /**\r\n     * Triggers (re)rendering of the vertical (Y) axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Axis} axis Axis\r\n     */\r\n    RadarChart.prototype.updateYAxis = function (renderer) {\r\n        // do not call super!\r\n        if (renderer) {\r\n            renderer.processRenderer();\r\n        }\r\n    };\r\n    return RadarChart;\r\n}(XYChart));\r\nexport { RadarChart };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n//# sourceMappingURL=RadarChart.js.map","/**\r\n * Sankey diagram module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { FlowDiagram, FlowDiagramDataItem } from \"./FlowDiagram\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { SankeyNode } from \"../elements/SankeyNode\";\r\nimport { SankeyLink } from \"../elements/SankeyLink\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo rearange notes after dragged\r\n/**\r\n * Defines a [[DataItem]] for [[SankeyDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar SankeyDiagramDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SankeyDiagramDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SankeyDiagramDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"SankeyDiagramDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return SankeyDiagramDataItem;\r\n}(FlowDiagramDataItem));\r\nexport { SankeyDiagramDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a Sankey Diagram chart.\r\n *\r\n * @see {@link ISankeyDiagramEvents} for a list of available Events\r\n * @see {@link ISankeyDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sankey-diagram/} for documentation\r\n * @important\r\n */\r\nvar SankeyDiagram = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SankeyDiagram, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SankeyDiagram() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"SankeyDiagram\";\r\n        _this.orientation = \"horizontal\";\r\n        _this.nodeAlign = \"middle\";\r\n        _this.nodesContainer.width = percent(100);\r\n        _this.nodesContainer.height = percent(100);\r\n        _this.linksContainer.width = percent(100);\r\n        _this.linksContainer.height = percent(100);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * (Re)validates chart's data, effectively causing the chart to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    SankeyDiagram.prototype.validateData = function () {\r\n        var _this = this;\r\n        _super.prototype.validateData.call(this);\r\n        this._levelCount = 0;\r\n        this.nodes.each(function (key, node) {\r\n            node.level = _this.getNodeLevel(node, 0);\r\n            _this._levelCount = $math.max(_this._levelCount, node.level);\r\n        });\r\n    };\r\n    /**\r\n     * Returns node's highest level.\r\n     *\r\n     * @param  {this[\"_node\"]}  node   Node\r\n     * @param  {number}        level  Current level\r\n     * @return {number}               New level\r\n     */\r\n    SankeyDiagram.prototype.getNodeLevel = function (node, level) {\r\n        var _this = this;\r\n        //@todo solve circular so\r\n        var levels = [level];\r\n        $iter.each(node.incomingDataItems.iterator(), function (link) {\r\n            if (link.fromNode) {\r\n                levels.push(_this.getNodeLevel(link.fromNode, level + 1));\r\n            }\r\n        });\r\n        return Math.max.apply(Math, tslib_1.__spread(levels));\r\n    };\r\n    /**\r\n     * Calculates relation between pixel height and total value.\r\n     *\r\n     * In Sankey the actual thickness of links and height of nodes will depend\r\n     * on their values.\r\n     */\r\n    SankeyDiagram.prototype.calculateValueHeight = function () {\r\n        var _this = this;\r\n        // calculate sums of each level\r\n        this._levelSum = {};\r\n        this._levelNodesCount = {};\r\n        this.maxSum = 0;\r\n        var total = this.dataItem.values.value.sum;\r\n        $iter.each(this._sorted, function (strNode) {\r\n            var node = strNode[1];\r\n            _this.getNodeValue(node);\r\n        });\r\n        this.nodes.each(function (key, node) {\r\n            var level = node.level;\r\n            var value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n            if (value / total < _this.minNodeSize) {\r\n                value = total * _this.minNodeSize;\r\n            }\r\n            if ($type.isNumber(_this._levelSum[level])) {\r\n                _this._levelSum[level] += value;\r\n            }\r\n            else {\r\n                _this._levelSum[level] = value;\r\n            }\r\n            if ($type.isNumber(_this._levelNodesCount[level])) {\r\n                _this._levelNodesCount[level]++;\r\n            }\r\n            else {\r\n                _this._levelNodesCount[level] = 1;\r\n            }\r\n        });\r\n        var maxSumLevel;\r\n        $object.each(this._levelSum, function (key, value) {\r\n            if (_this.maxSum < value) {\r\n                _this.maxSum = value;\r\n                maxSumLevel = $type.toNumber(key);\r\n            }\r\n        });\r\n        this._maxSumLevel = maxSumLevel;\r\n        var maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n        var availableHeight;\r\n        if (this.orientation == \"horizontal\") {\r\n            availableHeight = this.chartContainer.maxHeight - 1;\r\n        }\r\n        else {\r\n            availableHeight = this.chartContainer.maxWidth - 1;\r\n        }\r\n        var valueHeight = (availableHeight - (maxSumLevelNodeCount - 1) * this.nodePadding) / this.maxSum;\r\n        if (!$type.isNumber(this.valueHeight)) {\r\n            this.valueHeight = valueHeight;\r\n        }\r\n        else {\r\n            var finalHeight = void 0;\r\n            try {\r\n                finalHeight = this._heightAnimation.animationOptions[0].to;\r\n            }\r\n            catch (err) {\r\n            }\r\n            // without animations it will be non-smooth as maxValue jumps from one column to another\r\n            if (finalHeight != valueHeight) {\r\n                var duration = this.interpolationDuration;\r\n                try {\r\n                    duration = this.nodes.template.states.getKey(\"active\").transitionDuration;\r\n                }\r\n                catch (err) {\r\n                }\r\n                this._heightAnimation = new Animation(this, { property: \"valueHeight\", from: this.valueHeight, to: valueHeight }, duration).start();\r\n                this._disposers.push(this._heightAnimation);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Redraws the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    SankeyDiagram.prototype.validate = function () {\r\n        var _this = this;\r\n        _super.prototype.validate.call(this);\r\n        this.calculateValueHeight();\r\n        var container = this.nodesContainer;\r\n        var nextCoordinate = {};\r\n        var maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n        var total = this.dataItem.values.value.sum;\r\n        $iter.each(this._sorted, function (strNode) {\r\n            var node = strNode[1];\r\n            var level = node.level;\r\n            var levelCoordinate = 0;\r\n            var nodeCount = _this._levelNodesCount[level];\r\n            switch (_this.nodeAlign) {\r\n                case \"bottom\":\r\n                    levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight - (nodeCount - maxSumLevelNodeCount) * _this.nodePadding;\r\n                    break;\r\n                case \"middle\":\r\n                    levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight / 2 - (nodeCount - maxSumLevelNodeCount) * _this.nodePadding / 2;\r\n                    break;\r\n            }\r\n            node.parent = container;\r\n            var delta;\r\n            var x;\r\n            var y;\r\n            var value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n            if (value / total < _this.minNodeSize) {\r\n                value = total * _this.minNodeSize;\r\n            }\r\n            if (_this.orientation == \"horizontal\") {\r\n                delta = (_this.innerWidth - node.pixelWidth) / _this._levelCount;\r\n                x = delta * node.level;\r\n                y = nextCoordinate[level] || levelCoordinate;\r\n                var h = value * _this.valueHeight;\r\n                node.height = h;\r\n                node.minX = x;\r\n                node.maxX = x;\r\n                nextCoordinate[level] = y + h + _this.nodePadding;\r\n            }\r\n            else {\r\n                delta = (_this.innerHeight - node.pixelHeight) / _this._levelCount;\r\n                x = nextCoordinate[level] || levelCoordinate;\r\n                y = delta * node.level;\r\n                var w = value * _this.valueHeight;\r\n                node.width = w;\r\n                node.minY = y;\r\n                node.maxY = y;\r\n                nextCoordinate[level] = x + w + _this.nodePadding;\r\n            }\r\n            node.x = x;\r\n            node.y = y;\r\n        });\r\n    };\r\n    /**\r\n     * Performs actual operations to reveal this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {number} duration Fade in duration (ms)\r\n     * @return {number}          Fade in duration (ms)\r\n     */\r\n    SankeyDiagram.prototype.showReal = function (duration) {\r\n        var _this = this;\r\n        if (this.interpolationDuration > 0) {\r\n            var container_1 = this.nodesContainer;\r\n            var i_1 = 0;\r\n            $iter.each(this.links.iterator(), function (link) {\r\n                link.hide(0);\r\n            });\r\n            $iter.each(this._sorted, function (strNode) {\r\n                var node = strNode[1];\r\n                var property;\r\n                if (_this.orientation == \"horizontal\") {\r\n                    node.dx = -(container_1.pixelWidth - node.pixelWidth) / _this._levelCount;\r\n                    property = \"dx\";\r\n                }\r\n                else {\r\n                    node.dy = -(container_1.pixelHeight - node.pixelHeight) / _this._levelCount;\r\n                    property = \"dy\";\r\n                }\r\n                var delay = 0;\r\n                var duration = _this.interpolationDuration;\r\n                if (_this.sequencedInterpolation) {\r\n                    delay = _this.sequencedInterpolationDelay * i_1 + duration * i_1 / $iter.length(_this.nodes.iterator());\r\n                }\r\n                node.opacity = 0;\r\n                node.invalidateLinks();\r\n                node.animate([{ property: \"opacity\", from: 0, to: 1 }, { property: property, to: 0 }], _this.interpolationDuration, _this.interpolationEasing).delay(delay);\r\n                $iter.each(node.outgoingDataItems.iterator(), function (dataItem) {\r\n                    var animation = dataItem.link.show(_this.interpolationDuration);\r\n                    if (animation && !animation.isFinished()) {\r\n                        animation.delay(delay);\r\n                    }\r\n                });\r\n                $iter.each(node.incomingDataItems.iterator(), function (dataItem) {\r\n                    if (!dataItem.fromNode) {\r\n                        var animation = dataItem.link.show(_this.interpolationDuration);\r\n                        if (animation && !animation.isFinished()) {\r\n                            animation.delay(delay);\r\n                        }\r\n                    }\r\n                });\r\n                i_1++;\r\n            });\r\n        }\r\n        return _super.prototype.showReal.call(this);\r\n    };\r\n    /**\r\n     * Changes the sort type of the nodes.\r\n     *\r\n     * This will actually reshuffle nodes using nice animation.\r\n     */\r\n    SankeyDiagram.prototype.changeSorting = function () {\r\n        var _this = this;\r\n        this.sortNodes();\r\n        var nextCoordinate = {};\r\n        $iter.each(this._sorted, function (strNode) {\r\n            var node = strNode[1];\r\n            var level = node.level;\r\n            var levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight / 2;\r\n            var property;\r\n            var nodeHeight;\r\n            if (_this.orientation == \"horizontal\") {\r\n                property = \"y\";\r\n                nodeHeight = node.pixelHeight;\r\n            }\r\n            else {\r\n                property = \"x\";\r\n                nodeHeight = node.pixelWidth;\r\n            }\r\n            node.animate({ property: property, to: nextCoordinate[level] || levelCoordinate }, _this.interpolationDuration, _this.interpolationEasing);\r\n            nextCoordinate[level] = (nextCoordinate[level] || levelCoordinate) + nodeHeight + _this.nodePadding;\r\n            node.invalidateLinks();\r\n        });\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    SankeyDiagram.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Sankey diagram\");\r\n        }\r\n    };\r\n    /**\r\n     * Creates and returns a new data item.\r\n     *\r\n     * @return {this} Data item\r\n     */\r\n    SankeyDiagram.prototype.createDataItem = function () {\r\n        return new SankeyDiagramDataItem();\r\n    };\r\n    Object.defineProperty(SankeyDiagram.prototype, \"nodeAlign\", {\r\n        /**\r\n         * @returns {\"top\" | \"middle\" | \"bottom\"} Returns nodeAlign value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"nodeAlign\");\r\n        },\r\n        /**\r\n         * How to align nodes. In case layout is vertical, top means left and bottom means right\r\n         *\r\n         * @param {\"top\" | \"middle\" | \"bottom\"}  value  Node sorting\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"nodeAlign\", value);\r\n            this.changeSorting();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SankeyDiagram.prototype, \"orientation\", {\r\n        /**\r\n         * @return {Orientation} Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"orientation\");\r\n        },\r\n        /**\r\n         * Orientation of the chart: \"horizontal\" or \"vertical\";\r\n         *\r\n         * @param {Orientation} value Orientation\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"orientation\", value, true);\r\n            var nameLabel = this.nodes.template.nameLabel;\r\n            if (value == \"vertical\") {\r\n                this.nodes.template.width = undefined;\r\n                nameLabel.label.horizontalCenter = \"middle\";\r\n                nameLabel.locationX = 0.5;\r\n            }\r\n            else {\r\n                this.nodes.template.height = undefined;\r\n                nameLabel.label.horizontalCenter = \"left\";\r\n                nameLabel.locationX = 1;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    SankeyDiagram.prototype.createNode = function () {\r\n        var node = new SankeyNode();\r\n        this._disposers.push(node);\r\n        return node;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    SankeyDiagram.prototype.createLink = function () {\r\n        var link = new SankeyLink();\r\n        this._disposers.push(link);\r\n        return link;\r\n    };\r\n    Object.defineProperty(SankeyDiagram.prototype, \"valueHeight\", {\r\n        /**\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            return this._valueHeight;\r\n        },\r\n        /**\r\n         * @ignore\r\n         */\r\n        set: function (value) {\r\n            if (value != this._valueHeight) {\r\n                this._valueHeight = value;\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    SankeyDiagram.prototype.disposeData = function () {\r\n        _super.prototype.disposeData.call(this);\r\n        this._sorted = this.nodes.iterator();\r\n    };\r\n    return SankeyDiagram;\r\n}(FlowDiagram));\r\nexport { SankeyDiagram };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyDiagram\"] = SankeyDiagram;\r\n//# sourceMappingURL=SankeyDiagram.js.map","/**\r\n * Serial chart module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, ChartDataItem } from \"../Chart\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Series } from \"../series/Series\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[SerialChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar SerialChartDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SerialChartDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SerialChartDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"SerialChartDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return SerialChartDataItem;\r\n}(ChartDataItem));\r\nexport { SerialChartDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A base class for all series-based charts, like XY, Pie, etc.\r\n *\r\n * Is not useful on its own.\r\n *\r\n * @see {@link ISerialChartEvents} for a list of available Events\r\n * @see {@link ISerialChartAdapters} for a list of available Adapters\r\n */\r\nvar SerialChart = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SerialChart, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SerialChart() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"SerialChart\";\r\n        _this.colors = new ColorSet();\r\n        // Create a container for series\r\n        var seriesContainer = _this.chartContainer.createChild(Container);\r\n        seriesContainer.shouldClone = false;\r\n        seriesContainer.width = percent(100);\r\n        seriesContainer.height = percent(100);\r\n        seriesContainer.isMeasured = false;\r\n        seriesContainer.layout = \"none\";\r\n        seriesContainer.zIndex = 2;\r\n        _this.seriesContainer = seriesContainer;\r\n        // Create a container for bullets\r\n        var bulletsContainer = _this.chartContainer.createChild(Container);\r\n        bulletsContainer.shouldClone = false;\r\n        bulletsContainer.width = percent(100);\r\n        bulletsContainer.height = percent(100);\r\n        bulletsContainer.isMeasured = false;\r\n        bulletsContainer.zIndex = 3;\r\n        bulletsContainer.layout = \"none\";\r\n        _this.bulletsContainer = bulletsContainer;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    SerialChart.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        if (this.colors) {\r\n            this.colors.dispose();\r\n        }\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor\r\n     */\r\n    SerialChart.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Serial chart\");\r\n        }\r\n    };\r\n    Object.defineProperty(SerialChart.prototype, \"series\", {\r\n        /**\r\n         * A list of chart's series.\r\n         *\r\n         * @return {List} Chart's series\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._series) {\r\n                this._series = new ListTemplate(this.createSeries());\r\n                this._series.events.on(\"inserted\", function (event) {\r\n                    _this.handleSeriesAdded(event);\r\n                }, undefined, false);\r\n                this._series.events.on(\"removed\", function (event) {\r\n                    var series = event.oldValue;\r\n                    _this.dataUsers.removeValue(series);\r\n                    _this.dataUsers.each(function (dataUser) {\r\n                        dataUser.invalidateDataItems();\r\n                    });\r\n                    if (series.autoDispose) {\r\n                        series.dispose();\r\n                    }\r\n                    _this.feedLegend();\r\n                }, undefined, false);\r\n                this._disposers.push(new ListDisposer(this._series));\r\n                this._disposers.push(this._series.template);\r\n            }\r\n            return this._series;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Decorates a new [[Series]] object with required parameters when it is\r\n     * added to the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IListEvents<Series>[\"inserted\"]}  event  Event\r\n     */\r\n    SerialChart.prototype.handleSeriesAdded = function (event) {\r\n        var _this = this;\r\n        var series = event.newValue;\r\n        series.chart = this;\r\n        series.parent = this.seriesContainer;\r\n        series.bulletsContainer.parent = this.bulletsContainer;\r\n        this._dataUsers.moveValue(series);\r\n        series.addDisposer(new Disposer(function () {\r\n            _this.dataUsers.removeValue(series);\r\n        }));\r\n        this.feedLegend();\r\n    };\r\n    /**\r\n     * Setups the legend to use the chart's data.\r\n     * @ignore\r\n     */\r\n    SerialChart.prototype.feedLegend = function () {\r\n        var legend = this.legend;\r\n        if (legend) {\r\n            var legendData_1 = [];\r\n            $iter.each(this.series.iterator(), function (series) {\r\n                if (!series.hiddenInLegend) {\r\n                    legendData_1.push(series);\r\n                }\r\n            });\r\n            legend.dataFields.name = \"name\";\r\n            legend.data = legendData_1;\r\n        }\r\n    };\r\n    /**\r\n     * Creates and returns a new Series, suitable for this chart type.\r\n     *\r\n     * @return {this} New series\r\n     */\r\n    SerialChart.prototype.createSeries = function () {\r\n        return new Series();\r\n    };\r\n    Object.defineProperty(SerialChart.prototype, \"colors\", {\r\n        /**\r\n         * @return {ColorSet} Color list\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"colors\");\r\n        },\r\n        /**\r\n         * Chart's color list.\r\n         *\r\n         * This list can be used by a number of serial items, like applying a new\r\n         * color for each Series added. Or, applying a new color for each slice\r\n         * of a Pie chart.\r\n         *\r\n         * Please see [[ColorSet]] for information on how you can set up to generate\r\n         * unique colors.\r\n         *\r\n         * A theme you are using may override default pre-defined colors.\r\n         *\r\n         * @param {ColorSet} value Color list\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"colors\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all parameters from another [[SerialChart]].\r\n     *\r\n     * @param {SerialChart} source Source SerialChart\r\n     */\r\n    SerialChart.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.series.copyFrom(source.series);\r\n    };\r\n    return SerialChart;\r\n}(Chart));\r\nexport { SerialChart };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SerialChart\"] = SerialChart;\r\n//# sourceMappingURL=SerialChart.js.map","/**\r\n * Sliced chart module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, PercentChartDataItem } from \"./PercentChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[SlicedChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar SlicedChartDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SlicedChartDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SlicedChartDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"SlicedChartDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return SlicedChartDataItem;\r\n}(PercentChartDataItem));\r\nexport { SlicedChartDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a Sliced chart.\r\n *\r\n * @see {@link ISlicedChartEvents} for a list of available Events\r\n * @see {@link ISlicedChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nvar SlicedChart = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SlicedChart, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SlicedChart() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"SlicedChart\";\r\n        _this.seriesContainer.layout = \"horizontal\";\r\n        _this.padding(15, 15, 15, 15);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    SlicedChart.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Sliced chart\");\r\n        }\r\n    };\r\n    /**\r\n     * (Re)validates the chart, causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    SlicedChart.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n    };\r\n    return SlicedChart;\r\n}(PercentChart));\r\nexport { SlicedChart };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SlicedChart\"] = SlicedChart;\r\nregistry.registeredClasses[\"SlicedChartDataItem\"] = SlicedChartDataItem;\r\n//# sourceMappingURL=SlicedChart.js.map","/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, XYChartDataItem } from \"./XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar TreeMapDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(TreeMapDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function TreeMapDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Required for squarify functionality.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {TreeMapDataItem[]}\r\n         */\r\n        _this.rows = [];\r\n        _this.className = \"TreeMapDataItem\";\r\n        _this.values.value = {};\r\n        _this.values.x0 = {};\r\n        _this.values.y0 = {};\r\n        _this.values.x1 = {};\r\n        _this.values.y1 = {};\r\n        _this.hasChildren.children = true;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"value\", {\r\n        /**\r\n         * @return {number} Value\r\n         */\r\n        get: function () {\r\n            var value = this.values[\"value\"].workingValue;\r\n            if (!$type.isNumber(value)) {\r\n                value = 0;\r\n                if (this.children) {\r\n                    $iter.each(this.children.iterator(), function (child) {\r\n                        if ($type.isNumber(child.value)) {\r\n                            value += child.value;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            return value;\r\n        },\r\n        /**\r\n         * Numeric value of the item.\r\n         *\r\n         * @param {number}  value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"value\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"percent\", {\r\n        get: function () {\r\n            if (this.parent) {\r\n                return this.value / this.parent.value * 100;\r\n            }\r\n            return 100;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"x0\", {\r\n        /**\r\n         * @return {number} X\r\n         */\r\n        get: function () {\r\n            return this.values.x0.value;\r\n        },\r\n        /**\r\n         * Item's X position.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description (review)\r\n         * @param {number}  value  X\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"x0\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"x1\", {\r\n        /**\r\n         * @return {number} X\r\n         */\r\n        get: function () {\r\n            return this.values.x1.value;\r\n        },\r\n        /**\r\n         * Item's X position.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description (review)\r\n         * @param {number}  value  X\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"x1\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"y0\", {\r\n        /**\r\n         * @return {number} Y\r\n         */\r\n        get: function () {\r\n            return this.values.y0.value;\r\n        },\r\n        /**\r\n         * Item's Y position.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description (review)\r\n         * @param {number}  value  Y\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"y0\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"y1\", {\r\n        /**\r\n         * @return {number} Y\r\n         */\r\n        get: function () {\r\n            return this.values.y1.value;\r\n        },\r\n        /**\r\n         * Item's Y position.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description (review)\r\n         * @param {number}  value  Y\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"y1\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"name\", {\r\n        /**\r\n         * @return {string} Name\r\n         */\r\n        get: function () {\r\n            return this.properties.name;\r\n        },\r\n        /**\r\n         * Item's name.\r\n         *\r\n         * @param {string}  name  Name\r\n         */\r\n        set: function (name) {\r\n            this.setProperty(\"name\", name);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"children\", {\r\n        /**\r\n         * @return {OrderedListTemplate<TreeMapDataItem>} Item's children\r\n         */\r\n        get: function () {\r\n            return this.properties.children;\r\n        },\r\n        /**\r\n         * A list of item's sub-children.\r\n         *\r\n         * Having children means that the TreeMap chat will automatically be\r\n         * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n         * display its children.\r\n         *\r\n         * Treemap can have any level of nesting.\r\n         *\r\n         * @param {OrderedListTemplate<TreeMapDataItem>}  children  Item's children\r\n         */\r\n        set: function (children) {\r\n            this.setProperty(\"children\", children);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"level\", {\r\n        /**\r\n         * Depth level in the treemap hierarchy.\r\n         *\r\n         * The top-level item will have level set at 0. Its children will have\r\n         * level 1, and so on.\r\n         *\r\n         * @readonly\r\n         * @return {number} Level\r\n         */\r\n        get: function () {\r\n            if (!this.parent) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return this.parent.level + 1;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"color\", {\r\n        /**\r\n         * @return {Color} Color\r\n         */\r\n        get: function () {\r\n            var color = this.properties.color;\r\n            if (color == undefined) {\r\n                if (this.parent) {\r\n                    color = this.parent.color;\r\n                }\r\n            }\r\n            if (color == undefined) {\r\n                if (this.component) {\r\n                    color = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n                }\r\n            }\r\n            return color;\r\n        },\r\n        /**\r\n         * Item's color.\r\n         *\r\n         * If not set, will use parent's color, or, if that is not set either,\r\n         * automatically assigned color from chart's color set. (`chart.colors`)\r\n         *\r\n         * @param {Color}  value  Color\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"color\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"series\", {\r\n        get: function () {\r\n            return this._series;\r\n        },\r\n        /**\r\n         * series of data item\r\n         * @todo: proper descrition\r\n         */\r\n        set: function (series) {\r\n            if (this._series) {\r\n                this.component.series.removeValue(this._series);\r\n                this._series.dispose();\r\n            }\r\n            this._series = series;\r\n            this._disposers.push(series);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return TreeMapDataItem;\r\n}(XYChartDataItem));\r\nexport { TreeMapDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nvar TreeMap = /** @class */ (function (_super) {\r\n    tslib_1.__extends(TreeMap, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function TreeMap() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * An algorithm used to divide area into squares based on their value.\r\n         *\r\n         * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n         *\r\n         * ```TypeScript\r\n         * chart.layoutAlgorithm = chart.sliceDice;\r\n         * ```\r\n         * ```JavaScript\r\n         * chart.layoutAlgorithm = chart.sliceDice;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"layoutAlgorithm\": \"sliceDice\",\r\n         *   // ...\r\n         * }\r\n         * ```\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n         * @default squarify\r\n         * @type {function}\r\n         */\r\n        _this.layoutAlgorithm = _this.squarify;\r\n        /**\r\n         * Is the chart zoomable?\r\n         *\r\n         * If the chart is `zoomable`, and items have sub-items, the chart will\r\n         * drill-down to sub-items when click on their parent item.\r\n         *\r\n         * @default true\r\n         * @type {boolean}\r\n         */\r\n        _this.zoomable = true;\r\n        _this.className = \"TreeMap\";\r\n        _this.maxLevels = 2;\r\n        _this.currentLevel = 0;\r\n        _this.colors = new ColorSet();\r\n        _this.sorting = \"descending\";\r\n        // create two value axes for the chart\r\n        var xAxis = _this.xAxes.push(new ValueAxis());\r\n        xAxis.title.disabled = true;\r\n        xAxis.strictMinMax = true;\r\n        var xRenderer = xAxis.renderer;\r\n        xRenderer.inside = true;\r\n        xRenderer.labels.template.disabled = true;\r\n        xRenderer.ticks.template.disabled = true;\r\n        xRenderer.grid.template.disabled = true;\r\n        xRenderer.axisFills.template.disabled = true;\r\n        xRenderer.minGridDistance = 100;\r\n        xRenderer.line.disabled = true;\r\n        xRenderer.baseGrid.disabled = true;\r\n        //xRenderer.inversed = true;\r\n        var yAxis = _this.yAxes.push(new ValueAxis());\r\n        yAxis.title.disabled = true;\r\n        yAxis.strictMinMax = true;\r\n        var yRenderer = yAxis.renderer;\r\n        yRenderer.inside = true;\r\n        yRenderer.labels.template.disabled = true;\r\n        yRenderer.ticks.template.disabled = true;\r\n        yRenderer.grid.template.disabled = true;\r\n        yRenderer.axisFills.template.disabled = true;\r\n        yRenderer.minGridDistance = 100;\r\n        yRenderer.line.disabled = true;\r\n        yRenderer.baseGrid.disabled = true;\r\n        yRenderer.inversed = true;\r\n        // shortcuts\r\n        _this.xAxis = xAxis;\r\n        _this.yAxis = yAxis;\r\n        var template = new TreeMapSeries();\r\n        _this.seriesTemplates = new DictionaryTemplate(template);\r\n        _this._disposers.push(new DictionaryDisposer(_this.seriesTemplates));\r\n        _this._disposers.push(template);\r\n        _this.zoomOutButton.events.on(\"hit\", function () {\r\n            _this.zoomToChartDataItem(_this._homeDataItem);\r\n        }, undefined, false);\r\n        _this.seriesTemplates.events.on(\"insertKey\", function (event) {\r\n            event.newValue.isTemplate = true;\r\n        }, undefined, false);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(TreeMap.prototype, \"navigationBar\", {\r\n        /**\r\n         * Returns navigationBar if it is added to a chart\r\n         */\r\n        get: function () {\r\n            return this._navigationBar;\r\n        },\r\n        /**\r\n         * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n         * drill-down path.\r\n         *\r\n         * @type {NavigationBar}\r\n         */\r\n        set: function (navigationBar) {\r\n            var _this = this;\r\n            if (this._navigationBar != navigationBar) {\r\n                this._navigationBar = navigationBar;\r\n                navigationBar.parent = this;\r\n                navigationBar.toBack();\r\n                navigationBar.links.template.events.on(\"hit\", function (event) {\r\n                    var dataItem = event.target.dataItem.dataContext;\r\n                    _this.zoomToChartDataItem(dataItem);\r\n                    _this.createTreeSeries(dataItem);\r\n                }, undefined, true);\r\n                this._disposers.push(navigationBar);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * (Re)validates chart's data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    TreeMap.prototype.validateData = function () {\r\n        this.series.clear();\r\n        _super.prototype.validateData.call(this);\r\n        if (this._homeDataItem) {\r\n            this._homeDataItem.dispose();\r\n        }\r\n        var homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n        this._homeDataItem = homeDataItem;\r\n        $iter.each(this.dataItems.iterator(), function (dataItem) {\r\n            dataItem.parent = homeDataItem;\r\n        });\r\n        homeDataItem.children = this.dataItems;\r\n        homeDataItem.x0 = 0;\r\n        homeDataItem.y0 = 0;\r\n        homeDataItem.name = this._homeText;\r\n        var maxX = 1000;\r\n        var maxY = (maxX * this.pixelHeight / this.pixelWidth) || 1000;\r\n        homeDataItem.x1 = maxX;\r\n        homeDataItem.y1 = maxY;\r\n        this.xAxis.min = 0;\r\n        this.xAxis.max = maxX;\r\n        this.yAxis.min = 0;\r\n        this.yAxis.max = maxY;\r\n        this.layoutItems(homeDataItem);\r\n        this.createTreeSeries(homeDataItem);\r\n    };\r\n    /**\r\n     * Layouts and sizes all items according to their value and\r\n     * `layoutAlgorithm`.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {TreeMapDataItem}  parent  Parent data item\r\n     */\r\n    TreeMap.prototype.layoutItems = function (parent, sorting) {\r\n        if (parent) {\r\n            var children = parent.children;\r\n            if (!sorting) {\r\n                sorting = this.sorting;\r\n            }\r\n            if (sorting == \"ascending\") {\r\n                children.values.sort(function (a, b) {\r\n                    return a.value - b.value;\r\n                });\r\n            }\r\n            if (sorting == \"descending\") {\r\n                children.values.sort(function (a, b) {\r\n                    return b.value - a.value;\r\n                });\r\n            }\r\n            this._updateDataItemIndexes(0);\r\n            this.layoutAlgorithm(parent);\r\n            for (var i = 0, len = children.length; i < len; i++) {\r\n                var node = children.getIndex(i);\r\n                if (node.children) {\r\n                    this.layoutItems(node);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Creates and returns a new treemap series.\r\n     *\r\n     * @todo Description\r\n     * @param {TreeMapDataItem}  dataItem  Data item to create series out of\r\n     */\r\n    TreeMap.prototype.createTreeSeries = function (dataItem) {\r\n        var _this = this;\r\n        this._tempSeries = [];\r\n        var navigationData = [dataItem];\r\n        // create parent series and navigation data\r\n        var parentDataItem = dataItem.parent;\r\n        while (parentDataItem != undefined) {\r\n            this.initSeries(parentDataItem);\r\n            navigationData.push(parentDataItem);\r\n            parentDataItem = parentDataItem.parent;\r\n        }\r\n        navigationData.reverse();\r\n        if (this.navigationBar) {\r\n            this.navigationBar.data = navigationData;\r\n        }\r\n        // create series and children series\r\n        this.createTreeSeriesReal(dataItem);\r\n        // add those which are not in the list\r\n        $array.each(this._tempSeries, function (series) {\r\n            if (_this.series.indexOf(series) == -1) {\r\n                _this.series.push(series);\r\n            }\r\n            series.zIndex = series.level;\r\n        });\r\n    };\r\n    /**\r\n     * [createTreeSeriesReal description]\r\n     *\r\n     * @todo Description\r\n     * @param {TreeMapDataItem} dataItem [description]\r\n     */\r\n    TreeMap.prototype.createTreeSeriesReal = function (dataItem) {\r\n        if (dataItem.children) {\r\n            var level = dataItem.level;\r\n            if (level < this.currentLevel + this.maxLevels) {\r\n                this.initSeries(dataItem);\r\n                for (var i = 0; i < dataItem.children.length; i++) {\r\n                    var child = dataItem.children.getIndex(i);\r\n                    if (child.children) {\r\n                        this.createTreeSeriesReal(child);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     * Overriding, as tree map series are created on the fly all the time\r\n     */\r\n    TreeMap.prototype.seriesAppeared = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * Initializes the treemap series.\r\n     *\r\n     * @todo Description\r\n     * @param {TreeMapDataItem}  dataItem  Chart data item\r\n     */\r\n    TreeMap.prototype.initSeries = function (dataItem) {\r\n        var _this = this;\r\n        if (!dataItem.series) {\r\n            var series = void 0;\r\n            var template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n            if (template) {\r\n                series = template.clone();\r\n            }\r\n            else {\r\n                series = this.series.create();\r\n            }\r\n            series.name = dataItem.name;\r\n            series.parentDataItem = dataItem;\r\n            dataItem.series = series;\r\n            var level = dataItem.level;\r\n            series.level = level;\r\n            var dataContext = dataItem.dataContext;\r\n            if (dataContext) {\r\n                series.config = dataContext.config;\r\n            }\r\n            this.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n            series.data = dataItem.children.values;\r\n            series.fill = dataItem.color;\r\n            series.columnsContainer.hide(0);\r\n            series.bulletsContainer.hide(0);\r\n            series.columns.template.adapter.add(\"fill\", function (fill, target) {\r\n                var dataItem = target.dataItem;\r\n                if (dataItem) {\r\n                    var treeMapDataItem = dataItem.treeMapDataItem;\r\n                    if (treeMapDataItem) {\r\n                        target.fill = treeMapDataItem.color;\r\n                        target.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n                        return treeMapDataItem.color;\r\n                    }\r\n                }\r\n            });\r\n            if (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n                series.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n                if (this.zoomable) {\r\n                    series.columns.template.events.on(\"hit\", function (event) {\r\n                        var seriesDataItem = event.target.dataItem;\r\n                        if (dataItem.level > _this.currentLevel) {\r\n                            _this.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n                        }\r\n                        else {\r\n                            _this.zoomToSeriesDataItem(seriesDataItem);\r\n                        }\r\n                    }, this, undefined);\r\n                }\r\n            }\r\n        }\r\n        this._tempSeries.push(dataItem.series);\r\n    };\r\n    /**\r\n     * Toggles bullets so that labels that belong to current drill level are\r\n     * shown.\r\n     *\r\n     * @param {number}  duration  Animation duration (ms)\r\n     */\r\n    TreeMap.prototype.toggleBullets = function (duration) {\r\n        var _this = this;\r\n        // hide all series which are not in tempSeries\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            if (_this._tempSeries.indexOf(series) == -1) {\r\n                //series.hideReal(duration);\r\n                series.columnsContainer.hide();\r\n                series.bulletsContainer.hide(duration);\r\n            }\r\n            else {\r\n                //series.showReal(duration);\r\n                series.columnsContainer.show();\r\n                series.bulletsContainer.show(duration);\r\n                if (series.level < _this.currentLevel) {\r\n                    series.bulletsContainer.hide(duration);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Zooms to particular item in series.\r\n     *\r\n     * @param {TreeMapSeriesDataItem}  dataItem  Data item\r\n     */\r\n    TreeMap.prototype.zoomToSeriesDataItem = function (dataItem) {\r\n        this.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n    };\r\n    /**\r\n     * Zooms to particular item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {TreeMapDataItem}  dataItem  Data item\r\n     */\r\n    TreeMap.prototype.zoomToChartDataItem = function (dataItem) {\r\n        var _this = this;\r\n        if (dataItem && dataItem.children) {\r\n            this.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n            this.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n            this.currentLevel = dataItem.level;\r\n            this.currentlyZoomed = dataItem;\r\n            this.createTreeSeries(dataItem);\r\n            var rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n            if (rangeChangeAnimation && !rangeChangeAnimation.isFinished()) {\r\n                this._dataDisposers.push(rangeChangeAnimation);\r\n                rangeChangeAnimation.events.once(\"animationended\", function () {\r\n                    _this.toggleBullets();\r\n                });\r\n            }\r\n            else {\r\n                this.toggleBullets();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    TreeMap.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"TreeMap chart\");\r\n        }\r\n        //this.homeText = this.language.translate(\"Home\");\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return {XYSeriesDataItem} Data Item\r\n     */\r\n    TreeMap.prototype.createDataItem = function () {\r\n        return new TreeMapDataItem();\r\n    };\r\n    Object.defineProperty(TreeMap.prototype, \"maxLevels\", {\r\n        /**\r\n         * @return {number} Maximum drill-down level\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxLevels\");\r\n        },\r\n        /**\r\n         * Maximum drill-down levels the chart will allow going to.\r\n         *\r\n         * If set, the chart will not drill-down further, even if there are sub-items\r\n         * available.\r\n         *\r\n         * Set to `1` to disable drill down functionality.\r\n         *\r\n         * @param {number}  value  Maximum drill-down level\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"maxLevels\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMap.prototype, \"currentLevel\", {\r\n        /**\r\n         * @return {number} Current level\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"currentLevel\");\r\n        },\r\n        /**\r\n         * Current drill-down level the chart is at.\r\n         *\r\n         * @param {number}  value  Current level\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"currentLevel\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMap.prototype, \"sorting\", {\r\n        get: function () {\r\n            return this.getPropertyValue(\"sorting\");\r\n        },\r\n        /**\r\n         * Sorting direction of treemap items.\r\n         *\r\n         * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n         *\r\n         * @default \"descending\"\r\n         * @param {\"none\" | \"ascending\" | \"descending\"} value [description]\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"sorting\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates and returns a new series of the suitable type.\r\n     *\r\n     * @return {this} new series\r\n     */\r\n    TreeMap.prototype.createSeries = function () {\r\n        return new TreeMapSeries();\r\n    };\r\n    Object.defineProperty(TreeMap.prototype, \"homeText\", {\r\n        /**\r\n         * @return {string} Home text\r\n         */\r\n        get: function () {\r\n            return this._homeText;\r\n        },\r\n        /**\r\n         * A text displayed on the \"home\" button which is used to go back to level 0\r\n         * after drill into sub-items.\r\n         *\r\n         * @param {string}  value  Home text\r\n         */\r\n        set: function (value) {\r\n            this._homeText = value;\r\n            if (this._homeDataItem) {\r\n                this._homeDataItem.name = this._homeText;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {object}  config  Config\r\n     */\r\n    TreeMap.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Instantiate layout algorithm\r\n            if ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n                switch (config[\"layoutAlgorithm\"]) {\r\n                    case \"squarify\":\r\n                        config[\"layoutAlgorithm\"] = this.squarify;\r\n                        break;\r\n                    case \"binaryTree\":\r\n                        config[\"layoutAlgorithm\"] = this.binaryTree;\r\n                        break;\r\n                    case \"slice\":\r\n                        config[\"layoutAlgorithm\"] = this.slice;\r\n                        break;\r\n                    case \"dice\":\r\n                        config[\"layoutAlgorithm\"] = this.dice;\r\n                        break;\r\n                    case \"sliceDice\":\r\n                        config[\"layoutAlgorithm\"] = this.sliceDice;\r\n                        break;\r\n                    default:\r\n                        delete config[\"layoutAlgorithm\"];\r\n                        break;\r\n                }\r\n            }\r\n            // Set type for navigation bar\r\n            if ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n                config.navigationBar.type = \"NavigationBar\";\r\n            }\r\n            _super.prototype.processConfig.call(this, config);\r\n        }\r\n    };\r\n    /**\r\n     * Measures the size of container and informs its children of how much size\r\n     * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n     * properties.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    TreeMap.prototype.validateLayout = function () {\r\n        _super.prototype.validateLayout.call(this);\r\n        this.layoutItems(this.currentlyZoomed);\r\n    };\r\n    /**\r\n     * Validates (processes) data items.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    TreeMap.prototype.validateDataItems = function () {\r\n        _super.prototype.validateDataItems.call(this);\r\n        this.layoutItems(this._homeDataItem);\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            series.validateRawData();\r\n        });\r\n        this.zoomToChartDataItem(this._homeDataItem);\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * TREEMAP LAYOUT FUNCTIONS\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * The functions below are from D3.js library (https://d3js.org/)\r\n     *\r\n     * --------------------------------------------------------------------------\r\n     * Copyright 2017 Mike Bostock\r\n     *\r\n     * Redistribution and use in source and binary forms, with or without\r\n     * modification, are permitted provided that the following conditions are met:\r\n     *\r\n     * 1. Redistributions of source code must retain the above copyright notice,\r\n     *    this list of conditions and the following disclaimer.\r\n     *\r\n     * 2. Redistributions in binary form must reproduce the above copyright\r\n     *    notice,this list of conditions and the following disclaimer in the\r\n     *    documentation and/or other materials provided with the distribution.\r\n     *\r\n     * 3. Neither the name of the copyright holder nor the names of its\r\n     *    contributors may be used to endorse or promote products derived from\r\n     *    this software without specific prior written permission.\r\n     *\r\n     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n     * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n     * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n     * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n     * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n     * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n     * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n     * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n     * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n     * POSSIBILITY OF SUCH DAMAGE.\r\n     * --------------------------------------------------------------------------\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Treemap layout algorithm: binaryTree.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {TreeMapDataItem}  parent  Data item\r\n     */\r\n    TreeMap.prototype.binaryTree = function (parent) {\r\n        var nodes = parent.children, i, n = nodes.length, sum, sums = new Array(n + 1);\r\n        for (sums[0] = sum = i = 0; i < n; ++i) {\r\n            sums[i + 1] = sum += nodes.getIndex(i).value;\r\n        }\r\n        partition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n        function partition(i, j, value, x0, y0, x1, y1) {\r\n            if (i >= j - 1) {\r\n                var node = nodes.getIndex(i);\r\n                node.x0 = x0, node.y0 = y0;\r\n                node.x1 = x1, node.y1 = y1;\r\n                return;\r\n            }\r\n            var valueOffset = sums[i], valueTarget = (value / 2) + valueOffset, k = i + 1, hi = j - 1;\r\n            while (k < hi) {\r\n                var mid = k + hi >>> 1;\r\n                if (sums[mid] < valueTarget)\r\n                    k = mid + 1;\r\n                else\r\n                    hi = mid;\r\n            }\r\n            if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k)\r\n                --k;\r\n            var valueLeft = sums[k] - valueOffset, valueRight = value - valueLeft;\r\n            if ((x1 - x0) > (y1 - y0)) {\r\n                var xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n                partition(i, k, valueLeft, x0, y0, xk, y1);\r\n                partition(k, j, valueRight, xk, y0, x1, y1);\r\n            }\r\n            else {\r\n                var yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n                partition(i, k, valueLeft, x0, y0, x1, yk);\r\n                partition(k, j, valueRight, x0, yk, x1, y1);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Treemap layout algorithm: slice.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {TreeMapDataItem}  parent  Data item\r\n     */\r\n    TreeMap.prototype.slice = function (parent) {\r\n        var x0 = parent.x0;\r\n        var x1 = parent.x1;\r\n        var y0 = parent.y0;\r\n        var y1 = parent.y1;\r\n        var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (y1 - y0) / parent.value;\r\n        while (++i < n) {\r\n            node = nodes.getIndex(i), node.x0 = x0, node.x1 = x1;\r\n            node.y0 = y0, node.y1 = y0 += node.value * k;\r\n        }\r\n    };\r\n    /**\r\n     * Treemap layout algorithm: dice.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {TreeMapDataItem}  parent  Data item\r\n     */\r\n    TreeMap.prototype.dice = function (parent) {\r\n        var x0 = parent.x0;\r\n        var x1 = parent.x1;\r\n        var y0 = parent.y0;\r\n        var y1 = parent.y1;\r\n        var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (x1 - x0) / parent.value;\r\n        while (++i < n) {\r\n            node = nodes.getIndex(i), node.y0 = y0, node.y1 = y1;\r\n            node.x0 = x0, node.x1 = x0 += node.value * k;\r\n        }\r\n    };\r\n    /**\r\n     * Treemap layout algorithm: slideDice.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {TreeMapDataItem}  parent  Data item\r\n     */\r\n    TreeMap.prototype.sliceDice = function (parent) {\r\n        parent.level & 1 ? this.slice(parent) : this.dice(parent);\r\n    };\r\n    /**\r\n     * Treemap layout algorithm: squarify.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {TreeMapDataItem}  parent  Data item\r\n     */\r\n    TreeMap.prototype.squarify = function (parent) {\r\n        var ratio = (1 + Math.sqrt(5)) / 2;\r\n        var x0 = parent.x0;\r\n        var x1 = parent.x1;\r\n        var y0 = parent.y0;\r\n        var y1 = parent.y1;\r\n        var nodes = parent.children;\r\n        var nodeValue;\r\n        var i0 = 0;\r\n        var i1 = 0;\r\n        var n = nodes.length;\r\n        var dx;\r\n        var dy;\r\n        var value = parent.value;\r\n        var sumValue;\r\n        var minValue;\r\n        var maxValue;\r\n        var newRatio;\r\n        var minRatio;\r\n        var alpha;\r\n        var beta;\r\n        while (i0 < n) {\r\n            dx = x1 - x0, dy = y1 - y0;\r\n            // Find the next non-empty node.\r\n            do\r\n                sumValue = nodes.getIndex(i1++).value;\r\n            while (!sumValue && i1 < n);\r\n            minValue = maxValue = sumValue;\r\n            alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n            beta = sumValue * sumValue * alpha;\r\n            minRatio = Math.max(maxValue / beta, beta / minValue);\r\n            // Keep adding nodes while the aspect ratio maintains or improves.\r\n            for (; i1 < n; ++i1) {\r\n                sumValue += nodeValue = nodes.getIndex(i1).value;\r\n                if (nodeValue < minValue) {\r\n                    minValue = nodeValue;\r\n                }\r\n                if (nodeValue > maxValue) {\r\n                    maxValue = nodeValue;\r\n                }\r\n                beta = sumValue * sumValue * alpha;\r\n                newRatio = Math.max(maxValue / beta, beta / minValue);\r\n                if (newRatio > minRatio) {\r\n                    sumValue -= nodeValue;\r\n                    break;\r\n                }\r\n                minRatio = newRatio;\r\n            }\r\n            // Position and record the row orientation.\r\n            var row = this.dataItems.template.clone();\r\n            row.value = sumValue;\r\n            row.dice = dx < dy;\r\n            row.children = nodes.slice(i0, i1);\r\n            row.x0 = x0;\r\n            row.y0 = y0;\r\n            row.x1 = x1;\r\n            row.y1 = y1;\r\n            if (row.dice) {\r\n                row.y1 = value ? y0 += dy * sumValue / value : y1;\r\n                this.dice(row);\r\n            }\r\n            else {\r\n                row.x1 = value ? x0 += dx * sumValue / value : x1, y1;\r\n                this.slice(row);\r\n            }\r\n            value -= sumValue, i0 = i1;\r\n        }\r\n    };\r\n    /**\r\n     * [handleDataItemValueChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    TreeMap.prototype.handleDataItemValueChange = function (dataItem, name) {\r\n        if (name == \"value\") {\r\n            this.invalidateDataItems();\r\n        }\r\n    };\r\n    TreeMap.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\r\n        if (name == \"value\") {\r\n            this.invalidateDataItems();\r\n        }\r\n    };\r\n    /**\r\n     * Setups the legend to use the chart's data.\r\n     * @ignore\r\n     */\r\n    TreeMap.prototype.feedLegend = function () {\r\n        var legend = this.legend;\r\n        if (legend) {\r\n            var legendData_1 = [];\r\n            $iter.each(this.series.iterator(), function (series) {\r\n                if (series.level == 1) {\r\n                    if (!series.hiddenInLegend) {\r\n                        legendData_1.push(series);\r\n                    }\r\n                }\r\n            });\r\n            legend.dataFields.name = \"name\";\r\n            legend.data = legendData_1;\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    TreeMap.prototype.disposeData = function () {\r\n        _super.prototype.disposeData.call(this);\r\n        this._homeDataItem = undefined;\r\n        this.series.clear();\r\n        if (this.navigationBar) {\r\n            this.navigationBar.disposeData();\r\n        }\r\n        this.xAxis.disposeData();\r\n        this.yAxis.disposeData();\r\n    };\r\n    return TreeMap;\r\n}(XYChart));\r\nexport { TreeMap };\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n//# sourceMappingURL=TreeMap.js.map","/**\r\n * XY Chart module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { XYCursor } from \"../cursors/XYCursor\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar XYChartDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(XYChartDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function XYChartDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"XYChartDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return XYChartDataItem;\r\n}(SerialChartDataItem));\r\nexport { XYChartDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nvar XYChart = /** @class */ (function (_super) {\r\n    tslib_1.__extends(XYChart, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function XYChart() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Defines the type of horizontal axis rederer.\r\n         *\r\n         * @type {typeof AxisRendererX}\r\n         */\r\n        _this._axisRendererX = AxisRendererX;\r\n        /**\r\n         * Defines the type of vertical axis rederer.\r\n         *\r\n         * @type {typeof AxisRendererY}\r\n         */\r\n        _this._axisRendererY = AxisRendererY;\r\n        _this.className = \"XYChart\";\r\n        // Set defaults\r\n        //this.margin(10, 10, 10, 10);\r\n        _this.maskBullets = true;\r\n        // Create main chart container\r\n        var chartContainer = _this.chartContainer;\r\n        chartContainer.layout = \"vertical\";\r\n        _this.padding(15, 15, 15, 15);\r\n        // Create top axes container\r\n        var topAxesCont = chartContainer.createChild(Container);\r\n        topAxesCont.shouldClone = false;\r\n        topAxesCont.layout = \"vertical\";\r\n        topAxesCont.width = percent(100);\r\n        topAxesCont.zIndex = 1;\r\n        _this.topAxesContainer = topAxesCont;\r\n        // Create vertical axes and plot area container\r\n        // Plot area and vertical axes share the whole width of the chart,\r\n        // so we need to put then into a separate container so that layouting\r\n        // engine takes care of the positioning\r\n        var yAxesAndPlotCont = chartContainer.createChild(Container);\r\n        yAxesAndPlotCont.shouldClone = false;\r\n        yAxesAndPlotCont.layout = \"horizontal\";\r\n        yAxesAndPlotCont.width = percent(100);\r\n        yAxesAndPlotCont.height = percent(100);\r\n        yAxesAndPlotCont.zIndex = 0;\r\n        _this.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n        // Create a container for bottom axes\r\n        var bottomAxesCont = chartContainer.createChild(Container);\r\n        bottomAxesCont.shouldClone = false;\r\n        bottomAxesCont.width = percent(100);\r\n        bottomAxesCont.layout = \"vertical\";\r\n        bottomAxesCont.zIndex = 1;\r\n        _this.bottomAxesContainer = bottomAxesCont;\r\n        // Create a container for left-side axes\r\n        var leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n        leftAxesCont.shouldClone = false;\r\n        leftAxesCont.layout = \"horizontal\";\r\n        leftAxesCont.height = percent(100);\r\n        leftAxesCont.contentAlign = \"right\";\r\n        leftAxesCont.events.on(\"transformed\", _this.updateXAxesMargins, _this, false);\r\n        leftAxesCont.zIndex = 1;\r\n        _this.leftAxesContainer = leftAxesCont;\r\n        // Create a container for plot area\r\n        var plotCont = yAxesAndPlotCont.createChild(Container);\r\n        plotCont.shouldClone = false;\r\n        plotCont.height = percent(100);\r\n        plotCont.width = percent(100);\r\n        // Create transparend background for plot container so that hover works\r\n        // on all of it\r\n        plotCont.background.fillOpacity = 0;\r\n        _this.plotContainer = plotCont;\r\n        // must go below plot container\r\n        _this.mouseWheelBehavior = \"none\";\r\n        _this._cursorContainer = plotCont;\r\n        // Create a container for right-side axes\r\n        var rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n        rightAxesCont.shouldClone = false;\r\n        rightAxesCont.layout = \"horizontal\";\r\n        rightAxesCont.height = percent(100);\r\n        rightAxesCont.zIndex = 1;\r\n        rightAxesCont.events.on(\"transformed\", _this.updateXAxesMargins, _this, false);\r\n        _this.rightAxesContainer = rightAxesCont;\r\n        _this.seriesContainer.parent = plotCont;\r\n        _this.bulletsContainer.parent = plotCont;\r\n        var zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n        zoomOutButton.shouldClone = false;\r\n        zoomOutButton.align = \"right\";\r\n        zoomOutButton.valign = \"top\";\r\n        zoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n        zoomOutButton.marginTop = 5;\r\n        zoomOutButton.marginRight = 5;\r\n        zoomOutButton.hide(0);\r\n        _this.zoomOutButton = zoomOutButton;\r\n        _this._bulletMask = _this.plotContainer;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    XYChart.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        this.zoomOutButton.exportable = false;\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"X/Y chart\");\r\n        }\r\n    };\r\n    /**\r\n     * Draws the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        this.seriesContainer.toFront();\r\n        this.bulletsContainer.toFront();\r\n        if (this.maskBullets) {\r\n            this.bulletsContainer.mask = this._bulletMask;\r\n        }\r\n        this.updateSeriesLegend();\r\n    };\r\n    /**\r\n     * Triggers a redrawing of all chart's series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.updatePlotElements = function () {\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            series.invalidate();\r\n        });\r\n    };\r\n    /**\r\n     * Triggers data (re)validation which in turn can cause a redraw of the\r\n     * whole chart or just aprticular series / elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.validateData = function () {\r\n        // tell axes that data changed\r\n        if (this._parseDataFrom == 0) {\r\n            $iter.each(this.xAxes.iterator(), function (axis) {\r\n                axis.dataChangeUpdate();\r\n            });\r\n            $iter.each(this.yAxes.iterator(), function (axis) {\r\n                axis.dataChangeUpdate();\r\n            });\r\n            $iter.each(this.series.iterator(), function (series) {\r\n                series.dataChangeUpdate();\r\n            });\r\n        }\r\n        _super.prototype.validateData.call(this);\r\n    };\r\n    /**\r\n     * Updates margins for horizontal axes based on settings and available space.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.updateXAxesMargins = function () {\r\n        var leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n        var rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n        var bottomAxesCont = this.bottomAxesContainer;\r\n        if (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n            bottomAxesCont.paddingLeft = leftAxesWidth;\r\n            bottomAxesCont.paddingRight = rightAxesWidth;\r\n        }\r\n        var topAxesCont = this.topAxesContainer;\r\n        if (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n            topAxesCont.paddingLeft = leftAxesWidth;\r\n            topAxesCont.paddingRight = rightAxesWidth;\r\n        }\r\n    };\r\n    /**\r\n     * Triggers an update on the horizontal axis when one of its properties\r\n     * change.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n     */\r\n    XYChart.prototype.handleXAxisChange = function (event) {\r\n        this.updateXAxis(event.target);\r\n    };\r\n    /**\r\n     * Triggers an update on the vertical axis when one of its properties\r\n     * change.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AMEvent<Axis, ISpriteEvents>[\"propertychanged\"]} event An event object\r\n     */\r\n    XYChart.prototype.handleYAxisChange = function (event) {\r\n        this.updateYAxis(event.target);\r\n    };\r\n    /**\r\n     * Sets up a new horizontal (X) axis when it is added to the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IListEvents<Axis>[\"inserted\"]}  event  Axis insert event\r\n     */\r\n    XYChart.prototype.processXAxis = function (event) {\r\n        var axis = event.newValue;\r\n        axis.chart = this;\r\n        axis.renderer = new this._axisRendererX();\r\n        axis.axisLetter = \"X\";\r\n        axis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this);\r\n        axis.events.on(\"startchanged\", this.handleXAxisRangeChange, this, false);\r\n        axis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\r\n        // Although axis does not use data directly, we set dataProvider here\r\n        // (but not add to chart data users) to hold up rendering before data\r\n        // is parsed (system handles this)\r\n        axis.dataProvider = this;\r\n        this.updateXAxis(axis.renderer);\r\n        this.processAxis(axis);\r\n    };\r\n    /**\r\n     * Sets up a new vertical (Y) axis when it is added to the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IListEvents<Axis>[\"inserted\"]} event Axis insert event\r\n     */\r\n    XYChart.prototype.processYAxis = function (event) {\r\n        var axis = event.newValue;\r\n        axis.chart = this;\r\n        axis.renderer = new this._axisRendererY();\r\n        axis.axisLetter = \"Y\";\r\n        axis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this);\r\n        axis.events.on(\"startchanged\", this.handleYAxisRangeChange, this, false);\r\n        axis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\r\n        // Although axis does not use data directly, we set dataProvider here\r\n        // (but not add to chart data users) to hold up rendering before data\r\n        // is parsed (system handles this)\r\n        axis.dataProvider = this;\r\n        this.updateYAxis(axis.renderer);\r\n        this.processAxis(axis);\r\n    };\r\n    /**\r\n     * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n     * value range changes.\r\n     */\r\n    XYChart.prototype.handleXAxisRangeChange = function () {\r\n        var range = this.getCommonAxisRange(this.xAxes);\r\n        if (this.scrollbarX) {\r\n            this.zoomAxes(this.xAxes, range, true);\r\n        }\r\n        this.toggleZoomOutButton();\r\n        this.updateScrollbar(this.scrollbarX, range);\r\n    };\r\n    /**\r\n     * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n     * zoomed out or not.\r\n     */\r\n    XYChart.prototype.toggleZoomOutButton = function () {\r\n        if (this.zoomOutButton) {\r\n            var show_1 = false;\r\n            $iter.eachContinue(this.xAxes.iterator(), function (axis) {\r\n                if ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n                    show_1 = true;\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n            $iter.eachContinue(this.yAxes.iterator(), function (axis) {\r\n                if ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n                    show_1 = true;\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n            if (!this.seriesAppeared) {\r\n                show_1 = false;\r\n            }\r\n            if (show_1) {\r\n                this.zoomOutButton.show();\r\n            }\r\n            else {\r\n                this.zoomOutButton.hide();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     * moved this check to a separate method so that we could override it in TreeMapSeries\r\n     */\r\n    XYChart.prototype.seriesAppeared = function () {\r\n        var appeared = false;\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            if (!series.appeared) {\r\n                appeared = false;\r\n                return false;\r\n            }\r\n        });\r\n        return appeared;\r\n    };\r\n    /**\r\n     * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n     * value range changes.\r\n     */\r\n    XYChart.prototype.handleYAxisRangeChange = function () {\r\n        var range = this.getCommonAxisRange(this.yAxes);\r\n        if (this.scrollbarY) {\r\n            this.zoomAxes(this.yAxes, range, true);\r\n        }\r\n        this.toggleZoomOutButton();\r\n        this.updateScrollbar(this.scrollbarY, range);\r\n    };\r\n    /**\r\n     * Updates a relative scrollbar whenever data range of the axis changes.\r\n     *\r\n     * @param {Scrollbar}  scrollbar  Scrollbar instance\r\n     * @param {IRange}     range      New data (values) range of the axis\r\n     */\r\n    XYChart.prototype.updateScrollbar = function (scrollbar, range) {\r\n        if (scrollbar) {\r\n            scrollbar.skipRangeEvents();\r\n            scrollbar.start = range.start;\r\n            scrollbar.end = range.end;\r\n        }\r\n    };\r\n    /**\r\n     * Returns a common range of values between a list of axes.\r\n     *\r\n     * This is used to synchronize the zoom between multiple axes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {List<Axis>}  axes  A list of axes\r\n     * @return {IRange}            Common value range\r\n     */\r\n    XYChart.prototype.getCommonAxisRange = function (axes) {\r\n        var start;\r\n        var end;\r\n        $iter.each(axes.iterator(), function (axis) {\r\n            var axisStart = axis.start;\r\n            var axisEnd = axis.end;\r\n            if (axis.renderer.inversed) {\r\n                axisStart = 1 - axis.end;\r\n                axisEnd = 1 - axis.start;\r\n            }\r\n            if (!$type.isNumber(start) || (axisStart < start)) {\r\n                start = axisStart;\r\n            }\r\n            if (!$type.isNumber(end) || (axisEnd > end)) {\r\n                end = axisEnd;\r\n            }\r\n        });\r\n        return { start: start, end: end };\r\n    };\r\n    /**\r\n     * Triggers (re)rendering of the horizontal (X) axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Axis}  axis  Axis\r\n     */\r\n    XYChart.prototype.updateXAxis = function (renderer) {\r\n        var axis = renderer.axis;\r\n        if (renderer.opposite) {\r\n            axis.parent = this.topAxesContainer;\r\n            axis.toFront();\r\n        }\r\n        else {\r\n            axis.parent = this.bottomAxesContainer;\r\n            axis.toBack();\r\n        }\r\n        if (axis.renderer) {\r\n            axis.renderer.processRenderer();\r\n        }\r\n    };\r\n    /**\r\n     * Triggers (re)rendering of the vertical (Y) axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Axis}  axis  Axis\r\n     */\r\n    XYChart.prototype.updateYAxis = function (renderer) {\r\n        var axis = renderer.axis;\r\n        if (renderer.opposite) {\r\n            axis.parent = this.rightAxesContainer;\r\n            axis.toBack();\r\n        }\r\n        else {\r\n            axis.parent = this.leftAxesContainer;\r\n            axis.toFront();\r\n        }\r\n        if (axis.renderer) {\r\n            axis.renderer.processRenderer();\r\n        }\r\n    };\r\n    /**\r\n     * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n     * and containers for placement.\r\n     *\r\n     * @param {Axis}  axis  Axis\r\n     */\r\n    XYChart.prototype.processAxis = function (axis) {\r\n        var _this = this;\r\n        // Value axis does not use data directly, only category axis does\r\n        if (axis instanceof CategoryAxis) {\r\n            this._dataUsers.moveValue(axis);\r\n        }\r\n        var renderer = axis.renderer;\r\n        renderer.gridContainer.parent = this.plotContainer;\r\n        renderer.gridContainer.toBack();\r\n        renderer.breakContainer.parent = this.plotContainer;\r\n        renderer.breakContainer.toFront();\r\n        renderer.breakContainer.zIndex = 10;\r\n        axis.addDisposer(new Disposer(function () {\r\n            _this.dataUsers.removeValue(axis);\r\n        }));\r\n        this.plotContainer.events.on(\"maxsizechanged\", function () {\r\n            if (_this.inited) {\r\n                axis.invalidateDataItems();\r\n            }\r\n        }, axis, false);\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"xAxes\", {\r\n        /**\r\n         * A list of horizontal (X) axes.\r\n         *\r\n         * @return {List<Axis>} List of axes\r\n         */\r\n        get: function () {\r\n            if (!this._xAxes) {\r\n                this._xAxes = new List();\r\n                this._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\r\n                this._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n            }\r\n            return this._xAxes;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChart.prototype.handleAxisRemoval = function (event) {\r\n        var axis = event.oldValue;\r\n        this.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\r\n        if (axis.autoDispose) {\r\n            axis.dispose();\r\n        }\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"yAxes\", {\r\n        /**\r\n         * A list of vertical (Y) axes.\r\n         *\r\n         * @return {List<Axis>} List of axes\r\n         */\r\n        get: function () {\r\n            if (!this._yAxes) {\r\n                this._yAxes = new List();\r\n                this._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\r\n                this._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n            }\r\n            return this._yAxes;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Decorates a new [[XYSeries]] object with required parameters when it is\r\n     * added to the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IListEvents<XYSeries>[\"inserted\"]}  event  Event\r\n     */\r\n    XYChart.prototype.handleSeriesAdded = function (event) {\r\n        try {\r\n            _super.prototype.handleSeriesAdded.call(this, event);\r\n            var series = event.newValue;\r\n            series.xAxis; // this is enough to get axis, handled in getter\r\n            series.yAxis; // this is enough to get axis, handled in getter\r\n            if (series.fill == undefined) {\r\n                series.fill = this.colors.next();\r\n            }\r\n            if (series.stroke == undefined) {\r\n                series.stroke = series.fill;\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.raiseCriticalError(e);\r\n        }\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"cursor\", {\r\n        /**\r\n         * @return {XYCursor} Cursor\r\n         */\r\n        get: function () {\r\n            return this._cursor;\r\n        },\r\n        /**\r\n         * Chart's [[Cursor]].\r\n         *\r\n         * @param {XYCursor}  cursor  Cursor\r\n         */\r\n        set: function (cursor) {\r\n            if (this._cursor != cursor) {\r\n                if (this._cursor) {\r\n                    this.removeDispose(this._cursor);\r\n                }\r\n                this._cursor = cursor;\r\n                if (cursor) {\r\n                    // TODO this is wrong, fix it\r\n                    this._disposers.push(cursor);\r\n                    cursor.chart = this;\r\n                    cursor.parent = this._cursorContainer;\r\n                    cursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\r\n                    cursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\r\n                    cursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\r\n                    cursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\r\n                    cursor.events.on(\"panning\", this.handleCursorPanning, this, false);\r\n                    cursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\r\n                    cursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\r\n                    cursor.events.on(\"hidden\", this.handleHideCursor, this, false);\r\n                    cursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates and returns a new [[Cursor]] suitable for this chart type.\r\n     *\r\n     * @return {this} New cursor\r\n     */\r\n    XYChart.prototype.createCursor = function () {\r\n        return new XYCursor();\r\n    };\r\n    /**\r\n     * Performs tasks when the cursor's position changes, e.g. shows proper\r\n     * tooltips on axes and series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.handleCursorPositionChange = function () {\r\n        var cursor = this.cursor;\r\n        if (cursor.visible && !cursor.isHiding) {\r\n            var xPosition = this.cursor.xPosition;\r\n            var yPosition = this.cursor.yPosition;\r\n            this.showSeriesTooltip({\r\n                x: xPosition,\r\n                y: yPosition\r\n            });\r\n            var exceptAxis = void 0;\r\n            var snapToSeries = cursor.snapToSeries;\r\n            if (snapToSeries) {\r\n                if (snapToSeries.baseAxis == snapToSeries.xAxis) {\r\n                    exceptAxis = snapToSeries.yAxis;\r\n                }\r\n                if (snapToSeries.baseAxis == snapToSeries.yAxis) {\r\n                    exceptAxis = snapToSeries.xAxis;\r\n                }\r\n            }\r\n            this.showAxisTooltip(this.xAxes, xPosition, exceptAxis);\r\n            this.showAxisTooltip(this.yAxes, yPosition, exceptAxis);\r\n        }\r\n    };\r\n    /**\r\n     * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.handleHideCursor = function () {\r\n        this.hideObjectTooltip(this.xAxes);\r\n        this.hideObjectTooltip(this.yAxes);\r\n        this.hideObjectTooltip(this.series);\r\n        this.updateSeriesLegend();\r\n    };\r\n    /**\r\n     * Updates values for each series' legend item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.updateSeriesLegend = function () {\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            series.updateLegendValue();\r\n        });\r\n    };\r\n    /**\r\n     * Hides a tooltip for a list of objects.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {List<Sprite>}  sprites  A list of sprites to hide tooltip for\r\n     */\r\n    XYChart.prototype.hideObjectTooltip = function (sprites) {\r\n        $iter.each(sprites.iterator(), function (sprite) {\r\n            sprite.hideTooltip(0);\r\n        });\r\n    };\r\n    /**\r\n     * Shows a tooltip for all chart's series, using specific coordinates as a\r\n     * reference point.\r\n     *\r\n     * The tooltip might be shown at different coordinates depending on the\r\n     * actual data point's position, overlapping with other tooltips, etc.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IPoint}  position  Reference point\r\n     */\r\n    XYChart.prototype.showSeriesTooltip = function (position) {\r\n        var _this = this;\r\n        if (!position) {\r\n            this.series.each(function (series) {\r\n                series.hideTooltip();\r\n            });\r\n            return;\r\n        }\r\n        var seriesPoints = [];\r\n        var sum = 0;\r\n        this.series.each(function (series) {\r\n            //if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\r\n            var point = series.showTooltipAtPosition(position.x, position.y);\r\n            if (point) {\r\n                series.tooltip.setBounds({ x: 0, y: 0, width: _this.pixelWidth, height: _this.pixelHeight });\r\n                seriesPoints.push({ series: series, point: point });\r\n            }\r\n            //}\r\n        });\r\n        this.sortSeriesTooltips(seriesPoints);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChart.prototype.sortSeriesTooltips = function (seriesPoints) {\r\n        var topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n        var bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n        var sum = 0;\r\n        var filteredSeriesPoints = [];\r\n        $array.each(seriesPoints, function (seriesPoint) {\r\n            var point = seriesPoint.point;\r\n            if (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n                filteredSeriesPoints.push({ point: point, series: seriesPoint.series });\r\n                sum += point.y;\r\n            }\r\n        });\r\n        seriesPoints = filteredSeriesPoints;\r\n        seriesPoints.sort(function (a, b) {\r\n            if (a.point.y > b.point.y) {\r\n                return 1;\r\n            }\r\n            else if (a.point.y < b.point.y) {\r\n                return -1;\r\n            }\r\n            else {\r\n                return 0;\r\n            }\r\n        });\r\n        var averageY = sum / seriesPoints.length;\r\n        var maxY = $utils.svgPointToDocument({ x: 0, y: 0 }, this.svgContainer.SVGContainer).y;\r\n        if (seriesPoints.length > 0) {\r\n            var top_1 = topLeft.y;\r\n            var bottom = bottomRight.y;\r\n            var topPoint = $utils.spritePointToDocument({ x: 0, y: top_1 }, this);\r\n            var dropped = false;\r\n            if (averageY > top_1 + (bottom - top_1) / 2) {\r\n                var nextHeight = bottom;\r\n                for (var i = seriesPoints.length - 1; i >= 0; i--) {\r\n                    var series = seriesPoints[i].series;\r\n                    var tooltip = series.tooltip;\r\n                    var pointY = seriesPoints[i].point.y;\r\n                    tooltip.setBounds({ x: 0, y: -maxY, width: this.pixelWidth, height: nextHeight + maxY });\r\n                    if (tooltip.invalid) {\r\n                        tooltip.validate();\r\n                    }\r\n                    tooltip.toBack();\r\n                    nextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n                    if (nextHeight < -maxY) {\r\n                        dropped = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (averageY <= top_1 + (bottom - top_1) / 2 || dropped) {\r\n                var nextY = top_1;\r\n                for (var i = 0, len = seriesPoints.length; i < len; i++) {\r\n                    var series = seriesPoints[i].series;\r\n                    var pointY = seriesPoints[i].point.y;\r\n                    var tooltip = series.tooltip;\r\n                    tooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n                    if (tooltip.invalid) {\r\n                        tooltip.validate();\r\n                    }\r\n                    tooltip.toBack();\r\n                    nextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Shows tooltips for a list of axes at specific position.\r\n     *\r\n     * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n     * vertical axes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {List<Axis>}  axes      List of axes to show tooltip on\r\n     * @param {number}      position  Position (px)\r\n     */\r\n    XYChart.prototype.showAxisTooltip = function (axes, position, except) {\r\n        var _this = this;\r\n        $iter.each(axes.iterator(), function (axis) {\r\n            if (axis != except) {\r\n                if (_this.dataItems.length > 0 || axis.dataItems.length > 0) {\r\n                    axis.showTooltipAtPosition(position);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n     *\r\n     * @param  {Axis}    axis   Axis\r\n     * @param  {IRange}  range  Range\r\n     * @return {IRange}         Modified range\r\n     */\r\n    XYChart.prototype.getUpdatedRange = function (axis, range) {\r\n        if (!axis) {\r\n            return;\r\n        }\r\n        var start;\r\n        var end;\r\n        var inversed = axis.renderer.inversed;\r\n        if (axis.renderer instanceof AxisRendererY) {\r\n            range = $math.invertRange(range);\r\n        }\r\n        if (inversed) {\r\n            $math.invertRange(range);\r\n            start = 1 - axis.end;\r\n            end = 1 - axis.start;\r\n        }\r\n        else {\r\n            start = axis.start;\r\n            end = axis.end;\r\n        }\r\n        var difference = end - start;\r\n        return {\r\n            start: start + range.start * difference,\r\n            end: start + range.end * difference\r\n        };\r\n    };\r\n    /**\r\n     * Performs zoom and other operations when user finishes zooming using chart\r\n     * cursor, e.g. zooms axes.\r\n     *\r\n     * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n     */\r\n    XYChart.prototype.handleCursorZoomEnd = function (event) {\r\n        var cursor = this.cursor;\r\n        var behavior = cursor.behavior;\r\n        if (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n            var xRange = cursor.xRange;\r\n            if (xRange && this.xAxes.length > 0) {\r\n                xRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n                xRange.priority = \"start\";\r\n                this.zoomAxes(this.xAxes, xRange);\r\n            }\r\n        }\r\n        if (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n            var yRange = cursor.yRange;\r\n            if (yRange && this.yAxes.length > 0) {\r\n                yRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n                yRange.priority = \"start\";\r\n                this.zoomAxes(this.yAxes, yRange);\r\n            }\r\n        }\r\n        this.handleHideCursor();\r\n    };\r\n    /**\r\n     * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n     *\r\n     * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n     */\r\n    XYChart.prototype.handleCursorPanStart = function (event) {\r\n        var xAxis = this.xAxes.getIndex(0);\r\n        if (xAxis) {\r\n            this._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n        }\r\n        var yAxis = this.yAxes.getIndex(0);\r\n        if (yAxis) {\r\n            this._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n        }\r\n    };\r\n    /**\r\n     * Performs zoom and other operations when user ends panning\r\n     *\r\n     * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n     */\r\n    XYChart.prototype.handleCursorPanEnd = function (event) {\r\n        var cursor = this.cursor;\r\n        var behavior = cursor.behavior;\r\n        if (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n            var panEndRange = this._panEndXRange;\r\n            var delta = 0;\r\n            if (panEndRange.start < 0) {\r\n                delta = panEndRange.start;\r\n            }\r\n            if (panEndRange.end > 1) {\r\n                delta = panEndRange.end - 1;\r\n            }\r\n            this.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n            this._panEndXRange = undefined;\r\n            this._panStartXRange = undefined;\r\n        }\r\n        if (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n            var panEndRange = this._panEndYRange;\r\n            var delta = 0;\r\n            if (panEndRange.start < 0) {\r\n                delta = panEndRange.start;\r\n            }\r\n            if (panEndRange.end > 1) {\r\n                delta = panEndRange.end - 1;\r\n            }\r\n            this.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n            this._panEndYRange = undefined;\r\n            this._panStartYRange = undefined;\r\n        }\r\n    };\r\n    XYChart.prototype.handleCursorCanceled = function () {\r\n        this._panEndXRange = undefined;\r\n        this._panStartXRange = undefined;\r\n    };\r\n    /**\r\n     * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n     *\r\n     * @param {IXYCursorEvents[\"panning\"]} event Cursor's event\r\n     */\r\n    XYChart.prototype.handleCursorPanning = function (event) {\r\n        var cursor = this.cursor;\r\n        var behavior = cursor.behavior;\r\n        var maxPanOut = cursor.maxPanOut;\r\n        if (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n            var panStartRange = this._panStartXRange;\r\n            var range = cursor.xRange;\r\n            var difference = panStartRange.end - panStartRange.start;\r\n            var delta = range.start;\r\n            var newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n            var newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n            if (newStart <= 0) {\r\n                newEnd = newStart + difference;\r\n            }\r\n            if (newEnd >= 1) {\r\n                newStart = newEnd - difference;\r\n            }\r\n            var newRange = {\r\n                start: newStart,\r\n                end: newEnd\r\n            };\r\n            this._panEndXRange = newRange;\r\n            this.zoomAxes(this.xAxes, newRange, false, false, cursor.maxPanOut);\r\n        }\r\n        if (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n            var panStartRange = this._panStartYRange;\r\n            var range = cursor.yRange;\r\n            var difference = panStartRange.end - panStartRange.start;\r\n            var delta = range.start;\r\n            var newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n            var newEnd = Math.min(range.start + panStartRange.end, 1 + maxPanOut);\r\n            if (newStart <= 0) {\r\n                newEnd = newStart + difference;\r\n            }\r\n            if (newEnd >= 1) {\r\n                newStart = newEnd - difference;\r\n            }\r\n            var newRange = {\r\n                start: newStart,\r\n                end: newEnd\r\n            };\r\n            this._panEndYRange = newRange;\r\n            this.zoomAxes(this.yAxes, newRange, false, false, cursor.maxPanOut);\r\n        }\r\n        this.handleHideCursor();\r\n    };\r\n    /**\r\n     * Performs zoom and other operations when user starts zooming using chart\r\n     * cursor, e.g. zooms axes.\r\n     *\r\n     * @param {IXYCursorEvents[\"zoomended\"]} event Cursor's event\r\n     */\r\n    XYChart.prototype.handleCursorZoomStart = function (event) {\r\n        // Nothing here\r\n        // This method is here only as a \"placeholder\" for extending classes to\r\n        // override if necessary\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"scrollbarX\", {\r\n        /**\r\n         * @return {Scrollbar} Scrollbar\r\n         */\r\n        get: function () {\r\n            return this._scrollbarX;\r\n        },\r\n        /**\r\n         * Horizontal (X) scrollbar.\r\n         *\r\n         * @param {Scrollbar} scrollbar Scrollbar\r\n         */\r\n        set: function (scrollbar) {\r\n            var _this = this;\r\n            if (this._scrollbarX) {\r\n                this.removeDispose(this._scrollbarX);\r\n            }\r\n            this._scrollbarX = scrollbar;\r\n            if (scrollbar) {\r\n                this._disposers.push(scrollbar);\r\n                scrollbar.parent = this.topAxesContainer;\r\n                scrollbar.startGrip.exportable = false;\r\n                scrollbar.endGrip.exportable = false;\r\n                scrollbar.toBack();\r\n                scrollbar.orientation = \"horizontal\";\r\n                scrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\r\n                // accessibility related\r\n                scrollbar.adapter.add(\"positionValue\", function (arg) {\r\n                    var xAxis = _this.xAxes.getIndex(0);\r\n                    if (xAxis) {\r\n                        arg.value = xAxis.getPositionLabel(arg.position);\r\n                    }\r\n                    return arg;\r\n                });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYChart.prototype, \"scrollbarY\", {\r\n        /**\r\n         * @return {Scrollbar} Scrollbar\r\n         */\r\n        get: function () {\r\n            return this._scrollbarY;\r\n        },\r\n        /**\r\n         * Vertical (Y) scrollbar.\r\n         *\r\n         * @param {Scrollbar} scrollbar Scrollbar\r\n         */\r\n        set: function (scrollbar) {\r\n            var _this = this;\r\n            if (this._scrollbarY) {\r\n                this.removeDispose(this._scrollbarY);\r\n            }\r\n            this._scrollbarY = scrollbar;\r\n            if (scrollbar) {\r\n                this._disposers.push(scrollbar);\r\n                scrollbar.parent = this.rightAxesContainer;\r\n                scrollbar.startGrip.exportable = false;\r\n                scrollbar.endGrip.exportable = false;\r\n                scrollbar.toFront();\r\n                scrollbar.orientation = \"vertical\";\r\n                scrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\r\n                // accessibility related\r\n                scrollbar.adapter.add(\"positionValue\", function (arg) {\r\n                    var yAxis = _this.yAxes.getIndex(0);\r\n                    if (yAxis) {\r\n                        arg.value = yAxis.getPositionLabel(arg.position);\r\n                    }\r\n                    return arg;\r\n                });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n     * on it changes.\r\n     *\r\n     * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n     */\r\n    XYChart.prototype.handleXScrollbarChange = function (event) {\r\n        var scrollbar = event.target;\r\n        var range = scrollbar.range;\r\n        if (range.end == 1) {\r\n            range.priority = \"end\";\r\n        }\r\n        if (range.start == 0) {\r\n            range.priority = \"start\";\r\n        }\r\n        range = this.zoomAxes(this.xAxes, range);\r\n        scrollbar.fixRange(range);\r\n    };\r\n    /**\r\n     * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n     * on it changes.\r\n     *\r\n     * @param {AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]} event Scrollbar range change event\r\n     */\r\n    XYChart.prototype.handleYScrollbarChange = function (event) {\r\n        var scrollbar = event.target;\r\n        var range = this.zoomAxes(this.yAxes, scrollbar.range);\r\n        scrollbar.fixRange(range);\r\n    };\r\n    /**\r\n     * Zooms axes that are affected by to specific relative range.\r\n     *\r\n     * @param  {List<Axis>}  axes       List of axes to zoom\r\n     * @param  {IRange}      range      Range of values to zoom to (0-1)\r\n     * @param  {boolean}     instantly  If set to `true` will skip zooming animation\r\n     * @return {IRange}                 Recalculated range that is common to all involved axes\r\n     */\r\n    XYChart.prototype.zoomAxes = function (axes, range, instantly, round, declination) {\r\n        var realRange = { start: 0, end: 1 };\r\n        this.showSeriesTooltip(); // hides\r\n        if (!this.dataInvalid) {\r\n            $iter.each(axes.iterator(), function (axis) {\r\n                if (axis.renderer.inversed) {\r\n                    range = $math.invertRange(range);\r\n                }\r\n                axis.hideTooltip(0);\r\n                if (round) {\r\n                    var diff = range.end - range.start;\r\n                    range.start = axis.roundPosition(range.start + 0.0001, 0);\r\n                    range.end = range.start + diff;\r\n                }\r\n                var axisRange = axis.zoom(range, instantly, instantly, declination);\r\n                if (axis.renderer.inversed) {\r\n                    axisRange = $math.invertRange(axisRange);\r\n                }\r\n                realRange = axisRange;\r\n            });\r\n        }\r\n        return realRange;\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"maskBullets\", {\r\n        /**\r\n         * @return {boolean} Mask bullet container?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maskBullets\");\r\n        },\r\n        /**\r\n         * Indicates if bullet container is masked.\r\n         *\r\n         * If it is set to `true`, any bullets that do not fit into bullet container\r\n         * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n         * of the plot area so they are not cut off.\r\n         *\r\n         * @param {boolean} value Mask bullet container?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"maskBullets\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Handles mouse wheel event.\r\n     *\r\n     * @param {AMEvent<Sprite, ISpriteEvents>[\"wheel\"]}  event  Original event\r\n     */\r\n    XYChart.prototype.handleWheel = function (event) {\r\n        var plotContainer = this.plotContainer;\r\n        var svgPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n        var plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n        var shift = event.shift.y;\r\n        var rangeX = this.getCommonAxisRange(this.xAxes);\r\n        var rangeY = this.getCommonAxisRange(this.yAxes);\r\n        var shiftStep = 0.05;\r\n        var maxPanOut = 0;\r\n        var mouseWheelBehavior = this.mouseWheelBehavior;\r\n        if (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\r\n            var differenceX = rangeX.end - rangeX.start;\r\n            var newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100);\r\n            var newEndX = Math.min(rangeX.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n            if (newStartX <= 0) {\r\n                newEndX = newStartX + differenceX;\r\n            }\r\n            if (newEndX >= 1) {\r\n                newStartX = newEndX - differenceX;\r\n            }\r\n            this.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n        }\r\n        if (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\r\n            shift *= -1;\r\n            var differenceY = rangeY.end - rangeY.start;\r\n            var newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100);\r\n            var newEndY = Math.min(rangeY.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n            if (newStartY <= 0) {\r\n                newEndY = newStartY + differenceY;\r\n            }\r\n            if (newEndY >= 1) {\r\n                newStartY = newEndY - differenceY;\r\n            }\r\n            this.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n        }\r\n        if (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\r\n            var locationX = plotPoint.x / plotContainer.maxWidth;\r\n            var newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * shift / 100 * locationX);\r\n            newStartX = Math.min(newStartX, locationX);\r\n            var newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (1 - locationX), 1 + maxPanOut);\r\n            newEndX = Math.max(newEndX, locationX);\r\n            this.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n        }\r\n        if (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\r\n            var locationY = plotPoint.y / plotContainer.maxHeight;\r\n            var newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * shift / 100 * (1 - locationY));\r\n            newStartY = Math.min(newStartY, locationY);\r\n            var newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY, 1 + maxPanOut);\r\n            newEndY = Math.max(newEndY, locationY);\r\n            this.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n        }\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"mouseWheelBehavior\", {\r\n        /**\r\n         * @return {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\"  | \"panXY\" | \"none\"}  Mouse wheel behavior\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"mouseWheelBehavior\");\r\n        },\r\n        /**\r\n         * Specifies action for when mouse wheel is used when over the chart.\r\n         *\r\n         * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n         *\r\n         * @default \"none\"\r\n         * @param {\"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\"  | \"panXY\" | \"none\"} mouse wheel behavior\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n                if (value != \"none\") {\r\n                    this._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n                    this._disposers.push(this._mouseWheelDisposer);\r\n                }\r\n                else {\r\n                    if (this._mouseWheelDisposer) {\r\n                        this.plotContainer.wheelable = false;\r\n                        this.plotContainer.hoverable = false;\r\n                        this._mouseWheelDisposer.dispose();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n     * so that particular chart types can popuplate this setting with their\r\n     * own type-speicifc data fields so they are parsed properly.\r\n     *\r\n     * @param  {string[]}  fields  Array of date fields\r\n     * @return {string[]}          Array of date fields populated with chart's date fields\r\n     */\r\n    XYChart.prototype.dataSourceDateFields = function (fields) {\r\n        var _this = this;\r\n        // Process parent\r\n        fields = _super.prototype.dataSourceDateFields.call(this, fields);\r\n        // Check if we have any series with date-fields\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            fields = _this.populateDataSourceFields(fields, series.dataFields, [\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]);\r\n        });\r\n        return fields;\r\n    };\r\n    /**\r\n     * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n     * so that particular chart types can popuplate this setting with their\r\n     * own type-specific data fields so they are parsed properly.\r\n     *\r\n     * @param  {string[]}  value  Array of number fields\r\n     * @return {string[]}         Array of number fields populated with chart's number fields\r\n     */\r\n    XYChart.prototype.dataSourceNumberFields = function (fields) {\r\n        var _this = this;\r\n        fields = _super.prototype.dataSourceDateFields.call(this, fields);\r\n        // Check if we have any series with date-fields\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            fields = _this.populateDataSourceFields(fields, series.dataFields, [\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]);\r\n        });\r\n        return fields;\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {object}  config  Config\r\n     */\r\n    XYChart.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Save axis ranges for later processing\r\n            var xAxes = [];\r\n            var yAxes = [];\r\n            // Set up axes\r\n            if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n                for (var i = 0, len = config.xAxes.length; i < len; i++) {\r\n                    if (!config.xAxes[i].type) {\r\n                        throw Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n                    }\r\n                    else if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n                        xAxes.push({\r\n                            axisRanges: config.xAxes[i][\"axisRanges\"],\r\n                            index: i\r\n                        });\r\n                        delete (config.xAxes[i][\"axisRanges\"]);\r\n                    }\r\n                }\r\n            }\r\n            if ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n                for (var i = 0, len = config.yAxes.length; i < len; i++) {\r\n                    if (!config.yAxes[i].type) {\r\n                        throw Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n                    }\r\n                    else if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n                        yAxes.push({\r\n                            axisRanges: config.yAxes[i][\"axisRanges\"],\r\n                            index: i\r\n                        });\r\n                        delete (config.yAxes[i][\"axisRanges\"]);\r\n                    }\r\n                }\r\n            }\r\n            // Set up series\r\n            if ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n                for (var i = 0, len = config.series.length; i < len; i++) {\r\n                    config.series[i].type = config.series[i].type || \"LineSeries\";\r\n                }\r\n            }\r\n            // Set up cursor\r\n            if ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n                config.cursor.type = \"XYCursor\";\r\n            }\r\n            // Set up scrollbars\r\n            if ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n                config.scrollbarX.type = \"Scrollbar\";\r\n            }\r\n            if ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n                config.scrollbarY.type = \"Scrollbar\";\r\n            }\r\n            _super.prototype.processConfig.call(this, config);\r\n            // Finish up with ranges.\r\n            // We need to do this here because series are processed last in JSON\r\n            // config. Therefore their respective objects are not yet are available\r\n            // when axis (and respectively their ranges) are being processed.\r\n            if (yAxes.length) {\r\n                for (var i = 0, len = yAxes.length; i < len; i++) {\r\n                    this.yAxes.getIndex(yAxes[i].index).config = {\r\n                        axisRanges: yAxes[i].axisRanges\r\n                    };\r\n                }\r\n            }\r\n            if (xAxes.length) {\r\n                for (var i = 0, len = xAxes.length; i < len; i++) {\r\n                    this.xAxes.getIndex(xAxes[i].index).config = {\r\n                        axisRanges: xAxes[i].axisRanges\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * This function is used to sort element's JSON config properties, so that\r\n     * some properties that absolutely need to be processed last, can be put at\r\n     * the end.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}  a  Element 1\r\n     * @param  {string}  b  Element 2\r\n     * @return {Ordering}   Sorting number\r\n     */\r\n    XYChart.prototype.configOrder = function (a, b) {\r\n        if (a == b) {\r\n            return 0;\r\n        }\r\n        // Must come last\r\n        else if (a == \"scrollbarX\") {\r\n            return 1;\r\n        }\r\n        else if (b == \"scrollbarX\") {\r\n            return -1;\r\n        }\r\n        else if (a == \"scrollbarY\") {\r\n            return 1;\r\n        }\r\n        else if (b == \"scrollbarY\") {\r\n            return -1;\r\n        }\r\n        else if (a == \"series\") {\r\n            return 1;\r\n        }\r\n        else if (b == \"series\") {\r\n            return -1;\r\n        }\r\n        else {\r\n            return _super.prototype.configOrder.call(this, a, b);\r\n        }\r\n    };\r\n    /**\r\n     * Creates a new Series of type suitable for this chart.\r\n     *\r\n     * @return {this} New series\r\n     */\r\n    XYChart.prototype.createSeries = function () {\r\n        return new XYSeries();\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"zoomOutButton\", {\r\n        /**\r\n         * @return {Button} Zoom out button\r\n         */\r\n        get: function () {\r\n            return this._zoomOutButton;\r\n        },\r\n        /**\r\n         * A [[Button]] element that is used for zooming out the chart.\r\n         *\r\n         * This button appears only when chart is zoomed in, and disappears\r\n         * autoamatically when it is zoome dout.\r\n         *\r\n         * @param {Button}  button  Zoom out button\r\n         */\r\n        set: function (button) {\r\n            var _this = this;\r\n            this._zoomOutButton = button;\r\n            if (button) {\r\n                button.events.on(\"hit\", function () {\r\n                    _this.zoomAxes(_this.xAxes, { start: 0, end: 1 });\r\n                    _this.zoomAxes(_this.yAxes, { start: 0, end: 1 });\r\n                }, undefined, false);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all parameters from another [[XYChart]].\r\n     *\r\n     * @param {XYChart} source Source XYChart\r\n     */\r\n    XYChart.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.xAxes.copyFrom(source.xAxes);\r\n        this.yAxes.copyFrom(source.yAxes);\r\n        this.zoomOutButton.copyFrom(source.zoomOutButton);\r\n        //@todo copy all container properties\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChart.prototype.disposeData = function () {\r\n        _super.prototype.disposeData.call(this);\r\n        var scrollbarX = this.scrollbarX;\r\n        if (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\r\n            scrollbarX.scrollbarChart.disposeData();\r\n        }\r\n        var scrollbarY = this.scrollbarY;\r\n        if (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\r\n            scrollbarY.scrollbarChart.disposeData();\r\n        }\r\n        this.xAxes.each(function (axis) {\r\n            axis.disposeData();\r\n        });\r\n        this.yAxes.each(function (axis) {\r\n            axis.disposeData();\r\n        });\r\n    };\r\n    /**\r\n     * Adds one or several (array) of data items to the existing data.\r\n     *\r\n     * @param {Object | Object[]} rawDataItem One or many raw data item objects\r\n     */\r\n    XYChart.prototype.addData = function (rawDataItem, removeCount) {\r\n        _super.prototype.addData.call(this, rawDataItem, removeCount);\r\n        if (this.scrollbarX instanceof XYChartScrollbar) {\r\n            this.scrollbarX.scrollbarChart.addData(rawDataItem, removeCount);\r\n        }\r\n        if (this.scrollbarY instanceof XYChartScrollbar) {\r\n            this.scrollbarY.scrollbarChart.addData(rawDataItem, removeCount);\r\n        }\r\n    };\r\n    return XYChart;\r\n}(SerialChart));\r\nexport { XYChart };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n//# sourceMappingURL=XYChart.js.map","/**\r\n * Module for building 3D serial charts.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, XYChartDataItem } from \"./XYChart\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar XYChart3DDataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(XYChart3DDataItem, _super);\r\n    function XYChart3DDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"XYChart3DDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return XYChart3DDataItem;\r\n}(XYChartDataItem));\r\nexport { XYChart3DDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nvar XYChart3D = /** @class */ (function (_super) {\r\n    tslib_1.__extends(XYChart3D, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function XYChart3D() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Type of the axis renderer to use for X axes.\r\n         *\r\n         * @type {[type]}\r\n         */\r\n        _this._axisRendererX = AxisRendererX3D;\r\n        /**\r\n         * Type of the axis renderer to use for Y axes.\r\n         * @type {[type]}\r\n         */\r\n        _this._axisRendererY = AxisRendererY3D;\r\n        _this.className = \"XYChart3D\";\r\n        // Set defaults\r\n        _this.depth = 30;\r\n        _this.angle = 30;\r\n        // Creeate container for columns\r\n        var columnsContainer = _this.seriesContainer.createChild(Container);\r\n        columnsContainer.shouldClone = false;\r\n        columnsContainer.isMeasured = false;\r\n        columnsContainer.layout = \"none\";\r\n        _this.columnsContainer = columnsContainer;\r\n        _this.columnsContainer.mask = _this.createChild(Sprite);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(XYChart3D.prototype, \"depth\", {\r\n        /**\r\n         * @return {number} Depth (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"depth\");\r\n        },\r\n        /**\r\n         * Depth of the 3D chart / columns in pixels.\r\n         *\r\n         * @param {number}  value  Depth (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"depth\", value);\r\n            this.fixLayout();\r\n            this.invalidateDataUsers();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYChart3D.prototype, \"angle\", {\r\n        /**\r\n         * @return {number} Angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"angle\");\r\n        },\r\n        /**\r\n         * Angle the chart is viewed at.\r\n         *\r\n         * @todo Description (review)\r\n         * @param {number}  value  Angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"angle\", value);\r\n            this.fixLayout();\r\n            this.invalidateDataUsers();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYChart3D.prototype, \"dx3D\", {\r\n        /**\r\n         * A calculated horizontal 3D offset (px).\r\n         *\r\n         * @readonly\r\n         * @return {number} Offset (px)\r\n         */\r\n        get: function () {\r\n            return $math.cos(this.angle) * this.depth;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYChart3D.prototype, \"dy3D\", {\r\n        /**\r\n         * A calculated vertical 3D offset (px).\r\n         *\r\n         * @readonly\r\n         * @return {number} Offset (px)\r\n         */\r\n        get: function () {\r\n            return -$math.sin(this.angle) * this.depth;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * (Re)validates layout\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart3D.prototype.validateLayout = function () {\r\n        _super.prototype.validateLayout.call(this);\r\n        this.fixColumns();\r\n    };\r\n    /**\r\n     * Updates the layout (padding and scrollbar positions) to accommodate for\r\n     * 3D depth and angle.\r\n     */\r\n    XYChart3D.prototype.fixLayout = function () {\r\n        this.chartContainer.marginTop = -this.dy3D;\r\n        this.chartContainer.paddingRight = this.dx3D;\r\n        if (this.scrollbarX) {\r\n            this.scrollbarX.dy = this.dy3D;\r\n            this.scrollbarX.dx = this.dx3D;\r\n        }\r\n        if (this.scrollbarY) {\r\n            this.scrollbarY.dy = this.dy3D;\r\n            this.scrollbarY.dx = this.dx3D;\r\n        }\r\n        this.fixColumns();\r\n        _super.prototype.fixLayout.call(this);\r\n    };\r\n    /**\r\n     * Updates column positions, offset and dimensions based on chart's angle\r\n     * and depth.\r\n     */\r\n    XYChart3D.prototype.fixColumns = function () {\r\n        var _this = this;\r\n        var count = 1;\r\n        var i = 0;\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            if (series instanceof ColumnSeries3D) {\r\n                if (!series.clustered && i > 0) {\r\n                    count++;\r\n                }\r\n                series.depthIndex = count - 1;\r\n                i++;\r\n            }\r\n        });\r\n        var s = 0;\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            if (series instanceof ColumnSeries3D) {\r\n                series.depth = _this.depth / (count);\r\n                series.angle = _this.angle;\r\n                series.dx = _this.depth / (count) * $math.cos(_this.angle) * (series.depthIndex);\r\n                series.dy = -_this.depth / (count) * $math.sin(_this.angle) * (series.depthIndex);\r\n                var i_1 = 1;\r\n                series.columns.each(function (column) {\r\n                    column.zIndex = 1000 * i_1 + s - series.depthIndex * 100;\r\n                    i_1++;\r\n                });\r\n                s++;\r\n            }\r\n        });\r\n        this.maskColumns();\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {object}  config  Config\r\n     */\r\n    XYChart3D.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Set up series\r\n            if ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n                for (var i = 0, len = config.series.length; i < len; i++) {\r\n                    config.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n                }\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    XYChart3D.prototype.maskColumns = function () {\r\n        var w = this.plotContainer.pixelWidth;\r\n        var h = this.plotContainer.pixelHeight;\r\n        var dx = this.dx3D;\r\n        var dy = this.dy3D;\r\n        var path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n        var columnsContainer = this.columnsContainer;\r\n        if (columnsContainer && columnsContainer.mask) {\r\n            columnsContainer.mask.path = path;\r\n        }\r\n    };\r\n    return XYChart3D;\r\n}(XYChart));\r\nexport { XYChart3D };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n//# sourceMappingURL=XYChart3D.js.map","/**\r\n * Base functionality\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { List, ListTemplate } from \"./utils/List\";\r\nimport { Dictionary, DictionaryTemplate } from \"./utils/Dictionary\";\r\nimport { Disposer } from \"./utils/Disposer\";\r\nimport { EventDispatcher } from \"./utils/EventDispatcher\";\r\nimport { Adapter } from \"./utils/Adapter\";\r\nimport { Color, color } from \"./utils/Color\";\r\nimport { Percent, percent } from \"./utils/Percent\";\r\nimport { registry } from \"./Registry\";\r\nimport { cache } from \"./utils/Cache\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\n//import * as $debug from \"./utils/Debug\";\r\n/**\r\n * Provides base functionality for all derivative objects, like generating ids,\r\n * handling cache, etc.\r\n */\r\nvar BaseObject = /** @class */ (function () {\r\n    //protected _classes: { [index: string]: any } = {};\r\n    /**\r\n     * Constructor\r\n     * * Sets class name\r\n     */\r\n    function BaseObject() {\r\n        /**\r\n         * Indicates if this object has already been deleted. Any\r\n         * destruction/disposal code should take this into account when deciding\r\n         * wheter to run potentially costly disposal operations if they already have\r\n         * been run.\r\n         *\r\n         * @type {boolean}\r\n         * @ignore Exclude from docs\r\n         */\r\n        this._disposed = false;\r\n        /**\r\n         * List of IDisposer which will be disposed when the BaseObject is disposed.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        this._disposers = [];\r\n        this.className = \"BaseObject\";\r\n        //this.debug();\r\n    }\r\n    BaseObject.prototype.debug = function () {\r\n        //$debug.debug(this);\r\n    };\r\n    Object.defineProperty(BaseObject.prototype, \"uid\", {\r\n        /**\r\n         * Returns object's internal unique ID.\r\n         *\r\n         * @return {string} Unique ID\r\n         */\r\n        get: function () {\r\n            if (!this._uid) {\r\n                this._uid = registry.getUniqueId();\r\n                registry.map.setKey(this._uid, this);\r\n            }\r\n            return this._uid;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BaseObject.prototype, \"id\", {\r\n        /**\r\n         * @return {Optional<string>} Id\r\n         */\r\n        get: function () {\r\n            return this._id;\r\n        },\r\n        /**\r\n         * Sets the user-defined id of the element.\r\n         *\r\n         * @param {Optional<string>} value Id\r\n         */\r\n        set: function (value) {\r\n            //registry.map.setKey(value, this); // registry.map only stores by uid\r\n            this._id = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BaseObject.prototype, \"map\", {\r\n        /**\r\n         * Returns a universal collection for mapping ids with objects.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {Dictionary<string, any>} Map collection\r\n         */\r\n        get: function () {\r\n            if (!this._map) {\r\n                this._map = new Dictionary();\r\n            }\r\n            return this._map;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Applies properties from all assigned themes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    BaseObject.prototype.applyTheme = function () {\r\n        var _this = this;\r\n        // TODO is this needed ?\r\n        if (registry) {\r\n            var themes = this.getCurrentThemes();\r\n            // TODO is this needed ?\r\n            if (themes) {\r\n                $array.each(themes, function (theme, index) {\r\n                    theme(_this);\r\n                });\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(BaseObject.prototype, \"themes\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {Optional<ITheme[]>} An array of themes\r\n         */\r\n        get: function () {\r\n            return this._themes;\r\n        },\r\n        /**\r\n         * A list of themes to be used for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {Optional<ITheme[]>} value An array of themes\r\n         */\r\n        set: function (value) {\r\n            this._themes = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a list of themes that should be applied to this element. It could\r\n     * either be a list of themes set explicitly on this element, or system-wide.\r\n     *\r\n     * @return {ITheme[]} List of themes\r\n     */\r\n    BaseObject.prototype.getCurrentThemes = function () {\r\n        return this.themes || registry.themes;\r\n    };\r\n    /**\r\n     * Returns if this object has been already been disposed.\r\n     *\r\n     * @return {boolean} Is disposed?\r\n     */\r\n    BaseObject.prototype.isDisposed = function () {\r\n        return this._disposed;\r\n    };\r\n    /**\r\n     * Destroys this object and all related data.\r\n     */\r\n    BaseObject.prototype.dispose = function () {\r\n        if (!this._disposed) {\r\n            this._disposed = true;\r\n            var a = this._disposers;\r\n            this._disposers = null;\r\n            while (a.length !== 0) {\r\n                var disposer = a.shift();\r\n                disposer.dispose();\r\n            }\r\n            // Clear cache\r\n            this.clearCache();\r\n            // remove from clones list\r\n            if (this.clonedFrom) {\r\n                this.clonedFrom.clones.removeValue(this);\r\n            }\r\n            var uid = this._uid;\r\n            if (uid != null) {\r\n                registry.map.removeKey(uid);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Adds an IDisposer, which will be disposed when this object is disposed.\r\n     *\r\n     * @param {IDisposer} target Object to dispose\r\n     * @ignore Exclude from docs\r\n     */\r\n    BaseObject.prototype.addDisposer = function (target) {\r\n        this._disposers.push(target);\r\n    };\r\n    /**\r\n     * Disposes disposable object and removes it from `_disposers`.\r\n     *\r\n     * @param {IDisposer} target Object to dispose\r\n     * @ignore Exclude from docs\r\n     */\r\n    BaseObject.prototype.removeDispose = function (target) {\r\n        //if(target){\r\n        if (!this._disposed) {\r\n            var index = $array.indexOf(this._disposers, target);\r\n            if (index > -1) {\r\n                this._disposers.splice(index, 1);\r\n            }\r\n        }\r\n        target.dispose();\r\n        //}\r\n    };\r\n    /**\r\n     * Makes a copy of this object and returns the clone. Try to avoid cloning complex objects like chart, create new instances if you need them.\r\n     *\r\n     * @param   {string}  cloneId  An id to use for clone (if not set a unique id will be generated)\r\n     * @returns {Object}           Clone\r\n     */\r\n    BaseObject.prototype.clone = function (cloneId) {\r\n        if (!cloneId) {\r\n            cloneId = \"clone-\" + registry.getUniqueId();\r\n        }\r\n        var newObject = new this.constructor();\r\n        newObject.cloneId = cloneId;\r\n        newObject.copyFrom(this);\r\n        // add to clones list\r\n        // this.clones.push(newObject); // moved this to copyFrom\r\n        return newObject;\r\n    };\r\n    Object.defineProperty(BaseObject.prototype, \"clones\", {\r\n        /**\r\n         * Returns a collection of object's clones.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {Dictionary<string, this>} Clones\r\n         */\r\n        get: function () {\r\n            if (!this._clones) {\r\n                this._clones = new List();\r\n            }\r\n            return this._clones;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all properties and related data from different element.\r\n     *\r\n     * @param {this} object Source element\r\n     */\r\n    BaseObject.prototype.copyFrom = function (object) {\r\n        object.clones.push(this); // do not moveValue, as it is expensive! even if there will be several items in clones list, it's not that bad.\r\n        this.clonedFrom = object;\r\n    };\r\n    Object.defineProperty(BaseObject.prototype, \"className\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {string} Class name\r\n         */\r\n        get: function () {\r\n            return this._className;\r\n        },\r\n        /**\r\n         * Element's class name. (a class that was used to instantiate the element)\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {string}  value  Class name\r\n         */\r\n        set: function (value) {\r\n            this._className = value;\r\n            /*if (registry) {\r\n                registry.registeredClasses[value] = typeof this;\r\n            }*/\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Caches value in object's cache.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {string}  key    Key\r\n     * @param {any}     value  Value\r\n     * @param {number}  ttl    TTL in seconds\r\n     */\r\n    BaseObject.prototype.setCache = function (key, value, ttl) {\r\n        cache.set(this.uid, key, value, ttl);\r\n    };\r\n    /**\r\n     * Retrieves cached value.\r\n     *\r\n     * If optional second padarameter is specified, it will return that value\r\n     * if cache is not available or is expired.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}  key    Key\r\n     * @param  {any}     value  Value to return if cache is not available\r\n     * @return {any}            Value\r\n     */\r\n    BaseObject.prototype.getCache = function (key, value) {\r\n        if (value === void 0) { value = undefined; }\r\n        return cache.get(this.uid, key, value);\r\n    };\r\n    /**\r\n     * Clears object's local cache.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    BaseObject.prototype.clearCache = function () {\r\n        cache.clear(this.uid);\r\n    };\r\n    /**\r\n     * Creates [[Disposer]] for `setTimeout` function call. This ensures that all\r\n     * timeouts created by the object will be cleared when object itself is\r\n     * disposed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {() => void}  fn     Callback function\r\n     * @param  {number}      delay  Timeout (ms)\r\n     * @return {IDisposer}          Disposer for timeout\r\n     */\r\n    BaseObject.prototype.setTimeout = function (fn, delay) {\r\n        var _this = this;\r\n        var id = setTimeout(function () {\r\n            _this.removeDispose(disposer);\r\n            fn();\r\n        }, delay);\r\n        var disposer = new Disposer(function () {\r\n            clearTimeout(id);\r\n        });\r\n        this._disposers.push(disposer);\r\n        return disposer;\r\n    };\r\n    /**\r\n     * Creates [[Disposer]] for `setInterval` function call. This ensures that all\r\n     * timeouts created by the object will be cleared when object itself is\r\n     * disposed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {() => void}  fn     Callback function\r\n     * @param  {number}      delay  Timeout (ms)\r\n     * @return {IDisposer}          Disposer for timeout\r\n     */\r\n    BaseObject.prototype.setInterval = function (fn, delay) {\r\n        var _this = this;\r\n        var id = setInterval(function () {\r\n            _this.removeDispose(disposer);\r\n            fn();\r\n        }, delay);\r\n        var disposer = new Disposer(function () {\r\n            clearTimeout(id);\r\n        });\r\n        this._disposers.push(disposer);\r\n        return disposer;\r\n    };\r\n    Object.defineProperty(BaseObject.prototype, \"config\", {\r\n        /**\r\n         * ==========================================================================\r\n         * JSON-BASED CONFIG PROCESSING\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Use this property to set JSON-based config. When set, triggers processing\r\n         * routine, which will go through all properties, and try to apply values,\r\n         * create instances, etc.\r\n         *\r\n         * Use this with caution, as it is a time-consuming process. It's used for\r\n         * initialchart setup only, not routine operations.\r\n         *\r\n         * @param {object} json JSON config\r\n         */\r\n        set: function (config) {\r\n            try {\r\n                this.processConfig(config);\r\n            }\r\n            catch (e) {\r\n                /*if (this instanceof Sprite) {\r\n                    this.raiseCriticalError(e);\r\n                }*/\r\n                this.raiseCriticalError(e);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Processes the JSON config.\r\n     *\r\n     * @param {object}  json  JSON config\r\n     * @ignore Exclude from docs\r\n     */\r\n    BaseObject.prototype.processConfig = function (config) {\r\n        var _this = this;\r\n        if (!config) {\r\n            return;\r\n        }\r\n        // Get target\r\n        var target = this;\r\n        // Iterate through all of the items\r\n        $object.eachOrdered(config, function (configKey, value) {\r\n            var configValue = value;\r\n            // Is this a callback?\r\n            if (configKey == \"callback\" && typeof value == \"function\") {\r\n                value.call(target);\r\n            }\r\n            // Check if there's a property in target\r\n            if (_this.hasProperty(configKey)) {\r\n                var item_1;\r\n                // Do we have instructions to create an object?\r\n                if ($type.isObject(configValue) && $type.hasValue(configValue[\"type\"])) {\r\n                    // Create new instance\r\n                    if (item_1 = _this.createClassInstance(configValue[\"type\"])) {\r\n                        target[configKey] = item_1;\r\n                    }\r\n                    else {\r\n                        item_1 = target[configKey];\r\n                    }\r\n                }\r\n                else {\r\n                    // Get item from the object\r\n                    item_1 = target[configKey];\r\n                }\r\n                /**\r\n                 * It is...\r\n                 * --------------------------------------------------------------------\r\n                 */\r\n                if (item_1 instanceof Adapter) {\r\n                    // ... an Adapter, try to add handlers to it\r\n                    // ------------------------------------------------------------------\r\n                    _this.processAdapters(item_1, configValue);\r\n                }\r\n                else if (item_1 instanceof EventDispatcher) {\r\n                    // ... an EventDispatcher, try to add handlers to it\r\n                    // ------------------------------------------------------------------\r\n                    _this.processEvents(item_1, configValue);\r\n                }\r\n                else if (_this.asIs(configKey)) {\r\n                    // ... a special field, just set it to new value\r\n                    // ------------------------------------------------------------------\r\n                    // (no need to add each indvidual item)\r\n                    target[configKey] = configValue;\r\n                }\r\n                else if (configValue instanceof BaseObject) {\r\n                    // ... a BaseObject object, we just going to use it as it is\r\n                    // ------------------------------------------------------------------\r\n                    target[configKey] = configValue;\r\n                }\r\n                else if (item_1 instanceof BaseObject) {\r\n                    // ... another child BaseObject\r\n                    // ------------------------------------------------------------------\r\n                    // Let's just pass in config part in and let itself deal with it\r\n                    item_1.config = configValue;\r\n                }\r\n                else if (item_1 instanceof ListTemplate) {\r\n                    // ... a list with template\r\n                    // ------------------------------------------------------------------\r\n                    // Let's see what we can do with it\r\n                    if ($type.isArray(configValue)) {\r\n                        // It's an array.\r\n                        // Create a list item for entry, or try to apply properties to an\r\n                        // existing entry if possible and it is present.\r\n                        $array.each(configValue, function (entry, index) {\r\n                            var type = _this.getConfigEntryType(entry);\r\n                            var listItem;\r\n                            if (item_1.hasIndex(index) && !entry[\"forceCreate\"]) {\r\n                                listItem = item_1.getIndex(index);\r\n                            }\r\n                            else if (entry instanceof BaseObject) {\r\n                                // Item is already a BaseObject, no need to process it further\r\n                                item_1.push(entry);\r\n                                return;\r\n                            }\r\n                            else if (type) {\r\n                                listItem = item_1.create(type);\r\n                            }\r\n                            else {\r\n                                listItem = item_1.create();\r\n                            }\r\n                            if ($type.isObject(entry)) {\r\n                                // If the list item is BaseObject, we just need to let it\r\n                                // deal if its own config\r\n                                if (listItem instanceof BaseObject) {\r\n                                    listItem.config = entry;\r\n                                }\r\n                                else if ($type.isObject(listItem) && $type.isObject(entry)) {\r\n                                    $object.copyAllProperties(entry, listItem);\r\n                                }\r\n                                else {\r\n                                    item_1.setIndex(item_1.indexOf(listItem), entry);\r\n                                }\r\n                            }\r\n                        });\r\n                        // Truncate the list if it contains less items than the config\r\n                        // array\r\n                        while (configValue.length > item_1.length) {\r\n                            item_1.pop();\r\n                        }\r\n                    }\r\n                    else if ($type.isObject(configValue)) {\r\n                        // It's a single oject.\r\n                        // Treat it as a template.\r\n                        if (configValue instanceof BaseObject) {\r\n                            // Item is already a BaseObject, no need to process it further\r\n                            item_1.template = configValue;\r\n                        }\r\n                        else if (item_1.template instanceof BaseObject) {\r\n                            // Template is a BaseObject so we will just let its config\r\n                            // deal with the configuration\r\n                            item_1.template.config = configValue;\r\n                        }\r\n                        else {\r\n                            $object.each(configValue, function (entryKey, entryValue) {\r\n                                var listItem = item_1.template[entryKey];\r\n                                if (listItem instanceof Adapter) {\r\n                                    _this.processAdapters(listItem, entryValue);\r\n                                }\r\n                                else if (listItem instanceof EventDispatcher) {\r\n                                    _this.processEvents(listItem, entryValue);\r\n                                }\r\n                                else if (listItem instanceof DictionaryTemplate) {\r\n                                    _this.processDictionaryTemplate(listItem, entryValue);\r\n                                }\r\n                                else if (item_1.template[entryKey] instanceof BaseObject) {\r\n                                    // Template is a BaseObject. Let it deal with its own config.\r\n                                    item_1.template[entryKey].config = entryValue;\r\n                                }\r\n                                else if ($type.isObject(entryValue) && $type.hasValue(entryValue[\"type\"])) {\r\n                                    if (listItem = _this.createClassInstance(entryValue[\"type\"])) {\r\n                                        if (listItem instanceof BaseObject) {\r\n                                            listItem.config = entryValue;\r\n                                        }\r\n                                        item_1.template[entryKey] = listItem;\r\n                                    }\r\n                                    else {\r\n                                        item_1.template[entryKey] = entryValue;\r\n                                    }\r\n                                }\r\n                                else if (listItem instanceof List) {\r\n                                    // It's List, process it\r\n                                    _this.processList(entryValue, listItem);\r\n                                }\r\n                                else {\r\n                                    // Aything else. Just assing and be done with it.\r\n                                    item_1.template[entryKey] = _this.maybeColorOrPercent(entryValue);\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Something else?\r\n                        // Not sure what to do with it on a list - ignore\r\n                    }\r\n                }\r\n                else if (item_1 instanceof List) {\r\n                    // ... a list\r\n                    // ------------------------------------------------------------------\r\n                    _this.processList(configValue, item_1);\r\n                }\r\n                else if (item_1 instanceof DictionaryTemplate) {\r\n                    // ... a dictionary with template\r\n                    // ------------------------------------------------------------------\r\n                    _this.processDictionaryTemplate(item_1, configValue);\r\n                }\r\n                else if (item_1 instanceof Dictionary) {\r\n                    // ... a dictionary\r\n                    // ------------------------------------------------------------------\r\n                    _this.processDictionary(item_1, configValue);\r\n                }\r\n                else if (item_1 instanceof Color || item_1 instanceof Percent) {\r\n                    // ... it's a Color or Percent\r\n                    // ------------------------------------------------------------------\r\n                    target[configKey] = _this.maybeColorOrPercent(configValue);\r\n                }\r\n                else if ($type.isObject(item_1) && $type.isObject(configValue)) {\r\n                    // ... a regular object\r\n                    // ------------------------------------------------------------------\r\n                    $object.copyAllProperties(configValue, item_1);\r\n                }\r\n                else {\r\n                    // ... something else - probably a simple property or object\r\n                    // ------------------------------------------------------------------\r\n                    // Maybe convert to `Percent` or `Color`?\r\n                    configValue = _this.maybeColorOrPercent(configValue);\r\n                    // Assign\r\n                    target[configKey] = configValue;\r\n                }\r\n            }\r\n            else if (!_this.isReserved(configKey)) {\r\n                // Doesn't have property set. But we're going to assume JSON config\r\n                // creator knows what he/she is doing and set it anyway.\r\n                target[configKey] = configValue;\r\n            }\r\n        }, this.configOrder);\r\n        // Any errors?\r\n        if (this.processingErrors.length) {\r\n            var errors = this.processingErrors.join(\"\\n\");\r\n            this._processingErrors = [];\r\n            throw Error(errors);\r\n        }\r\n    };\r\n    /**\r\n     * Tries to detect if value is color or percent and converts to proper object\r\n     * if necessary.\r\n     *\r\n     * Returns the same source value if no color/percent detected\r\n     *\r\n     * @param  {any}  value  Source value\r\n     * @return {any}         Converted value\r\n     */\r\n    BaseObject.prototype.maybeColorOrPercent = function (value) {\r\n        if ($type.isString(value)) {\r\n            if (value.match(/^[0-9.\\-]+\\%$/)) {\r\n                return percent($type.toNumber(value));\r\n            }\r\n            else if (value.match(/^\\#[0-9abcdef]{3,}$/i)) {\r\n                return color(value);\r\n            }\r\n        }\r\n        return value;\r\n    };\r\n    BaseObject.prototype.processAdapters = function (item, config) {\r\n        var _this = this;\r\n        if ($type.isArray(config)) {\r\n            $array.each(config, function (entry, index) {\r\n                item.add(entry.key, entry.callback, entry.priority || 0, _this);\r\n            });\r\n        }\r\n        else if ($type.isObject(config)) {\r\n            $object.each(config, function (key, entry) {\r\n                if (!item.has(key, entry)) {\r\n                    item.add(key, entry);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    BaseObject.prototype.processEvents = function (item, config) {\r\n        var _this = this;\r\n        if ($type.isObject(config)) {\r\n            $object.each(config, function (key, entry) {\r\n                if (!item.has(key, entry)) {\r\n                    item.on(key, entry);\r\n                }\r\n            });\r\n        }\r\n        else if ($type.isArray(config)) {\r\n            $array.each(config, function (entry, index) {\r\n                item.on(entry.type, entry.callback, _this);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Processes JSON config for a [[DictionaryTemplate]] item.\r\n     *\r\n     * @todo Description\r\n     * @param {DictionaryTemplate<any, any>}  item    Item\r\n     * @param {any}                           config  Config\r\n     */\r\n    BaseObject.prototype.processDictionaryTemplate = function (item, config) {\r\n        // We can only process object\r\n        // Not sure what to do with other types - ignore\r\n        if ($type.isObject(config)) {\r\n            // Create an entry for each item, or override properties for\r\n            // existing one.\r\n            $object.each(config, function (entryKey, entryValue) {\r\n                var listItem;\r\n                // Get existing one, or create a new one\r\n                if (entryKey == \"template\") {\r\n                    listItem = item.template;\r\n                }\r\n                else if (item.hasKey(entryKey)) {\r\n                    listItem = item.getKey(entryKey);\r\n                }\r\n                else {\r\n                    listItem = item.create(entryKey);\r\n                }\r\n                // Set data\r\n                if (listItem instanceof BaseObject) {\r\n                    listItem.config = entryValue;\r\n                }\r\n                else if ($type.isObject(listItem) && $type.isObject(entryValue)) {\r\n                    $object.copyAllProperties(entryValue, listItem);\r\n                }\r\n                else {\r\n                    listItem.setKey(entryKey, entryValue);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Processes JSON config for a [[Dictionary]] item.\r\n     *\r\n     * @todo Description\r\n     * @param {Dictionary<any, any>}  item    Item\r\n     * @param {any}                   config  Config\r\n     */\r\n    BaseObject.prototype.processDictionary = function (item, config) {\r\n        // We can only process object\r\n        // Not sure what to do with other types - ignore\r\n        if ($type.isObject(config)) {\r\n            // Create an entry for each item, or override properties for\r\n            // existing one.\r\n            // @todo support for non-basic types\r\n            $object.each(config, function (entryKey, entryValue) {\r\n                item.setKey(entryKey, entryValue);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Processes [[List]].\r\n     *\r\n     * @param {any}        configValue  Config value\r\n     * @param {List<any>}  item         Item\r\n     */\r\n    BaseObject.prototype.processList = function (configValue, item) {\r\n        var _this = this;\r\n        // Convert to array if necessary\r\n        if (!$type.isArray(configValue)) {\r\n            configValue = [configValue];\r\n        }\r\n        // It's an array\r\n        // Create a list item for entry\r\n        var itemCount = item.length;\r\n        $array.each(configValue, function (entry, index) {\r\n            if ($type.isObject(entry)) {\r\n                // An object.\r\n                //\r\n                // Let's see if we can instantiate a class out of it, or we need\r\n                // to push it into list as it is.\r\n                //\r\n                // If there are items already at the specified index in the list,\r\n                // apply properties rather than create a new one.\r\n                var listItem = void 0;\r\n                if ((index < itemCount) && !entry[\"forceCreate\"]) {\r\n                    listItem = item.getIndex(index);\r\n                }\r\n                else if (entry instanceof BaseObject) {\r\n                    // Item is already a BaseObject, no need to process it further\r\n                    item.push(entry);\r\n                    return;\r\n                }\r\n                else {\r\n                    listItem = _this.createEntryInstance(entry);\r\n                    item.push(listItem);\r\n                }\r\n                // If the list item is BaseObject, we just need to let it\r\n                // deal if its own config\r\n                if (listItem instanceof BaseObject) {\r\n                    listItem.config = entry;\r\n                }\r\n            }\r\n            else {\r\n                // Basic value.\r\n                // Just push it into list, or override existing value\r\n                if (item.hasIndex(index)) {\r\n                    item.setIndex(index, entry);\r\n                }\r\n                else {\r\n                    item.push(entry);\r\n                }\r\n            }\r\n        });\r\n        // Truncate the list if it contains less items than the config\r\n        // array\r\n        while (configValue.length > item.length) {\r\n            item.pop();\r\n        }\r\n    };\r\n    /**\r\n     * This function is used to sort element's JSON config properties, so that\r\n     * some properties that absolutely need to be processed last, can be put at\r\n     * the end.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}  a  Element 1\r\n     * @param  {string}  b  Element 2\r\n     * @return {Ordering}   Sorting number\r\n     */\r\n    BaseObject.prototype.configOrder = function (a, b) {\r\n        if (a == b) {\r\n            return 0;\r\n        }\r\n        // Language must come first, so it's all set up when the rest of the\r\n        // elements are being instantiated\r\n        else if (a == \"language\") {\r\n            return -1;\r\n        }\r\n        else if (b == \"language\") {\r\n            return 1;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    };\r\n    /**\r\n     * Checks if field should be just assigned as is, without any checking when\r\n     * processing JSON config.\r\n     *\r\n     * Extending functions can override this function to do their own checks.\r\n     *\r\n     * @param  {string}   field  Field name\r\n     * @return {boolean}         Assign as is?\r\n     */\r\n    BaseObject.prototype.asIs = function (field) {\r\n        return $array.indexOf([\"locale\"], field) != -1;\r\n    };\r\n    /**\r\n     * Creates a relevant class instance if such class definition exists.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}  className  Class name\r\n     * @return {Object}             Instance\r\n     */\r\n    BaseObject.prototype.createClassInstance = function (className) {\r\n        if ($type.hasValue(registry.registeredClasses[className])) {\r\n            return new registry.registeredClasses[className]();\r\n        }\r\n        return;\r\n    };\r\n    /**\r\n     * Creates a class instance for a config entry using it's type. (as set in\r\n     * `type` property)\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {any}  config  Config part\r\n     * @return {any}          Instance\r\n     */\r\n    BaseObject.prototype.createEntryInstance = function (config) {\r\n        var res;\r\n        if ($type.hasValue(config[\"type\"])) {\r\n            res = this.createClassInstance(config[\"type\"]);\r\n        }\r\n        if (!res) {\r\n            return config;\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Determines config object type.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {any}  config  Config part\r\n     * @return {any}          Type\r\n     */\r\n    BaseObject.prototype.getConfigEntryType = function (config) {\r\n        if ($type.hasValue(config[\"type\"])) {\r\n            if ($type.hasValue(registry.registeredClasses[config[\"type\"]])) {\r\n                return registry.registeredClasses[config[\"type\"]];\r\n            }\r\n            else {\r\n                throw Error(\"Invalid type: \\\"\" + config[\"type\"] + \"\\\".\");\r\n            }\r\n        }\r\n        return;\r\n    };\r\n    /**\r\n     * Checks if this element has a property.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}   prop  Property name\r\n     * @return {boolean}        Has property?\r\n     */\r\n    BaseObject.prototype.hasProperty = function (prop) {\r\n        return prop in this ? true : false;\r\n    };\r\n    /**\r\n     * Checkes whether JSON key is a reserved keyword.\r\n     *\r\n     * @param  {string}   key  Key\r\n     * @return {boolean}       Reserved\r\n     */\r\n    BaseObject.prototype.isReserved = function (key) {\r\n        return [\"type\", \"forceCreate\"].indexOf(key) !== -1;\r\n    };\r\n    Object.defineProperty(BaseObject.prototype, \"processingErrors\", {\r\n        /**\r\n         * A list of errors that happened during JSON processing.\r\n         *\r\n         * @return {string[]} Errors\r\n         */\r\n        get: function () {\r\n            if (!this._processingErrors) {\r\n                this._processingErrors = [];\r\n            }\r\n            return this._processingErrors;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return BaseObject;\r\n}());\r\nexport { BaseObject };\r\n;\r\n/**\r\n * A version of [[BaseObject]] with events properties and methods.\r\n * Classes that use [[EventDispatcher]] should extend this instead of\r\n * [[BaseObject]] directly.\r\n */\r\nvar BaseObjectEvents = /** @class */ (function (_super) {\r\n    tslib_1.__extends(BaseObjectEvents, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function BaseObjectEvents() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * An [[EventDispatcher]] instance\r\n         */\r\n        _this.events = new EventDispatcher();\r\n        _this.className = \"BaseObjectEvents\";\r\n        _this._disposers.push(_this.events);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Dispatches an event using own event dispatcher. Will automatically\r\n     * populate event data object with event type and target (this element).\r\n     * It also checks if there are any handlers registered for this sepecific\r\n     * event.\r\n     *\r\n     * @param {Key} eventType Event type (name)\r\n     * @param {any}    data      Data to pass into event handler(s)\r\n     */\r\n    BaseObjectEvents.prototype.dispatch = function (eventType, data) {\r\n        // @todo Implement proper type check\r\n        if (this.events.isEnabled(eventType)) {\r\n            if (data) {\r\n                data.type = eventType;\r\n                data.target = data.target || this;\r\n                this.events.dispatch(eventType, {\r\n                    type: eventType,\r\n                    target: this\r\n                });\r\n            }\r\n            else {\r\n                this.events.dispatch(eventType, {\r\n                    type: eventType,\r\n                    target: this\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Works like `dispatch`, except event is triggered immediately, without\r\n     * waiting for the next frame cycle.\r\n     *\r\n     * @param {Key} eventType Event type (name)\r\n     * @param {any}    data      Data to pass into event handler(s)\r\n     */\r\n    BaseObjectEvents.prototype.dispatchImmediately = function (eventType, data) {\r\n        // @todo Implement proper type check\r\n        if (this.events.isEnabled(eventType)) {\r\n            if (data) {\r\n                data.type = eventType;\r\n                data.target = data.target || this;\r\n                this.events.dispatchImmediately(eventType, data);\r\n            }\r\n            else {\r\n                this.events.dispatchImmediately(eventType, {\r\n                    type: eventType,\r\n                    target: this\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[Sprite]].\r\n     *\r\n     * @param {BaseObjectEvents} source Source object\r\n     */\r\n    BaseObjectEvents.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.events.copyFrom(source.events);\r\n    };\r\n    return BaseObjectEvents;\r\n}(BaseObject));\r\nexport { BaseObjectEvents };\r\n//# sourceMappingURL=Base.js.map","import * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"./Container\";\r\nimport { List, ListDisposer } from \"./utils/List\";\r\nimport { OrderedListTemplate } from \"./utils/SortedList\";\r\nimport { Dictionary } from \"./utils/Dictionary\";\r\nimport { Disposer, MultiDisposer } from \"./utils/Disposer\";\r\nimport { DataSource } from \"./data/DataSource\";\r\nimport { Responsive } from \"./responsive/Responsive\";\r\nimport { system } from \"./System\";\r\nimport { DataItem } from \"./DataItem\";\r\nimport { registry } from \"./Registry\";\r\nimport * as $math from \"./utils/Math\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $ease from \"./utils/Ease\";\r\nimport * as $utils from \"./utils/Utils\";\r\nimport * as $iter from \"./utils/Iterator\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A Component represents an independent functional element or control, that\r\n * can have it's own behavior, children, data, etc.\r\n *\r\n * A few examples of a Component: [[Legend]], [[Series]], [[Scrollbar]].\r\n *\r\n * @see {@link IComponentEvents} for a list of available events\r\n * @see {@link IComponentAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar Component = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Component, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Component() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Holds data field names.\r\n         *\r\n         * Data fields define connection beween [[DataItem]] and actual properties\r\n         * in raw data.\r\n         *\r\n         * @type {IComponentDataFields}\r\n         */\r\n        _this.dataFields = {};\r\n        /**\r\n         * A list of [[DataSource]] definitions of external data source.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {Object}\r\n         */\r\n        _this._dataSources = {};\r\n        /**\r\n         * This is used when only new data is invalidated (if added using `addData`\r\n         * method).\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {number}\r\n         */\r\n        _this._parseDataFrom = 0;\r\n        /**\r\n         * Holds the disposers for the dataItems and dataUsers\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {Array<IDisposer>}\r\n         */\r\n        _this._dataDisposers = [];\r\n        /**\r\n         * [_start description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {number}\r\n         */\r\n        _this._start = 0;\r\n        /**\r\n         * [_end description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {number}\r\n         */\r\n        _this._end = 1;\r\n        /**\r\n         * If set to `true`, changing data range in element will not trigger\r\n         * `daterangechanged` event.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this.skipRangeEvent = false;\r\n        /**\r\n         * Whenever selected scope changes (chart is zoomed or panned), for example\r\n         * by interaction from a Scrollbar, or API, a chart needs to reposition\r\n         * its contents.\r\n         *\r\n         * `rangeChangeDuration` influences how this is performed.\r\n         *\r\n         * If set to zero (0), the change will happen instantenously.\r\n         *\r\n         * If set to non-zero value, the chart will gradually animate into new\r\n         * position for the set amount of milliseconds.\r\n         *\r\n         * @default 0\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n         * @type {number}\r\n         */\r\n        _this.rangeChangeDuration = 0;\r\n        /**\r\n         * An easing function to use for range change animation.\r\n         *\r\n         * @see {@link Ease}\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n         * @type {function}\r\n         */\r\n        _this.rangeChangeEasing = $ease.cubicOut;\r\n        /**\r\n         * A duration (ms) of each data parsing step. A Component parses its data in\r\n         * chunks in order to avoid completely freezing the machine when large data\r\n         * sets are used. This setting will control how many milliseconds should pass\r\n         * when parsing data until parser stops for a brief moment to let other\r\n         * processes catch up.\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this.parsingStepDuration = 50;\r\n        /**\r\n         * [dataInvalid description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @type {boolean}\r\n         */\r\n        _this.dataInvalid = false;\r\n        /**\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.rawDataInvalid = false;\r\n        /**\r\n         * [dataRangeInvalid description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @type {boolean}\r\n         */\r\n        _this.dataRangeInvalid = false;\r\n        /**\r\n         * [dataItemsInvalid description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @type {boolean}\r\n         */\r\n        _this.dataItemsInvalid = false;\r\n        /**\r\n         * If set to a non-zero number the element will \"animate\" data values of its\r\n         * children.\r\n         *\r\n         * This will happen on first load and whenever data values change.\r\n         *\r\n         * Enabling interpolation will mean that elements will transit smoothly into\r\n         * new values rather than updating instantly.\r\n         *\r\n         * @default 0\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n         * @type {number}\r\n         */\r\n        _this.interpolationDuration = 0;\r\n        /**\r\n         * An easing function to use for interpolating values when transiting from\r\n         * one source value to another.\r\n         *\r\n         * @default cubicOut\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n         * @see {@link Ease}\r\n         * @type {function}\r\n         */\r\n        _this.interpolationEasing = $ease.cubicOut;\r\n        /**\r\n         * Indicates whether transition between data item's values should start and\r\n         * play out all at once, or with a small delay (as defined by\r\n         * `sequencedInterpolationDelay`) for each subsequent data item.\r\n         *\r\n         * @default true\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n         * @type {boolean}\r\n         */\r\n        _this.sequencedInterpolation = true;\r\n        /**\r\n         * A delay (ms) to wait between animating each subsequent data item's\r\n         * interpolation animation.\r\n         *\r\n         * Relative only if `sequencedInterpolation = true`.\r\n         *\r\n         * @default 0\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n         * @type {number}\r\n         */\r\n        _this.sequencedInterpolationDelay = 0;\r\n        /**\r\n         * A progress (0-1) for the data validation process.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {number}\r\n         */\r\n        _this.dataValidationProgress = 0;\r\n        _this._addAllDataItems = true;\r\n        _this.className = \"Component\";\r\n        _this.minZoomCount = 1;\r\n        _this._dataItems = new OrderedListTemplate(_this.createDataItem());\r\n        _this._dataItems.events.on(\"inserted\", _this.handleDataItemAdded, _this, false);\r\n        _this._dataItems.events.on(\"removed\", _this.handleDataItemRemoved, _this, false);\r\n        _this._disposers.push(new ListDisposer(_this._dataItems));\r\n        _this._disposers.push(_this._dataItems.template);\r\n        _this.invalidateData();\r\n        // TODO what about remove ?\r\n        _this.dataUsers.events.on(\"inserted\", _this.handleDataUserAdded, _this, false);\r\n        // Set up disposers\r\n        _this._disposers.push(new MultiDisposer(_this._dataDisposers));\r\n        _this._start = 0;\r\n        _this._end = 1;\r\n        _this.maxZoomDeclination = 1;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return {DataItem} Data Item\r\n     */\r\n    Component.prototype.createDataItem = function () {\r\n        return new DataItem();\r\n    };\r\n    /**\r\n     * [handleDataUserAdded description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param {IListEvents<Component>[\"inserted\"]} event Event object\r\n     */\r\n    Component.prototype.handleDataUserAdded = function (event) {\r\n        var dataUser = event.newValue;\r\n        dataUser.dataProvider = this;\r\n    };\r\n    /**\r\n     * [handleDataItemValueChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    Component.prototype.handleDataItemValueChange = function (dataItem, name) {\r\n        if (!this.dataItemsInvalid) {\r\n            this.invalidateDataItems();\r\n        }\r\n    };\r\n    /**\r\n     * [handleDataItemWorkingValueChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\r\n    };\r\n    /**\r\n     * [handleDataItemWorkingLocationChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.handleDataItemWorkingLocationChange = function (dataItem, name) {\r\n    };\r\n    /**\r\n     * [handleDataItemCalculatedValueChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.handleDataItemCalculatedValueChange = function (dataItem, name) {\r\n    };\r\n    /**\r\n     * [handleDataItemPropertyChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.handleDataItemPropertyChange = function (dataItem, name) {\r\n    };\r\n    /**\r\n     * Populates a [[DataItem]] width data from data source.\r\n     *\r\n     * Loops through all the fields and if such a field is found in raw data\r\n     * object, a corresponding value on passed in `dataItem` is set.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Object} item\r\n     */\r\n    Component.prototype.processDataItem = function (dataItem, dataContext) {\r\n        var _this = this;\r\n        if (dataItem) {\r\n            if (!dataContext) {\r\n                dataContext = {};\r\n            }\r\n            // store reference to original data item\r\n            dataItem.dataContext = dataContext;\r\n            var hasSomeValues_1 = false;\r\n            $object.each(this.dataFields, function (key, fieldValue) {\r\n                var fieldName = key;\r\n                var value = dataContext[fieldValue];\r\n                // Apply adapters to a retrieved value\r\n                if (_this.adapter.isEnabled(\"dataContextValue\")) {\r\n                    value = _this.adapter.apply(\"dataContextValue\", {\r\n                        field: fieldName,\r\n                        value: value,\r\n                        dataItem: dataItem\r\n                    }).value;\r\n                }\r\n                if (dataItem.hasChildren[fieldName]) {\r\n                    if ($type.hasValue(value)) {\r\n                        hasSomeValues_1 = true;\r\n                        var children = new OrderedListTemplate(_this.createDataItem());\r\n                        children.events.on(\"inserted\", _this.handleDataItemAdded, _this, false);\r\n                        children.events.on(\"removed\", _this.handleDataItemRemoved, _this, false);\r\n                        _this._dataDisposers.push(new ListDisposer(children));\r\n                        var count = value.length;\r\n                        for (var i = 0; i < count; i++) {\r\n                            var rawDataItem = value[i];\r\n                            var childDataItem = children.create();\r\n                            childDataItem.parent = dataItem;\r\n                            _this.processDataItem(childDataItem, rawDataItem);\r\n                        }\r\n                        var anyDataItem = dataItem;\r\n                        anyDataItem[fieldName] = children;\r\n                    }\r\n                }\r\n                else {\r\n                    // data is converted to numbers/dates in each dataItem\r\n                    if ($type.hasValue(value)) {\r\n                        hasSomeValues_1 = true;\r\n                        dataItem[fieldName] = value;\r\n                    }\r\n                }\r\n            });\r\n            $object.each(this.propertyFields, function (key, fieldValue) {\r\n                var f = key;\r\n                var value = dataContext[fieldValue];\r\n                if ($type.hasValue(value)) {\r\n                    hasSomeValues_1 = true;\r\n                    dataItem.setProperty(f, value);\r\n                }\r\n            });\r\n            // @todo we might need some flag which would tell whether we should create empty data items or not.\r\n            if (!this._addAllDataItems && !hasSomeValues_1) {\r\n                this.dataItems.remove(dataItem);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * When validating raw data, instead of processing data item, we update it\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Object} item\r\n     */\r\n    Component.prototype.updateDataItem = function (dataItem) {\r\n        var _this = this;\r\n        if (dataItem) {\r\n            var dataContext_1 = dataItem.dataContext;\r\n            $object.each(this.dataFields, function (key, fieldValue) {\r\n                var fieldName = key;\r\n                var value = dataContext_1[fieldValue];\r\n                // Apply adapters to a retrieved value\r\n                value = _this.adapter.apply(\"dataContextValue\", {\r\n                    field: fieldName,\r\n                    value: value,\r\n                    dataItem: dataItem\r\n                }).value;\r\n                if (dataItem.hasChildren[fieldName]) {\r\n                    if (value) {\r\n                        var anyDataItem = dataItem;\r\n                        var children = (anyDataItem[fieldName]);\r\n                        $iter.each(children.iterator(), function (child) {\r\n                            _this.updateDataItem(child);\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    // data is converted to numbers/dates in each dataItem\r\n                    if ($type.hasValue(value)) {\r\n                        dataItem[fieldName] = value;\r\n                    }\r\n                }\r\n            });\r\n            $object.each(this.propertyFields, function (key, fieldValue) {\r\n                var f = key;\r\n                var value = dataContext_1[fieldValue];\r\n                if ($type.hasValue(value)) {\r\n                    dataItem.setProperty(f, value);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * [validateDataElements description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    Component.prototype.validateDataElements = function () {\r\n        var count = this.endIndex;\r\n        for (var i = this.startIndex; i < count; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            // TODO is this correct\r\n            if (dataItem) {\r\n                this.validateDataElement(dataItem);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Validates this element and its related elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.validate = function () {\r\n        this.validateDataElements();\r\n        _super.prototype.validate.call(this);\r\n    };\r\n    /**\r\n     * [validateDataElement description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {this[\"_dataItem\"]} dataItem [description]\r\n     */\r\n    Component.prototype.validateDataElement = function (dataItem) {\r\n    };\r\n    /**\r\n     * Adds one or several (array) of data items to the existing data.\r\n     *\r\n     * @param {Object | Object[]} rawDataItem One or many raw data item objects\r\n     */\r\n    Component.prototype.addData = function (rawDataItem, removeCount) {\r\n        var _this = this;\r\n        // need to check if data is invalid, as addData might be called multiple times\r\n        if (!this.dataInvalid) {\r\n            this._parseDataFrom = this.data.length; // save length of parsed data\r\n        }\r\n        if (rawDataItem instanceof Array) {\r\n            // can't use concat because new array is returned\r\n            $array.each(rawDataItem, function (dataItem) {\r\n                _this.data.push(dataItem);\r\n            });\r\n        }\r\n        else {\r\n            this.data.push(rawDataItem); // add to raw data array\r\n        }\r\n        this.removeData(removeCount);\r\n        this.invalidateData();\r\n    };\r\n    /**\r\n     * Removes elements from the beginning of data\r\n     *\r\n     * @param {Optional<number>} count number of elements to remove\r\n     */\r\n    Component.prototype.removeData = function (count) {\r\n        if ($type.isNumber(count)) {\r\n            while (count > 0) {\r\n                var dataItem = this.dataItems.getIndex(0);\r\n                if (dataItem) {\r\n                    this.dataItems.remove(dataItem);\r\n                }\r\n                this.dataUsers.each(function (dataUser) {\r\n                    var dataItem = dataUser.dataItems.getIndex(0);\r\n                    if (dataItem) {\r\n                        dataUser.dataItems.remove(dataItem);\r\n                    }\r\n                });\r\n                this.data.shift();\r\n                this._parseDataFrom--;\r\n                count--;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Triggers a data (re)parsing.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.invalidateData = function () {\r\n        if (this.disabled || this.isTemplate) {\r\n            return;\r\n        }\r\n        //if(!this.dataInvalid){\r\n        registry.addToInvalidComponents(this);\r\n        system.requestFrame();\r\n        this.dataInvalid = true;\r\n        $iter.each(this.dataUsers.iterator(), function (x) {\r\n            x.invalidateDataItems();\r\n        });\r\n        //}\r\n    };\r\n    /**\r\n     * [invalidateDataUsers description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    Component.prototype.invalidateDataUsers = function () {\r\n        $iter.each(this.dataUsers.iterator(), function (x) {\r\n            x.invalidate();\r\n        });\r\n    };\r\n    /**\r\n     * Invalidates data values. When data array is not changed, but values within\r\n     * it changes, we invalidate data so that component would process changes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.invalidateDataItems = function () {\r\n        if (this.disabled || this.isTemplate) {\r\n            return;\r\n        }\r\n        //if(!this.dataItemsInvalid){\r\n        $array.move(registry.invalidDataItems, this);\r\n        system.requestFrame();\r\n        this.dataItemsInvalid = true;\r\n        $iter.each(this.dataUsers.iterator(), function (x) {\r\n            x.invalidateDataItems();\r\n        });\r\n        //}\r\n    };\r\n    /**\r\n     * Invalidates data range. This is done when data which must be shown\r\n     * changes (chart is zoomed for example).\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.invalidateDataRange = function () {\r\n        if (this.disabled || this.isTemplate) {\r\n            return;\r\n        }\r\n        //if(!this.dataRangeInvalid){\r\n        this.dataRangeInvalid = true;\r\n        $array.move(registry.invalidDataRange, this);\r\n        system.requestFrame();\r\n        //}\r\n    };\r\n    /**\r\n     * Processes data range.\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.validateDataRange = function () {\r\n        $array.remove(registry.invalidDataRange, this);\r\n        this.dataRangeInvalid = false;\r\n        if (this.startIndex != this._prevStartIndex || this.endIndex != this._prevEndIndex) {\r\n            this.rangeChangeUpdate();\r\n            this.appendDataItems();\r\n            this.invalidate();\r\n            this.dispatchImmediately(\"datarangechanged\");\r\n        }\r\n    };\r\n    /**\r\n     * [sliceData description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.sliceData = function () {\r\n        this._workingStartIndex = this.startIndex;\r\n        this._workingEndIndex = this.endIndex;\r\n    };\r\n    /**\r\n     * [rangeChangeUpdate description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.rangeChangeUpdate = function () {\r\n        this.sliceData();\r\n        this._prevStartIndex = this.startIndex;\r\n        this._prevEndIndex = this.endIndex;\r\n    };\r\n    /**\r\n     * [appendDataItems description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.appendDataItems = function () {\r\n        // TODO use an iterator instead\r\n        var count = this.endIndex;\r\n        for (var i = this.startIndex; i < count; i++) {\r\n            // data item\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            if (dataItem) {\r\n                dataItem.__disabled = false;\r\n            }\r\n        }\r\n        for (var i = 0; i < this.startIndex; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            dataItem.__disabled = true;\r\n        }\r\n        for (var i = this.endIndex; i < this.dataItems.length; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            dataItem.__disabled = true;\r\n        }\r\n    };\r\n    /**\r\n     * If you want to have a smooth transition from one data values to another, you change your raw data and then you must call this method.\r\n     * then instead of redrawing everything, the chart will check raw data and smoothly transit from previous to new data\r\n     */\r\n    Component.prototype.invalidateRawData = function () {\r\n        if (this.disabled || this.isTemplate) {\r\n            return;\r\n        }\r\n        //if(!this.rawDataInvalid){\r\n        $array.move(registry.invalidRawDatas, this);\r\n        system.requestFrame();\r\n        this.rawDataInvalid = true;\r\n        $iter.each(this.dataUsers.iterator(), function (x) {\r\n            x.invalidateRawData();\r\n        });\r\n        //}\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Component.prototype.validateRawData = function () {\r\n        var _this = this;\r\n        $array.remove(registry.invalidRawDatas, this);\r\n        $iter.each(this.dataItems.iterator(), function (dataItem) {\r\n            if (dataItem) {\r\n                _this.updateDataItem(dataItem);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @ignoref\r\n     */\r\n    Component.prototype.disposeData = function () {\r\n        if (this.inited) {\r\n            $array.each(this._dataDisposers, function (x) {\r\n                x.dispose();\r\n            });\r\n            // and for all components\r\n            $iter.each(this.dataUsers.iterator(), function (dataUser) {\r\n                dataUser.disposeData();\r\n            });\r\n            this._dataDisposers.length = 0;\r\n            this._startIndex = undefined;\r\n            this._endIndex = undefined;\r\n            // dispose old\r\n            this.dataItems.clear();\r\n        }\r\n    };\r\n    /**\r\n     * Validates (processes) data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.validateData = function () {\r\n        this.dispatchImmediately(\"beforedatavalidated\");\r\n        this.dataInvalid = false;\r\n        registry.removeFromInvalidComponents(this);\r\n        this.dataValidationProgress = 0;\r\n        // need this to slice new data\r\n        this._prevStartIndex = undefined;\r\n        this._prevEndIndex = undefined;\r\n        // todo: this needs some overthinking, maybe some extra settings like zoomOotonDataupdate like in v3 or so. some charts like pie chart probably should act like this always\r\n        this._startIndex = undefined;\r\n        this._endIndex = undefined;\r\n        if (this.dataFields.data && this.dataItem) {\r\n            var dataContext = this.dataItem.dataContext;\r\n            this._data = dataContext[this.dataFields.data];\r\n        }\r\n        // data items array is reset only if all data is validated, if _parseDataFrom is not 0, we append new data only\r\n        // check heatmap demo if uncommented\r\n        // fixed both issues by adding && this.data.length > 0\r\n        // check adding series example if changed\r\n        if (this._parseDataFrom === 0 && this.data.length > 0) {\r\n            this.disposeData();\r\n        }\r\n        if (this.data.length > 0) {\r\n            var preloader = this.preloader;\r\n            // and for all components\r\n            $iter.each(this.dataUsers.iterator(), function (dataUser) {\r\n                // todo: this needs some overthinking, maybe some extra settings like zoomOUtonDataupdate like in v3 or so. some charts like pie chart probably should act like this always\r\n                dataUser._startIndex = undefined;\r\n                dataUser._endIndex = undefined;\r\n            });\r\n            var counter = 0;\r\n            var startTime = Date.now();\r\n            // parse data\r\n            var i = this._parseDataFrom;\r\n            var n = this.data.length;\r\n            var _loop_1 = function () {\r\n                var rawDataItem = this_1.data[i];\r\n                var dataItem = this_1.dataItems.create();\r\n                this_1.processDataItem(dataItem, rawDataItem);\r\n                this_1.dataUsers.each(function (dataUser) {\r\n                    if (dataUser.data.length == 0) { // checking if data is not set directly\r\n                        var dataUserDataItem = dataUser.dataItems.create();\r\n                        dataUser.processDataItem(dataUserDataItem, rawDataItem);\r\n                    }\r\n                });\r\n                counter++;\r\n                // show preloader if this takes too many time\r\n                if (counter == 100) { // no need to check it on each data item\r\n                    counter = 0;\r\n                    var elapsed = Date.now() - startTime;\r\n                    if (elapsed > this_1.parsingStepDuration) {\r\n                        if (i < this_1.data.length - 10) {\r\n                            this_1._parseDataFrom = i + 1;\r\n                            // update preloader\r\n                            if (preloader) {\r\n                                if (i / this_1.data.length > 0.5 && !preloader.visible) {\r\n                                    // do not start showing\r\n                                }\r\n                                else {\r\n                                    preloader.progress = i / this_1.data.length;\r\n                                }\r\n                            }\r\n                            this_1.dataValidationProgress = i / this_1.data.length;\r\n                            i = this_1.data.length; // stops cycle\r\n                            this_1.invalidateData();\r\n                            return { value: void 0 };\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            var this_1 = this;\r\n            for (i; i < n; i++) {\r\n                var state_1 = _loop_1();\r\n                if (typeof state_1 === \"object\")\r\n                    return state_1.value;\r\n            }\r\n            if (preloader) {\r\n                preloader.progress = 1;\r\n            }\r\n        }\r\n        this.dataValidationProgress = 1;\r\n        this._parseDataFrom = 0; // reset this index, it is set to dataItems.length if addData() method was used.\r\n        this.invalidateDataItems();\r\n        if (!this._internalDefaultsApplied) {\r\n            this.applyInternalDefaults();\r\n        }\r\n        this.dispatch(\"datavalidated\"); // can't zoom chart if dispatched immediately\r\n    };\r\n    /**\r\n     * Validates (processes) data items.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.validateDataItems = function () {\r\n        $array.remove(registry.invalidDataItems, this);\r\n        this.dataItemsInvalid = false;\r\n        this.invalidateDataRange();\r\n        this.invalidate();\r\n        this.dispatch(\"dataitemsvalidated\");\r\n    };\r\n    Object.defineProperty(Component.prototype, \"data\", {\r\n        /**\r\n         * Returns element's source (raw) data.\r\n         *\r\n         * @return {any[]} Data\r\n         */\r\n        get: function () {\r\n            if (!this._data) {\r\n                this._data = [];\r\n            }\r\n            return this.adapter.apply(\"data\", this._data);\r\n        },\r\n        /**\r\n         * Sets source (raw) data for the element. The \"data\" is always an `Array`\r\n         * of objects.\r\n         *\r\n         * @param {any[]} value Data\r\n         */\r\n        set: function (value) {\r\n            // array might be the same, but there might be items added\r\n            // todo: check if array changed, toString maybe?\r\n            //if (this._data != value) {\r\n            this.disposeData();\r\n            this._data = value;\r\n            if (value && value.length > 0) {\r\n                this.invalidateData();\r\n            }\r\n            //}\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns (creates if necessary) a [[DataSource]] bound to any specific\r\n     * property.\r\n     *\r\n     * For example if I want to bind `data` to an external JSON file, I'd create\r\n     * a DataSource for it.\r\n     *\r\n     * @param  {string}      property  Property to bind external data to\r\n     * @return {DataSource}            A DataSource for property\r\n     */\r\n    Component.prototype.getDataSource = function (property) {\r\n        var _this = this;\r\n        if (!$type.hasValue(this._dataSources[property])) {\r\n            this._dataSources[property] = new DataSource();\r\n            this._dataSources[property].component = this;\r\n            this.setDataSourceEvents(this._dataSources[property], property);\r\n            this._dataSources[property].adapter.add(\"dateFields\", function (val) {\r\n                return _this.dataSourceDateFields(val);\r\n            });\r\n            this._dataSources[property].adapter.add(\"numberFields\", function (val) {\r\n                return _this.dataSourceNumberFields(val);\r\n            });\r\n            this.events.on(\"inited\", function () {\r\n                _this.loadData(property);\r\n            }, this, false);\r\n        }\r\n        return this._dataSources[property];\r\n    };\r\n    Object.defineProperty(Component.prototype, \"dataSource\", {\r\n        /**\r\n         * @return {DataSource} Data source\r\n         */\r\n        get: function () {\r\n            if (!this._dataSources[\"data\"]) {\r\n                this.getDataSource(\"data\");\r\n            }\r\n            return this._dataSources[\"data\"];\r\n        },\r\n        /**\r\n         *A [[DataSource]] to be used for loading Component's data.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/loading-external-data/} for more on loading external data\r\n         * @param {DataSource}  value  Data source\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            if (this._dataSources[\"data\"]) {\r\n                this.removeDispose(this._dataSources[\"data\"]);\r\n            }\r\n            this._dataSources[\"data\"] = value;\r\n            this._dataSources[\"data\"].component = this;\r\n            this.events.on(\"inited\", function () {\r\n                _this.loadData(\"data\");\r\n            }, this, false);\r\n            this.setDataSourceEvents(value, \"data\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Initiates loading of the external data via [[DataSource]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.loadData = function (property) {\r\n        this._dataSources[property].load();\r\n    };\r\n    /**\r\n     * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n     * so that particular chart types can popuplate this setting with their\r\n     * own type-speicifc data fields so they are parsed properly.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string[]}  value  Array of date fields\r\n     * @return {string[]}         Array of date fields populated with chart's date fields\r\n     */\r\n    Component.prototype.dataSourceDateFields = function (value) {\r\n        return value;\r\n    };\r\n    /**\r\n     * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n     * so that particular chart types can popuplate this setting with their\r\n     * own type-speicifc data fields so they are parsed properly.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string[]}  value  Array of number fields\r\n     * @return {string[]}         Array of number fields populated with chart's number fields\r\n     */\r\n    Component.prototype.dataSourceNumberFields = function (value) {\r\n        return value;\r\n    };\r\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param  {string[]}  list        [description]\r\n     * @param  {object}    dataFields  [description]\r\n     * @param  {string[]}  targetList  [description]\r\n     * @return {string[]}              [description]\r\n     */\r\n    Component.prototype.populateDataSourceFields = function (list, dataFields, targetList) {\r\n        $array.each(targetList, function (value) {\r\n            if (dataFields[value] && $array.indexOf(list, dataFields[value]) === -1) {\r\n                list.push(dataFields[value]);\r\n            }\r\n        });\r\n        return list;\r\n    };\r\n    /**\r\n     * Sets events on a [[DataSource]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.setDataSourceEvents = function (ds, property) {\r\n        var _this = this;\r\n        ds.events.on(\"started\", function (ev) {\r\n            var preloader = _this.preloader;\r\n            if (preloader) {\r\n                preloader.progress = 0;\r\n                //preloader.label.text = this.language.translate(\"Loading\");\r\n            }\r\n        }, undefined, false);\r\n        ds.events.on(\"loadstarted\", function (ev) {\r\n            var preloader = _this.preloader;\r\n            if (preloader) {\r\n                preloader.progress = 0.25;\r\n            }\r\n        }, undefined, false);\r\n        ds.events.on(\"loadended\", function (ev) {\r\n            var preloader = _this.preloader;\r\n            if (preloader) {\r\n                preloader.progress = 0.5;\r\n            }\r\n        }, undefined, false);\r\n        ds.events.on(\"parseended\", function (ev) {\r\n            var preloader = _this.preloader;\r\n            if (preloader) {\r\n                preloader.progress = 0.75;\r\n            }\r\n        }, undefined, false);\r\n        ds.events.on(\"ended\", function (ev) {\r\n            var preloader = _this.preloader;\r\n            if (preloader) {\r\n                preloader.progress = 1;\r\n            }\r\n        }, undefined, false);\r\n        ds.events.on(\"error\", function (ev) {\r\n            var preloader = _this.preloader;\r\n            if (preloader) {\r\n                preloader.progress = 1;\r\n            }\r\n            _this.openModal(ev.message);\r\n        }, undefined, false);\r\n        if (property) {\r\n            ds.events.on(\"done\", function (ev) {\r\n                var preloader = _this.preloader;\r\n                if (preloader) {\r\n                    preloader.progress = 1;\r\n                }\r\n                if (property == \"data\" && !$type.isArray(ev.data)) {\r\n                    ev.data = [ev.data];\r\n                }\r\n                if (ds.incremental && property == \"data\" && _this.data.length) {\r\n                    _this.addData(ev.data, ds.keepCount ? ev.data.length : 0);\r\n                }\r\n                else {\r\n                    _this[property] = ev.data;\r\n                }\r\n            });\r\n        }\r\n    };\r\n    Object.defineProperty(Component.prototype, \"responsive\", {\r\n        /**\r\n         * @return {DataSource} Data source\r\n         */\r\n        get: function () {\r\n            if (!this._responsive) {\r\n                this._responsive = new Responsive();\r\n                this._responsive.component = this;\r\n            }\r\n            return this._responsive;\r\n        },\r\n        /**\r\n         * A [[Responsive]] instance to be used when applying conditional\r\n         * property values.\r\n         *\r\n         * NOTE: Responsive features are currently in development and may not work\r\n         * as expected, if at all.\r\n         *\r\n         * @param {Responsive}  value  Data source\r\n         */\r\n        set: function (value) {\r\n            this._responsive = value;\r\n            this._responsive.component = this;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets current zoom.\r\n     *\r\n     * The range uses relative values from 0 to 1, with 0 marking beginning and 1\r\n     * marking end of the available data range.\r\n     *\r\n     * This method will not have any effect when called on a chart object.\r\n     * Since the chart can have a number of axes and series, each with its own\r\n     * data, the meaning of \"range\" is very ambiguous.\r\n     *\r\n     * To zoom the chart use `zoom*` methods on its respective axes.\r\n     *\r\n     * @param  {IRange}  range          Range\r\n     * @param  {boolean} skipRangeEvent Should rangechanged event not be triggered?\r\n     * @param  {boolean} instantly      Do not animate?\r\n     * @return {IRange}                 Actual modidied range (taking `maxZoomFactor` into account)\r\n     */\r\n    Component.prototype.zoom = function (range, skipRangeEvent, instantly, declination) {\r\n        var _this = this;\r\n        if (skipRangeEvent === void 0) { skipRangeEvent = false; }\r\n        if (instantly === void 0) { instantly = false; }\r\n        var start = range.start;\r\n        var end = range.end;\r\n        var priority = range.priority;\r\n        if (!$type.isNumber(declination)) {\r\n            declination = this.maxZoomDeclination;\r\n        }\r\n        if (!$type.isNumber(start) || !$type.isNumber(end)) {\r\n            return { start: this.start, end: this.end };\r\n        }\r\n        if (this._finalStart != start || this._finalEnd != end) {\r\n            var maxZoomFactor = this.maxZoomFactor / this.minZoomCount;\r\n            // most likely we are dragging left scrollbar grip here, so we tend to modify end\r\n            if (priority == \"start\") {\r\n                // add to the end\r\n                if (1 / (end - start) > maxZoomFactor) {\r\n                    end = start + 1 / maxZoomFactor;\r\n                }\r\n                //unless end is > 0\r\n                if (end > 1 && end - start < 1 / maxZoomFactor) {\r\n                    //end = 1;\r\n                    start = end - 1 / maxZoomFactor;\r\n                }\r\n            }\r\n            // most likely we are dragging right, so we modify left\r\n            else {\r\n                // remove from start\r\n                if (1 / (end - start) > maxZoomFactor) {\r\n                    start = end - 1 / maxZoomFactor;\r\n                }\r\n                if (start < 0 && end - start < 1 / maxZoomFactor) {\r\n                    //start = 0;\r\n                    end = start + 1 / maxZoomFactor;\r\n                }\r\n            }\r\n            if (start < -declination) {\r\n                start = -declination;\r\n            }\r\n            if (1 / (end - start) > maxZoomFactor) {\r\n                end = start + 1 / maxZoomFactor;\r\n            }\r\n            if (end > 1 + declination) {\r\n                end = 1 + declination;\r\n            }\r\n            if (1 / (end - start) > maxZoomFactor) {\r\n                start = end - 1 / maxZoomFactor;\r\n            }\r\n            this._finalEnd = end;\r\n            this._finalStart = start;\r\n            this.skipRangeEvent = skipRangeEvent;\r\n            if (this.rangeChangeDuration > 0 && !instantly) {\r\n                // todo: maybe move this to Animation\r\n                var rangeChangeAnimation = this.rangeChangeAnimation;\r\n                if (rangeChangeAnimation && rangeChangeAnimation.progress < 1) {\r\n                    var options = rangeChangeAnimation.animationOptions;\r\n                    if (options.length > 1) {\r\n                        if (options[0].to == start && options[1].to == end) {\r\n                            return { start: start, end: end };\r\n                        }\r\n                    }\r\n                }\r\n                this.dispatchImmediately(\"rangechangestarted\");\r\n                if (this.rangeChangeAnimation) {\r\n                    this.rangeChangeAnimation.kill();\r\n                }\r\n                rangeChangeAnimation = this.animate([{ property: \"start\", to: start }, { property: \"end\", to: end }], this.rangeChangeDuration, this.rangeChangeEasing);\r\n                this.rangeChangeAnimation = rangeChangeAnimation;\r\n                if (rangeChangeAnimation && !rangeChangeAnimation.isFinished()) {\r\n                    rangeChangeAnimation.events.on(\"animationended\", function () {\r\n                        _this.dispatchImmediately(\"rangechangeended\");\r\n                    });\r\n                }\r\n                else {\r\n                    this.dispatchImmediately(\"rangechangeended\");\r\n                }\r\n            }\r\n            else {\r\n                this.start = start;\r\n                this.end = end;\r\n            }\r\n        }\r\n        return { start: start, end: end };\r\n    };\r\n    /**\r\n     * Zooms to specific data items using their index in data.\r\n     *\r\n     * This method will not have any effect when called on a chart object.\r\n     * Since the chart can have a number of axes and series, each with its own\r\n     * data, the meaning of \"index\" is very ambiguous.\r\n     *\r\n     * To zoom the chart use `zoom*` methods on its respective axes.\r\n     *\r\n     * @param {number}  startIndex     Index of the starting data item\r\n     * @param {number}  endIndex       Index of the ending data item\r\n     * @param {boolean} skipRangeEvent Should rangechanged event not be triggered?\r\n     * @param {boolean} instantly      Do not animate?\r\n     */\r\n    Component.prototype.zoomToIndexes = function (startIndex, endIndex, skipRangeEvent, instantly) {\r\n        if (!$type.isNumber(startIndex) || !$type.isNumber(endIndex)) {\r\n            return;\r\n        }\r\n        var start = startIndex / this.dataItems.length;\r\n        var end = endIndex / this.dataItems.length;\r\n        this.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n    };\r\n    Object.defineProperty(Component.prototype, \"zoomFactor\", {\r\n        /**\r\n         * A current zoom factor (0-1). 1 meaning fully zoomed out. (showing all of\r\n         * the available data)\r\n         *\r\n         * @return {number} Zoom factor\r\n         */\r\n        get: function () {\r\n            return $math.fitToRange(1 / (this.end - this.start), 1, this.maxZoomFactor);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Component.prototype, \"maxZoomFactor\", {\r\n        /**\r\n         * @return {number} Maximum zoomFactor\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxZoomFactor\");\r\n        },\r\n        /**\r\n         * Max available `zoomFactor`.\r\n         *\r\n         * The element will not allow zoom to occur beyond this factor.\r\n         *\r\n         * [[DateAxis]] and [[CategoryAxis]] calculate this atutomatically so that\r\n         * category axis could be zoomed to one category and date axis allows to be\r\n         * zoomed up to one base interval.\r\n         *\r\n         * In case you want to restrict category or date axis to be zoomed to more\r\n         * than one category or more than one base interval, use `minZoomCount`\r\n         * property (set it to `> 1`).\r\n         *\r\n         * Default value of [[ValueAxis]]'s `maxZoomFactor` is `1000`.\r\n         *\r\n         * Feel free to modify it to allow bigger zoom or to restrict zooming.\r\n         *\r\n         * @param {number}  value  Maximum zoomFactor\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"maxZoomFactor\", value)) {\r\n                if (value == 1) {\r\n                    this.maxZoomDeclination = 0;\r\n                }\r\n                this.invalidateDataRange();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Component.prototype, \"maxZoomDeclination\", {\r\n        /**\r\n         * @ignore\r\n         * @return {number} Maximum zoom declination\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxZoomDeclination\");\r\n        },\r\n        /**\r\n         * Max zoom declination.\r\n         *\r\n         * @ignore\r\n         * @default 1\r\n         * @param {number}  value  Maximum zoom declination\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"maxZoomDeclination\", value)) {\r\n                this.invalidateDataRange();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Component.prototype, \"startIndex\", {\r\n        /**\r\n         * Current starting index.\r\n         *\r\n         * @return {number} Start index\r\n         */\r\n        get: function () {\r\n            if (!$type.isNumber(this._startIndex)) {\r\n                this._startIndex = 0;\r\n            }\r\n            return this._startIndex;\r\n        },\r\n        /**\r\n         * Sets current starting index.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {number} value Start index\r\n         */\r\n        set: function (value) {\r\n            this._startIndex = $math.fitToRange(Math.round(value), 0, this.dataItems.length);\r\n            //this._workingStartIndex = this._startIndex; // not good, breaks adjusted working start index of line series\r\n            this.start = this.indexToPosition(this._startIndex);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     * @todo:review description\r\n     * returns item's relative position by the index of the item\r\n     * @param {number} index\r\n     */\r\n    Component.prototype.indexToPosition = function (index) {\r\n        return index / this.dataItems.length;\r\n    };\r\n    Object.defineProperty(Component.prototype, \"endIndex\", {\r\n        /**\r\n         * Current ending index.\r\n         *\r\n         * @return {number} End index\r\n         */\r\n        get: function () {\r\n            if (!$type.isNumber(this._endIndex)) {\r\n                this._endIndex = this.dataItems.length;\r\n            }\r\n            return this._endIndex;\r\n        },\r\n        /**\r\n         * Sets current ending index.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {number} value End index\r\n         */\r\n        set: function (value) {\r\n            this._endIndex = $math.fitToRange(Math.round(value), 0, this.dataItems.length);\r\n            //this._workingEndIndex = this._endIndex; // not good, breaks adjusted workingend index of line series\r\n            this.end = this.indexToPosition(this._endIndex);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Component.prototype, \"start\", {\r\n        /**\r\n         * Current relative starting position of the data range (zoom).\r\n         *\r\n         * @return {number} Start (0-1)\r\n         */\r\n        get: function () {\r\n            return this._start;\r\n        },\r\n        /**\r\n         * Sets start of the current data range (zoom).\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {number} value Start (0-1)\r\n         */\r\n        set: function (value) {\r\n            // value = $math.round(value, 10); not good\r\n            //if (1 / (this.end - value) > this.maxZoomFactor) {\r\n            //\tvalue = this.end - 1 / this.maxZoomFactor;\r\n            //}\r\n            if (this._start != value) {\r\n                this._start = value;\r\n                var startIndex = Math.max(0, Math.floor(this.dataItems.length * value) || 0);\r\n                this._startIndex = Math.min(startIndex, this.dataItems.length);\r\n                this.invalidateDataRange();\r\n                this.invalidate();\r\n                this.dispatchImmediately(\"startchanged\");\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Component.prototype, \"end\", {\r\n        /**\r\n         * Current relative ending position fo the data range (zoom).\r\n         *\r\n         * @return {number} End (0-1)\r\n         */\r\n        get: function () {\r\n            return this._end;\r\n        },\r\n        /**\r\n         * Sets end of the current data range (zoom).\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {number} value End (0-1)\r\n         */\r\n        set: function (value) {\r\n            // value = $math.round(value, 10); // not good\r\n            //if (1 / (value - this.start) > this.maxZoomFactor) {\r\n            //\tvalue = 1 / this.maxZoomFactor + this.start;\r\n            //}\r\n            if (this._end != value) {\r\n                this._end = value;\r\n                this._endIndex = Math.min(this.dataItems.length, Math.ceil(this.dataItems.length * value) || 0);\r\n                this.invalidateDataRange();\r\n                this.invalidate();\r\n                this.dispatchImmediately(\"endchanged\");\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * [removeFromInvalids description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    Component.prototype.removeFromInvalids = function () {\r\n        _super.prototype.removeFromInvalids.call(this);\r\n        registry.removeFromInvalidComponents(this);\r\n        $array.remove(registry.invalidDataItems, this);\r\n        $array.remove(registry.invalidDataRange, this);\r\n        $array.remove(registry.invalidRawDatas, this);\r\n    };\r\n    Object.defineProperty(Component.prototype, \"dataItems\", {\r\n        /**\r\n         * Returns a list of source [[DataItem]] objects.\r\n         *\r\n         * @return {OrderedListTemplate} List of data items\r\n         */\r\n        get: function () {\r\n            return this._dataItems;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates the indexes for the dataItems\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype._updateDataItemIndexes = function (startIndex) {\r\n        var dataItems = this.dataItems.values;\r\n        var length = dataItems.length;\r\n        for (var i = startIndex; i < length; ++i) {\r\n            dataItems[i]._index = i;\r\n        }\r\n    };\r\n    /**\r\n     * Processes newly added [[DataItem]] as well as triggers data re-validation.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IListEvents<DataItem>[\"inserted\"]} event [description]\r\n     */\r\n    Component.prototype.handleDataItemAdded = function (event) {\r\n        event.newValue.component = this;\r\n        this._updateDataItemIndexes(event.index);\r\n        if (!this.dataItemsInvalid) {\r\n            this.invalidateDataItems();\r\n        }\r\n    };\r\n    /**\r\n     * removes [[DataItem]] as well as triggers data re-validation.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IListEvents<DataItem>[\"inserted\"]} event [description]\r\n     */\r\n    Component.prototype.handleDataItemRemoved = function (event) {\r\n        event.oldValue.component = undefined;\r\n        this._updateDataItemIndexes(event.index);\r\n        if (!this.dataItemsInvalid) {\r\n            this.invalidateDataItems();\r\n        }\r\n    };\r\n    Object.defineProperty(Component.prototype, \"dataMethods\", {\r\n        /**\r\n         * [dataMethods description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @deprecated Not used?\r\n         * @param {Dictionary} List of data methods\r\n         */\r\n        get: function () {\r\n            if (!this._dataMethods) {\r\n                this._dataMethods = new Dictionary();\r\n            }\r\n            return this._dataMethods;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Binds a data element's field to a specific field in raw data.\r\n     * For example, for the very basic column chart you'd want to bind a `value`\r\n     * field to a field in data, such as `price`.\r\n     *\r\n     * Some more advanced Components, like [[CandlestickSeries]] need several\r\n     * data fields bound to data, such as ones for open, high, low and close\r\n     * values.\r\n     *\r\n     * @todo Example\r\n     * @param {Key}                       field  Field name\r\n     * @param {this[\"_dataFields\"][Key]}  value  Field name in data\r\n     */\r\n    Component.prototype.bindDataField = function (field, value) {\r\n        this.dataFields[field] = value;\r\n        this.invalidateDataRange();\r\n    };\r\n    /**\r\n     * Invalidates processed data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.invalidateProcessedData = function () {\r\n        this.resetProcessedRange();\r\n        this.invalidateDataRange();\r\n    };\r\n    /**\r\n     * [resetProcessedRange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    Component.prototype.resetProcessedRange = function () {\r\n        this._prevEndIndex = null;\r\n        this._prevStartIndex = null;\r\n    };\r\n    Object.defineProperty(Component.prototype, \"dataUsers\", {\r\n        /**\r\n         * Returns all other [[Component]] objects that are using this element's\r\n         * data.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description (review)\r\n         * @return {List<Component>} [description]\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._dataUsers) {\r\n                this._dataUsers = new List();\r\n                //this._disposers.push(new ListDisposer(this._dataUsers));\r\n                // TODO better way of handling this? e.g. move into another module ?\r\n                this._disposers.push(new Disposer(function () {\r\n                    // TODO clear the list ?\r\n                    $iter.each(_this._dataUsers.iterator(), function (x) {\r\n                        x.dispose();\r\n                    });\r\n                }));\r\n            }\r\n            return this._dataUsers;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a clone of this element.\r\n     *\r\n     * @return {this} Clone\r\n     */\r\n    Component.prototype.clone = function () {\r\n        var component = _super.prototype.clone.call(this);\r\n        component.dataFields = $utils.copyProperties(this.dataFields, {});\r\n        return component;\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[Component]].\r\n     *\r\n     * @param {Component} source Source Component\r\n     */\r\n    Component.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.data = source.data;\r\n        this.sequencedInterpolation = source.sequencedInterpolation;\r\n        this.sequencedInterpolationDelay = source.sequencedInterpolationDelay;\r\n        this.interpolationDuration = source.interpolationDuration;\r\n        this.interpolationEasing = source.interpolationEasing;\r\n    };\r\n    /**\r\n     * Invalidates the whole element, including all its children, causing\r\n     * complete re-parsing of data and redraw.\r\n     *\r\n     * Use sparingly!\r\n     */\r\n    Component.prototype.reinit = function () {\r\n        this._inited = false;\r\n        this.deepInvalidate();\r\n    };\r\n    /**\r\n     * Add an adapter for data.\r\n     *\r\n     * @return {Export} Exporting\r\n     */\r\n    Component.prototype.getExporting = function () {\r\n        var _export = _super.prototype.getExporting.call(this);\r\n        if (!_export.adapter.has(\"data\", this._exportData, null, this)) {\r\n            _export.adapter.add(\"data\", this._exportData, null, this);\r\n        }\r\n        return _export;\r\n    };\r\n    Component.prototype._exportData = function (arg) {\r\n        arg.data = this.data;\r\n        return arg;\r\n    };\r\n    Component.prototype.setDisabled = function (value) {\r\n        var changed = _super.prototype.setDisabled.call(this, value);\r\n        if (changed) {\r\n            this.invalidateData();\r\n        }\r\n        return changed;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Component.prototype.setShowOnInit = function (value) {\r\n        if (value != this.getPropertyValue(\"showOnInit\")) {\r\n            if (value && !this.inited && !this.hidden) {\r\n                this._showOnInitDisposer2 = this.events.once(\"dataitemsvalidated\", this.hideInitially, this, false);\r\n                this._disposers.push(this._showOnInitDisposer2);\r\n            }\r\n            else {\r\n                if (this._showOnInitDisposer2) {\r\n                    this._showOnInitDisposer2.dispose();\r\n                }\r\n            }\r\n        }\r\n        // important order here\r\n        _super.prototype.setShowOnInit.call(this, value);\r\n    };\r\n    Component.prototype.setBaseId = function (value) {\r\n        if (value != this._baseId) {\r\n            if (this.dataInvalid) {\r\n                this.dataInvalid = false;\r\n                registry.removeFromInvalidComponents(this);\r\n                this._baseId = value;\r\n                this.invalidateData();\r\n            }\r\n        }\r\n        _super.prototype.setBaseId.call(this, value);\r\n    };\r\n    Object.defineProperty(Component.prototype, \"minZoomCount\", {\r\n        /**\r\n         * @return {number} Min zoom count\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minZoomCount\");\r\n        },\r\n        /**\r\n         * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n         *\r\n         * Allows restricting zoom in beyond certain number of categories or base\r\n         * intervals.\r\n         *\r\n         * @default 1\r\n         * @param {number}  value  Min zoom count\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"minZoomCount\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Component;\r\n}(Container));\r\nexport { Component };\r\n//# sourceMappingURL=Component.js.map","/**\r\n * Container module\r\n * @todo Needs description\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"./Sprite\";\r\nimport { SpriteState } from \"./SpriteState\";\r\nimport { List } from \"./utils/List\";\r\nimport { MultiDisposer } from \"./utils/Disposer\";\r\nimport { Dictionary, DictionaryDisposer } from \"./utils/Dictionary\";\r\nimport { Rectangle } from \"./elements/Rectangle\";\r\nimport { Percent } from \"./utils/Percent\";\r\nimport { registry } from \"./Registry\";\r\nimport { InterfaceColorSet } from \"../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"./utils/Iterator\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $math from \"./utils/Math\";\r\nimport * as $type from \"./utils/Type\";\r\nimport { system } from \"./System\";\r\n;\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Container can contain multiple sprites and arrange them in various layouts.\r\n *\r\n * @see {@link IContainerEvents} for a list of available events\r\n * @see {@link IContainerAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar Container = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Container, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Container() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Container children. (sorted by layout)\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {List<Sprite>}\r\n         */\r\n        _this._childrenByLayout = [];\r\n        /**\r\n         * Container's disposers for its child elements.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {Dictionary<string, IDisposer>}\r\n         */\r\n        _this._childrenDisposers = new Dictionary();\r\n        /**\r\n         * Indicates if this container contains any focused elements, including\r\n         * itself.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this.hasFocused = false;\r\n        /**\r\n         * An array of references to elements the state should be set, when it is set\r\n         * on this element.\r\n         *\r\n         * @type {Sprite[]}\r\n         */\r\n        _this.setStateOnSprites = [];\r\n        /*\r\n         * @ignore\r\n         */\r\n        _this.layoutInvalid = false;\r\n        _this._absoluteWidth = 0;\r\n        _this._absoluteHeight = 0;\r\n        /**\r\n         * An array of child Sprites that should be ready before this object can\r\n         * fire a \"ready\" event.\r\n         */\r\n        _this._shouldBeReady = [];\r\n        _this.className = \"Container\";\r\n        _this._element = _this.paper.addGroup(\"g\");\r\n        _this.group.add(_this.element);\r\n        _this.setPropertyValue(\"pixelPerfect\", false);\r\n        _this.setPropertyValue(\"layout\", \"absolute\");\r\n        _this.setPropertyValue(\"fixedWidthGrid\", false);\r\n        _this.setPropertyValue(\"verticalCenter\", \"none\");\r\n        _this.setPropertyValue(\"horizontalCenter\", \"none\");\r\n        _this._positionPrecision = 4;\r\n        _this._disposers.push(new DictionaryDisposer(_this._childrenDisposers));\r\n        _this.children.events.on(\"inserted\", _this.handleChildAdded, _this);\r\n        _this.children.events.on(\"removed\", _this.handleChildRemoved, _this);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Handles adding of a new child into `children`. Adding new children might\r\n     * affect the whole layout so it needs to be revalidated.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IListEvents<Sprite>[\"inserted\"]} event Event object\r\n     * @todo Throw an exception on adding a disposed object. Of course it's better NOT TO add disposed objects, so that what we should focus on.\r\n     */\r\n    Container.prototype.handleChildAdded = function (event) {\r\n        this.processChild(event.newValue);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Container.prototype.processChild = function (child) {\r\n        // try solves the problem when somedy adds child directly to children\r\n        try {\r\n            this._childrenDisposers.insertKey(child.uid, new MultiDisposer([\r\n                // it's not enough to listen to POSITION_CHANGED only, as some extra redrawals will happen.\r\n                child.events.on(\"transformed\", this.handleChildTransform, this),\r\n                child.events.on(\"zIndexChanged\", this.sortAndAdd, this)\r\n            ]));\r\n        }\r\n        catch (err) {\r\n            // void\r\n        }\r\n        if (this.element && !child.disabled) {\r\n            var group = this.element;\r\n            group.add(child.group);\r\n        }\r\n        child.parent = this;\r\n        child.paper = this.paper;\r\n        this.dispatchImmediately(\"childadded\", { type: \"childadded\", newValue: child });\r\n        this.invalidate();\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Container.prototype.sortAndAdd = function () {\r\n        this.sortChildren();\r\n        this.addChildren();\r\n    };\r\n    /**\r\n     * Handles child removal. Changing size of the child may change the\r\n     * whole layout of the Container, hence layout needs to be invalidated.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IListEvents<Sprite>[\"removed\"]} event Event object\r\n     */\r\n    Container.prototype.handleChildRemoved = function (event) {\r\n        var child = event.oldValue;\r\n        // TODO figure out why the key sometimes doesn't exist\r\n        this._childrenDisposers.removeKey(child.uid);\r\n        if (this.element) {\r\n            var group = this.element;\r\n            group.removeElement(child.group);\r\n        }\r\n        if (child.isMeasured) {\r\n            this.invalidateLayout();\r\n        }\r\n        this.dispatchImmediately(\"childremoved\", { type: \"childremoved\", oldValue: child });\r\n    };\r\n    /**\r\n     * Handles child transformation. Changing size of the child may change the\r\n     * whole layout of the Container, hence layout needs to be invalidated.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AMEvent<Sprite, ISpriteEvents>[\"transformed\"]} event Event object\r\n     */\r\n    Container.prototype.handleChildTransform = function (event) {\r\n        var child = event.target;\r\n        if (child.isMeasured) { // && this.layout != \"none\" && this.layout != \"absolute\") {\r\n            this.invalidateLayout();\r\n        }\r\n    };\r\n    /**\r\n     * Invalidates Container's layout, causing it to be re-evaluated again.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Container.prototype.invalidateLayout = function () {\r\n        if (this.layoutInvalid || this.disabled || this.isTemplate || this.layout == \"none\" || this.__disabled) {\r\n            return;\r\n        }\r\n        this.layoutInvalid = true;\r\n        registry.addToInvalidLayouts(this);\r\n        system.requestFrame();\r\n    };\r\n    /**\r\n     * Invalidates element.\r\n     *\r\n     * Object will be redrawn during the next update cycle.\r\n     *\r\n     * Please note that in most cases elements will auto-invalidate when needed. If\r\n     * everything works, DO NOT use this method. Use it only if some changes do\r\n     * not take otherwise.\r\n     */\r\n    Container.prototype.invalidate = function () {\r\n        _super.prototype.invalidate.call(this);\r\n        this.invalidateLayout();\r\n    };\r\n    /**\r\n     * Invalidates the whole element, including layout AND all its child\r\n     * elements.\r\n     *\r\n     * As this will essentially force all elements to redraw, use only if\r\n     * absolutely necessary.\r\n     */\r\n    Container.prototype.deepInvalidate = function () {\r\n        _super.prototype.invalidate.call(this);\r\n        //this.sortChildren();\r\n        $array.each(this._childrenByLayout, function (child) {\r\n            if (child instanceof Container) {\r\n                child.deepInvalidate();\r\n            }\r\n            else {\r\n                child.invalidate();\r\n            }\r\n        });\r\n        this.invalidateLayout();\r\n    };\r\n    Object.defineProperty(Container.prototype, \"children\", {\r\n        /**\r\n         * Returns a list of the child [[Sprite]] elements contained in this\r\n         * Container.\r\n         *\r\n         * @return {List<Sprite>} List of child elements (Sprites)\r\n         */\r\n        get: function () {\r\n            // @todo Review if we can add all children to disposers\r\n            if (!this._children) {\r\n                this._children = new List();\r\n                //this._disposers.push(new ListDisposer(this._children));\r\n            }\r\n            return this._children;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Container.prototype, \"minWidth\", {\r\n        /**\r\n         * @return {Optional<number>} Width (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minWidth\");\r\n        },\r\n        /**\r\n         * Minimum width (px) for the Container. A container will not\r\n         * auto-shrink beyond this value, even if child elements are smaller.\r\n         *\r\n         * @param {Optional<number>}  value  Width (px)\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"minWidth\", value)) {\r\n                this.invalidateLayout();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Container.prototype, \"minHeight\", {\r\n        /**\r\n         * @return {Optional<number>} Height (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minHeight\");\r\n        },\r\n        /**\r\n         * Minimum height (px) for the Container. A container will not\r\n         * auto-shrink beyond this value, even if child elements are smaller.\r\n         *\r\n         * @param {Optional<number>}  value  Height (px)\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"minHeight\", value)) {\r\n                this.invalidateLayout();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Overrides the original `removeElement` so that Container's actual element\r\n     * is not removed. We do not need to remove element of a Container.\r\n     *\r\n     * We do this because remove element each time will fail the `getBBox`.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Container.prototype.removeElement = function () {\r\n    };\r\n    /**\r\n     * Sorts Container's children: the ones with variable width and height are\r\n     * put at the end of the list (depending on layout type), so that fixed-width\r\n     * ones can be drawn first.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Container.prototype.sortChildren = function () {\r\n        var _this = this;\r\n        this._childrenByLayout = [];\r\n        if (this.layout == \"none\" || this.layout == \"absolute\" || !this.layout) {\r\n            //$iter.each(this.children.iterator(), (child) => {\r\n            //\tthis._childrenByLayout.push(child);\r\n            //});\r\n            this._childrenByLayout = this.children.values;\r\n        }\r\n        else {\r\n            // Assemble fixed-size and relative lists\r\n            var fixed_1 = [];\r\n            var relative_1 = [];\r\n            $iter.each(this.children.iterator(), function (child) {\r\n                if (_this.layout == \"horizontal\" || _this.layout == \"grid\") {\r\n                    if (!$type.isNumber(child.percentWidth)) {\r\n                        fixed_1.push(child);\r\n                    }\r\n                    else {\r\n                        relative_1.push(child);\r\n                    }\r\n                }\r\n                else if (_this.layout == \"vertical\") {\r\n                    if (!$type.isNumber(child.percentHeight)) {\r\n                        fixed_1.push(child);\r\n                    }\r\n                    else {\r\n                        relative_1.push(child);\r\n                    }\r\n                }\r\n                else {\r\n                    fixed_1.push(child);\r\n                }\r\n            });\r\n            // Concat everything into list\r\n            this._childrenByLayout = fixed_1.concat(relative_1);\r\n        }\r\n        this.calculateRelativeSize();\r\n    };\r\n    /**\r\n     * Calculates relative sizes for all Container's children.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Make it protected?\r\n     */\r\n    Container.prototype.calculateRelativeSize = function () {\r\n        var _this = this;\r\n        var totalRelativeWidth = 0;\r\n        var totalRelativeHeight = 0;\r\n        $array.each(this._childrenByLayout, function (child) {\r\n            // if child is not measured, we do not care about it at all.\r\n            if (child.isMeasured) {\r\n                if ($type.isNumber(child.percentWidth)) {\r\n                    totalRelativeWidth += child.percentWidth;\r\n                }\r\n                if ($type.isNumber(child.percentHeight)) {\r\n                    totalRelativeHeight += child.percentHeight;\r\n                }\r\n            }\r\n        });\r\n        $array.each(this._childrenByLayout, function (child) {\r\n            if (child.isMeasured) {\r\n                if (_this.layout == \"horizontal\") {\r\n                    if ($type.isNumber(child.percentWidth)) {\r\n                        child.relativeWidth = child.percentWidth / totalRelativeWidth;\r\n                    }\r\n                    if ($type.isNumber(child.percentHeight)) {\r\n                        child.relativeHeight = child.percentHeight / 100;\r\n                    }\r\n                }\r\n                if (_this.layout == \"vertical\") {\r\n                    if ($type.isNumber(child.percentHeight)) {\r\n                        child.relativeHeight = child.percentHeight / totalRelativeHeight;\r\n                    }\r\n                    if ($type.isNumber(child.percentWidth)) {\r\n                        child.relativeWidth = child.percentWidth / 100;\r\n                    }\r\n                }\r\n                if (_this.layout == \"grid\") {\r\n                    if ($type.isNumber(child.percentHeight)) {\r\n                        child.relativeHeight = child.percentHeight / 100;\r\n                    }\r\n                    if ($type.isNumber(child.percentWidth)) {\r\n                        child.relativeWidth = child.percentWidth / 100;\r\n                    }\r\n                }\r\n            }\r\n            if (_this.layout == \"absolute\" || !child.isMeasured) {\r\n                if ($type.isNumber(child.percentWidth)) {\r\n                    child.relativeWidth = child.percentWidth / 100;\r\n                }\r\n                if ($type.isNumber(child.percentHeight)) {\r\n                    child.relativeHeight = child.percentHeight / 100;\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Adds all children to Container's SVG element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Container.prototype.addChildren = function () {\r\n        /*\r\n          Need this check because a child might be assigned to parent even before element is created, for example a theme\r\n          access scrollbar.thumb\r\n        */\r\n        if (this.element) {\r\n            var zindexed = $array.copy(this.children.values); // not children by layout!\r\n            var sortArray = zindexed.map(function (data, idx) {\r\n                return { idx: idx, data: data };\r\n            });\r\n            sortArray.sort(function (a, b) {\r\n                var ai = (a.data.zIndex || 0);\r\n                var bi = (b.data.zIndex || 0);\r\n                if (ai < bi)\r\n                    return -1;\r\n                if (ai > bi)\r\n                    return 1;\r\n                return a.idx - b.idx;\r\n            });\r\n            zindexed = sortArray.map(function (val) {\r\n                return val.data;\r\n            });\r\n            var group_1 = this.element;\r\n            // check, maybe the order is good already\r\n            var isCorrect = true;\r\n            if (group_1.node && group_1.node.childNodes) {\r\n                for (var i = 0, len = group_1.node.childNodes.length; i < len; i++) {\r\n                    if (group_1.node.childNodes[i] != zindexed[i].group.node) {\r\n                        isCorrect = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (!isCorrect) {\r\n                $array.each(zindexed, function (child) {\r\n                    if (child.group) {\r\n                        group_1.add(child.group);\r\n                    }\r\n                });\r\n                if (this._background) {\r\n                    this.group.addToBack(this._background.group);\r\n                }\r\n                this.invalidateLayout();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Creates a new element of specific type and assigns as a child to the\r\n     * Container.\r\n     *\r\n     * @param  {T extends Sprite}  Class type for the new element\r\n     * @return {T}                 New element\r\n     */\r\n    Container.prototype.createChild = function (classType) {\r\n        var sprite = new classType();\r\n        sprite.parent = this;\r\n        return sprite;\r\n    };\r\n    /**\r\n     * Removes all Container's children without actually destroying them.\r\n     *\r\n     * To destroy children use `disposeChildren()` instead.\r\n     */\r\n    Container.prototype.removeChildren = function () {\r\n        // remove all children\r\n        // TODO use iteration instead\r\n        while (this.children.length > 0) {\r\n            var child = this.children.getIndex(0);\r\n            child.parent = undefined;\r\n            this.children.removeValue(child);\r\n        }\r\n    };\r\n    /**\r\n     * Removes and destroys all Container's children.\r\n     *\r\n     * To remove children from Container without destroying them, use\r\n     * `removeChildren()`.\r\n     */\r\n    Container.prototype.disposeChildren = function () {\r\n        // TODO use iteration instead\r\n        while (this.children.length > 0) {\r\n            var child = this.children.getIndex(0);\r\n            child.dispose();\r\n            this.children.removeValue(child);\r\n        }\r\n    };\r\n    Object.defineProperty(Container.prototype, \"background\", {\r\n        /**\r\n         * @return {Rectangle} Background element\r\n         */\r\n        get: function () {\r\n            if (!this._background) {\r\n                this._background = this.createBackground();\r\n                this.processBackground();\r\n            }\r\n            return this._background;\r\n        },\r\n        /**\r\n         * An element to use as container background.\r\n         *\r\n         * @param {Sprite}  background  Background element\r\n         */\r\n        set: function (background) {\r\n            if (this._background && this.background != background) {\r\n                this.removeDispose(this._background);\r\n            }\r\n            if (background) {\r\n                this._background = background;\r\n                this._disposers.push(background);\r\n                this.processBackground();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Handles the situation where parent element is resized.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Container.prototype.handleGlobalScale = function () {\r\n        _super.prototype.handleGlobalScale.call(this);\r\n        this.children.each(function (child) {\r\n            child.handleGlobalScale();\r\n        });\r\n    };\r\n    /**\r\n     * Creates and returns a [[Rectangle]] to use as a background for Container.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {this} Background Rectangle element\r\n     */\r\n    Container.prototype.createBackground = function () {\r\n        return new Rectangle();\r\n    };\r\n    /**\r\n     * Decorates background element with required properties.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Container.prototype.processBackground = function () {\r\n        var background = this._background;\r\n        if (background) {\r\n            background.isMeasured = false;\r\n            this._background.fill = new InterfaceColorSet().getFor(\"background\");\r\n            background.parent = this;\r\n            background.isMeasured = false;\r\n            this.children.removeValue(background);\r\n            this._disposers.push(background);\r\n            this.group.addToBack(this._background.group);\r\n        }\r\n    };\r\n    /**\r\n     * Measures the size of container and informs its children of how much size\r\n     * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n     * properties.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Container.prototype.validateLayout = function () {\r\n        var _this = this;\r\n        registry.removeFromInvalidLayouts(this);\r\n        this.layoutInvalid = false;\r\n        // prevents from drawing if topparent is 0x0\r\n        /*\r\n        let topParent = this.topParent;\r\n        if (topParent) {\r\n            if (!topParent.maxWidth || !topParent.maxHeight) {\r\n                this._disposers.push(topParent.events.once(\"maxsizechanged\", this.invalidateLayout, this));\r\n            }\r\n        }*/\r\n        this._availableWidth = this.innerWidth;\r\n        this._availableHeight = this.innerHeight;\r\n        var measuredWidth = 0;\r\n        var measuredHeight = 0;\r\n        var allValid = true;\r\n        if (this.children) {\r\n            this.sortChildren();\r\n            // we itterate through list of children, sorted by layout priority. sprites which width non-relative width/height will go first, so we will reduce available width before proceeding to sprites with relative width/height\r\n            $array.each(this._childrenByLayout, function (child) {\r\n                var maxWidth;\r\n                var maxHeight;\r\n                if ($type.isNumber(child.relativeWidth)) {\r\n                    maxWidth = $math.round(_this._availableWidth * child.relativeWidth, 2);\r\n                    if (_this.layout == \"horizontal\") { // || this.layout == \"absolute\") {\r\n                        maxWidth -= child.pixelMarginRight + child.pixelMarginLeft;\r\n                    }\r\n                }\r\n                else {\r\n                    if (_this.layout == \"horizontal\") {\r\n                        if (child.invalid) {\r\n                            child.validate();\r\n                        }\r\n                    }\r\n                }\r\n                if ($type.isNumber(child.relativeHeight)) {\r\n                    maxHeight = $math.round(_this._availableHeight * child.relativeHeight, 2);\r\n                    if (_this.layout == \"vertical\") { //  || this.layout == \"absolute\") {\r\n                        maxHeight -= child.pixelMarginTop + child.pixelMarginBottom;\r\n                    }\r\n                }\r\n                else {\r\n                    if (_this.layout == \"vertical\") {\r\n                        if (child.invalid) {\r\n                            child.validate();\r\n                        }\r\n                    }\r\n                }\r\n                // if child is valid\r\n                if (child.invalid == false) {\r\n                    if ($type.isNumber(child.relativeWidth)) {\r\n                        child.maxWidth = maxWidth;\r\n                    }\r\n                    if ($type.isNumber(child.relativeHeight)) {\r\n                        child.maxHeight = maxHeight;\r\n                    }\r\n                    if (child.isMeasured) {\r\n                        // reduce available width if this is horizontal layout\r\n                        if (_this.layout == \"horizontal\") {\r\n                            if (!$type.isNumber(child.percentWidth)) {\r\n                                if (child.measuredWidth > 0) {\r\n                                    _this._availableWidth -= child.measuredWidth + child.pixelMarginLeft + child.pixelMarginRight;\r\n                                }\r\n                            }\r\n                        }\r\n                        // reduce available height if this is vertical layout\r\n                        if (_this.layout == \"vertical\") {\r\n                            if (!$type.isNumber(child.percentHeight)) {\r\n                                if (child.measuredHeight > 0) {\r\n                                    _this._availableHeight -= child.measuredHeight + child.pixelMarginTop + child.pixelMarginBottom;\r\n                                }\r\n                            }\r\n                        }\r\n                        var childMeasuredWidth = child.measuredWidth;\r\n                        var childMeasuredHeight = child.measuredHeight;\r\n                        if (child.align != \"none\") {\r\n                            childMeasuredWidth += child.pixelMarginLeft + child.pixelMarginRight;\r\n                        }\r\n                        if (child.valign != \"none\") {\r\n                            childMeasuredHeight += child.pixelMarginTop + child.pixelMarginBottom;\r\n                        }\r\n                        measuredWidth = Math.max(measuredWidth, childMeasuredWidth);\r\n                        measuredHeight = Math.max(measuredHeight, childMeasuredHeight);\r\n                    }\r\n                }\r\n                // if child is not valid\r\n                else {\r\n                    // tell child what maximum width/ height it can occupy\r\n                    if (child.isMeasured) {\r\n                        if ($type.isNumber(child.relativeWidth)) {\r\n                            if (child.maxWidth != maxWidth) { // need to check this because of allValid\r\n                                child.maxWidth = maxWidth;\r\n                                allValid = false;\r\n                            }\r\n                        }\r\n                        if ($type.isNumber(child.relativeHeight)) {\r\n                            if (child.maxHeight != maxHeight) { // need to check this because of allValid\r\n                                child.maxHeight = maxHeight;\r\n                                allValid = false;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        this._absoluteWidth = measuredWidth;\r\n        this._absoluteHeight = measuredHeight;\r\n        // arrange after measuring, only if all children are valid already\r\n        if (allValid) {\r\n            this.arrange();\r\n        }\r\n    };\r\n    /**\r\n     * Arranges children according to layout specs and available space / child\r\n     * sizes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Container.prototype.arrange = function () {\r\n        var _this = this;\r\n        var children = this.children;\r\n        /*\r\n           in this method we not only arrange children but also find out the size of the container\r\n           it might seem it would be easier to get container size using sprite's measure method,\r\n           however it would return only actual size of the bbox. However as each child meight have\r\n           margins set, we need to check each child - we do it here.\r\n\r\n           This method doesn't do anything with DOM, so it's not expensive\r\n        */\r\n        var measuredWidth = 0;\r\n        var measuredHeight = 0;\r\n        //let innerWidth: number = this.innerWidth; //$math.max(this.innerWidth, this._measuredWidth - paddingLeft - paddingRight);\r\n        //let innerHeight: number = this.innerHeight; //$math.max(this.innerHeight, this._measuredHeight - paddingTop - paddingBottom);\r\n        // above is wrong, as if a w/h is not specified, it is 0 and alignment doesn't work at all.\r\n        var innerWidth = $math.max(this.innerWidth, this._absoluteWidth);\r\n        var innerHeight = $math.max(this.innerHeight, this._absoluteHeight);\r\n        var left; // = 0;\r\n        var right; // = innerWidth;\r\n        var top; // = 0;\r\n        var bottom; // = innerHeight;\r\n        var paddingLeft = this.pixelPaddingLeft;\r\n        var paddingRight = this.pixelPaddingRight;\r\n        var paddingTop = this.pixelPaddingTop;\r\n        var paddingBottom = this.pixelPaddingBottom;\r\n        var nextX = 0;\r\n        var nextY = 0;\r\n        var row = 0;\r\n        var column = 0;\r\n        var columnWidth = [];\r\n        var rowHeight = [];\r\n        var maxCellWidth;\r\n        var minCellWidth;\r\n        var columnCount;\r\n        var maxWidth = this.maxWidth;\r\n        var maxHeight = this.maxHeight;\r\n        var minWidth = this.minWidth;\r\n        var minHeight = this.minHeight;\r\n        var childrenCopy = $array.copy(children.values);\r\n        if (this.reverseOrder) {\r\n            childrenCopy.reverse();\r\n        }\r\n        // GRID PRECALCULATIONS\r\n        if (this.layout == \"grid\") {\r\n            minCellWidth = maxWidth;\r\n            maxCellWidth = 1;\r\n            for (var i = 0, len = childrenCopy.length; i < len; i++) {\r\n                var child = childrenCopy[i];\r\n                if (child.isMeasured && !child.disabled && !child.__disabled) {\r\n                    var childMeasuredWidth = child.measuredWidth;\r\n                    if (childMeasuredWidth < minCellWidth) {\r\n                        minCellWidth = childMeasuredWidth;\r\n                    }\r\n                    if (childMeasuredWidth > maxCellWidth) {\r\n                        maxCellWidth = childMeasuredWidth;\r\n                    }\r\n                }\r\n            }\r\n            minCellWidth = $math.fitToRange(minCellWidth, 1, maxWidth);\r\n            maxCellWidth = $math.fitToRange(maxCellWidth, 1, maxWidth);\r\n            if (this.fixedWidthGrid) {\r\n                columnCount = maxWidth / maxCellWidth;\r\n            }\r\n            else {\r\n                columnCount = maxWidth / minCellWidth; // predicted number of columns, yes it is usually much more than real number, but we fix that later\r\n            }\r\n            columnCount = $math.max(1, Math.floor(columnCount));\r\n            columnCount = $math.min(this.maxColumns, columnCount);\r\n            columnWidth = this.getColumnWidth(childrenCopy, columnCount, maxCellWidth);\r\n        }\r\n        var contentLeft;\r\n        var contentRight;\r\n        var contentTop;\r\n        var contentBottom;\r\n        // we itterate through array of children\r\n        // TODO use iterator instead\r\n        for (var i = 0, len = childrenCopy.length; i < len; i++) {\r\n            var child = childrenCopy[i];\r\n            if (child.isMeasured && !child.disabled && !child.__disabled) {\r\n                var x = undefined; //child.pixelX; // must reset\r\n                var y = undefined; //child.pixelY; // must reset\r\n                var childMarginLeft = child.pixelMarginLeft;\r\n                var childMarginRight = child.pixelMarginRight;\r\n                var childMarginTop = child.pixelMarginTop;\r\n                var childMarginBottom = child.pixelMarginBottom;\r\n                var childWidth = child.measuredWidth;\r\n                var childHeight = child.measuredHeight;\r\n                var childLeft = void 0;\r\n                var childRight = void 0;\r\n                var childTop = void 0;\r\n                var childBottom = void 0;\r\n                switch (this.layout) {\r\n                    case \"none\":\r\n                        break;\r\n                    // absolute layout\r\n                    case \"absolute\":\r\n                        // horizontal alignment\r\n                        switch (child.align) {\r\n                            case \"left\":\r\n                                x = childMarginLeft - child.maxLeft;\r\n                                break;\r\n                            case \"center\":\r\n                                x = (innerWidth - childWidth) / 2 - child.maxLeft;\r\n                                break;\r\n                            case \"right\":\r\n                                x = innerWidth - childMarginRight - child.maxRight;\r\n                                break;\r\n                            default:\r\n                                if (!(child.x instanceof Percent)) {\r\n                                    x = child.pixelX;\r\n                                }\r\n                                break;\r\n                        }\r\n                        // vertical alignment\r\n                        switch (child.valign) {\r\n                            case \"top\":\r\n                                y = childMarginTop - child.maxTop;\r\n                                break;\r\n                            case \"middle\":\r\n                                y = (innerHeight - childHeight) / 2 - child.maxTop;\r\n                                break;\r\n                            case \"bottom\":\r\n                                y = innerHeight - childMarginBottom - child.maxBottom;\r\n                                break;\r\n                            default:\r\n                                if (!(child.y instanceof Percent)) {\r\n                                    y = child.pixelY;\r\n                                }\r\n                                break;\r\n                        }\r\n                        break;\r\n                    // vertical layout\r\n                    case \"vertical\":\r\n                        //if ($type.isNumber(child.relativeHeight)) {\r\n                        //\tchildHeight = child.maxHeight;\r\n                        //}\r\n                        switch (child.align) {\r\n                            case \"left\":\r\n                                x = childMarginLeft - child.maxLeft;\r\n                                break;\r\n                            case \"center\":\r\n                                x = (innerWidth - childWidth) / 2 - child.maxLeft;\r\n                                break;\r\n                            case \"right\":\r\n                                x = innerWidth - childMarginRight - child.maxRight;\r\n                                break;\r\n                            default:\r\n                                x = child.pixelX;\r\n                                break;\r\n                        }\r\n                        y = nextY + childMarginTop - child.maxTop;\r\n                        nextY = y + child.maxBottom + childMarginBottom;\r\n                        break;\r\n                    // horizontal layout\r\n                    case \"horizontal\":\r\n                        //if ($type.isNumber(child.relativeHeight)) {\r\n                        //\tchildHeight = child.maxHeight;\r\n                        //}\r\n                        switch (child.valign) {\r\n                            case \"top\":\r\n                                y = childMarginTop - child.maxTop;\r\n                                break;\r\n                            case \"middle\":\r\n                                y = (innerHeight - childHeight) / 2 - child.maxTop;\r\n                                break;\r\n                            case \"bottom\":\r\n                                y = innerHeight - childMarginBottom - child.maxBottom;\r\n                                break;\r\n                            default:\r\n                                y = child.pixelY;\r\n                                break;\r\n                        }\r\n                        x = nextX + childMarginLeft - child.maxLeft;\r\n                        nextX = x + child.maxRight + childMarginRight;\r\n                        break;\r\n                    case \"grid\":\r\n                        x = nextX + childMarginLeft - child.maxLeft;\r\n                        switch (child.valign) {\r\n                            case \"top\":\r\n                                y = nextY + childMarginTop - child.maxTop;\r\n                                break;\r\n                            case \"middle\":\r\n                                y = nextY + (innerHeight - childHeight) / 2 - child.maxTop;\r\n                                break;\r\n                            case \"bottom\":\r\n                                y = nextY + innerHeight - childMarginBottom - child.maxBottom;\r\n                                break;\r\n                            default:\r\n                                y = nextY - child.maxTop;\r\n                                break;\r\n                        }\r\n                        nextX += columnWidth[column];\r\n                        rowHeight[row] = $math.max(rowHeight[row], childHeight);\r\n                        column++;\r\n                        var nextColumnWidth = columnWidth[column];\r\n                        if (!$type.isNumber(nextColumnWidth)) {\r\n                            nextColumnWidth = maxCellWidth;\r\n                        }\r\n                        if (nextX > $math.min(this.innerWidth, maxWidth) - nextColumnWidth + 1 && column < columnCount) {\r\n                            columnCount = column;\r\n                            nextX = 0;\r\n                            nextY = 0;\r\n                            row = 0;\r\n                            column = 0;\r\n                            columnWidth = this.getColumnWidth(childrenCopy, columnCount, maxCellWidth);\r\n                            rowHeight = [];\r\n                            i = -1;\r\n                            continue;\r\n                        }\r\n                        if (column >= columnCount) {\r\n                            column = 0;\r\n                            nextY += rowHeight[row];\r\n                            row++;\r\n                            nextX = 0;\r\n                        }\r\n                        break;\r\n                }\r\n                if (this.layout !== \"none\") {\r\n                    child.moveTo({ x: x, y: y }); // must use moveTo, otherwise x/y set in percent won't work\r\n                    childLeft = x + child.maxLeft - childMarginLeft;\r\n                    childRight = x + child.maxRight + childMarginRight;\r\n                    childTop = y + child.maxTop - childMarginTop;\r\n                    childBottom = y + child.maxBottom + childMarginBottom;\r\n                    if (childRight > right || !$type.isNumber(right)) {\r\n                        right = childRight;\r\n                    }\r\n                    if (childLeft < left || !$type.isNumber(left)) {\r\n                        left = childLeft;\r\n                    }\r\n                    if (childTop < top || !$type.isNumber(top)) {\r\n                        top = childTop;\r\n                    }\r\n                    if (childBottom > bottom || !$type.isNumber(bottom)) {\r\n                        bottom = childBottom;\r\n                    }\r\n                    if (childRight > contentRight || !$type.isNumber(contentRight)) {\r\n                        contentRight = childRight;\r\n                    }\r\n                    if (childLeft < contentLeft || !$type.isNumber(contentLeft)) {\r\n                        contentLeft = childLeft;\r\n                    }\r\n                    if (childTop < contentTop || !$type.isNumber(contentTop)) {\r\n                        contentTop = childTop;\r\n                    }\r\n                    if (childBottom > contentBottom || !$type.isNumber(contentBottom)) {\r\n                        contentBottom = contentBottom;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                child.validatePosition();\r\n            }\r\n        }\r\n        if (this.layout == \"none\") {\r\n            var noneBBox = this.bbox;\r\n            left = noneBBox.x;\r\n            right = noneBBox.x + noneBBox.width;\r\n            top = noneBBox.y;\r\n            bottom = noneBBox.y + noneBBox.height;\r\n        }\r\n        if (!$type.isNumber(left)) {\r\n            left = 0;\r\n            contentLeft = 0;\r\n        }\r\n        if (!$type.isNumber(right)) {\r\n            right = this._availableWidth;\r\n            contentRight = right;\r\n        }\r\n        if (!$type.isNumber(top)) {\r\n            top = 0;\r\n            contentTop = 0;\r\n        }\r\n        if (!$type.isNumber(bottom)) {\r\n            bottom = this._availableHeight;\r\n            contentBottom = bottom;\r\n        }\r\n        if (!$type.isNumber(contentTop)) {\r\n            contentTop = 0;\r\n        }\r\n        if (!$type.isNumber(contentBottom)) {\r\n            contentBottom = contentTop;\r\n        }\r\n        if (!$type.isNumber(contentLeft)) {\r\n            contentLeft = 0;\r\n        }\r\n        if (!$type.isNumber(contentRight)) {\r\n            contentRight = contentLeft;\r\n        }\r\n        measuredWidth = right - left;\r\n        measuredHeight = bottom - top;\r\n        if ($type.isNumber(this.relativeWidth)) {\r\n            measuredWidth = maxWidth - this.pixelPaddingLeft - this.pixelPaddingRight;\r\n            left = 0;\r\n            right = measuredWidth;\r\n        }\r\n        if ($type.isNumber(this.relativeHeight)) {\r\n            measuredHeight = maxHeight - this.pixelPaddingTop - this.pixelPaddingBottom;\r\n            top = 0;\r\n            bottom = measuredHeight;\r\n        }\r\n        if ($type.isNumber(this._pixelWidth)) {\r\n            left = 0;\r\n            measuredWidth = this._pixelWidth;\r\n        }\r\n        if ($type.isNumber(minWidth) && measuredWidth < minWidth) {\r\n            left = 0;\r\n            measuredWidth = this.minWidth;\r\n        }\r\n        if ($type.isNumber(this._pixelHeight)) {\r\n            top = 0;\r\n            measuredHeight = this._pixelHeight;\r\n        }\r\n        if ($type.isNumber(minHeight) && measuredHeight < minHeight) {\r\n            top = 0;\r\n            measuredHeight = minHeight;\r\n        }\r\n        var measuredContentWidth = contentRight - contentLeft;\r\n        var measuredContentHeight = contentBottom - contentTop;\r\n        /// handle content alignment\r\n        if (this.layout != \"none\" && (this.contentAlign || this.contentValign) && children.length > 0) {\r\n            var dx_1;\r\n            var dy_1;\r\n            var mwa = measuredWidth;\r\n            var mha = measuredHeight;\r\n            if (mwa < measuredContentWidth) {\r\n                mwa = measuredContentWidth;\r\n            }\r\n            if (mha < measuredContentHeight) {\r\n                mha = measuredContentHeight;\r\n            }\r\n            if (this.contentAlign == \"center\") {\r\n                dx_1 = (mwa - measuredContentWidth) / 2;\r\n            }\r\n            if (this.contentAlign == \"right\") {\r\n                dx_1 = mwa - measuredContentWidth;\r\n            }\r\n            if (this.contentValign == \"middle\") {\r\n                dy_1 = (mha - measuredContentHeight) / 2;\r\n            }\r\n            if (this.contentValign == \"bottom\") {\r\n                dy_1 = mha - measuredContentHeight;\r\n            }\r\n            if ($type.isNumber(dx_1)) {\r\n                $iter.each(children.iterator(), function (child) {\r\n                    var childLeft = child.maxLeft;\r\n                    var ddx = dx_1;\r\n                    if (_this.layout == \"horizontal\") {\r\n                        child.x = child.pixelX + ddx;\r\n                    }\r\n                    // individual grid elements can not be aligned vertically, that's why it's different from horizontal\r\n                    if (_this.layout == \"grid\") {\r\n                        child.x = child.pixelX + ddx;\r\n                    }\r\n                    if (_this.layout == \"vertical\") {\r\n                        ddx += child.pixelMarginLeft;\r\n                        if (child.align == \"none\") {\r\n                            child.x = ddx - childLeft;\r\n                        }\r\n                    }\r\n                    if (_this.layout == \"absolute\") {\r\n                        ddx += child.pixelMarginLeft;\r\n                        if (child.align == \"none\") {\r\n                            child.x = ddx - childLeft;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if ($type.isNumber(dy_1)) {\r\n                $iter.each(children.iterator(), function (child) {\r\n                    var childTop = child.maxTop;\r\n                    var ddy = dy_1;\r\n                    if (_this.layout == \"horizontal\") {\r\n                        ddy += child.pixelMarginTop;\r\n                        if (child.valign == \"none\") {\r\n                            child.y = ddy - childTop;\r\n                        }\r\n                    }\r\n                    // individual grid elements can not be aligned vertically, that's why it's different from horizontal\r\n                    if (_this.layout == \"grid\") {\r\n                        ddy += child.pixelMarginTop;\r\n                        child.y = ddy - childTop;\r\n                    }\r\n                    if (_this.layout == \"vertical\") {\r\n                        child.y = child.pixelY + ddy;\r\n                    }\r\n                    if (_this.layout == \"absolute\") {\r\n                        ddy += child.pixelMarginTop;\r\n                        if (child.valign == \"none\") {\r\n                            child.y = ddy - childTop;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        var oldBBox = this.bbox;\r\n        // this will mess up maxw/maxh set by container layout, we need a separate min/maxwidth for users\r\n        // this prevents invalidating layout in such cases as scrolling category axis, when labels go outside bounds and results transformed event\r\n        // todo: need to check if this doesn't cause other problems.\r\n        //if (this.maxWidth > 0) {\r\n        //measuredWidth = $math.min(measuredWidth, this.maxWidth);\r\n        //measuredWidth = $math.max(measuredWidth, this.minWidth);\r\n        //}\r\n        //if (this.maxHeight > 0) {\r\n        //measuredHeight = $math.min(measuredHeight, this.maxHeight);\r\n        //measuredHeight = $math.max(measuredHeight, this.minHeight);\r\n        //}\r\n        measuredWidth = $math.max(measuredWidth, minWidth);\r\n        measuredHeight = $math.max(measuredHeight, minHeight);\r\n        this.contentWidth = measuredWidth;\r\n        this.contentHeight = measuredHeight;\r\n        // new\r\n        measuredWidth = $math.min(measuredWidth, maxWidth);\r\n        measuredHeight = $math.min(measuredHeight, maxHeight);\r\n        this._bbox = { x: left, y: top, width: measuredWidth, height: measuredHeight };\r\n        var prevLeft = this.maxLeft;\r\n        var prevTop = this.maxTop;\r\n        var prevBotttom = this.maxBottom;\r\n        var prevRight = this.maxRight;\r\n        this.measure();\r\n        if (prevLeft != this.maxLeft || prevRight != this.maxRight || prevTop != this.maxTop || prevBotttom != this.maxBottom) {\r\n            if (this.events.isEnabled(\"transformed\")) {\r\n                var event_1 = {\r\n                    type: \"transformed\",\r\n                    target: this\r\n                };\r\n                if (oldBBox) {\r\n                    event_1.dummyData = oldBBox.width + \" \" + measuredWidth + \"  \" + oldBBox.height + \" \" + measuredHeight;\r\n                }\r\n                this.events.dispatchImmediately(\"transformed\", event_1);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Positions element according its center settings.\r\n     *\r\n     * @todo Description (review)\r\n     * @ignore Exclude from docs\r\n     */\r\n    Container.prototype.updateCenter = function () {\r\n        _super.prototype.updateCenter.call(this);\r\n        this.updateBackground();\r\n    };\r\n    /**\r\n     * Update the background to fit into specific dimensions.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Make it protected?\r\n     */\r\n    Container.prototype.updateBackground = function () {\r\n        var background = this._background; // accessing protected, as getter creates instance if it doesn't exist\r\n        if (background) {\r\n            background.x = this.maxLeft;\r\n            background.y = this.maxTop;\r\n            background.width = this.maxRight - this.maxLeft;\r\n            background.height = this.maxBottom - this.maxTop;\r\n        }\r\n    };\r\n    /**\r\n     * Returns widths of all columns in a horizontal Container layout.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {number}    columnCount   Number of columns\r\n     * @param  {number}    maxCellWidth  Maximum width of one grid cell\r\n     * @return {number[]}                An array of column widths\r\n     */\r\n    Container.prototype.getColumnWidth = function (children, columnCount, maxCellWidth) {\r\n        var _this = this;\r\n        var columnWidth = [];\r\n        var column = 0;\r\n        $array.each(children, function (child) {\r\n            if (child.isMeasured) {\r\n                if (_this.fixedWidthGrid) {\r\n                    columnWidth[column] = maxCellWidth;\r\n                }\r\n                else {\r\n                    columnWidth[column] = $math.max(columnWidth[column], child.measuredWidth + child.pixelMarginRight + child.pixelMarginLeft);\r\n                }\r\n                column++;\r\n                if (column == columnCount) {\r\n                    column = 0;\r\n                }\r\n            }\r\n        });\r\n        return columnWidth;\r\n    };\r\n    Object.defineProperty(Container.prototype, \"layout\", {\r\n        /**\r\n         * @return {ContainerLayout} Layout\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"layout\");\r\n        },\r\n        /**\r\n         * Container layout.\r\n         *\r\n         * Options: \"absolute\" (default), \"vertical\", \"horizontal\", \"grid\", \"none\". \"none\" is quite the same as \"absolute\" - the objects will\r\n         * be positioned at their x, y coordinates, the difference is that with \"absolute\" you can still use align/valign for children and with \"none\" you can not.\r\n         * Use \"none\" as much as you can as it's most cpu-saving layout.\r\n         *\r\n         * @default \"absolute\"\r\n         * @param {ContainerLayout} value Layout\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"layout\", value)) {\r\n                this.invalidateLayout();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Container.prototype, \"contentValign\", {\r\n        /**\r\n         * @return {VerticalAlign} Vertical alignment\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"contentValign\");\r\n        },\r\n        /**\r\n         * Vertical alignment of the elements for the vertical Container.\r\n         *\r\n         * This is used when Container is larger than the height of all its children.\r\n         *\r\n         * @param {VerticalAlign} value vertical alignment\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"contentValign\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Container.prototype, \"contentAlign\", {\r\n        /**\r\n         * @return {Align} Horizontal alignment\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"contentAlign\");\r\n        },\r\n        /**\r\n         * Horizontal alignment of the elements for the horizontal Container.\r\n         *\r\n         * This is used when Container is larger than the height of all its children.\r\n         *\r\n         * @param {Align}  value  Horizontal alignment\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"contentAlign\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Container.prototype, \"fixedWidthGrid\", {\r\n        /**\r\n         * @return {boolean} Should use fixed width grid?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"fixedWidthGrid\");\r\n        },\r\n        /**\r\n         * Controls if the grid of the Container should use fixed width. Fixed width\r\n         * grid will divide available space to all its columns/rows equally, without\r\n         * adapting to actual child sizes or size requirements.\r\n         *\r\n         * @default false\r\n         * @param {boolean}  value  Should use fixed width grid?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"fixedWidthGrid\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Container.prototype, \"maxColumns\", {\r\n        /**\r\n         * @return {Optional<number>} Should use fixed width grid?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxColumns\");\r\n        },\r\n        /**\r\n         * Maximum number of columns (when using `\"grid\"` layout).\r\n         *\r\n         * @param {Optional<number>}  value  Should use fixed width grid?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"maxColumns\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Container.prototype, \"reverseOrder\", {\r\n        /**\r\n         * @return {Optional<boolean>} Reverse children?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"reverseOrder\");\r\n        },\r\n        /**\r\n         * If set to `true`, the children of the container will be drawn in reverse\r\n         * order.\r\n         *\r\n         * @default false\r\n         * @param {Optional<boolean>}  value  Reverse children?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"reverseOrder\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Container.prototype, \"setStateOnChildren\", {\r\n        /**\r\n         * @return {boolean} Set state on children\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"setStateOnChildren\");\r\n        },\r\n        /**\r\n         * Specifies if, when state is applied on this container, the same state\r\n         * should be applied to container's children as well as `background`.\r\n         *\r\n         * @default false\r\n         * @param {boolean}  value  Set state on children\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"setStateOnChildren\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Checks if point is within bounds of a container.\r\n     *\r\n     * @param  {IPoint}   point  A coordinate to check\r\n     * @return {boolean}         `true` if it fits within container\r\n     */\r\n    Container.prototype.fitsToBounds = function (point) {\r\n        var x = point.x;\r\n        var y = point.y;\r\n        var deviation = 0.5; // sometimes coordinates are rounded to numbers like .999 so we add deviation here\r\n        if (x >= -deviation && x <= this.pixelWidth + deviation && y >= -deviation && y <= this.pixelHeight + deviation) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Copies all properties from different Container, including background\r\n     * clone.\r\n     *\r\n     * @param {this}  source  Source Container to copy from\r\n     */\r\n    Container.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.layout = source.layout;\r\n        this.setStateOnChildren = source.setStateOnChildren;\r\n        if (source._background) {\r\n            this.background = source._background.clone();\r\n            this.background.copyFrom(source._background); // won't work without this\r\n        }\r\n        $iter.each(source.children.iterator(), function (child) {\r\n            if (child.shouldClone) {\r\n                var clonedChild = child.clone();\r\n                clonedChild.parent = _this;\r\n            }\r\n        });\r\n    };\r\n    Object.defineProperty(Container.prototype, \"preloader\", {\r\n        /**\r\n         * @return {Optional<Preloader>} Preloader instance\r\n         */\r\n        get: function () {\r\n            var preloader = this._preloader;\r\n            if (preloader) {\r\n                return preloader;\r\n            }\r\n            else if (this.parent) {\r\n                return this.parent.preloader;\r\n            }\r\n        },\r\n        /**\r\n         * A [[Preloader]] instance to be used when Container is busy.\r\n         *\r\n         * @param {Optional<Preloader>}  preloader  Preloader instance\r\n         */\r\n        set: function (preloader) {\r\n            if (this._preloader) {\r\n                this.removeDispose(this._preloader);\r\n            }\r\n            this._preloader = preloader;\r\n            if (preloader) {\r\n                preloader.parent = this.tooltipContainer;\r\n                this._disposers.push(preloader);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets [[Paper]] instance to use to draw elements.\r\n     * @ignore\r\n     * @param {Paper} paper Paper\r\n     * @return {boolean} true if paper was changed, false, if it's the same\r\n     */\r\n    Container.prototype.setPaper = function (paper) {\r\n        var _this = this;\r\n        var changed = _super.prototype.setPaper.call(this, paper);\r\n        if (changed) {\r\n            if (this._background) {\r\n                this._background.paper = paper;\r\n                this._background.topParent = this.topParent;\r\n            }\r\n            this.children.each(function (child) {\r\n                child.setPaper(paper);\r\n                child.topParent = _this.topParent;\r\n            });\r\n        }\r\n        return changed;\r\n    };\r\n    /**\r\n     * Removes Container from the system-wide list of invalid Containers.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Container.prototype.removeFromInvalids = function () {\r\n        _super.prototype.removeFromInvalids.call(this);\r\n        registry.removeFromInvalidLayouts(this);\r\n    };\r\n    /**\r\n     * Sets a [[DataItem]] to be used as data for the Container.\r\n     *\r\n     * @todo Description\r\n     * @param {DataItem} dataItem DataItem\r\n     */\r\n    Container.prototype.setDataItem = function (dataItem) {\r\n        // this place is potentially dangerous, as if we set datItem for some dummy container, all children dataItems will be overriden\r\n        // the main reason for doing this is that we need a setDataItem code to be called for each sprite, otherwise property fields won't be\r\n        // applied. Also, getting dataItem from parent all the time is more expensive than saving value.\r\n        if (this._dataItem != dataItem) {\r\n            $iter.each(this.children.iterator(), function (child) {\r\n                child.dataItem = dataItem;\r\n            });\r\n        }\r\n        _super.prototype.setDataItem.call(this, dataItem);\r\n    };\r\n    /**\r\n     * Measures the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Container.prototype.measureElement = function () {\r\n        if (this.disabled || this.isTemplate || this.layout == \"none\" || this.__disabled) {\r\n            // void\r\n        }\r\n        else {\r\n            this.validateLayout();\r\n        }\r\n    };\r\n    /**\r\n     * Returns Tooltip X coordinate if it's set, or middle of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {number} X (px)\r\n     */\r\n    Container.prototype.getTooltipX = function () {\r\n        return _super.prototype.getTooltipX.call(this);\r\n    };\r\n    /**\r\n     * Returns Tooltip Y coordinate if it's set, or middle of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {number} Y (px)\r\n     */\r\n    Container.prototype.getTooltipY = function () {\r\n        return _super.prototype.getTooltipY.call(this);\r\n    };\r\n    Object.defineProperty(Container.prototype, \"fontFamily\", {\r\n        /**\r\n         * @return {any} Font family\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"fontFamily\");\r\n        },\r\n        /**\r\n         * Font family to be used for the text.\r\n         *\r\n         * Parts of the text may override this setting using in-line formatting.\r\n         *\r\n         * @param {string} value Font family value\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"fontFamily\", value, true)) {\r\n                this.setSVGAttribute({ \"font-family\": value });\r\n                this.invalidateLabels();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Container.prototype, \"fontSize\", {\r\n        /**\r\n         * @return {any} Font size\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"fontSize\");\r\n        },\r\n        /**\r\n         * Font size to be used for the text. The size can either be numeric, in\r\n         * pixels, or other measurements.\r\n         *\r\n         * Parts of the text may override this setting using in-line formatting.\r\n         *\r\n         * @param {any} value Font size value\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"fontSize\", value, true)) {\r\n                this.setSVGAttribute({ \"font-size\": value });\r\n                this.invalidateLabels();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * When fontSize of fontFamily changes we need to hard-invalidate all Labels of this container to position them properly.\r\n     */\r\n    Container.prototype.invalidateLabels = function () {\r\n        this.children.each(function (child) {\r\n            // can't import Label because of Circular dependencies\r\n            if (child[\"hardInvalidate\"]) {\r\n                child[\"hardInvalidate\"]();\r\n            }\r\n            else if (child instanceof Container) {\r\n                child.invalidateLabels();\r\n            }\r\n        });\r\n    };\r\n    Object.defineProperty(Container.prototype, \"fontWeight\", {\r\n        /**\r\n         * @return {FontWeight} Font weight\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"fontWeight\");\r\n        },\r\n        /**\r\n         * Font weight to use for text.\r\n         *\r\n         * Parts of the text may override this setting using in-line formatting.\r\n         *\r\n         * @param {FontWeight} value Font weight\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"fontWeight\", value);\r\n            this.setSVGAttribute({ \"font-weight\": value });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Container.prototype, \"textDecoration\", {\r\n        /**\r\n         * @return {TextDecoration} Decoration\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"textDecoration\");\r\n        },\r\n        /**\r\n         * A text decoration to use for text.\r\n         *\r\n         * Parts of the text may override this setting using in-line formatting.\r\n         *\r\n         * @param {TextDecoration}  value  Decoration\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"textDecoration\", value);\r\n            this.setSVGAttribute({ \"text-decoration\": value });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Disposes (destroys) the element and all its children.\r\n     */\r\n    Container.prototype.dispose = function () {\r\n        if (this._background) {\r\n            this._background.dispose();\r\n        }\r\n        this._shouldBeReady = [];\r\n        this.disposeChildren();\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    /**\r\n     * Applies a [[SpriteState]] on this element.\r\n     *\r\n     * The first parameter can either be a name of the state or a [[SpriteState]]\r\n     * instance.\r\n     *\r\n     * When run, this method will apply SVG properties defined in a\r\n     * [[SpriteState]], but only those that are relevant to this particular\r\n     * element, that is are listed in its respective `properties` array.\r\n     *\r\n     * @see {@link SpriteState}\r\n     * @param {string | SpriteState} value               A state - name key or instance\r\n     * @param {number}               transitionDuration  Duration of the transition between current and new state\r\n     * @param {number) => number}    easing              An easing function\r\n     */\r\n    Container.prototype.setState = function (value, transitionDuration, easing) {\r\n        var stateName = value;\r\n        if (value instanceof SpriteState) {\r\n            stateName = value.name;\r\n        }\r\n        if (this.setStateOnChildren) {\r\n            $iter.each(this.children.iterator(), function (child) {\r\n                child.setState(stateName, transitionDuration, easing);\r\n                // not good to set it in child setState\r\n                if (stateName != \"active\") {\r\n                    child.isActive = false;\r\n                }\r\n            });\r\n        }\r\n        if (this._background) {\r\n            this._background.setState(stateName);\r\n        }\r\n        if (this.setStateOnSprites.length) {\r\n            $array.each(this.setStateOnSprites, function (item) {\r\n                item.setState(stateName, transitionDuration, easing);\r\n            });\r\n        }\r\n        return _super.prototype.setState.call(this, value, transitionDuration, easing);\r\n    };\r\n    // otherwise isActive won't work properly with background\r\n    Container.prototype.setActive = function (value) {\r\n        _super.prototype.setActive.call(this, value);\r\n        if (this._background) {\r\n            this._background.isActive = value;\r\n        }\r\n    };\r\n    /**\r\n     * Dispatches ready event. Dispatches when all children are ready.\r\n     */\r\n    Container.prototype.dispatchReady = function () {\r\n        var _this = this;\r\n        if (!this.isReady() && !this.isDisposed()) {\r\n            var allReady_1 = true;\r\n            this.children.each(function (sprite) {\r\n                if (!sprite.__disabled && !sprite.disabled && !sprite.isReady()) {\r\n                    allReady_1 = false;\r\n                }\r\n            });\r\n            $array.each(this._shouldBeReady, function (sprite) {\r\n                if (!sprite.__disabled && !sprite.disabled && !sprite.isReady()) {\r\n                    allReady_1 = false;\r\n                }\r\n            });\r\n            if (allReady_1) {\r\n                _super.prototype.dispatchReady.call(this);\r\n            }\r\n            else {\r\n                registry.events.once(\"exitframe\", function () {\r\n                    _this.dispatchReady();\r\n                    system.requestFrame();\r\n                }, undefined, false);\r\n            }\r\n        }\r\n    };\r\n    return Container;\r\n}(Sprite));\r\nexport { Container };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Container\"] = Container;\r\n//# sourceMappingURL=Container.js.map","/**\r\n * Defines functionality for \"Data Item\"\r\n *\r\n * A Data Item can be any object that can hold data. For example [[LineSeries]]\r\n * holds a number of values, that comprise a line graph. Each of those values\r\n * (data points) is a {DataItem}.\r\n *\r\n * Furthermore the [[LineSeries]] itself can be represented as a entry in the\r\n * legend. Since legend needs access to Line Series' value, a DataItem is\r\n * created for the series.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObjectEvents } from \"./Base\";\r\nimport { Adapter } from \"./utils/Adapter\";\r\nimport { Animation, AnimationDisposer } from \"./utils/Animation\";\r\nimport * as $utils from \"./utils/Utils\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * DataItem represents single element in data, for example a data point in a\r\n * Serial Chart Series, e.g. a column.\r\n *\r\n * DataItem defines relationship between structured data, required for specific\r\n * chart type or task, and raw source data.\r\n *\r\n * It also implements required calculations, updates related visual elements,\r\n * etc.\r\n *\r\n * @todo Description\r\n * @important\r\n */\r\nvar DataItem = /** @class */ (function (_super) {\r\n    tslib_1.__extends(DataItem, _super);\r\n    /**\r\n     * Constructor\r\n     * @todo Adding events to disposers produces errors in some cases, which means that chart is using disposed Data Items which is not right\r\n     */\r\n    function DataItem() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Holds Adapter.\r\n         *\r\n         * @type {Adapter<DataItem, IDataItemAdapters>}\r\n         */\r\n        _this.adapter = new Adapter(_this);\r\n        /**\r\n         * This Data Item is currently disabled.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {boolean}\r\n         */\r\n        _this._disabled = false;\r\n        /**\r\n         * Indicates whether Data Item has any properties set.\r\n         *\r\n         * If it does not have any, the code can use this property to check whether\r\n         * they need to apply costly operation of re-applying properties, whenever\r\n         * Data Item-related element is redrawn, e.g. series.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this.hasProperties = false;\r\n        /**\r\n         * An object containing calculated values.\r\n         */\r\n        _this.values = {};\r\n        /**\r\n         * An object container current working values.\r\n         */\r\n        //public readonly workingValues: { [index: string]: { [index: string]: number } } = {};\r\n        /**\r\n         * An object containing categories.\r\n         */\r\n        _this.categories = {};\r\n        /**\r\n         * An object containing dates.\r\n         */\r\n        _this.dates = {};\r\n        /**\r\n         * An object containing locations for the Data Item.\r\n         *\r\n         * A location is a position within date or category, or, in some other cases,\r\n         * where there is no single point but rather some period.\r\n         */\r\n        _this.locations = {};\r\n        /**\r\n         * Current working locations.\r\n         */\r\n        _this.workingLocations = {};\r\n        /**\r\n         * An object containing Data Item specific appearance properties in key-value\r\n         * pairs.\r\n         *\r\n         * Sometimes a single Data Item needs to apply different properties than the\r\n         * rest of the data [[Series]] it is part of. E.g. a single column,\r\n         * represented by a Data Item needs to be filled with a different color than\r\n         * the reset of the [[ColumnSeries]] it belongs to.\r\n         *\r\n         * That's where Data Item's `properties` come into play.\r\n         *\r\n         * Please note that you should set Data Item-specific properties using\r\n         * `setProperty()` method, rather than access `properties` object directly.\r\n         */\r\n        _this.properties = {};\r\n        /**\r\n         * A list of [[Sprite]] elements that are associated with this Data Item.\r\n         *\r\n         * E.g. an [[Axis]] Data Item has several separate elements associated with\r\n         * it, like [[AxisTick]], [[AxisLabel]], and [[Grid]].\r\n         *\r\n         * Data Item keeps track of all of them, so it can toggle all related visual\r\n         * elements when it itself is toggled.\r\n         *\r\n         * @type {Sprite[]}\r\n         */\r\n        _this.sprites = [];\r\n        /**\r\n         * Identifies if this object is a \"template\" and should not be treated as\r\n         * real object that is drawn or actually used in the chart.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this.isTemplate = false;\r\n        /**\r\n         * The current index within the dataItems\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {number | null}\r\n         */\r\n        _this._index = null;\r\n        /**\r\n         * Is Data Item currently visible?\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {boolean}\r\n         */\r\n        _this._visible = true;\r\n        /**\r\n         * Is Data Item currently hidden?\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {boolean}\r\n         */\r\n        _this._hidden = false;\r\n        /**\r\n         * Should this Data Item be used when calculating data ranges and scales?\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {boolean}\r\n         */\r\n        _this._ignoreMinMax = false;\r\n        /**\r\n         * Some of the Data Item's data fields may contain an array of children. This\r\n         * property contains an object indicating which fields hold an array, so that\r\n         * they can be processed properly.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.hasChildren = {};\r\n        /**\r\n         * Indicates whether Data Item is currently animiting from visible to hidden\r\n         * state.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this.isHiding = false;\r\n        /**\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._valueAnimations = {};\r\n        /**\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._locationAnimations = {};\r\n        _this.className = \"DataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DataItem.prototype, \"index\", {\r\n        /**\r\n         * Data Item's position index in Component's data.\r\n         *\r\n         * @return {number} Index\r\n         */\r\n        get: function () {\r\n            if (this.component) {\r\n                if (this._index != null) {\r\n                    return this._index;\r\n                }\r\n                else {\r\n                    return -1;\r\n                }\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataItem.prototype, \"animations\", {\r\n        /**\r\n         * A list of [[Animations]] objects currently mutating Data Item's values.\r\n         *\r\n         * @return {Array<Animation>} [description]\r\n         */\r\n        get: function () {\r\n            if (!this._animations) {\r\n                this._animations = [];\r\n                this._disposers.push(new AnimationDisposer(this._animations));\r\n            }\r\n            return this._animations;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataItem.prototype, \"visible\", {\r\n        /**\r\n         * Returns `true` if this Data Item is currently visible.\r\n         *\r\n         * @return {boolean} Visible?\r\n         */\r\n        get: function () {\r\n            if (this._hidden) {\r\n                return false;\r\n            }\r\n            return this._visible;\r\n        },\r\n        /**\r\n         * Sets visibility of the Data Item.\r\n         *\r\n         * @param {boolean} value Visible?\r\n         */\r\n        set: function (value) {\r\n            if (value) {\r\n                this.hidden = false;\r\n            }\r\n            if (this._visible != value) {\r\n                this.setVisibility(value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataItem.prototype, \"hidden\", {\r\n        /**\r\n         * Returns `true` if this Data Item is currently hidden.\r\n         *\r\n         * @return {boolean} Hidden?\r\n         */\r\n        get: function () {\r\n            return this._hidden;\r\n        },\r\n        /**\r\n         * Sets hidden flag for data item. Mostly used to initially hide data item.\r\n         *\r\n         * @param {boolean} value Hidden?\r\n         */\r\n        set: function (value) {\r\n            if (this._hidden != value) {\r\n                this._hidden = value;\r\n                if (value) {\r\n                    this.setVisibility(false);\r\n                }\r\n                else {\r\n                    this.setVisibility(true, true);\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataItem.prototype, \"__disabled\", {\r\n        /**\r\n         * Is this Data Item currently disabled?\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {boolean}\r\n         */\r\n        get: function () {\r\n            return this._disabled;\r\n        },\r\n        /**\r\n         * Disables all Sprites associated with this Data Item.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {boolean}\r\n         */\r\n        set: function (value) {\r\n            //\tif (this._disabled != value) { // not good\r\n            this._disabled = value;\r\n            $array.each(this.sprites, function (sprite) {\r\n                sprite.__disabled = value;\r\n            });\r\n            //\t}\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets visibility of the Data Item.\r\n     *\r\n     * @param {boolean} value Data Item\r\n     */\r\n    DataItem.prototype.setVisibility = function (value, noChangeValues) {\r\n        $array.each(this.sprites, function (sprite) {\r\n            if (value) {\r\n                sprite.visible = sprite.defaultState.properties.visible;\r\n            }\r\n            else {\r\n                if (sprite.hiddenState) {\r\n                    sprite.visible = sprite.hiddenState.properties.visible;\r\n                }\r\n                else {\r\n                    sprite.visible = false;\r\n                }\r\n            }\r\n        });\r\n        this._visible = value;\r\n        if (this.events.isEnabled(\"visibilitychanged\")) {\r\n            var event_1 = {\r\n                type: \"visibilitychanged\",\r\n                target: this,\r\n                visible: value\r\n            };\r\n            this.events.dispatchImmediately(\"visibilitychanged\", event_1);\r\n        }\r\n    };\r\n    /**\r\n     * Shows the Data Item and related visual elements.\r\n     *\r\n     * @param {number}    duration  Animation duration (ms)\r\n     * @param {number}    delay     Delay animation (ms)\r\n     * @param {string[]}  fields    A list of fields to set values of\r\n     */\r\n    DataItem.prototype.show = function (duration, delay, fields) {\r\n        var _this = this;\r\n        if (!this.hidden) {\r\n            this.setVisibility(true, true);\r\n            this.isHiding = false;\r\n            if (this._hideDisposer) {\r\n                this.removeDispose(this._hideDisposer);\r\n            }\r\n            var animation_1;\r\n            if (fields) {\r\n                $array.each(fields, function (field) {\r\n                    animation_1 = _this.setWorkingValue(field, _this.values[field].value, duration, delay);\r\n                });\r\n            }\r\n            $array.each(this.sprites, function (sprite) {\r\n                var animation = sprite.show(duration);\r\n                if (animation != null && !animation.isFinished()) {\r\n                    _this._disposers.push(animation);\r\n                    if (delay != null && delay > 0) {\r\n                        animation.delay(delay);\r\n                    }\r\n                }\r\n            });\r\n            return animation_1;\r\n        }\r\n    };\r\n    /**\r\n     * Destroys this object and all related data.\r\n     */\r\n    DataItem.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        $array.each(this.sprites, function (sprite) {\r\n            sprite.dispose();\r\n        });\r\n        this.sprites = [];\r\n    };\r\n    /**\r\n     * Hides the Data Item and related visual elements.\r\n     *\r\n     * @param {number}    duration  Animation duration (ms)\r\n     * @param {number}    delay     Delay animation (ms)\r\n     * @param {number}    toValue   A value to set to `fields` when hiding\r\n     * @param {string[]}  fields    A list of data fields to set value to `toValue`\r\n     */\r\n    DataItem.prototype.hide = function (duration, delay, toValue, fields) {\r\n        var _this = this;\r\n        this.isHiding = true;\r\n        $array.each(this.sprites, function (sprite) {\r\n            var animation = sprite.hide(duration);\r\n            if (animation != null && !animation.isFinished()) {\r\n                _this._disposers.push(animation);\r\n                if (delay != null && delay > 0) {\r\n                    animation.delay(delay);\r\n                }\r\n            }\r\n        });\r\n        if ($type.isNumber(toValue) && fields) {\r\n            var animation_2;\r\n            $array.each(fields, function (field) {\r\n                var anim = _this.setWorkingValue(field, toValue, duration, delay);\r\n                if (anim) {\r\n                    animation_2 = anim;\r\n                }\r\n            });\r\n            if (animation_2 && !animation_2.isFinished()) {\r\n                this._hideDisposer = animation_2.events.on(\"animationended\", function () {\r\n                    _this.setVisibility(false, true);\r\n                    _this.isHiding = false;\r\n                });\r\n                this._disposers.push(this._hideDisposer);\r\n                return animation_2;\r\n            }\r\n            else {\r\n                this.isHiding = false;\r\n                this.setVisibility(false, true);\r\n            }\r\n        }\r\n        else {\r\n            this.isHiding = false;\r\n            this.setVisibility(false);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a duration (ms) the Data Item should take to animate from one\r\n     * value to another.\r\n     *\r\n     * If the duration is not specified via parameter, this method will try to\r\n     * request a default duration from the related `Component`.\r\n     *\r\n     * @param  {number}  duration  Default duration (ms)\r\n     * @return {number}            Duration (ms)\r\n     */\r\n    DataItem.prototype.getDuration = function (duration) {\r\n        if (!$type.isNumber(duration)) {\r\n            var component = this.component;\r\n            if (component) {\r\n                duration = component.interpolationDuration;\r\n            }\r\n        }\r\n        if (duration != null) {\r\n            return this.adapter.apply(\"duration\", duration);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a numeric value for specific data field.\r\n     *\r\n     * If `calculated` is not set, it will return a raw value, as it is in\r\n     * source data.\r\n     *\r\n     * If `calculated` is set, it will return a pre-calculated specific value.\r\n     *\r\n     * @param  {string}           name        Data field name\r\n     * @param  {CalculatedValue}  calculated  A calculated value name\r\n     * @return {Optional<number>}             Value\r\n     */\r\n    DataItem.prototype.getValue = function (name, calculated) {\r\n        if (name && this.component) {\r\n            if (!calculated) {\r\n                calculated = this.component.dataFields[name + \"Show\"];\r\n                if (!calculated) {\r\n                    calculated = \"value\";\r\n                }\r\n            }\r\n            var value = this.values[name][calculated];\r\n            if (this.adapter.isEnabled(\"value\")) {\r\n                return this.adapter.apply(\"value\", {\r\n                    value: value,\r\n                    field: name\r\n                }).value;\r\n            }\r\n            else {\r\n                return value;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a current working value for a specific data field.\r\n     *\r\n     * The actual value may differ from the one returned by `getValue()`. The\r\n     * latter returns static values from the data source.\r\n     *\r\n     * `getWorkingValue()` returns current value, which is usually different if\r\n     * Data Item is animating from one state to another.\r\n     *\r\n     * @param  {string}           name        Data field name\r\n     * @param  {CalculatedValue}  calculated  A calculated value name\r\n     * @return {Optional<number>}             Value\r\n     */\r\n    DataItem.prototype.getWorkingValue = function (name) {\r\n        if (name && this.component) {\r\n            var realName = this.component.dataFields[name + \"Show\"];\r\n            if (!realName) {\r\n                realName = \"workingValue\";\r\n            }\r\n            return this.adapter.apply(\"workingValue\", {\r\n                workingValue: this.values[name][realName],\r\n                field: name\r\n            }).workingValue;\r\n        }\r\n    };\r\n    /**\r\n     * Sets a numeric value for specific data field.\r\n     *\r\n     * @param {string}           name        Data field name\r\n     * @param {number}           value       Value\r\n     * @param {CalculatedValue}  calculated  Calculated data field name\r\n     * @param {number}           duration    Duration (ms) to animate to new value to\r\n     * @param {number}           delay       Delay animation (ms)\r\n     */\r\n    DataItem.prototype.setValue = function (name, value, duration, delay) {\r\n        var currentValue = this.values[name].value;\r\n        var newDuration = this.getDuration(duration);\r\n        value = $type.toNumber(value);\r\n        if (currentValue !== value) {\r\n            this.values[name].value = value;\r\n            if (this.events.isEnabled(\"valuechanged\")) {\r\n                var event_2 = {\r\n                    type: \"valuechanged\",\r\n                    target: this,\r\n                    property: name\r\n                };\r\n                this.events.dispatchImmediately(\"valuechanged\", event_2);\r\n            }\r\n            if (this.component) {\r\n                this.component.handleDataItemValueChange(this, name);\r\n            }\r\n        }\r\n        this.setWorkingValue(name, value, newDuration, delay);\r\n    };\r\n    DataItem.prototype.setCalculatedValue = function (name, value, calculated) {\r\n        var currentValue = this.values[name][calculated];\r\n        if (currentValue !== value && $type.isNumber(value)) {\r\n            this.values[name][calculated] = value;\r\n            if (this.events.isEnabled(\"calculatedvaluechanged\")) {\r\n                var event_3 = {\r\n                    type: \"calculatedvaluechanged\",\r\n                    target: this,\r\n                    property: name\r\n                };\r\n                this.events.dispatchImmediately(\"calculatedvaluechanged\", event_3);\r\n            }\r\n            if (this.component) {\r\n                this.component.handleDataItemCalculatedValueChange(this, name);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Set current working numeric value for a specific data field.\r\n     *\r\n     * @param  {string}           name        Data field name\r\n     * @param  {number}           value       Value\r\n     * @param  {CalculatedValue}  calculated  Calculated data field name\r\n     * @param  {number}           duration    Duration (ms) to animate to new value to\r\n     * @param  {number}           delay       Delay animation (ms)\r\n     * @return {Optional<Animation>}          An [[Animation]] object used for transition to new values\r\n     */\r\n    DataItem.prototype.setWorkingValue = function (name, value, duration, delay) {\r\n        if ($type.isNumber(this.values[name].value)) {\r\n            var newDuration = this.getDuration(duration);\r\n            var workingValue = this.values[name].workingValue;\r\n            if (newDuration != null && newDuration > 0 && $type.isNumber(workingValue) && this.component) { // sometimes NaN is passed, so only change this to != null if all cases of NaN are handled, otherwise animation won't stop\r\n                if (workingValue != value) {\r\n                    var animation = this.animate({ childObject: this.values[name], property: \"workingValue\", from: workingValue, to: value, dummyData: name }, newDuration, this.component.interpolationEasing);\r\n                    if (delay != null) {\r\n                        animation.delay(delay);\r\n                    }\r\n                    animation.events.on(\"animationstarted\", this.handleInterpolationProgress, this);\r\n                    animation.events.on(\"animationprogress\", this.handleInterpolationProgress, this);\r\n                    animation.events.on(\"animationended\", this.handleInterpolationProgress, this);\r\n                    this._valueAnimations[name] = animation;\r\n                    return animation;\r\n                }\r\n                else {\r\n                    var valueAnimation = this._valueAnimations[name];\r\n                    if (valueAnimation) {\r\n                        valueAnimation.stop();\r\n                    }\r\n                    this.values[name].workingValue = value;\r\n                }\r\n            }\r\n            else {\r\n                var valueAnimation = this._valueAnimations[name];\r\n                if (valueAnimation) {\r\n                    valueAnimation.stop();\r\n                }\r\n                this.values[name].workingValue = value;\r\n                if (this.events.isEnabled(\"workingvaluechanged\")) {\r\n                    var event_4 = {\r\n                        type: \"workingvaluechanged\",\r\n                        target: this,\r\n                        property: name\r\n                    };\r\n                    this.events.dispatchImmediately(\"workingvaluechanged\", event_4);\r\n                }\r\n                if (this.component) {\r\n                    this.component.handleDataItemWorkingValueChange(this, name);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets a relative location for a data field.\r\n     *\r\n     * A location is always relative on a 0 to 1 scale, with 0 being beginning,\r\n     * 0.5 middle and 1 end.\r\n     *\r\n     * @todo Rewiew description\r\n     * @param {string}  name      Data field name\r\n     * @param {number}  value     Location (0-1)\r\n     * @param {number}  duration  Duration (ms) to animate to new value to\r\n     * @param {number}  delay     Delay animation (ms)\r\n     */\r\n    DataItem.prototype.setLocation = function (name, value, duration, delay) {\r\n        var currentLocation = this.locations[name];\r\n        if (currentLocation !== value) {\r\n            this.locations[name] = value;\r\n            if (this.events.isEnabled(\"locationchanged\")) {\r\n                var event_5 = {\r\n                    type: \"locationchanged\",\r\n                    target: this,\r\n                    property: name\r\n                };\r\n                this.events.dispatchImmediately(\"locationchanged\", event_5);\r\n            }\r\n            if (this.component) {\r\n                this.component.handleDataItemValueChange(this, name); // correct\r\n            }\r\n            this.setWorkingLocation(name, value, duration, delay);\r\n        }\r\n    };\r\n    /**\r\n     * Sets a current working location for a data field.\r\n     *\r\n     * @todo Rewiew description\r\n     * @param {string}  name      Data field name\r\n     * @param {number}  value     Location (0-1)\r\n     * @param {number}  duration  Duration (ms) to animate to new value to\r\n     * @param {number}  delay     Delay animation (ms)\r\n     */\r\n    DataItem.prototype.setWorkingLocation = function (name, value, duration, delay) {\r\n        var newDuration = this.getDuration(duration);\r\n        var workingLocation = this.workingLocations[name];\r\n        if (newDuration != null && newDuration > 0 && $type.isNumber(workingLocation) && this.component) { // sometimes NaN is passed, so only change this to != null if all cases of NaN are handled, otherwise animation won't stop\r\n            if (workingLocation != value) {\r\n                var animation = this.animate({ childObject: this.workingLocations, property: name, from: workingLocation, to: value, dummyData: name }, newDuration, this.component.interpolationEasing);\r\n                if (delay != null) {\r\n                    animation.delay(delay);\r\n                }\r\n                animation.events.on(\"animationstarted\", this.handleInterpolationProgress, this);\r\n                animation.events.on(\"animationprogress\", this.handleInterpolationProgress, this);\r\n                animation.events.on(\"animationended\", this.handleInterpolationProgress, this);\r\n                this._locationAnimations[name] = animation;\r\n                return animation;\r\n            }\r\n            else {\r\n                var locationAnimation = this._locationAnimations[name];\r\n                if (locationAnimation) {\r\n                    locationAnimation.stop();\r\n                }\r\n                this.workingLocations[name] = value;\r\n            }\r\n        }\r\n        else {\r\n            var locationAnimation = this._locationAnimations[name];\r\n            if (locationAnimation) {\r\n                locationAnimation.stop();\r\n            }\r\n            this.workingLocations[name] = value;\r\n            if (this.events.isEnabled(\"workinglocationchanged\")) {\r\n                var event_6 = {\r\n                    type: \"workinglocationchanged\",\r\n                    target: this,\r\n                    property: name\r\n                };\r\n                this.events.dispatchImmediately(\"workinglocationchanged\", event_6);\r\n            }\r\n            if (this.component) {\r\n                this.component.handleDataItemWorkingLocationChange(this, name);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets Date value to a data field.\r\n     *\r\n     * @param {string}  name      Data field name\r\n     * @param {Date}    date      Date object\r\n     * @param {number}  duration  Duration (ms) to animate to new value to\r\n     */\r\n    DataItem.prototype.setDate = function (name, date, duration) {\r\n        if (!$type.isDate(date) && this.component) {\r\n            date = this.component.dateFormatter.parse(date);\r\n        }\r\n        var currentDate = this.dates[name];\r\n        if (currentDate !== date) {\r\n            this.dates[name] = date;\r\n            this.setValue(name, date.getTime(), duration);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a Date value of the data field.\r\n     *\r\n     * @param  {string}  name  Data field name\r\n     * @return {Date}          Date object\r\n     */\r\n    DataItem.prototype.getDate = function (name) {\r\n        return this.adapter.apply(\"date\", {\r\n            date: this.dates[name],\r\n            field: name\r\n        }).date;\r\n    };\r\n    /**\r\n     * Sets a Data Item-specific visual properties to apply to related elements.\r\n     *\r\n     * @param {string}  name   Property name\r\n     * @param {any}     value  Property value\r\n     */\r\n    DataItem.prototype.setProperty = function (name, value) {\r\n        if (this.properties[name] !== value) {\r\n            this.hasProperties = true;\r\n            this.properties[name] = value;\r\n            if (this.events.isEnabled(\"propertychanged\")) {\r\n                var event_7 = {\r\n                    type: \"propertychanged\",\r\n                    target: this,\r\n                    property: name,\r\n                    value: value\r\n                };\r\n                this.events.dispatchImmediately(\"propertychanged\", event_7);\r\n            }\r\n            if (this.component) {\r\n                this.component.handleDataItemPropertyChange(this, name);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets a related category for this Data Item.\r\n     *\r\n     * @todo Review description\r\n     * @param {string}  name   Data field name\r\n     * @param {string}  value  Category\r\n     */\r\n    DataItem.prototype.setCategory = function (name, value) {\r\n        if (!$type.isString(value)) {\r\n            value = $type.castString(value);\r\n        }\r\n        if (this.categories[name] !== value) {\r\n            this.categories[name] = value;\r\n        }\r\n    };\r\n    /**\r\n     * Clones the Data Item, including all related data.\r\n     *\r\n     * @return {this} New Data Item clone\r\n     */\r\n    DataItem.prototype.clone = function (cloneId) {\r\n        var dataItem = _super.prototype.clone.call(this, cloneId);\r\n        if (this.dataContext) {\r\n            dataItem.dataContext = $utils.copy(this.dataContext, {});\r\n        }\r\n        $utils.copyProperties(this.locations, dataItem.locations);\r\n        $utils.copyProperties(this.properties, dataItem.properties);\r\n        $utils.copyProperties(this.categories, dataItem.categories);\r\n        $utils.copyProperties(this.values, dataItem.values);\r\n        $utils.copyProperties(this.dates, dataItem.dates);\r\n        $object.each(this.values, function (name, value) {\r\n            dataItem.values[name] = $object.copy(value);\r\n        });\r\n        dataItem.adapter.copyFrom(this.adapter);\r\n        dataItem.events.copyFrom(this.events);\r\n        dataItem.component = this.component;\r\n        return dataItem;\r\n    };\r\n    Object.defineProperty(DataItem.prototype, \"opacity\", {\r\n        /**\r\n         * Sets opacity for all Data Item's related elements (Sprites).\r\n         *\r\n         * @param {number} value Opacity (0-1)\r\n         */\r\n        set: function (value) {\r\n            $array.each(this.sprites, function (sprite) {\r\n                sprite.opacity = value;\r\n            });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataItem.prototype, \"ignoreMinMax\", {\r\n        /**\r\n         * Exclude from min/max calculations?\r\n         * @return {boolean} Exclude from min/max calculations?\r\n         */\r\n        get: function () {\r\n            return this._ignoreMinMax;\r\n        },\r\n        /**\r\n         * Sets whether this data point should not be included in the scale and\r\n         * minimum/maximum calculations.\r\n         *\r\n         * E.g. some we may want to exclude a particular data point from influencing\r\n         * [[ValueAxis]] scale.\r\n         *\r\n         * @param {boolean}  value  Exclude from min/max calculations?\r\n         */\r\n        set: function (value) {\r\n            this._ignoreMinMax = value;\r\n            if (this.events.isEnabled(\"propertychanged\")) {\r\n                var event_8 = {\r\n                    type: \"propertychanged\",\r\n                    target: this,\r\n                    property: \"ignoreMinMax\",\r\n                    value: value\r\n                };\r\n                this.events.dispatchImmediately(\"propertychanged\", event_8);\r\n            }\r\n            if (this.component) {\r\n                this.component.handleDataItemPropertyChange(this, \"ignoreMinMax\");\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates and starts an [[Animation]] to interpolate (morph) Data Item's\r\n     * properties and/or values.\r\n     *\r\n     * @see {@link Animation}\r\n     * @param  {IAnimationOptions[] | IAnimationOptions}  animationOptions  Animation options\r\n     * @param  {number}                                   duration          Animation duration (ms)\r\n     * @param  {function}                                 easing            Easing function\r\n     * @return {Animation}                                                  Animation\r\n     */\r\n    DataItem.prototype.animate = function (animationOptions, duration, easing) {\r\n        return new Animation(this, animationOptions, duration, easing).start();\r\n    };\r\n    /**\r\n     * Handles intermediate steps when Data Item is interpolating (morphing) from\r\n     * one value to another.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AMEvent<Animation, IAnimationEvents>[\"animationstarted\" | \"animationended\" | \"animationprogress\"]} event Event object\r\n     */\r\n    DataItem.prototype.handleInterpolationProgress = function (event) {\r\n        var animation = event.target;\r\n        // it's always only one options, no need cycle\r\n        var animationOptions = animation.animationOptions[0];\r\n        if (animationOptions) {\r\n            if (this.events.isEnabled(\"workingvaluechanged\")) {\r\n                var event_9 = {\r\n                    type: \"workingvaluechanged\",\r\n                    target: this,\r\n                    property: animationOptions.dummyData\r\n                };\r\n                this.events.dispatchImmediately(\"workingvaluechanged\", event_9);\r\n            }\r\n            if (this.component) {\r\n                this.component.handleDataItemWorkingValueChange(this, animationOptions.dummyData);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Checks whether Data Item has values set for all of the data fields,\r\n     * supplied via argument.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string[]}  fields  Field list to check\r\n     * @return {boolean}           Has values for all fields?\r\n     */\r\n    DataItem.prototype.hasValue = function (fields) {\r\n        // todo: what about categories?\r\n        for (var i = 0, len = fields.length; i < len; i++) {\r\n            if (!$type.hasValue(this.values[fields[i]].value)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    Object.defineProperty(DataItem.prototype, \"depth\", {\r\n        /**\r\n         * Depth of the Data Item.\r\n         *\r\n         * In nested data structures, like TreeMap, this indicates the level this\r\n         * data point is at, in relation to the parent Data Item.\r\n         *\r\n         * @return {number} Depth\r\n         */\r\n        get: function () {\r\n            if (!this.parent) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return this.parent.depth + 1;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataItem.prototype, \"dataContext\", {\r\n        /**\r\n         * Sets to a reference to an original object from Component's data.\r\n         *\r\n         * @return {Object} [description]\r\n         */\r\n        get: function () {\r\n            return this._dataContext;\r\n        },\r\n        /**\r\n         * A reference to an original object in Component's data, that this Data Item\r\n         * is derived from.\r\n         *\r\n         * @param {Object} value Original data object\r\n         */\r\n        set: function (value) {\r\n            this._dataContext = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * adds a sprite to dataItem.sprites array\r\n     * @ignore\r\n     */\r\n    DataItem.prototype.addSprite = function (sprite) {\r\n        if (sprite.dataItem && sprite.dataItem != this) {\r\n            $array.remove(sprite.dataItem.sprites, sprite);\r\n        }\r\n        if (!this.visible) {\r\n            sprite.hide(0);\r\n        }\r\n        if (this.isHiding) {\r\n            sprite.hide();\r\n        }\r\n        this.sprites.push(sprite);\r\n        sprite.dataItem = this;\r\n    };\r\n    return DataItem;\r\n}(BaseObjectEvents));\r\nexport { DataItem };\r\n//# sourceMappingURL=DataItem.js.map","export var options = {\r\n    verbose: true,\r\n    commercialLicense: false,\r\n    classNamePrefix: \"amcharts-\",\r\n    autoSetClassName: false\r\n};\r\n//# sourceMappingURL=Options.js.map","import { EventDispatcher } from \"./utils/EventDispatcher\";\r\nimport { Dictionary } from \"./utils/Dictionary\";\r\nimport { cache } from \"./utils/Cache\";\r\nimport * as $type from \"./utils/Type\";\r\nimport * as $string from \"./utils/String\";\r\nimport * as $array from \"./utils/Array\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Registry is used to store miscellaneous system-wide information, like ids,\r\n * maps, themes, and registered classes.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nvar Registry = /** @class */ (function () {\r\n    function Registry() {\r\n        /**\r\n         * Event dispacther.\r\n         *\r\n         * @type {EventDispatcher}\r\n         */\r\n        this.events = new EventDispatcher();\r\n        /**\r\n         * All currently applied themes. All new chart instances created will\r\n         * automatically inherit and retain System's themes.\r\n         *\r\n         * @type {ITheme}\r\n         */\r\n        this.themes = [];\r\n        /**\r\n         * List of all loaded available themes.\r\n         *\r\n         * Whenever a theme loads, it registers itself in System's `loadedThemes`\r\n         * collection.\r\n         */\r\n        this.loadedThemes = {};\r\n        /**\r\n         * An indeternal counter used to generate unique IDs.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {number}\r\n         */\r\n        this._uidCount = 0;\r\n        /**\r\n         * Keeps register of class references so that they can be instnatiated using\r\n         * string key.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        this.registeredClasses = {};\r\n        /**\r\n         * Holds all generated placeholders.\r\n         */\r\n        this._placeholders = {};\r\n        /**\r\n     * A list of invalid(ated) [[Sprite]] objects that need to be re-validated\r\n     * during next cycle.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @type { [index: string]: Array<Sprite> }\r\n     */\r\n        this.invalidSprites = {};\r\n        /**\r\n         * Components are added to this list when their data provider changes to\r\n         * a new one or data is added/removed from their data provider.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type { [index: string]: Array<Component> }\r\n         */\r\n        this.invalidDatas = {};\r\n        /**\r\n         * Components are added to this list when values of their raw data change.\r\n         * Used when we want a smooth animation from one set of values to another.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {Array<Component>}\r\n         */\r\n        this.invalidRawDatas = [];\r\n        /**\r\n         * Components are added to this list when values of their data changes\r\n         * (but not data provider itself).\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {Array<Component>}\r\n         */\r\n        this.invalidDataItems = [];\r\n        /**\r\n         * Components are added to this list when their data range (selection) is\r\n         * changed, e.g. zoomed.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {Array<Component>}\r\n         */\r\n        this.invalidDataRange = [];\r\n        /**\r\n         * A list of [[Sprite]] objects that have invalid(ated) positions, that need\r\n         * to be recalculated.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type { [index: string]: Array<Sprite>}\r\n         */\r\n        this.invalidPositions = {};\r\n        /**\r\n         * A list of [[Container]] objects with invalid(ated) layouts.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type { [index: string]: Array<Container>}\r\n         */\r\n        this.invalidLayouts = {};\r\n        /**\r\n         * An array holding all active (non-disposed) top level elemens.\r\n         *\r\n         * When, for example, a new chart is created, its instance will be added to\r\n         * this array, and will be removed when the chart is disposed.\r\n         *\r\n         * @type {Array<Sprite>}\r\n         */\r\n        this.baseSprites = [];\r\n        this.baseSpritesByUid = {};\r\n        this.uid = this.getUniqueId();\r\n        this.invalidSprites.noBase = [];\r\n        this.invalidDatas.noBase = [];\r\n        this.invalidLayouts.noBase = [];\r\n        this.invalidPositions.noBase = [];\r\n    }\r\n    /**\r\n     * Generates a unique chart system-wide ID.\r\n     *\r\n     * @return {string} Generated ID\r\n     */\r\n    Registry.prototype.getUniqueId = function () {\r\n        var uid = this._uidCount;\r\n        this._uidCount += 1;\r\n        return \"id-\" + uid;\r\n    };\r\n    Object.defineProperty(Registry.prototype, \"map\", {\r\n        /**\r\n         * Returns a universal collection for mapping ids with objects.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {Dictionary<string, any>} Map collection\r\n         */\r\n        get: function () {\r\n            if (!this._map) {\r\n                this._map = new Dictionary();\r\n            }\r\n            return this._map;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Caches value in object's cache.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {string}  key    Key\r\n     * @param {any}     value  Value\r\n     * @param {number}  ttl    TTL in seconds\r\n     */\r\n    Registry.prototype.setCache = function (key, value, ttl) {\r\n        cache.set(this.uid, key, value, ttl);\r\n    };\r\n    /**\r\n     * Retrieves cached value.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}  key    Key\r\n     * @param  {any}     value  Value to return if cache is not available\r\n     * @return {any}            Value\r\n     */\r\n    Registry.prototype.getCache = function (key, value) {\r\n        if (value === void 0) { value = undefined; }\r\n        return cache.get(this.uid, key, value);\r\n    };\r\n    /**\r\n     * Dispatches an event using own event dispatcher. Will automatically\r\n     * populate event data object with event type and target (this element).\r\n     * It also checks if there are any handlers registered for this sepecific\r\n     * event.\r\n     *\r\n     * @param {Key} eventType Event type (name)\r\n     * @param {any}    data      Data to pass into event handler(s)\r\n     */\r\n    Registry.prototype.dispatch = function (eventType, data) {\r\n        // @todo Implement proper type check\r\n        if (this.events.isEnabled(eventType)) {\r\n            if (data) {\r\n                data.type = eventType;\r\n                data.target = data.target || this;\r\n                this.events.dispatch(eventType, {\r\n                    type: eventType,\r\n                    target: this\r\n                });\r\n            }\r\n            else {\r\n                this.events.dispatch(eventType, {\r\n                    type: eventType,\r\n                    target: this\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Works like `dispatch`, except event is triggered immediately, without\r\n     * waiting for the next frame cycle.\r\n     *\r\n     * @param {Key} eventType Event type (name)\r\n     * @param {any}    data      Data to pass into event handler(s)\r\n     */\r\n    Registry.prototype.dispatchImmediately = function (eventType, data) {\r\n        // @todo Implement proper type check\r\n        if (this.events.isEnabled(eventType)) {\r\n            if (data) {\r\n                data.type = eventType;\r\n                data.target = data.target || this;\r\n                this.events.dispatchImmediately(eventType, data);\r\n            }\r\n            else {\r\n                this.events.dispatchImmediately(eventType, {\r\n                    type: eventType,\r\n                    target: this\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a unique placeholder suitable for the key.\r\n     *\r\n     * @param  {string}  key  Key\r\n     * @return {string}       Random string to be used as placeholder\r\n     */\r\n    Registry.prototype.getPlaceholder = function (key) {\r\n        if ($type.hasValue(this._placeholders[key])) {\r\n            return this._placeholders[key];\r\n        }\r\n        this._placeholders[key] = \"__amcharts_\" + key + \"_\" + $string.random(8) + \"__\";\r\n        return this._placeholders[key];\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Registry.prototype.addToInvalidComponents = function (component) {\r\n        if (component.baseId) {\r\n            $array.move(this.invalidDatas[component.baseId], component);\r\n        }\r\n        else {\r\n            $array.move(this.invalidDatas[\"noBase\"], component);\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Registry.prototype.removeFromInvalidComponents = function (component) {\r\n        if (component.baseId) {\r\n            $array.remove(this.invalidDatas[component.baseId], component);\r\n        }\r\n        $array.remove(this.invalidDatas[\"noBase\"], component);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Registry.prototype.addToInvalidSprites = function (sprite) {\r\n        if (sprite.baseId) {\r\n            $array.add(this.invalidSprites[sprite.baseId], sprite);\r\n        }\r\n        else {\r\n            $array.add(this.invalidSprites[\"noBase\"], sprite);\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Registry.prototype.removeFromInvalidSprites = function (sprite) {\r\n        if (sprite.baseId) {\r\n            $array.remove(this.invalidSprites[sprite.baseId], sprite);\r\n        }\r\n        $array.remove(this.invalidSprites[\"noBase\"], sprite);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Registry.prototype.addToInvalidPositions = function (sprite) {\r\n        if (sprite.baseId) {\r\n            $array.add(this.invalidPositions[sprite.baseId], sprite);\r\n        }\r\n        else {\r\n            $array.add(this.invalidPositions[\"noBase\"], sprite);\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Registry.prototype.removeFromInvalidPositions = function (sprite) {\r\n        if (sprite.baseId) {\r\n            $array.remove(this.invalidPositions[sprite.baseId], sprite);\r\n        }\r\n        $array.remove(this.invalidPositions[\"noBase\"], sprite);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Registry.prototype.addToInvalidLayouts = function (sprite) {\r\n        if (sprite.baseId) {\r\n            $array.add(this.invalidLayouts[sprite.baseId], sprite);\r\n        }\r\n        else {\r\n            $array.add(this.invalidLayouts[\"noBase\"], sprite);\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Registry.prototype.removeFromInvalidLayouts = function (sprite) {\r\n        if (sprite.baseId) {\r\n            $array.remove(this.invalidLayouts[sprite.baseId], sprite);\r\n        }\r\n        $array.remove(this.invalidLayouts[\"noBase\"], sprite);\r\n    };\r\n    return Registry;\r\n}());\r\nexport { Registry };\r\n/**\r\n * A singleton global instance of [[Registry]].\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport var registry = new Registry();\r\n//# sourceMappingURL=Registry.js.map","/**\r\n * This is the main class that encapsulates every object on the chart.\r\n *\r\n * If it's an element that is to be displayed on the screen at some point, its\r\n * class must extend [[Sprite]] class.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SpriteState } from \"./SpriteState\";\r\nimport { SpriteEventDispatcher } from \"./SpriteEvents\";\r\nexport { SpriteEventDispatcher };\r\nimport { BaseObjectEvents } from \"./Base\";\r\nimport { Adapter } from \"./utils/Adapter\";\r\nimport { Dictionary, DictionaryTemplate, DictionaryDisposer } from \"./utils/Dictionary\";\r\nimport { ListDisposer, List } from \"./utils/List\";\r\nimport { MultiDisposer, Disposer, MutableValueDisposer } from \"./utils/Disposer\";\r\nimport { Animation, AnimationDisposer } from \"./utils/Animation\";\r\nimport { getGhostPaper } from \"./rendering/Paper\";\r\nimport { Container } from \"./Container\";\r\nimport { Pattern } from \"./rendering/fills/Pattern\";\r\nimport { LinearGradient } from \"./rendering/fills/LinearGradient\";\r\nimport { RadialGradient } from \"./rendering/fills/RadialGradient\";\r\nimport { Color, color, toColor } from \"./utils/Color\";\r\nimport { getInteraction } from \"./interaction/Interaction\";\r\nimport { MouseCursorStyle } from \"./interaction/Mouse\";\r\nimport { options } from \"./Options\";\r\nimport { registry } from \"./Registry\";\r\nimport { NumberFormatter } from \"./formatters/NumberFormatter\";\r\nimport { DateFormatter } from \"./formatters/DateFormatter\";\r\nimport { DurationFormatter } from \"./formatters/DurationFormatter\";\r\nimport { getTextFormatter } from \"./formatters/TextFormatter\";\r\nimport { Language } from \"./utils/Language\";\r\nimport { Export } from \"./export/Export\";\r\nimport * as $utils from \"./utils/Utils\";\r\nimport * as $math from \"./utils/Math\";\r\nimport * as $strings from \"./utils/Strings\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\nimport * as $iter from \"./utils/Iterator\";\r\nimport { system } from \"./System\";\r\nimport { Percent } from \"./utils/Percent\";\r\n/**\r\n * Defines list ofvisual properties\r\n */\r\nexport var visualProperties = [\"fill\", \"fillOpacity\", \"stroke\", \"strokeOpacity\", \"strokeWidth\", \"strokeDasharray\"]; // do not add opacity here, as it is used for showing/hiding\r\n;\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Sprite represents any displayable element.\r\n *\r\n * This is the main class that encapsulates every object on the chart.\r\n *\r\n * If it's an element that is to be displayed on the screen at some point, its\r\n * class must extend [[Sprite]] class.\r\n *\r\n * [[Sprite]] class represents the a hierarchical structure. Every object that\r\n * extends [[Sprite]] can have children, that would inherit their properties,\r\n * such as language, formatters, etc.\r\n *\r\n * @see {@link SpriteState}\r\n * @see {@link ISpriteEvents} for a list of available events\r\n * @see {@link ISpriteAdapters} for a list of available Adapters\r\n *\r\n * @todo Review child elements that need to go into `_disposers`\r\n * @important\r\n */\r\nvar Sprite = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Sprite, _super);\r\n    /**\r\n     * Constructor:\r\n     * * Creates initial node\r\n     * * Sets default properties\r\n     * * Creates required default states\r\n     * * Inits accessibility\r\n     */\r\n    function Sprite() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Holds values for Sprite's properties.\r\n         */\r\n        _this.properties = {};\r\n        /**\r\n         * Event dispacther.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/event-listeners/} for more info about Events\r\n         * @type {SpriteEventDispatcher<AMEvent<Sprite, ISpriteEvents>>} Event dispatcher instance\r\n         */\r\n        _this.events = new SpriteEventDispatcher(_this);\r\n        /**\r\n         * Holds Adapter.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/adapters/} for more info about Adapters\r\n         * @type {Adapter<Sprite, ISpriteAdapters>}\r\n         */\r\n        _this.adapter = new Adapter(_this);\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         */\r\n        _this._bindings = {};\r\n        /**\r\n         * Holds indicator if this Sprite is a \"template\" to be used for creating\r\n         * other Sprites from and should not be treated as full-fledged element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {Optional<boolean>}\r\n         */\r\n        _this._isTemplate = false;\r\n        /**\r\n         * Holds indicator whether this sprite was already initialized.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {boolean}\r\n         */\r\n        _this._inited = false;\r\n        /**\r\n         * Holds indicator whether this sprite was already initialized and ready.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {boolean}\r\n         */\r\n        _this._ready = false;\r\n        /**\r\n         * If `sprite.hide()` is called and we have \"hidden\" state and\r\n         * `transitionDuration > 0`, we set `isHiding` flag to `true` in order to\r\n         * avoid restarting animations in case `hide()` method is called multiple\r\n         * times.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this.isHiding = false;\r\n        /**\r\n         * If `sprite.hide()` is called, we set isHidden to true when sprite is hidden.\r\n         * This was added becaus hidden state might have visibility set to true and so\r\n         * there would not be possible to find out if a sprite is technically hidden or not.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this._isHidden = false;\r\n        /**\r\n         * This property indicates if Sprite is currently being revealed from hidden\r\n         * state. This is used to prevent multiple calls to `sprite.show()` to\r\n         * restart reveal animation. (if enabled)\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this.isShowing = false;\r\n        /**\r\n         * Indicates if this element is a standalone instance. A \"standalone\r\n         * instance\" means this is a autonomous object which maintains its own\r\n         * set of controls like Preloader, Export, etc.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {boolean}\r\n         */\r\n        _this.isStandaloneInstance = false;\r\n        /**\r\n         * Indicates if togglable Sprite is currently active (toggled on).\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {boolean}\r\n         */\r\n        _this._isActive = false;\r\n        /**\r\n         * A Sprite element to use as a mask for this Sprite.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {MutableValueDisposer}\r\n         */\r\n        _this._mask = new MutableValueDisposer();\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @type {number}\r\n         */\r\n        _this._positionPrecision = 3;\r\n        /**\r\n         * An instance of [[Language]].\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {Language}\r\n         */\r\n        _this._language = new MutableValueDisposer();\r\n        /**\r\n         * Indicates if the chart should follow right-to-left rules.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {boolean}\r\n         */\r\n        _this._rtl = false;\r\n        /**\r\n         * Holds [[Export]] object.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {Export}\r\n         */\r\n        _this._exporting = new MutableValueDisposer();\r\n        /**\r\n         * Defines bounding box (square) for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {IRectangle}\r\n         */\r\n        _this._bbox = { x: 0, y: 0, width: 0, height: 0 };\r\n        /**\r\n         * Indicates if this element is invalid and should be re-validated (redrawn).\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {boolean}\r\n         */\r\n        _this.invalid = false;\r\n        /**\r\n         * Indicates if this elements position is invalid and should be repositioned\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {boolean}\r\n         */\r\n        _this.positionInvalid = false;\r\n        /**\r\n         * A collection of key/value pairs that can be used to bind specific Sprite\r\n         * properties to [[DataItem]].\r\n         *\r\n         * For example: `fill` property can be bound to `myCustomColor` field in\r\n         * DataItem. The Sprite will automatically get the value for `fill` from its\r\n         * DataItem.\r\n         *\r\n         * Can be set for each [[SpriteState]] individually to override default\r\n         * bindings.\r\n         *\r\n         * @see {@link SpriteState}\r\n         * @type {Object}\r\n         */\r\n        _this.propertyFields = {};\r\n        /**\r\n         * Specifies if property changes on this object should be propagated to the\r\n         * objects cloned from this object.\r\n         *\r\n         * This setting affects property changes *after* cloning, since at the moment\r\n         * of cloning all of properties from source object are copied to the clone\r\n         * anyway.\r\n         *\r\n         * @default false\r\n         */\r\n        _this.applyOnClones = false;\r\n        // read only, sprite extreme coordinates\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.maxLeft = 0;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.maxRight = 0;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.maxTop = 0;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.maxBottom = 0;\r\n        _this._isDragged = false;\r\n        /**\r\n         * @deprecated Moved to [[SpriteProperties]]\r\n         * @type {boolean}\r\n         */\r\n        _this._disabled = false;\r\n        _this._internalDisabled = false;\r\n        _this._updateDisabled = false;\r\n        _this._internalDefaultsApplied = false;\r\n        /**\r\n         * Time in milliseconds after which rollout event happens when user rolls-out of the sprite. This helps to avoid flickering in some cases.\r\n         * @type {number}\r\n         */\r\n        _this.rollOutDelay = 0;\r\n        /**\r\n         * This flag is set to `true` for the initial sprite you create and place\r\n         * to the div so that we could clear all additional\r\n         * sprites/containers when this sprite is disposed.\r\n         *\r\n         * @ignore\r\n         */\r\n        _this.isBaseSprite = false;\r\n        /**\r\n         * Indicates whether this sprite should be cloned when cloning its parent\r\n         * container. We set this to `false` in those cases when a sprite is created\r\n         * by the class, so that when cloning a duplicate sprite would not appear.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this.shouldClone = true;\r\n        /**\r\n         * A read-only flag which indicates if a sprite has completed its initial\r\n         * animation (if `showOnInit = true`).\r\n         *\r\n         * In case `showOnInit = false`, `appeared` is set to `true` on init.\r\n         *\r\n         * @readonly\r\n         * @type {boolean}\r\n         */\r\n        _this.appeared = false;\r\n        /**\r\n         * [ex description]\r\n         *\r\n         * @todo Description\r\n         * @ignore\r\n         * @type {number}\r\n         */\r\n        _this.ex = 0;\r\n        /**\r\n         * [ey description]\r\n         *\r\n         * @todo Description\r\n         * @ignore\r\n         * @type {number}\r\n         */\r\n        _this.ey = 0;\r\n        _this.className = \"Sprite\";\r\n        // Generate a unique ID\r\n        _this.uid;\r\n        // Create SVG group to hold everything in\r\n        _this.group = _this.paper.addGroup(\"g\");\r\n        // Set defaults\r\n        // it is better to set defauls like this in order to save invaliation calls and events\r\n        _this.setPropertyValue(\"scale\", 1);\r\n        _this.setPropertyValue(\"rotation\", 0);\r\n        _this.setPropertyValue(\"align\", \"none\");\r\n        _this.setPropertyValue(\"valign\", \"none\");\r\n        _this.setPropertyValue(\"pixelPerfect\", false);\r\n        _this.setPropertyValue(\"visible\", true);\r\n        _this.setPropertyValue(\"tooltipPosition\", \"fixed\");\r\n        _this.setPropertyValue(\"verticalCenter\", \"none\");\r\n        _this.setPropertyValue(\"horizontalCenter\", \"none\");\r\n        _this.setPropertyValue(\"marginTop\", 0);\r\n        _this.setPropertyValue(\"marginBottom\", 0);\r\n        _this.setPropertyValue(\"marginLeft\", 0);\r\n        _this.setPropertyValue(\"marginRight\", 0);\r\n        _this.setPropertyValue(\"dx\", 0);\r\n        _this.setPropertyValue(\"dy\", 0);\r\n        _this.setPropertyValue(\"paddingTop\", 0);\r\n        _this.setPropertyValue(\"paddingBottom\", 0);\r\n        _this.setPropertyValue(\"paddingRight\", 0);\r\n        _this.setPropertyValue(\"paddingLeft\", 0);\r\n        _this.setPropertyValue(\"togglable\", false);\r\n        _this.setPropertyValue(\"hidden\", false);\r\n        _this.setPropertyValue(\"urlTarget\", \"_self\");\r\n        _this._prevMeasuredWidth = 0;\r\n        _this._prevMeasuredHeight = 0;\r\n        _this._measuredWidth = 0;\r\n        _this._measuredHeight = 0;\r\n        _this._isMeasured = true;\r\n        // Invalidate the Sprite so that renderer knows it needs to be drawn\r\n        _this.invalidate();\r\n        //this.states.create(\"default\").properties.opacity = 1;\r\n        // Apply the theme\r\n        _this.applyTheme();\r\n        //this._disposers.push(this._clickable);\r\n        // Decorate adapter with events so that we can apply its settings whenever\r\n        // it is modified\r\n        // @todo Think what to do here. We can't just apply the adapter value to\r\n        // property since not all of those are for properties. Commented out for\r\n        // now.\r\n        /*this.adapter.events.on(\"inserted\", (ev: any) => {\r\n            (<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];\r\n        });\r\n        this.adapter.events.on(\"removed\", (ev: any) => {\r\n            (<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];\r\n        });*/\r\n        // Add disposable dependencies to `_disposers` so they are automatically\r\n        // disposed of when this object is disposed\r\n        _this._disposers.push(_this.events);\r\n        _this._disposers.push(_this.group);\r\n        _this._disposers.push(_this._mask);\r\n        _this._disposers.push(_this._language);\r\n        _this._disposers.push(_this._exporting);\r\n        //this._disposers.push(this._parent);\r\n        //this._disposers.push(this._modal);\r\n        _this._disposers.push(new Disposer(function () {\r\n            $object.each(_this._bindings, function (key, value) {\r\n                value.dispose();\r\n            });\r\n        }));\r\n        _this.setPropertyValue(\"interactionsEnabled\", true);\r\n        return _this;\r\n    }\r\n    /**\r\n     * ==========================================================================\r\n     * ELEMENT VALIDATION, INIT, AND DRAWING STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Applies properties from all assigned themes.\r\n     *\r\n     * We do this here so that we can apply class names as well.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.applyTheme = function () {\r\n        _super.prototype.applyTheme.call(this);\r\n        if (options.autoSetClassName) {\r\n            this.setClassName();\r\n        }\r\n    };\r\n    /**\r\n     * Returns theme(s) used by this object either set explicitly on this\r\n     * element, inherited from parent, or inherited from [[System]].\r\n     *\r\n     * @return {ITheme} An array of theme references\r\n     */\r\n    Sprite.prototype.getCurrentThemes = function () {\r\n        var themes = this._themes;\r\n        if (themes) {\r\n            return themes;\r\n        }\r\n        else {\r\n            var parent_1 = this.parent;\r\n            if (parent_1) {\r\n                return parent_1.getCurrentThemes();\r\n            }\r\n            else {\r\n                return registry.themes;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Called just before element's validation, this function allows setting\r\n     * defaults.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.applyInternalDefaults = function () {\r\n        // Nothing here, but extending classes might override this function\r\n        // so that they can set their defaults\r\n        this._internalDefaultsApplied = true;\r\n    };\r\n    /**\r\n     * Invalidates element.\r\n     *\r\n     * Object will be redrawn during the next update cycle.\r\n     *\r\n     * Please note that in most cases elements will auto-invalidate when needed. If\r\n     * everything works, DO NOT use this method. Use it only if some changes do\r\n     * not take otherwise.\r\n     */\r\n    Sprite.prototype.invalidate = function () {\r\n        if (this.disabled || this._isTemplate) {\r\n            return;\r\n        }\r\n        // We no longer reset this on each invalidate, so that they are applied\r\n        // only once, and do not overwrite user-defined settings\r\n        //this._internalDefaultsApplied = false;\r\n        if (!this.invalid) {\r\n            this.invalid = true;\r\n            registry.addToInvalidSprites(this);\r\n            system.requestFrame();\r\n        }\r\n    };\r\n    /**\r\n     * Validates element:\r\n     * * Triggers events\r\n     * * Redraws the element\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.validate = function () {\r\n        this.dispatchImmediately(\"beforevalidated\");\r\n        // prevents from drawing if topparent is 0x0\r\n        /*\r\n        let topParent = this.topParent;\r\n\r\n        if (topParent) {\r\n            if (!topParent.maxWidth || !topParent.maxHeight) {\r\n                this._disposers.push(topParent.events.once(\"maxsizechanged\", this.invalidate, this));\r\n            }\r\n        }*/\r\n        // Set internal defaults\r\n        if (!this._internalDefaultsApplied) {\r\n            this.applyInternalDefaults();\r\n        }\r\n        this.beforeDraw();\r\n        this.draw();\r\n        this.invalid = false;\r\n        registry.removeFromInvalidSprites(this);\r\n        this.afterDraw();\r\n    };\r\n    /**\r\n     * Invalidates element's position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.invalidatePosition = function () {\r\n        if (this.disabled || this._isTemplate) {\r\n            return;\r\n        }\r\n        if (!this.positionInvalid) {\r\n            this.positionInvalid = true;\r\n            registry.addToInvalidPositions(this);\r\n            system.requestFrame();\r\n        }\r\n    };\r\n    /**\r\n     * Transforms the element.\r\n     *\r\n     * @todo Description (review)\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.validatePosition = function () {\r\n        var pixelX = this.pixelX;\r\n        var pixelY = this.pixelY;\r\n        var dx = this.dx;\r\n        var dy = this.dy;\r\n        var x = pixelX + dx;\r\n        var y = pixelY + dy;\r\n        if (this._updateDisabled) {\r\n            if (this._internalDisabled) {\r\n                this.group.attr({ \"display\": \"none\" });\r\n            }\r\n            else {\r\n                if (!this.disabled) {\r\n                    this.removeSVGAttribute(\"display\");\r\n                }\r\n            }\r\n            this._updateDisabled = false;\r\n        }\r\n        var sizeChanged = this.measure();\r\n        //if (!this.invalid) {\r\n        var prevGroupTransform = this.group.transformString;\r\n        this.group.moveTo({ x: x, y: y });\r\n        this.group.rotation = this.rotation;\r\n        if (this.nonScaling) {\r\n            this.group.scale = this.scale / this.globalScale;\r\n        }\r\n        else {\r\n            this.group.scale = this.scale;\r\n        }\r\n        if (prevGroupTransform != this.group.transformString || sizeChanged) {\r\n            // not yet sure, this is to avoid many transforms=>container layout invalidation on initial buid\r\n            if (prevGroupTransform == null) {\r\n                this.dispatch(\"transformed\");\r\n            }\r\n            else {\r\n                this.dispatchImmediately(\"transformed\");\r\n            }\r\n            // TODO clear existing positionchanged dispatches ?\r\n            this.dispatch(\"positionchanged\");\r\n        }\r\n        //}\r\n        // it might happen that x and y changed again, so we only remove if they didn't\r\n        if (pixelX + dx == x && pixelY + dy == y) {\r\n            registry.removeFromInvalidPositions(this);\r\n            this.positionInvalid = false;\r\n        }\r\n        var maskRectangle = this._maskRectangle;\r\n        // todo: verify this\r\n        if (maskRectangle) {\r\n            this._clipElement.moveTo({ x: maskRectangle.x - pixelX, y: maskRectangle.y - pixelY });\r\n        }\r\n    };\r\n    /**\r\n     * A placeholder method that is called **before** element begins to be drawn.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.beforeDraw = function () {\r\n    };\r\n    /**\r\n     * A placeholder method that draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.draw = function () {\r\n    };\r\n    /**\r\n     * A placeholder method that is called **after** element finishes drawing\r\n     * itself.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.afterDraw = function () {\r\n        if (this.isMeasured || this.horizontalCenter !== \"none\" || this.verticalCenter !== \"none\") {\r\n            this.measureElement();\r\n        }\r\n        //this.applyMask();\r\n        if (!this._inited) {\r\n            try {\r\n                // used to be applySVGAttrbutes here, this is more efficient\r\n                for (var _a = tslib_1.__values(this.adapter.keys()), _b = _a.next(); !_b.done; _b = _a.next()) {\r\n                    var key = _b.value;\r\n                    switch (key) {\r\n                        case \"mask\":\r\n                        case \"fill\":\r\n                        case \"opacity\":\r\n                        case \"fillOpacity\":\r\n                        case \"stroke\":\r\n                        case \"strokeOpacity\":\r\n                        case \"strokeWidth\":\r\n                        case \"shapeRendering\":\r\n                        case \"strokeDasharray\":\r\n                        case \"textDecoration\":\r\n                        case \"fontSize\":\r\n                        case \"fontFamily\":\r\n                        case \"fontWeight\":\r\n                            //case \"focusable\":\r\n                            //case \"tabindex\":\r\n                            //case \"role\":\r\n                            this[key] = this[key];\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n            this.applyFilters();\r\n            this.visible = this.visible;\r\n            this.interactionsEnabled = this.getPropertyValue(\"interactionsEnabled\"); // can't use .interactionsEnabled as it get's parent's\r\n            this._inited = true;\r\n            if (!this.showOnInit) {\r\n                this.appeared = true;\r\n            }\r\n            if (this.hidden) {\r\n                this.hide(0);\r\n            }\r\n            this.applyMask();\r\n            this.dispatch(\"validated\");\r\n            this.dispatch(\"inited\");\r\n            this.dispatchReady();\r\n        }\r\n        else {\r\n            this.dispatch(\"validated\");\r\n        }\r\n        var e_1, _c;\r\n    };\r\n    /**\r\n     * Dispatches `\"ready\"` event. Sprite dispatches it right after `\"inited\"` event.\r\n     *\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.dispatchReady = function () {\r\n        if (!this.isReady()) {\r\n            this._ready = true;\r\n            this.dispatch(\"ready\");\r\n        }\r\n    };\r\n    /**\r\n     * Triggers a re-initialization of this element.\r\n     *\r\n     * Will result in complete redrawing of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.reinit = function () {\r\n        this._inited = false;\r\n        this.setState(this.defaultState);\r\n        this.invalidate();\r\n    };\r\n    /**\r\n     * Handles the situation where parent element is resized.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.handleGlobalScale = function () {\r\n        this.dispatch(\"globalscalechanged\");\r\n        if (this.nonScalingStroke) {\r\n            this.strokeWidth = this.strokeWidth;\r\n        }\r\n        if (this.nonScaling) {\r\n            this.validatePosition();\r\n        }\r\n        this.updateFilterScale();\r\n    };\r\n    /**\r\n     * Updates filter properties which might depend on scale\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.updateFilterScale = function () {\r\n        var _this = this;\r\n        $iter.each(this.filters.iterator(), function (filter) {\r\n            filter.scale = _this.globalScale;\r\n        });\r\n    };\r\n    /**\r\n     * Removes itself from system's invalid lists.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.removeFromInvalids = function () {\r\n        registry.removeFromInvalidSprites(this);\r\n        registry.removeFromInvalidPositions(this);\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[Sprite]].\r\n     *\r\n     * @param {Sprite} source Source Sprite\r\n     */\r\n    Sprite.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.events.copyFrom(source.events);\r\n        this.isMeasured = source.isMeasured;\r\n        this.states.copyFrom(source.states);\r\n        if (source.filters.length > 0) {\r\n            source.filters.each(function (filter) {\r\n                _this.filters.push(filter.clone());\r\n            });\r\n        }\r\n        this.adapter.copyFrom(source.adapter);\r\n        //helps to avoid calling getter which creates instance\r\n        if (source[\"_interaction\"]) {\r\n            this.interactions.copyFrom(source.interactions);\r\n        }\r\n        this.configField = source.configField;\r\n        this.applyOnClones = source.applyOnClones;\r\n        // this.numberFormatter = source.numberFormatter; // todo: this creates loose number formatter and copies it to all clones. somehow we need to know if source had numberFormatter explicitly created and not just because a getter was called.\r\n        //this.mask = source.mask; need to think about this, generally this causes a lot of problems\r\n        this.disabled = source.disabled;\r\n        this.virtualParent = source.virtualParent;\r\n        this.exportable = source.exportable;\r\n        //@todo: create tooltip if it's on source but not on this?\r\n        //const tooltip = this._tooltip;\r\n        //if (tooltip) {\r\n        //\ttooltip.copyFrom(source.tooltip);\r\n        //}\r\n        if (source._tooltip) {\r\n            if (this._tooltip) {\r\n                this._tooltip.copyFrom(source.tooltip);\r\n            }\r\n            else {\r\n                this.tooltip = source.tooltip.clone();\r\n            }\r\n        }\r\n        //if ((<any>source)[\"_tooltip\"] && !this._tooltip) {\r\n        //\tthis._tooltip = (<any>source)[\"_tooltip\"];\r\n        //}\r\n        this._showSystemTooltip = source.showSystemTooltip;\r\n        $utils.copyProperties(source.propertyFields, this.propertyFields);\r\n        $utils.copyProperties(source.properties, this);\r\n        if (source.fillModifier) {\r\n            this.fillModifier = source.fillModifier.clone();\r\n        }\r\n        if (source.strokeModifier) {\r\n            this.strokeModifier = source.strokeModifier.clone();\r\n        }\r\n    };\r\n    Sprite.prototype.dispose = function () {\r\n        if (!this.isDisposed()) {\r\n            this.dispatchImmediately(\"beforedisposed\");\r\n            if (this.isBaseSprite) {\r\n                if (this.htmlContainer) {\r\n                    while (this.htmlContainer.childNodes.length > 0) {\r\n                        this.htmlContainer.removeChild(this.htmlContainer.firstChild);\r\n                    }\r\n                }\r\n                this.isBaseSprite = false;\r\n            }\r\n            _super.prototype.dispose.call(this);\r\n            // Clear adapters\r\n            this.adapter.clear();\r\n            if (this.applyOnClones) {\r\n                if (this._clones) {\r\n                    for (var i = this._clones.length - 1; i >= 0; i--) {\r\n                        var clone = this._clones.getIndex(i);\r\n                        clone.dispose();\r\n                    }\r\n                }\r\n            }\r\n            if (this._svgContainer) {\r\n                this._svgContainer.dispose();\r\n            }\r\n            if (this._interactionDisposer) {\r\n                this._interactionDisposer.dispose();\r\n            }\r\n            if (this._urlDisposer) {\r\n                this._urlDisposer.dispose();\r\n            }\r\n            this.removeFromInvalids();\r\n            if (this.element) {\r\n                this.element.dispose();\r\n            }\r\n            if (this.group) {\r\n                this.group.dispose();\r\n            }\r\n            if (this._numberFormatter) {\r\n                this._numberFormatter.dispose();\r\n            }\r\n            if (this._focusFilter) {\r\n                this._focusFilter.dispose();\r\n            }\r\n            if (this.stroke && !(this.stroke instanceof Color)) {\r\n                this.stroke.dispose();\r\n            }\r\n            // TODO a bit hacky\r\n            if (this.fill && !(this.fill instanceof Color)) {\r\n                this.fill.dispose();\r\n            }\r\n            // remove from map\r\n            if ($type.hasValue(this.id)) {\r\n                this.map.removeKey(this.id);\r\n            }\r\n            this.parent = undefined;\r\n            if (this._filters) {\r\n                while (this._filters.length > 0) {\r\n                    var filter = this._filters.getIndex(0);\r\n                    filter.dispose();\r\n                    this._filters.removeValue(filter);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"isTemplate\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {boolean} Is template?\r\n         */\r\n        get: function () {\r\n            return this._isTemplate;\r\n        },\r\n        /**\r\n         * Indicates if this element is a \"template\".\r\n         *\r\n         * Template Sprites act only as a holders for config for other \"real\"\r\n         * elements to be cloned from.\r\n         *\r\n         * Templates are treated differently, as they are not validated, redrawn, or\r\n         * otherwise are processed.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {boolean} value Is template?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this._isTemplate != value) {\r\n                this._isTemplate = value;\r\n                if (this instanceof Container) {\r\n                    $iter.each(this.children.iterator(), function (child) {\r\n                        child.isTemplate = value;\r\n                    });\r\n                }\r\n                if (value) {\r\n                    this.parent = this.parent;\r\n                    this.removeFromInvalids();\r\n                }\r\n                else {\r\n                    this.invalidate();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"showSystemTooltip\", {\r\n        /**\r\n         * @return {boolean} Show system tooltip?\r\n         */\r\n        get: function () {\r\n            if (!$type.hasValue(this._showSystemTooltip)) {\r\n                if (this.parent) {\r\n                    return this.parent.showSystemTooltip;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            return this._showSystemTooltip;\r\n        },\r\n        /**\r\n         * Indicates whether the element should attempt to construct itself in a way\r\n         * so that system tooltip is shown if its `readerTitle` is set.\r\n         *\r\n         * @param {boolean} value Show system tooltip?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            this._showSystemTooltip = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"topParent\", {\r\n        /**\r\n         * ==========================================================================\r\n         * HIERARCHY AND STRUCTURE RELATED STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Sprites's top-level [[Container]].\r\n         *\r\n         * In most cases that will be a Chart.\r\n         *\r\n         * @return {Optional<Container>} Top-level ascendant\r\n         */\r\n        get: function () {\r\n            if (this._topParent) {\r\n                return this._topParent;\r\n            }\r\n            else {\r\n                if (this.parent) {\r\n                    return this.parent.topParent;\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * @ignore\r\n         * @param value {Container} top parent of a sprite\r\n         */\r\n        set: function (value) {\r\n            this._topParent = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"parent\", {\r\n        /**\r\n         * @return {Optional<Container>} Parent container\r\n         */\r\n        get: function () {\r\n            return this._parent;\r\n        },\r\n        /**\r\n         * Elements' parent [[Container]].\r\n         *\r\n         * @param {Optional<Container>}  parent  Parent container\r\n         */\r\n        set: function (parent) {\r\n            if (this._isTemplate) {\r\n                return;\r\n            }\r\n            var currentPaper = this.paper;\r\n            var oldParent = this._parent;\r\n            if (oldParent != parent) {\r\n                if (oldParent) {\r\n                    oldParent.children.removeValue(this);\r\n                }\r\n                this._parent = parent;\r\n                if (parent) {\r\n                    this.topParent = parent.topParent;\r\n                    if (parent.isTemplate) {\r\n                        this.isTemplate = true;\r\n                    }\r\n                    this.baseId = parent.baseId;\r\n                    parent.children.push(this);\r\n                    // insert handler at Container invalidates +  invalidatesLayout + adds to group\r\n                    if (this._tooltip && !this._tooltipContainer) {\r\n                        this._tooltip.parent = parent.tooltipContainer;\r\n                    }\r\n                    if (!this._dataItem) {\r\n                        this.dataItem = parent.dataItem;\r\n                    }\r\n                }\r\n                else {\r\n                    this.topParent = undefined;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"virtualParent\", {\r\n        /**\r\n         * @return {Optional<Container>} Virtual parent\r\n         */\r\n        get: function () {\r\n            return this._virtualParent;\r\n        },\r\n        /**\r\n         * Element's \"virtual\" parent.\r\n         *\r\n         * This is required in ordere to maintain proper inheritance (like\r\n         * formatters).\r\n         *\r\n         * Sometimes an element is a \"logical\" parent, even though it's not a direct\r\n         * ascendant.\r\n         *\r\n         * Example: a bullet is not a child of the axis, but it would make sense\r\n         * for it to inherit series' formatters.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {Sprite}  value  Virtual parent\r\n         */\r\n        set: function (value) {\r\n            this._virtualParent = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Moves `<defs>` to correct place in DOM.\r\n     *\r\n     * Some elements are initially created in \"ghost\" container. When moving\r\n     * those into proper place in DOM, their respective `<defs>` need to be moved\r\n     * as well.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.appendDefs = function () {\r\n        if (this.filterElement) {\r\n            this.paper.appendDef(this.filterElement);\r\n        }\r\n        var fill = this.fill;\r\n        if (fill && fill.element) {\r\n            this.paper.appendDef(fill.element);\r\n        }\r\n        var stroke = this.stroke;\r\n        if (stroke && stroke.element) {\r\n            this.paper.appendDef(stroke.element);\r\n        }\r\n        if (this.fillModifier && this.fill instanceof Color) {\r\n            var fill_1 = this.fillModifier.modify(this.fill);\r\n            if (fill_1 && fill_1.element) {\r\n                this.paper.appendDef(fill_1.element);\r\n            }\r\n        }\r\n        if (this.strokeModifier && this.stroke instanceof Color) {\r\n            var stroke_1 = this.strokeModifier.modify(this.stroke);\r\n            if (stroke_1 && stroke_1.element) {\r\n                this.paper.appendDef(stroke_1.element);\r\n            }\r\n        }\r\n        if (this._clipPath) {\r\n            this.paper.appendDef(this._clipPath);\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"map\", {\r\n        /**\r\n         * Returns a [[Dictionary]] which maps object ids with their respective\r\n         * objects.\r\n         *\r\n         * Can be used to retrieve any object by id, e.g.:\r\n         *\r\n         * ```TypeScript\r\n         * console.log(mySprite.map.getKey(\"myid\"));\r\n         * ```\r\n         * ```JavaScript\r\n         * console.log(mySprite.map.getKey(\"myid\"));\r\n         * ```\r\n         *\r\n         * @return {Dictionary<string, any>} Map collection\r\n         */\r\n        get: function () {\r\n            var top = this.topParent;\r\n            if (top) {\r\n                return top.map;\r\n            }\r\n            else if (!this._map) {\r\n                this._map = new Dictionary();\r\n            }\r\n            return this._map;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"id\", {\r\n        /**\r\n         * @return {string} ID\r\n         */\r\n        get: function () {\r\n            return this._id;\r\n        },\r\n        /**\r\n         * Element's user-defined ID.\r\n         *\r\n         * Will throw an Error if there already is an object with the same ID.\r\n         *\r\n         * Please note that above check will be performed withing the scope of the\r\n         * current chart instance. It will not do checks across other chart instances\r\n         * or in globally in DOM.\r\n         *\r\n         * Make sure the IDs are unique.\r\n         *\r\n         * @param {string} value ID\r\n         */\r\n        set: function (value) {\r\n            if (this._id != value) {\r\n                this._id = value;\r\n                if (this.map.hasKey(value)) {\r\n                    throw Error(\"Duplicate id (\" + value + \") used on multiple objects.\");\r\n                }\r\n                else {\r\n                    this.map.setKey(value, this);\r\n                }\r\n                if (options.autoSetClassName) {\r\n                    this.setClassName();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"dom\", {\r\n        /**\r\n         * ==========================================================================\r\n         * ELEMENT AND DOM TREE MANIPULATION AND MEASURING\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns DOM element reference associated with this element.\r\n         *\r\n         * @readonly\r\n         * @return {SVGSVGElement} DOM element\r\n         */\r\n        get: function () {\r\n            return this.group.node;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"paper\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {Paper} Paper\r\n         */\r\n        get: function () {\r\n            if (this._paper) {\r\n                return this._paper;\r\n            }\r\n            else {\r\n                if (this.parent) {\r\n                    return this.parent.paper;\r\n                }\r\n            }\r\n            return getGhostPaper();\r\n        },\r\n        /**\r\n         * A [[Paper]] instance to place elements on.\r\n         *\r\n         * If there's no Paper set for this element, it goes up the ascendant tree\r\n         * until it finds one.\r\n         *\r\n         * This method is used by important `addChild()` method, so it's essential\r\n         * to have a [[Paper]] instance.\r\n         *\r\n         * If this element has a separate `htmlContainer` set, it will have a\r\n         * [[Paper]] instance itself.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {Paper}  paper  Paper\r\n         */\r\n        set: function (paper) {\r\n            this.setPaper(paper);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets [[Paper]] instance to use to draw elements.\r\n     * @ignore\r\n     * @param {Paper} paper Paper\r\n     * @return {boolean} true if paper was changed, false, if it's the same\r\n     */\r\n    Sprite.prototype.setPaper = function (paper) {\r\n        var oldPaper = this._paper;\r\n        if (oldPaper != paper) {\r\n            this._paper = paper;\r\n            this.appendDefs();\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"htmlContainer\", {\r\n        /**\r\n         * @return {Optional<HTMLElement>} HTML element\r\n         */\r\n        get: function () {\r\n            if (this._htmlContainer) {\r\n                return this._htmlContainer;\r\n            }\r\n            else {\r\n                if (this.parent) {\r\n                    return this.parent.htmlContainer;\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * An HTML element to be used when placing wrapper element (`<div>`)\r\n         * for the whole chart.\r\n         *\r\n         * This is the same for **all** elements within the same chart.\r\n         *\r\n         * @param {Optional<HTMLElement>} htmlContainer HTML element\r\n         */\r\n        set: function (htmlContainer) {\r\n            this._htmlContainer = htmlContainer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"titleElement\", {\r\n        /**\r\n         * Creates (if not yet created) and returns element's `<title>` element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {AMElement} Title element\r\n         */\r\n        get: function () {\r\n            if (!this._titleElement) {\r\n                this._titleElement = this.paper.add(\"title\");\r\n                this.group.add(this._titleElement);\r\n            }\r\n            return this._titleElement;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"descriptionElement\", {\r\n        /**\r\n         * Creates (if not yet created) and returns element's `<desc>` element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {AMElement} Desc element\r\n         */\r\n        get: function () {\r\n            if (!this._descriptionElement) {\r\n                this._descriptionElement = this.paper.add(\"desc\");\r\n                this.group.add(this._descriptionElement);\r\n            }\r\n            return this._descriptionElement;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"filters\", {\r\n        /**\r\n         * Returns list of SVG filters (effects) applied to element. If the filter\r\n         * list is not yet initilized, creates and returns an empty one.\r\n         * Note, not all filters combine well with one another. We recommend using one filter per sprite.\r\n         *\r\n         * @return {List<Filter>} List of filters\r\n         */\r\n        get: function () {\r\n            if (!this._filters) {\r\n                this._filters = new List();\r\n                // TODO only add certain events ?\r\n                this._disposers.push(this._filters.events.onAll(this.applyFilters, this));\r\n                this._disposers.push(new ListDisposer(this._filters));\r\n            }\r\n            return this._filters;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets required SVG attributes. Must be called every time an element is\r\n     * redrawn so that attributes are (re)applied.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.setSVGAttributes = function () {\r\n        this.fill = this.fill;\r\n        this.opacity = this.opacity;\r\n        this.fillOpacity = this.fillOpacity;\r\n        this.stroke = this.stroke;\r\n        this.strokeOpacity = this.strokeOpacity;\r\n        this.shapeRendering = this.shapeRendering;\r\n        this.strokeDasharray = this.strokeDasharray;\r\n        this.focusable = this.focusable;\r\n        this.tabindex = this.tabindex;\r\n        this.role = this.role;\r\n    };\r\n    /**\r\n     * Sets an attribute directly on an SVG element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {ISVGAttribute} attribute Attribute object\r\n     */\r\n    Sprite.prototype.setSVGAttribute = function (attribute) {\r\n        this.group.attr(attribute);\r\n    };\r\n    /**\r\n     * Removes an attribute directly from SVG element.\r\n     *\r\n     * @param {string} attribute Attribute key to remove\r\n     */\r\n    Sprite.prototype.removeSVGAttribute = function (attribute) {\r\n        this.group.removeAttr(attribute);\r\n    };\r\n    /**\r\n     * Sets `class` attribute of the elements SVG node.\r\n     *\r\n     * Uses `am4core.options.classNamePrefix`.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.setClassName = function () {\r\n        var className = this.className;\r\n        var classNamePrefix = options.classNamePrefix;\r\n        if (this.element) {\r\n            this.element.addClass(classNamePrefix + className);\r\n        }\r\n        this.group.addClass(classNamePrefix + className + \"-group\");\r\n        if ($type.hasValue(this.id)) {\r\n            this.group.addClass(classNamePrefix + this.id);\r\n        }\r\n    };\r\n    /**\r\n     * Adds an `id` attribute the the element and returns the id.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {string} Element's ID\r\n     */\r\n    Sprite.prototype.uidAttr = function () {\r\n        this.setSVGAttribute({ \"id\": this.uid });\r\n        return this.uid;\r\n    };\r\n    /**\r\n     * [updateClipPath description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    Sprite.prototype.updateClipPath = function () {\r\n        var element = this._clipElement;\r\n        if (element) {\r\n            element.moveTo({ x: this.mask.pixelX, y: this.mask.pixelY });\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.createClipPath = function () {\r\n        if (!this._clipPath) {\r\n            this._clipPath = this.paper.addGroup(\"clipPath\");\r\n            this.paper.appendDef(this._clipPath);\r\n            this._disposers.push(this._clipPath);\r\n            var id = registry.getUniqueId();\r\n            this._clipPath.attr({ \"id\": id });\r\n            this.group.attr({ \"clip-path\": \"url(#\" + id + \")\" });\r\n        }\r\n    };\r\n    /**\r\n     * Applies the mask Sprite.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.applyMask = function () {\r\n        var mask = this.mask;\r\n        if (this._clipPath && mask) {\r\n            // Container\r\n            if (mask instanceof Container) {\r\n                this._clipElement.attr({ \"width\": $math.max(0, mask.pixelWidth), \"height\": $math.max(0, mask.pixelHeight) });\r\n                var point = $utils.spritePointToSprite({ x: mask.pixelX, y: mask.pixelY }, mask.parent, this);\r\n                this._clipPath.x = point.x;\r\n                this._clipPath.y = point.y;\r\n            }\r\n            // Sprite\r\n            else {\r\n                if (mask.element && mask.element != this._clipElement) {\r\n                    this._clipElement = mask.element;\r\n                    this._clipPath.add(this._clipElement);\r\n                }\r\n                this._clipPath.scale = mask.scale;\r\n                this._clipPath.x = mask.pixelX;\r\n                this._clipPath.y = mask.pixelY;\r\n                this._clipPath.rotation = mask.rotation;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Applies filters to the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.applyFilters = function () {\r\n        var _this = this;\r\n        // we create a separate filter for each sprite as otherwise it would be impossible to animate filter.\r\n        // svg doesn't support multiple filters applied to one element, so we put all the primitives to one filterElement of a sprite.\r\n        if (this._filters && this._filters.length > 0) {\r\n            var width_1 = 100;\r\n            var height_1 = 100;\r\n            if (!this.filterElement) {\r\n                this.filterElement = this.paper.addGroup(\"filter\");\r\n                this._disposers.push(this.filterElement);\r\n            }\r\n            else {\r\n                this.filterElement.removeChildNodes();\r\n            }\r\n            this.paper.appendDef(this.filterElement);\r\n            var id = \"filter-\" + this.uid;\r\n            this.filterElement.attr({ \"id\": id });\r\n            $iter.each(this.filters.iterator(), function (filter) {\r\n                filter.sprite = _this;\r\n                filter.paper = _this.paper;\r\n                filter.appendPrimitives(_this.filterElement);\r\n                if (filter.width > width_1) {\r\n                    width_1 = filter.width;\r\n                }\r\n                if (filter.height > height_1) {\r\n                    height_1 = filter.height;\r\n                }\r\n                filter.scale = _this.globalScale;\r\n            });\r\n            var w = width_1 + \"%\";\r\n            var h = height_1 + \"%\";\r\n            /* temporarily removed as it is breaking tooltips on Safari @todo come back to this\r\n            if (this._measuredHeight <= 1) {\r\n                h = height + \"\";\r\n            }\r\n\r\n            if (this._measuredWidth <= 1) {\r\n                h = width + \"\";\r\n            }*/\r\n            this.filterElement.attr({ \"width\": w, \"height\": h, \"x\": -(width_1 - 100) / 2 + \"%\", \"y\": -(height_1 - 100) / 2 + \"%\" });\r\n            this.group.attr({ \"filter\": \"url(#\" + id + \")\" });\r\n        }\r\n        else if (this.filterElement) {\r\n            this.group.removeAttr(\"filter\");\r\n            this.filterElement.removeChildNodes();\r\n        }\r\n    };\r\n    /**\r\n     * [removeClipPath description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    Sprite.prototype.removeClipPath = function () {\r\n        if (this._clipPath) {\r\n            //this._clipPath.dispose();\r\n            this.removeDispose(this._clipPath);\r\n            this._clipPath = undefined;\r\n        }\r\n    };\r\n    /**\r\n     * [setElement description]\r\n     *\r\n     * @ignore\r\n     * @todo Description\r\n     * @param {AMElement} element [description]\r\n     */\r\n    Sprite.prototype.setElement = function (element) {\r\n        this.element = element;\r\n        this.setSVGAttributes();\r\n        this.applyAccessibility();\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"element\", {\r\n        /**\r\n         * @return {AMElement} Element\r\n         */\r\n        get: function () {\r\n            return this._element;\r\n        },\r\n        /**\r\n         * The main element for this Sprite, usually an SVG `<g>`.\r\n         *\r\n         * All other sub-elements are created in it.\r\n         *\r\n         * @param {Optional<AMElement>}  element  Element\r\n         */\r\n        set: function (element) {\r\n            // Destroy previous element if there was one before\r\n            this.removeElement();\r\n            // Set new element\r\n            this._element = element;\r\n            // Add element to group\r\n            // Since we are adding Element to group, which is already in the\r\n            // `.disposers` it will be removed automatically when Sprite is disposed\r\n            // of\r\n            this.group.add(element);\r\n            // This is needed if someone is setting element not in draw method but\r\n            // from outside\r\n            if (!this.invalid) {\r\n                this.validate();\r\n            }\r\n            if (options.autoSetClassName) {\r\n                this.setClassName();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"svgContainer\", {\r\n        /**\r\n         * HTML container (`<div>`) which is used to place chart's `<svg>` element\r\n         * in.\r\n         *\r\n         * @return {Optional<SVGContainer>} Container for chart elements\r\n         */\r\n        get: function () {\r\n            if (this._svgContainer) {\r\n                return this._svgContainer;\r\n            }\r\n            else {\r\n                if (this.parent) {\r\n                    return this.parent.svgContainer;\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * Sets HTML container to add SVG and other chart elements to.\r\n         *\r\n         * @param {Optional<SVGContainer>} svgContainer Container for chart elements\r\n         */\r\n        set: function (svgContainer) {\r\n            this._svgContainer = svgContainer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Measures main element.\r\n     *\r\n     * Saves measurements into private `_bbox` property.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.measureElement = function () {\r\n        if (this.element) {\r\n            if (this.definedBBox) {\r\n                this._bbox = this.definedBBox;\r\n            }\r\n            else {\r\n                var svgBBox = this.element.getBBox();\r\n                this._bbox = { x: svgBBox.x, y: svgBBox.y, width: svgBBox.width, height: svgBBox.height };\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Positions element according its center settings.\r\n     *\r\n     * @todo Description (review)\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.updateCenter = function () {\r\n        if (this.element) {\r\n            var prevElementTransform = this.element.transformString;\r\n            var bbox = this.bbox;\r\n            var ex = 0;\r\n            var ey = 0;\r\n            var elementX = bbox.x;\r\n            var elementY = bbox.y;\r\n            var elementWidth = bbox.width;\r\n            var elementHeigth = bbox.height;\r\n            var pixelPaddingLeft = this.pixelPaddingLeft;\r\n            var pixelPaddingRight = this.pixelPaddingRight;\r\n            var pixelPaddingTop = this.pixelPaddingTop;\r\n            var pixelPaddingBottom = this.pixelPaddingBottom;\r\n            // add padding to the measured size\r\n            var measuredWidth = $math.max(elementWidth + pixelPaddingLeft + pixelPaddingRight, this.pixelWidth);\r\n            var measuredHeight = $math.max(elementHeigth + pixelPaddingTop + pixelPaddingBottom, this.pixelHeight);\r\n            // extremes\r\n            var left = bbox.x;\r\n            var right = bbox.x + measuredWidth;\r\n            var top_1 = bbox.y;\r\n            var bottom = bbox.y + measuredHeight;\r\n            var horizontalCenter = this.horizontalCenter;\r\n            var verticalCenter = this.verticalCenter;\r\n            switch (horizontalCenter) {\r\n                case \"none\":\r\n                    ex = elementX + pixelPaddingLeft;\r\n                    break;\r\n                case \"left\":\r\n                    ex = pixelPaddingLeft;\r\n                    break;\r\n                case \"middle\":\r\n                    ex = pixelPaddingLeft - (elementWidth + pixelPaddingRight + pixelPaddingLeft) / 2;\r\n                    break;\r\n                case \"right\":\r\n                    ex = -pixelPaddingRight - elementWidth;\r\n                    break;\r\n            }\r\n            switch (verticalCenter) {\r\n                case \"none\":\r\n                    ey = elementY + pixelPaddingTop;\r\n                    break;\r\n                case \"top\":\r\n                    ey = pixelPaddingTop;\r\n                    break;\r\n                case \"middle\":\r\n                    ey = pixelPaddingTop - (elementHeigth + pixelPaddingBottom + pixelPaddingTop) / 2;\r\n                    break;\r\n                case \"bottom\":\r\n                    ey = -pixelPaddingBottom - elementHeigth;\r\n                    break;\r\n            }\r\n            this._measuredHeight = measuredHeight;\r\n            this._measuredWidth = measuredWidth;\r\n            var x = $math.round(ex - elementX, this._positionPrecision, true);\r\n            var y = $math.round(ey - elementY, this._positionPrecision, true);\r\n            this.ex = x - pixelPaddingLeft;\r\n            this.ey = y - pixelPaddingTop;\r\n            this.maxLeft = left + x - pixelPaddingLeft;\r\n            this.maxRight = right + x - pixelPaddingLeft;\r\n            this.maxTop = top_1 + y - pixelPaddingTop;\r\n            this.maxBottom = bottom + y - pixelPaddingTop;\r\n            if (this.pixelPerfect) {\r\n                x -= 0.5;\r\n                y -= 0.5;\r\n            }\r\n            this.element.moveTo({ x: x, y: y });\r\n            if (prevElementTransform != this.element.transformString) {\r\n                this.dispatchImmediately(\"transformed\");\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Measures the whole element.\r\n     *\r\n     * Returns `true` if the size has changed from the last measurement.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {boolean} Did the size changed from the last measurement?\r\n     */\r\n    Sprite.prototype.measure = function () {\r\n        this.updateCenter();\r\n        var bbox = this.bbox;\r\n        var measuredWidth = this._measuredWidth;\r\n        var measuredHeight = this._measuredHeight;\r\n        // extremes\r\n        var left = this.maxLeft;\r\n        var right = this.maxRight;\r\n        var top = this.maxTop;\r\n        var bottom = this.maxBottom;\r\n        // non-parent wise size\r\n        this._measuredWidthSelf = measuredWidth;\r\n        this._measuredHeightSelf = measuredHeight;\r\n        var positionPrecision = this._positionPrecision;\r\n        // if a sprite is rotated or scaled, calculate measured size after transformations\r\n        if (this.rotation !== 0 || this.scale !== 1) {\r\n            // not good to handleGlobalScale here.\r\n            if (this.nonScalingStroke) {\r\n                this.strokeWidth = this.strokeWidth;\r\n            }\r\n            var svg = this.paper.svg;\r\n            var matrix = svg.createSVGMatrix();\r\n            var rotation = this.rotation;\r\n            matrix.a = $math.cos(rotation) * this.scale;\r\n            matrix.c = -$math.sin(rotation) * this.scale;\r\n            matrix.e = 0;\r\n            matrix.b = $math.sin(rotation) * this.scale;\r\n            matrix.d = $math.cos(rotation) * this.scale;\r\n            matrix.f = 0;\r\n            var p1 = svg.createSVGPoint();\r\n            p1.x = left;\r\n            p1.y = top;\r\n            var p2 = svg.createSVGPoint();\r\n            p2.x = right;\r\n            p2.y = top;\r\n            var p3 = svg.createSVGPoint();\r\n            p3.x = right;\r\n            p3.y = bottom;\r\n            var p4 = svg.createSVGPoint();\r\n            p4.x = left;\r\n            p4.y = bottom;\r\n            var pt1 = p1.matrixTransform(matrix);\r\n            var pt2 = p2.matrixTransform(matrix);\r\n            var pt3 = p3.matrixTransform(matrix);\r\n            var pt4 = p4.matrixTransform(matrix);\r\n            left = Math.min(pt1.x, pt2.x, pt3.x, pt4.x);\r\n            right = Math.max(pt1.x, pt2.x, pt3.x, pt4.x);\r\n            top = Math.min(pt1.y, pt2.y, pt3.y, pt4.y);\r\n            bottom = Math.max(pt1.y, pt2.y, pt3.y, pt4.y);\r\n            measuredWidth = right - left;\r\n            measuredHeight = bottom - top;\r\n            this.maxLeft = $math.round(left, positionPrecision, true);\r\n            this.maxRight = $math.round(right, positionPrecision, true);\r\n            this.maxTop = $math.round(top, positionPrecision, true);\r\n            this.maxBottom = $math.round(bottom, positionPrecision, true);\r\n        }\r\n        this._measuredWidth = $math.round(measuredWidth, positionPrecision, true);\r\n        this._measuredHeight = $math.round(measuredHeight, positionPrecision, true);\r\n        // dispatch event\r\n        if (this._measuredWidth != this._prevMeasuredWidth || this._measuredHeight != this._prevMeasuredHeight) {\r\n            this._prevMeasuredHeight = this._measuredHeight;\r\n            this._prevMeasuredWidth = this._measuredWidth;\r\n            // TODO clear existing sizechanged dispatches ?\r\n            this.dispatch(\"sizechanged\");\r\n            if (this.isHover && this.tooltip && this.tooltip.visible) {\r\n                this.updateTooltipPosition();\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Insert this element before sibling element.\r\n     *\r\n     * @param  {Sprite}  sprite  Target element\r\n     * @return {Sprite}          This element\r\n     */\r\n    Sprite.prototype.insertBefore = function (sprite) {\r\n        var parent = this.parent;\r\n        if (parent) {\r\n            var index = parent.children.indexOf(sprite);\r\n            if (index !== -1) {\r\n                parent.children.moveValue(this, index);\r\n                parent.sortChildren();\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Insert this element after sibling element.\r\n     *\r\n     * @param  {Sprite}  sprite  Target element\r\n     * @return {Sprite}          This element\r\n     */\r\n    Sprite.prototype.insertAfter = function (sprite) {\r\n        var parent = this.parent;\r\n        if (parent) {\r\n            var index = parent.children.indexOf(sprite);\r\n            if (index !== -1) {\r\n                parent.children.moveValue(this, index + 1);\r\n                parent.sortChildren();\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Removes the main SVG element.\r\n     *\r\n     * This does not destroy the whole Sprite element. To do that use\r\n     * `dispose()` instead.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.removeElement = function () {\r\n        // remove visual element\r\n        if (this._element) {\r\n            this.removeDispose(this._element);\r\n            this._element = undefined;\r\n        }\r\n    };\r\n    /**\r\n     * Returns relative (percent) value of the X coordindate within this element.\r\n     *\r\n     * A relative value is a hundredth of a percent. So 100% would result in a 1\r\n     * as relative value.\r\n     *\r\n     * @param  {number | Percent}  value  Absolute or relative X coordinate\r\n     * @return {number}                   Relative value\r\n     */\r\n    Sprite.prototype.getRelativeX = function (value) {\r\n        if (value instanceof Percent) {\r\n            return value.value;\r\n        }\r\n        else if (this.parent) {\r\n            return value / this.parent.innerWidth;\r\n        }\r\n        return 0;\r\n    };\r\n    /**\r\n     * Returns relative (percent) value of the Y coordindate within this element.\r\n     *\r\n     * A relative value is a hundredth of a percent. So 100% would result in a 1\r\n     * as relative value.\r\n     *\r\n     * @param  {number | Percent}  value  Absolute or relative Y coordinate\r\n     * @return {number}                   Relative value\r\n     */\r\n    Sprite.prototype.getRelativeY = function (value) {\r\n        if (value instanceof Percent) {\r\n            return value.value;\r\n        }\r\n        else if (this.parent) {\r\n            return value / this.parent.innerHeight;\r\n        }\r\n        return 0;\r\n    };\r\n    /**\r\n     * Returns an X coordinate in pixel within the element.\r\n     *\r\n     * If number is passed in as parameter, the same number will be returned\r\n     * back.\r\n     *\r\n     * If [[Percent]] is passed in, it will be recalculated to pixels.\r\n     *\r\n     * @param  {number | Percent}  value  Absolute or relative X coordinate\r\n     * @return {number}                   X coordinate in pixels\r\n     */\r\n    Sprite.prototype.getPixelX = function (value) {\r\n        // we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth\r\n        // all the time and this would result chain of the same actions and will slow down the system a lot\r\n        var pixel = 0;\r\n        if ($type.isNumber(value)) {\r\n            pixel = value;\r\n        }\r\n        else if (value instanceof Percent) {\r\n            var relative = value.value;\r\n            if (this.parent) {\r\n                pixel = $math.round(this.parent.innerWidth * relative, this._positionPrecision, true);\r\n            }\r\n        }\r\n        return pixel;\r\n    };\r\n    /**\r\n     * Returns an Y coordinate in pixel within the element.\r\n     *\r\n     * If number is passed in as parameter, the same number will be returned\r\n     * back.\r\n     *\r\n     * If [[Percent]] is passed in, it will be recalculated to pixels.\r\n     *\r\n     * @param  {number | Percent}  value  Absolute or relative Y coordinate\r\n     * @return {number}                   Y coordinate in pixels\r\n     */\r\n    Sprite.prototype.getPixelY = function (value) {\r\n        // we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth\r\n        // all the time and this would result chain of the same actions and will slow down the system a lot\r\n        var pixel = 0;\r\n        if ($type.isNumber(value)) {\r\n            pixel = value;\r\n        }\r\n        else if (value instanceof Percent) {\r\n            var relative = value.value;\r\n            if (this.parent) {\r\n                pixel = $math.round(this.parent.innerHeight * relative, this._positionPrecision, true);\r\n            }\r\n        }\r\n        return pixel;\r\n    };\r\n    /**\r\n     * Moves the element to a specified coordinates.\r\n     *\r\n     * Using this method is preferred method of moving element, as it saves some\r\n     * CPU processing power over setting `x` and `y` properties separately.\r\n     *\r\n     * The method respects element's center settings. The element will be\r\n     * positioned so that `point` coordinates come in whatever \"center\" of the\r\n     * element is, as set in `horizontalCenter` and `verticalCenter`.\r\n     *\r\n     * Besides moving the element, you can also at the same time scale and\r\n     * rotate the element.\r\n     *\r\n     * @param {IPoint}  point     New coordinates\r\n     * @param {number}  rotation  New rotation\r\n     * @param {number}  scale     New Scale\r\n     */\r\n    Sprite.prototype.moveTo = function (point, rotation, scale, isDragged) {\r\n        if (this.isDragged && !isDragged) {\r\n            return;\r\n        }\r\n        if (point) {\r\n            if ($type.isNumber(point.x)) {\r\n                this.setPropertyValue(\"x\", point.x);\r\n            }\r\n            if ($type.isNumber(point.y)) {\r\n                this.setPropertyValue(\"y\", point.y);\r\n            }\r\n        }\r\n        if ($type.isNumber(rotation)) {\r\n            this.rotation = rotation;\r\n        }\r\n        if ($type.isNumber(scale)) {\r\n            this.scale = scale;\r\n        }\r\n        // must leave this\r\n        this.invalidatePosition();\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"mask\", {\r\n        /**\r\n         * Returns [[Sprite]] element currently used as mask for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {Optional<Sprite>} A [[Sprite]] to use as mask\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"mask\", this._mask.get());\r\n        },\r\n        /**\r\n         * Sets another [[Sprite]] element as this elements mask.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {Optional<Sprite>} mask A [[Sprite]] to use as mask\r\n         */\r\n        set: function (mask) {\r\n            var _this = this;\r\n            if (this._mask.get() !== mask) {\r\n                // this is good\r\n                if (mask) {\r\n                    this.createClipPath();\r\n                    if (!(mask instanceof Container)) {\r\n                        mask.isMeasured = false;\r\n                        if (mask.element) {\r\n                            this._clipElement = mask.element;\r\n                        }\r\n                    }\r\n                    else {\r\n                        this._clipElement = this.paper.add(\"rect\");\r\n                    }\r\n                    if (this._clipElement) {\r\n                        this._clipPath.add(this._clipElement);\r\n                    }\r\n                    this._mask.set(mask, new MultiDisposer([\r\n                        //mask.addEventListener(SpriteEvent.TRANSFORMED, this.applyMask, false, this);\r\n                        mask.events.on(\"maxsizechanged\", function () { if (_this.inited) {\r\n                            _this.applyMask;\r\n                        } }, undefined, false),\r\n                        mask.events.on(\"validated\", this.applyMask, this, false),\r\n                        mask.events.on(\"positionchanged\", this.applyMask, this, false)\r\n                    ]));\r\n                    this.applyMask();\r\n                }\r\n                else {\r\n                    this._mask.reset();\r\n                    this.group.removeAttr(\"clip-path\");\r\n                    this.removeClipPath();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"maskRectangle\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {IRectangle} Mask Rectangle\r\n         */\r\n        get: function () {\r\n            return this._maskRectangle;\r\n        },\r\n        // you can set IRectangle as a mask instead o a sprite. Note, the changes of the object won't be monitored\r\n        /**\r\n         * Instead of creating a [[Sprite]] for mask, you can just use a\r\n         * [[Rectangle]] by setting this accessor.\r\n         *\r\n         * Please note that the element will not monitor any changes to the mask\r\n         * rectangle.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {IRectangle} rect Mask Rectangle\r\n         */\r\n        set: function (rect) {\r\n            if (rect) {\r\n                this.createClipPath();\r\n                if (!this._clipElement) {\r\n                    this._clipElement = this.paper.add(\"rect\");\r\n                    this._clipPath.add(this._clipElement);\r\n                }\r\n                this._clipElement.attr({ \"width\": rect.width, \"height\": rect.height });\r\n            }\r\n            else {\r\n                this.removeClipPath();\r\n                this._clipElement = undefined;\r\n            }\r\n            this._maskRectangle = rect;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"isMeasured\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {boolean} Was element already measured?\r\n         */\r\n        get: function () {\r\n            return this._isMeasured;\r\n        },\r\n        /**\r\n         * Indicates if this element was already measured.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {boolean} value Was element already measured?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (!value) {\r\n                this._measuredWidth = 0;\r\n                this._measuredHeight = 0;\r\n                //this._pixelHeight = 0;\r\n                //this._pixelWidth = 0;\r\n            }\r\n            if (this._isMeasured != value) {\r\n                this._isMeasured = value;\r\n                this.invalidatePosition();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Checks if the this element has any of its parts overlapping with another\r\n     * element.\r\n     *\r\n     * @todo Description (review)\r\n     * @param  {Sprite}   sprite  Second element to test again\r\n     * @return {boolean}          Overlapping?\r\n     */\r\n    Sprite.prototype.hitTest = function (sprite) {\r\n        // validate, otherwise we will not know measuredWidth and measuredHeight\r\n        if (this.invalid) {\r\n            this.validate();\r\n        }\r\n        if (sprite.invalid) {\r\n            sprite.validate();\r\n        }\r\n        var ax1 = this.pixelX;\r\n        var ay1 = this.pixelY;\r\n        var ax2 = ax1 + this.measuredWidth;\r\n        var ay2 = ay1 + this.measuredHeight;\r\n        var bx1 = sprite.pixelX;\r\n        var by1 = sprite.pixelY;\r\n        var bx2 = bx1 + sprite.measuredWidth;\r\n        var by2 = by1 + sprite.measuredHeight;\r\n        return !(bx1 > ax2 || bx2 < ax1 || by1 > ay2 || by2 < ay1);\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"inited\", {\r\n        /**\r\n         * ==========================================================================\r\n         * STATE-RELATED\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns `true` if Sprite has already finished initializing.\r\n         *\r\n         * @return {boolean} Initialized?\r\n         */\r\n        get: function () {\r\n            return this._inited;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns `true` if Sprite has already finished initializing and is ready.\r\n     *\r\n     * If this object is a [[Container]] it will wait for all of its children\r\n     * are ready before becoming ready itself and firing a `\"ready\"` event.\r\n     *\r\n     * @return {boolean} is ready?\r\n     */\r\n    Sprite.prototype.isReady = function () {\r\n        return this._ready;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"states\", {\r\n        /**\r\n         * Returns a collection of element's available [[SpriteState]] entries.\r\n         *\r\n         * @see {@link SpriteState}\r\n         * @return {DictionaryTemplate<string, SpriteState>} States\r\n         */\r\n        get: function () {\r\n            if (!this._states) {\r\n                var state = new SpriteState();\r\n                // works\r\n                this._states = new DictionaryTemplate(state);\r\n                // TODO what about removeKey ?\r\n                this._disposers.push(this._states.events.on(\"insertKey\", this.processState, this, false));\r\n                this._disposers.push(this._states.events.on(\"setKey\", this.processState, this, false));\r\n                this._disposers.push(new DictionaryDisposer(this._states));\r\n                this._disposers.push(state);\r\n            }\r\n            return this._states;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"hiddenState\", {\r\n        /**\r\n         * Returns a [[SpriteState]] object for \"hidden\" state.\r\n         *\r\n         * This is a shortcut to `this.states.getKey(\"hidden\")`.\r\n         *\r\n         * @return {SpriteState} Hidden state\r\n         */\r\n        get: function () {\r\n            if (!this.states.getKey(\"hidden\")) {\r\n                var hiddenState = this.states.create(\"hidden\");\r\n                hiddenState.properties.opacity = 0;\r\n                hiddenState.properties.visible = false;\r\n            }\r\n            return this.states.getKey(\"hidden\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"defaultState\", {\r\n        /**\r\n         * Returns a [[SpriteState]] object for \"default\" state.\r\n         *\r\n         * This is a shortcut to `this.states.getKey(\"default\")`.\r\n         *\r\n         * @return {SpriteState} Hidden state\r\n         */\r\n        get: function () {\r\n            if (!this.states.getKey(\"default\")) {\r\n                var defaultState = this.states.create(\"default\");\r\n                defaultState.properties.opacity = 1;\r\n            }\r\n            return this.states.getKey(\"default\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Checks if some key states are defined and updates Sprite properties\r\n     * accordingly.\r\n     *\r\n     * For example if there's a state \"down\" defined for Sprite, we automatically\r\n     * make it \"clickable\".\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IDictionaryEvents<string, SpriteState>[\"insertKey\" | \"setKey\"]} event An event which caused state list update\r\n     */\r\n    Sprite.prototype.processState = function (event) {\r\n        var state = event.newValue;\r\n        state.sprite = this;\r\n        state.name = event.key;\r\n        if (this.states.hasKey(\"hover\") || $type.hasValue(this.tooltipHTML) || $type.hasValue(this.tooltipText)) {\r\n            this.hoverable = true;\r\n        }\r\n        if (this.states.hasKey(\"down\")) {\r\n            this.clickable = true;\r\n        }\r\n        if (this.states.hasKey(\"focus\")) {\r\n            this.focusable = true;\r\n        }\r\n        // Propagate the new state to clones\r\n        if (this.applyOnClones) {\r\n            var clones = this.clones.values;\r\n            var length_1 = clones.length;\r\n            for (var i = 0; i < length_1; ++i) {\r\n                var clone = clones[i];\r\n                if (!clone.isDisposed()) {\r\n                    clone.states.setKey(state.name, state);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"animations\", {\r\n        /**\r\n         * Returns a list elements's animations currently being played.\r\n         *\r\n         * If the list has not been initialized it is created.\r\n         *\r\n         * @return {Array<Animation>} List of animations\r\n         */\r\n        get: function () {\r\n            if (!this._animations) {\r\n                this._animations = [];\r\n                this._disposers.push(new AnimationDisposer(this._animations));\r\n            }\r\n            return this._animations;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts element's local coordinates to the coordinates within the main\r\n     * chart container.\r\n     *\r\n     * @param  {IPoint}  point  Local point\r\n     * @return {IPoint}         Global point\r\n     */\r\n    Sprite.prototype.getSvgPoint = function (point) {\r\n        // Calculate SVG point\r\n        var bbox = this.htmlContainer.getBoundingClientRect();\r\n        return {\r\n            \"x\": point.x - bbox.left,\r\n            \"y\": point.y - bbox.top\r\n        };\r\n    };\r\n    /**\r\n     * Creates and starts an [[Animation]] with given `animationOptions`.\r\n     *\r\n     * @see {@link Animation} for additional information about available options\r\n     * @param  {ISpriteAnimationOptions[] | ISpriteAnimationOptions}  animationOptions  Animation options\r\n     * @param  {number}                                               duration          Duration in milliseconds\r\n     * @param  {(number) => number}                                   easing            Easing function\r\n     * @return {Animation}                                                              Animation instance\r\n     */\r\n    Sprite.prototype.animate = function (animationOptions, duration, easing) {\r\n        return new Animation(this, animationOptions, duration, easing).start();\r\n    };\r\n    /**\r\n     * Applies a [[SpriteState]] on this element.\r\n     *\r\n     * The first parameter can either be a name state or a [[SpriteState]]\r\n     * instance.\r\n     *\r\n     * When run, this method will apply SVG properties defined in a\r\n     * [[SpriteState]], but only those that are relevant to this particular\r\n     * element, i.e. are in the `properties` array.\r\n     *\r\n     * @see {@link SpriteState}\r\n     * @param {string | SpriteState} value               A state - name key or instance\r\n     * @param {number}               transitionDuration  Duration of the transition between current and new state\r\n     * @param {number) => number}    easing              An easing function\r\n     */\r\n    Sprite.prototype.setState = function (value, transitionDuration, easing) {\r\n        var state;\r\n        if (value instanceof SpriteState) {\r\n            this.states.setKey(value.name, value);\r\n            state = value;\r\n        }\r\n        else {\r\n            state = this.states.getKey(value);\r\n            if (!state) {\r\n                return;\r\n            }\r\n        }\r\n        // stop previous transition\r\n        // not good - foe expample, we are animating to some \"active\" state and in them middle \"hover\" state happens. then \"active\" stat won't be applied\r\n        //if (this._transition) {\r\n        //this._transition.stop();\r\n        //}\r\n        if (state.name == \"hover\") {\r\n            if (this.isHidden) {\r\n                return;\r\n            }\r\n            this.isHover = true;\r\n        }\r\n        if (state.name == \"hidden\") {\r\n            this.isHiding = true;\r\n        }\r\n        else {\r\n            if (!this.visible) {\r\n                this.setVisibility(state.properties.visible || this.defaultState.properties.visible);\r\n            }\r\n        }\r\n        if (state.name == \"active\") {\r\n            this.isActive = true;\r\n        }\r\n        // we do not set isActive = false here if it's not active, but container does that if setStateOnChildren = true\r\n        if (!$type.isNumber(transitionDuration)) {\r\n            transitionDuration = state.transitionDuration;\r\n        }\r\n        if (!$type.hasValue(easing)) {\r\n            easing = state.transitionEasing;\r\n        }\r\n        return this.transitTo(state, transitionDuration, easing);\r\n    };\r\n    /**\r\n     * Applies proper state based on the condition of the element. A condition is\r\n     * deducted in this order:\r\n     * * \"hover\" if Sprite has currently any pointers over it\r\n     * * \"down\" if Sprite has any pointers (touch or mouse) currently pressed over it\r\n     * * \"focus\" if Sprite has currently got focus (accessibility)\r\n     * * \"hidden\" if Sprite is currently hidden\r\n     *\r\n     * Returns an [[Animation]] object, which is handling gradual transition from\r\n     * current values of properties, to the new target state(s).\r\n     *\r\n     * @param  {number}     duration  Duration for the animation (ms)\r\n     * @return {Optional<Animation>}  [[Animation]] object which is handling the transition\r\n     */\r\n    Sprite.prototype.applyCurrentState = function (duration) {\r\n        //if (!this.isHidden) { // this was done for hover state not to take effect if \"hidden\" is actually visible, need to think about it.\r\n        var animation = this.setState(this.defaultState, duration);\r\n        if (this.isHover) {\r\n            animation = this.setState(\"hover\", duration);\r\n        }\r\n        if (this.isDown && this.interactions.downPointers.length) {\r\n            animation = this.setState(\"down\", duration);\r\n        }\r\n        this.isFocused = this.isFocused;\r\n        if (this.isActive) {\r\n            animation = this.setState(\"active\", duration);\r\n            if (this.isHover && this.states.hasKey(\"hoverActive\")) {\r\n                animation = this.setState(\"hoverActive\", duration);\r\n            }\r\n        }\r\n        return animation;\r\n        //}\r\n    };\r\n    /**\r\n     * Starts an [[Animation]] of the properties to specific values as they are\r\n     * set in `state`.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {SpriteState}         state     Target State\r\n     * @param  {number}              duration  Duration in milliseconds\r\n     * @param  {(number) => number}  easing    Easing function\r\n     * @return {Animation}                     Transition Animation\r\n     */\r\n    Sprite.prototype.transitTo = function (state, duration, easing) {\r\n        var _this = this;\r\n        // Init\r\n        var options = [], propValues = state.allValues, transition;\r\n        // todo: do this for numeric/color properties only?\r\n        // @todo use state.getPropertyValue instead\r\n        $object.each(propValues, function (propertyName, finalValue) {\r\n            var currentValue = _this[propertyName];\r\n            // save current value to default state. this solves a big problem where values must be set both on sprite and default state\r\n            if (finalValue != currentValue && _this.defaultState.properties[propertyName] == undefined) {\r\n                _this.defaultState.properties[propertyName] = currentValue;\r\n            }\r\n            //if (finalValue != currentValue && $type.hasValue(finalValue)) {\r\n            if ($type.hasValue(finalValue)) {\r\n                var option = { from: currentValue, to: finalValue, property: propertyName };\r\n                options.push(option);\r\n            }\r\n        });\r\n        if (options.length > 0) {\r\n            transition = this.animate(options, duration, easing);\r\n            if (transition && !transition.isFinished()) {\r\n                // TODO should this use events.once ?\r\n                // TODO push onto _disposers array ?\r\n                this._disposers.push(transition.events.on(\"animationended\", function () {\r\n                    _this.dispatchImmediately(\"transitionended\");\r\n                }));\r\n            }\r\n            else {\r\n                this.dispatchImmediately(\"transitionended\");\r\n            }\r\n        }\r\n        // apply filters if set\r\n        if (state.filters.length > 0) {\r\n            var newFilters_1 = [];\r\n            // check for the same filters\r\n            $iter.each(state.filters.iterator(), function (stateFilter) {\r\n                var newFilter = stateFilter.clone();\r\n                newFilters_1.push(newFilter);\r\n                var animationOptions = [];\r\n                $iter.each(_this.filters.iterator(), function (currentFilter) {\r\n                    // if we have the same filters\r\n                    if (currentFilter.className == newFilter.className) {\r\n                        if (!$iter.contains(_this.defaultState.filters.iterator(), function (x) { return x.className === newFilter.className; })) {\r\n                            _this.defaultState.filters.push(currentFilter);\r\n                        }\r\n                        $object.each(newFilter.properties, function (propertyName, newValue) {\r\n                            var currentValue = currentFilter.properties[propertyName];\r\n                            // if values are not the same, push to animation options array\r\n                            if (currentValue != newValue) {\r\n                                animationOptions.push({ property: propertyName, from: currentValue, to: newValue });\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n                // animate to new value\r\n                newFilter.animate(animationOptions, duration, easing);\r\n            });\r\n            this.filters.clear();\r\n            this.filters.pushAll(newFilters_1);\r\n        }\r\n        return transition;\r\n    };\r\n    /**\r\n     * Returns `true` if Sprite is currently transiting from one state/value to\r\n     * another.\r\n     *\r\n     * @return {boolean} Is in transition?\r\n     */\r\n    Sprite.prototype.isInTransition = function () {\r\n        return this.animations.length > 0;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"isHover\", {\r\n        /**\r\n         * Returns indicator if this element has a mouse pointer currently hovering\r\n         * over it, or if it has any touch pointers pressed on it.\r\n         *\r\n         * @return {boolean} Is hovered?\r\n         */\r\n        get: function () {\r\n            if (this.isInteractive()) {\r\n                return this.interactions.isHover;\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Indicates if this element has a mouse pointer currently hovering\r\n         * over it, or if it has any touch pointers pressed on it.\r\n         *\r\n         * @param {boolean} value Is hovered?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (value !== this.isHover) {\r\n                if (this.isInteractive()) {\r\n                    this.interactions.isHover = value;\r\n                    if (value) {\r\n                        this.handleOver();\r\n                    }\r\n                    else {\r\n                        this.handleOut();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"isDragged\", {\r\n        /**\r\n         * Returns indicator if this element is being dragged at the moment.\r\n         *\r\n         * @return {boolean} Is dragged?\r\n         */\r\n        get: function () {\r\n            return this._isDragged;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"isDown\", {\r\n        /**\r\n         * @return {boolean} Is down?\r\n         */\r\n        get: function () {\r\n            if (this.isInteractive()) {\r\n                return this.interactions.isDown;\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Indicates if this element has any pointers (mouse or touch) pressing down\r\n         * on it.\r\n         *\r\n         * @param {boolean} value Is down?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.isInteractive() && this.isDown != value) {\r\n                this.interactions.isDown = value;\r\n                if (value) {\r\n                    this.handleDown();\r\n                }\r\n                else {\r\n                    this.handleUp();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"isFocused\", {\r\n        /**\r\n         * @return {boolean} Is focused?\r\n         */\r\n        get: function () {\r\n            if (this.isInteractive()) {\r\n                return this.interactions.isFocused;\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Indicates if this element is focused (possibly by tab navigation).\r\n         *\r\n         * @param {boolean} value Is focused?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.focusable && this.isFocused != value) {\r\n                if (this.isInteractive()) {\r\n                    this.interactions.isFocused = value;\r\n                    if (value === true) {\r\n                        this.handleFocus();\r\n                    }\r\n                    else {\r\n                        this.handleBlur();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"isActive\", {\r\n        /**\r\n         * @return {boolean} Is active?\r\n         */\r\n        get: function () {\r\n            return this._isActive;\r\n        },\r\n        /**\r\n         * Indicates if this element is currently active (toggled on) or not\r\n         * (toggled off).\r\n         *\r\n         * @param {boolean} value Is active?\r\n         */\r\n        set: function (value) {\r\n            this.setActive(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Sprite.prototype.setActive = function (value) {\r\n        value = $type.toBoolean(value);\r\n        if (this._isActive !== value) {\r\n            this._isActive = value;\r\n            if (value && this.states.hasKey(\"active\")) {\r\n                this.setState(\"active\");\r\n                if (this.isHover && this.states.hasKey(\"hoverActive\")) {\r\n                    this.setState(\"hoverActive\");\r\n                }\r\n            }\r\n            else {\r\n                this.applyCurrentState();\r\n            }\r\n            this.dispatchImmediately(\"toggled\");\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"disabled\", {\r\n        /**\r\n         * @return {boolean} Disabled?\r\n         */\r\n        get: function () {\r\n            //if(this._internalDisabled){\r\n            //\treturn true;\r\n            //}\r\n            var current = this.getPropertyValue(\"disabled\");\r\n            if ($type.hasValue(current)) {\r\n                return current;\r\n            }\r\n            else {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.disabled;\r\n                }\r\n                if (this.parent) {\r\n                    return this.parent.disabled;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Controls if element is disabled.\r\n         *\r\n         * A disabled element is hidden, and is removed from any processing, layout\r\n         * calculations, and generally treated as if it does not exist.\r\n         *\r\n         * The element itself is not destroyed, though. Setting this back to `false`,\r\n         * will \"resurrect\" the element.\r\n         *\r\n         * @param {boolean}  value  Disabled?\r\n         */\r\n        set: function (value) {\r\n            this.setDisabled(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Sprite.prototype.setDisabled = function (value) {\r\n        value = $type.toBoolean(value);\r\n        var current = this.getPropertyValue(\"disabled\");\r\n        if (current != value) {\r\n            this.setPropertyValue(\"disabled\", value, true);\r\n            if (value) {\r\n                this.parent = this.parent;\r\n                this.removeFromInvalids();\r\n                this.group.attr({ \"display\": \"none\" });\r\n                this.dispatch(\"disabled\");\r\n            }\r\n            else {\r\n                if (this.parent) {\r\n                    var group = this.parent.element;\r\n                    if (!group.hasChild(this.group)) {\r\n                        group.add(this.group);\r\n                    }\r\n                }\r\n                if (this instanceof Container) {\r\n                    this.deepInvalidate();\r\n                }\r\n                else {\r\n                    this.invalidate();\r\n                }\r\n                if (!this.__disabled) {\r\n                    this.removeSVGAttribute(\"display\");\r\n                }\r\n                this.dispatch(\"enabled\");\r\n            }\r\n            this.dispatch(\"transformed\");\r\n            system.requestFrame();\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"__disabled\", {\r\n        /**\r\n         * @ignore\r\n         * @return {boolean} Disabled?\r\n         */\r\n        get: function () {\r\n            return this._internalDisabled;\r\n        },\r\n        /**\r\n         * Internal disable method.\r\n         *\r\n         * Do not use it for disabling elements. Use `disabled` accessor instead.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {boolean} value Disabled?\r\n         */\r\n        set: function (value) {\r\n            if (this._internalDisabled != value) {\r\n                this._internalDisabled = value;\r\n                this._updateDisabled = true;\r\n                this.invalidatePosition(); // better use this instead of invalidate()\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"numberFormatter\", {\r\n        /**\r\n         * @return {NumberFormatter} A [[NumberFormatter]] instance to be used\r\n         */\r\n        get: function () {\r\n            if (this._numberFormatter) {\r\n                return this._numberFormatter;\r\n            }\r\n            else if (this.virtualParent) {\r\n                return this.virtualParent.numberFormatter;\r\n            }\r\n            else if (this.parent) {\r\n                return this.parent.numberFormatter;\r\n            }\r\n            this._numberFormatter = new NumberFormatter();\r\n            this._numberFormatter.language = this.language;\r\n            return this.numberFormatter;\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * FORMATTERS AND OTHER EXTERNAL HELPERS\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * A [[NumberFormatter]] instance.\r\n         *\r\n         * This is used to format numbers.\r\n         *\r\n         * ```TypeScript\r\n         * chart.numberFormatter.numberFormat = \"#,###.#####\";\r\n         * ```\r\n         * ```JavaScript\r\n         * chart.numberFormatter.numberFormat = \"#,###.#####\";\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"numberFormatter\": {\r\n         *     \"numberFormat\": \"#,###.#####\"\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * You can set a separate instance of formatter for each\r\n         * individual element. However that would be unnecessary overhead as\r\n         * all elements would automatically inherit formatter from their parents,\r\n         * all the way up to the chart itself.\r\n         *\r\n         *\r\n         * @see {@link NumberFormatter} for more info on formatting numbers\r\n         * @param {NumberFormatter}  value  An instance of NumberFormatter\r\n         */\r\n        set: function (value) {\r\n            this._numberFormatter = value;\r\n            this._numberFormatter.language = this.language;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"dateFormatter\", {\r\n        /**\r\n         * @return {DateFormatter} An instance of DateFormatter\r\n         */\r\n        get: function () {\r\n            if (this._dateFormatter) {\r\n                return this._dateFormatter;\r\n            }\r\n            else if (this.virtualParent) {\r\n                return this.virtualParent.dateFormatter;\r\n            }\r\n            else if (this.parent) {\r\n                return this.parent.dateFormatter;\r\n            }\r\n            this._dateFormatter = new DateFormatter();\r\n            this._dateFormatter.language = this.language;\r\n            return this.dateFormatter;\r\n        },\r\n        /**\r\n         * A [[DateFormatter]] instance.\r\n         *\r\n         * This is used to format dates, e.g. on a date axes, balloons, etc.\r\n         *\r\n         * ```TypeScript\r\n         * chart.dateFormatter.dateFormat = \"yyyy-MM-dd\";\r\n         * ```\r\n         * ```JavaScript\r\n         * chart.dateFormatter.dateFormat = \"yyyy-MM-dd\";\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"dateFormatter\": {\r\n         *     \"dateFormat\": \"yyyy-MM-dd\"\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * You can set a separate instance of formatter for each\r\n         * individual element. However that would be unnecessary overhead as\r\n         * all elements would automatically inherit formatter from their parents,\r\n         * all the way up to the chart itself.\r\n         *\r\n         * @see {@link DateFormatter} for more info on dates formatting\r\n         * @param {DateFormatter}  value  An instance of DateFormatter\r\n         */\r\n        set: function (value) {\r\n            this._dateFormatter = value;\r\n            this._dateFormatter.language = this.language;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"durationFormatter\", {\r\n        /**\r\n         * @return {DurationFormatter} An instance of DurationFormatter\r\n         */\r\n        get: function () {\r\n            if (this._durationFormatter) {\r\n                return this._durationFormatter;\r\n            }\r\n            else if (this.virtualParent) {\r\n                return this.virtualParent.durationFormatter;\r\n            }\r\n            else if (this.parent) {\r\n                return this.parent.durationFormatter;\r\n            }\r\n            this._durationFormatter = new DurationFormatter();\r\n            this._durationFormatter.language = this.language;\r\n            return this.durationFormatter;\r\n        },\r\n        /**\r\n         * A [[DurationFormatter]] instance.\r\n         *\r\n         * This is used to format numbers as durations, e.g. on a value axes.\r\n         *\r\n         * You can set a separate instance of formatter for each\r\n         * individual element. However that would be unnecessary overhead as\r\n         * all elements would automatically inherit formatter from their parents,\r\n         * all the way up to the chart itself.\r\n         *\r\n         * @see {@link DurationFormatter} for more info on durations\r\n         * @param {DurationFormatter}  value  An instance of DurationFormatter\r\n         */\r\n        set: function (value) {\r\n            this._durationFormatter = value;\r\n            this._durationFormatter.language = this.language;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"language\", {\r\n        /**\r\n         * @return {Language} An instance of Language\r\n         */\r\n        get: function () {\r\n            var language = this._language.get();\r\n            if (language) {\r\n                return language;\r\n            }\r\n            else if (this.virtualParent) {\r\n                return this.virtualParent.language;\r\n            }\r\n            else if (this.parent) {\r\n                return this.parent.language;\r\n            }\r\n            language = new Language();\r\n            this.language = language;\r\n            return language;\r\n        },\r\n        /**\r\n         * A [[Language]] instance to use for translations.\r\n         *\r\n         * Normally it is enough to set language for the top-most element - chart.\r\n         *\r\n         * All other element child elements will automatically re-use that language\r\n         * object.\r\n         *\r\n         * @param {Language}  value  An instance of Language\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            if (this._language.get() !== value) {\r\n                this._language.set(value, value.events.on(\"localechanged\", function (ev) {\r\n                    if (_this instanceof Container) {\r\n                        _this.deepInvalidate();\r\n                    }\r\n                }));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * ==========================================================================\r\n     * DATA-RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Parses the string for meta tags `{tag}` and replaces them with a real\r\n     * value. Supports straight up tags referring to the field in data, i.e.\r\n     * `{value}` or tags with additional formatting info. E.g.:\r\n     *\r\n     * ```Text\r\n     * {myfield.formatDate(\"yyyy-MM-dd\")}\r\n     * {myfield.formatDate()}\r\n     * {myfield.formatNumber(\"#,####.00\")}\r\n     * {myfield.formatNumber()}\r\n     * {myField.formatDuration(\"mm:ss\")}\r\n     * ```\r\n     *\r\n     * Etc.\r\n     *\r\n     * This method Will automatically detect and use proper formatter for the\r\n     * value.\r\n     *\r\n     * The source value will be looked up in various places: (in order)\r\n     * * Sprite's own `dataItem`\r\n     * * Sprite's properties\r\n     * * Parent's `dataItem`\r\n     * * Parent's properties\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}    string            A string to format\r\n     * @param  {DataItem}  dataItem          DataItem\r\n     * @return {string}                      Formatted string\r\n     */\r\n    Sprite.prototype.populateString = function (string, dataItem) {\r\n        if ($type.hasValue(string)) {\r\n            string = $type.castString(string);\r\n            string = getTextFormatter().escape(string);\r\n            var tags = string.match(/\\{([^}]+)\\}/g);\r\n            var i = void 0;\r\n            if (tags) {\r\n                for (i = 0; i < tags.length; i++) {\r\n                    var tag = tags[i].replace(/\\{([^}]+)\\}/, \"$1\");\r\n                    var value = this.getTagValue(tag, \"\", dataItem);\r\n                    if (!$type.hasValue(value)) {\r\n                        value = \"\";\r\n                    }\r\n                    string = string.split(tags[i]).join(value);\r\n                }\r\n            }\r\n            string = getTextFormatter().unescape(string);\r\n        }\r\n        else {\r\n            string = \"\";\r\n        }\r\n        return this.adapter.apply(\"populateString\", string);\r\n    };\r\n    /**\r\n     * Gets the value from data item and formats it according to specified format.\r\n     *\r\n     * If `format` is specified, it will use its contents to choose formatter for\r\n     * the value. Otherwise it will select formatter accordingly to actual value\r\n     * type.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Ability to force certain formatter on known numeric and date values\r\n     * @see {@link NumberFormatter}\r\n     * @see {@link DateFormatter}\r\n     * @see {@link DurationFormatter}\r\n     * @param  {string}    tagName           Tag name to replace\r\n     * @param  {string}    format            Format to use\r\n     * @param  {DataItem}  dataItem          DataItem\r\n     * @return {string}                      Formatted value\r\n     */\r\n    Sprite.prototype.getTagValue = function (tagName, format, dataItem) {\r\n        var value;\r\n        if (!$type.hasValue(dataItem)) {\r\n            dataItem = this.dataItem;\r\n        }\r\n        // Parse parts\r\n        var parts = [];\r\n        var reg = /([^.]+)\\(([^)]*)\\)|([^.]+)/g;\r\n        ;\r\n        var matches;\r\n        while ((matches = reg.exec(tagName)) !== null) {\r\n            if (matches[3]) {\r\n                // Simple property\r\n                parts.push({\r\n                    prop: matches[3]\r\n                });\r\n            }\r\n            else {\r\n                // Method\r\n                // Parse parameters\r\n                var params = [];\r\n                if ($utils.trim(matches[2]) != \"\") {\r\n                    var reg2 = /'([^']*)'|\"([^\"]*)\"|([0-9\\-]+)/g;\r\n                    var matches2 = void 0;\r\n                    while ((matches2 = reg2.exec(matches[2])) !== null) {\r\n                        params.push(matches2[1] || matches2[2] || matches2[3]);\r\n                    }\r\n                }\r\n                parts.push({\r\n                    method: matches[1],\r\n                    params: params\r\n                });\r\n            }\r\n        }\r\n        // Check if we can retrieve the value from data item\r\n        if (dataItem) {\r\n            // Check values\r\n            value = this.getTagValueFromObject(parts, dataItem.values);\r\n            // Check properties\r\n            if (!$type.hasValue(value) || $type.isObject(value)) { // isObject helps to solve problem with date axis, as for example dateX will get dateX from values object and wont't get to the dateX date.\r\n                value = this.getTagValueFromObject(parts, dataItem);\r\n            }\r\n            // Check data context\r\n            var dataContext = dataItem.dataContext;\r\n            if (!$type.hasValue(value) && dataContext) {\r\n                value = this.getTagValueFromObject(parts, dataItem.dataContext);\r\n                // scond data context level sometimes exist (tree map)\r\n                if (!$type.hasValue(value) && dataContext.dataContext) {\r\n                    value = this.getTagValueFromObject(parts, dataContext.dataContext);\r\n                }\r\n            }\r\n            // Check component's data item\r\n            if (!$type.hasValue(value) && dataItem.component && dataItem.component.dataItem !== dataItem) {\r\n                value = dataItem.component.getTagValue(tagName, format);\r\n            }\r\n        }\r\n        // Check sprite's properties\r\n        if (!$type.hasValue(value)) {\r\n            value = this.getTagValueFromObject(parts, this.populateStringFrom || this);\r\n        }\r\n        // Finally, check the parent\r\n        if (!$type.hasValue(value) && this.parent) {\r\n            value = this.parent.getTagValue(tagName, format);\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Tries to retrieve values from properties of any object, then applies\r\n     * proper formatting to it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (improve)\r\n     * @param  {any[]}   parts   Properties ant methods to access\r\n     * @param  {any}     object  Source object\r\n     * @param  {string}  format  A specific format to apply\r\n     * @return {any}             Formatted value\r\n     */\r\n    Sprite.prototype.getTagValueFromObject = function (parts, object, format) {\r\n        var current = object;\r\n        var formatApplied = false;\r\n        for (var i = 0, len = parts.length; i < len; i++) {\r\n            var part = parts[i];\r\n            if (part.prop) {\r\n                // Regular property\r\n                current = current[part.prop];\r\n                if (!$type.hasValue(current)) {\r\n                    // Not set, return undefined\r\n                    return;\r\n                }\r\n            }\r\n            else {\r\n                // Method\r\n                switch (part.method) {\r\n                    case \"formatNumber\":\r\n                        var numberValue = $utils.anyToNumber(current);\r\n                        if ($type.hasValue(numberValue)) {\r\n                            current = this.numberFormatter.format(numberValue, format || part.params[0] || undefined);\r\n                            formatApplied = true;\r\n                        }\r\n                        break;\r\n                    case \"formatDate\":\r\n                        var dateValue = $utils.anyToDate(current);\r\n                        if (!$type.isDate(dateValue) || $type.isNaN(dateValue.getTime())) {\r\n                            // Was not able to get date out of value, quitting and letting\r\n                            // calling method try another value\r\n                            return;\r\n                        }\r\n                        if ($type.hasValue(dateValue)) {\r\n                            current = this.dateFormatter.format(dateValue, format || part.params[0] || undefined);\r\n                            formatApplied = true;\r\n                        }\r\n                        break;\r\n                    case \"formatDuration\":\r\n                        var durationValue = $utils.anyToNumber(current);\r\n                        if ($type.hasValue(durationValue)) {\r\n                            current = this.durationFormatter.format(durationValue, format || part.params[0] || undefined, part.params[1] || undefined);\r\n                            formatApplied = true;\r\n                        }\r\n                        break;\r\n                    case \"urlEncode\":\r\n                    case \"encodeURIComponent\":\r\n                        current = encodeURIComponent(current);\r\n                        break;\r\n                    default:\r\n                        if (current[part.method]) {\r\n                            current[part.method].apply(this, part.params);\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        // Apply default format if it wasn't applied explicitly\r\n        if (!formatApplied) {\r\n            var formatParts = [{\r\n                    method: \"\",\r\n                    params: format\r\n                }];\r\n            if (!$type.hasValue(format)) {\r\n                // Format is not set\r\n                // Determine from the type of the value\r\n                if ($type.isNumber(current)) {\r\n                    formatParts[0].method = \"formatNumber\";\r\n                    formatParts[0].params = \"\";\r\n                }\r\n                else if ($type.isDate(current)) {\r\n                    formatParts[0].method = \"formatDate\";\r\n                    formatParts[0].params = \"\";\r\n                }\r\n            }\r\n            else {\r\n                // Format set\r\n                // Try to determine formatter based on the format\r\n                var formatterType = $utils.getFormat(format);\r\n                // format\r\n                if (formatterType === $strings.NUMBER) {\r\n                    formatParts[0].method = \"formatNumber\";\r\n                }\r\n                else if (formatterType === $strings.DATE) {\r\n                    formatParts[0].method = \"formatDate\";\r\n                }\r\n                else if (formatterType === $strings.DURATION) {\r\n                    formatParts[0].method = \"formatDuration\";\r\n                }\r\n            }\r\n            // Apply format\r\n            if (formatParts[0].method) {\r\n                current = this.getTagValueFromObject(formatParts, current);\r\n            }\r\n        }\r\n        return current;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"dataItem\", {\r\n        /**\r\n         * @return {this} [[DataItem]]\r\n         */\r\n        get: function () {\r\n            if (!this._dataItem) {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.dataItem;\r\n                }\r\n                if (this.parent) {\r\n                    return this.parent.dataItem;\r\n                }\r\n            }\r\n            return this._dataItem;\r\n        },\r\n        /**\r\n         * A [[DataItem]] to use as element's data source.\r\n         *\r\n         * @todo Review type\r\n         * @param {this[\"_dataItem\"]}  dataItem  DataItem\r\n         */\r\n        set: function (dataItem) {\r\n            //an not use this[\"_dataItem\"] here, as we return parent data item if this sprite doesn't have one.\r\n            // @todo:think about it\r\n            this.setDataItem(dataItem);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets currently used [[DataItem]].\r\n     *\r\n     * If the element has also `configField` set, it will also look for any\r\n     * config in DataItem's data context to apply to this element.\r\n     *\r\n     * @param {DataItem} dataItem DataItem\r\n     */\r\n    Sprite.prototype.setDataItem = function (dataItem) {\r\n        var _this = this;\r\n        if (this._dataItem != dataItem) {\r\n            this._dataItem = dataItem;\r\n            if (this.configField) {\r\n                if (dataItem.dataContext) {\r\n                    this.config = dataItem.dataContext[this.configField];\r\n                }\r\n            }\r\n            var dataContext_1 = dataItem.dataContext;\r\n            if (dataContext_1) {\r\n                $object.each(this.propertyFields, function (propertyName, fieldValue) {\r\n                    if ($type.hasValue(dataContext_1[fieldValue])) {\r\n                        var anyThis = _this;\r\n                        anyThis[propertyName] = dataContext_1[fieldValue];\r\n                    }\r\n                });\r\n            }\r\n            this.invalidate();\r\n        }\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * PROPERTY UTILITIES\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Returns element's property value.\r\n     *\r\n     * Will check if there are any bindings with [[DataItem]].\r\n     *\r\n     * Will also apply any adapters bound to `propertyName`.\r\n     *\r\n     * @param  {ISpriteProperties}  propertyName  Property name\r\n     * @return {any}                              Property value\r\n     */\r\n    Sprite.prototype.getPropertyValue = function (propertyName) {\r\n        var propValue = this.properties[propertyName];\r\n        // Apply adapter\r\n        // @todo get rid of <any>\r\n        if (!this._isTemplate) {\r\n            propValue = this.adapter.apply(propertyName, propValue);\r\n        }\r\n        return propValue;\r\n    };\r\n    Sprite.prototype.setColorProperty = function (property, value, invalidate) {\r\n        var currentValue = this.properties[property];\r\n        if (value instanceof Color && currentValue instanceof Color && value.hex == currentValue.hex) {\r\n            return false;\r\n        }\r\n        else {\r\n            return this.setPropertyValue(property, value, invalidate);\r\n        }\r\n    };\r\n    Sprite.prototype.setPercentProperty = function (property, value, invalidate, transform, precision, floor) {\r\n        value = $type.toNumberOrPercent(value);\r\n        if ($type.isNumber(value)) {\r\n            value = $math.round(value, precision, floor);\r\n            return this.setPropertyValue(property, value, invalidate, transform);\r\n        }\r\n        else {\r\n            var currentValue = this.properties[property];\r\n            if (value instanceof Percent && currentValue instanceof Percent && value.value == currentValue.value) {\r\n                return false;\r\n            }\r\n            else {\r\n                return this.setPropertyValue(property, value, invalidate, transform);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets elements's property value. Will also propagate the same property value\r\n     * on all element's clones.\r\n     *\r\n     * @param  {this[\"_properties\"]}  property    Property\r\n     * @param  {any}                  value       Value\r\n     * @param  {boolean}              invalidate  Should the sprite be invalidated, cause it's re-rendering\r\n     * @param  {boolean}              transform   Re-apply positioning of the element\r\n     * @return {boolean}                          Did the value change? It will return `true` if the new value and the old value of the property are not the same\r\n     * @todo Review propagation to clones. Right now we simply check if clone is disposed before setting the same property on it. It's better to remove from clone list altogether.\r\n     */\r\n    Sprite.prototype.setPropertyValue = function (property, value, invalidate, transform) {\r\n        var currentValue = this.properties[property];\r\n        if (this.properties[property] !== value) {\r\n            this.properties[property] = value;\r\n            if (this.events.isEnabled(\"propertychanged\")) {\r\n                var event_1 = {\r\n                    type: \"propertychanged\",\r\n                    target: this,\r\n                    property: property\r\n                };\r\n                this.events.dispatchImmediately(\"propertychanged\", event_1);\r\n            }\r\n            if (invalidate) {\r\n                this.invalidate();\r\n            }\r\n            if (transform) {\r\n                this.invalidatePosition();\r\n            }\r\n            if (this.applyOnClones) {\r\n                var clones = this.clones.values;\r\n                var length_2 = clones.length;\r\n                for (var i = 0; i < length_2; ++i) {\r\n                    var clone = clones[i];\r\n                    if (!clone.isDisposed()) {\r\n                        //(<Sprite>clone).setPropertyValue(<any>property, value, invalidate, transform);\r\n                        clone[property] = value;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Sprite.prototype.bind = function (property, source, bindToProperty, modifier) {\r\n        var _this = this;\r\n        if (bindToProperty === void 0) { bindToProperty = property; }\r\n        if ($type.hasValue(this._bindings[property])) {\r\n            this._bindings[property].dispose();\r\n        }\r\n        // set current value\r\n        this[property] = source[bindToProperty];\r\n        //source.addEventListener(AMEvent.PROPERTY_CHANGED, this.handleBindings, false, this);\r\n        this._bindings[property] = source.events.on(\"propertychanged\", function (event) {\r\n            if (event.property === bindToProperty) {\r\n                var value = source[bindToProperty];\r\n                if (modifier) {\r\n                    value = modifier(value);\r\n                }\r\n                // TODO clonesById\r\n                _this[property] = value;\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Sets up and obeserver function to monitor changes in particular property\r\n     * or properties.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param   {string | string[]}  property  Element's property name\r\n     * @param   {function}           listener  Handler function\r\n     * @param   {C}                  context   Context for handler function\r\n     * @returns {IDisposer}                    Event Disposer\r\n     */\r\n    Sprite.prototype.observe = function (property, listener, context) {\r\n        var _this = this;\r\n        return new MultiDisposer($array.map($array.toArray(property), function (prop) {\r\n            return _this.events.on(\"propertychanged\", function (e) {\r\n                if (e.property === prop) {\r\n                    listener.call(context, e);\r\n                }\r\n            });\r\n        }));\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * ACCESSIBILITY-RELATED PROPERTIES\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Applies accessibility to the SVG element.\r\n     *\r\n     * Adds `<title>` and `<description>` elements as well as `aria-labelledby`\r\n     * and `role` properties.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.applyAccessibility = function () {\r\n        // Check if we need to add label and description\r\n        var title = this.readerTitle, description = this.readerDescription, role = this.role, hidden = this.readerHidden, checked = this.readerChecked, controls = this.readerControls, live = this.readerLive;\r\n        // Init label/describe ids\r\n        var labelledByIds = [], describedByIds = [];\r\n        var labelledBy = this.readerLabelledBy;\r\n        if (labelledBy) {\r\n            labelledByIds.push(labelledBy);\r\n        }\r\n        var describedBy = this.readerDescribedBy;\r\n        if (describedBy) {\r\n            describedByIds.push(describedBy);\r\n        }\r\n        // If we have only label, we use `aria-label` attribute.\r\n        // If there are both label and description, we'll go with separate tags and\r\n        // use `aria-labelledby`\r\n        if (title && !description && !this.showSystemTooltip) {\r\n            // Only label is set, use attribute\r\n            this.setSVGAttribute({\r\n                \"aria-label\": title\r\n            });\r\n            // Remove previous elements\r\n            this.removeSVGAttribute(\"aria-description\");\r\n            if (this._titleElement) {\r\n                this.group.removeElement(this._titleElement);\r\n                this._titleElement = undefined;\r\n            }\r\n            if (this._descriptionElement) {\r\n                this.group.removeElement(this._descriptionElement);\r\n                this._descriptionElement = undefined;\r\n            }\r\n        }\r\n        else {\r\n            if (title) {\r\n                var titleElement = this.titleElement;\r\n                var titleId = this.uid + \"-title\";\r\n                if (titleElement.node.textContent != title) {\r\n                    titleElement.node.textContent = title;\r\n                    titleElement.attr({ id: titleId });\r\n                }\r\n                labelledByIds.push(titleId);\r\n            }\r\n            else if (this._titleElement) {\r\n                this.group.removeElement(this._titleElement);\r\n                this._titleElement = undefined;\r\n            }\r\n            if (description) {\r\n                var descriptionElement = this.descriptionElement;\r\n                var descriptionId = this.uid + \"-description\";\r\n                if (descriptionElement.node.textContent != description) {\r\n                    descriptionElement.node.textContent = description;\r\n                    descriptionElement.attr({ id: descriptionId });\r\n                }\r\n                labelledByIds.push(descriptionId);\r\n            }\r\n            else if (this._descriptionElement) {\r\n                this.group.removeElement(this._descriptionElement);\r\n                this._descriptionElement = undefined;\r\n            }\r\n        }\r\n        // Add label and described properties\r\n        if (labelledByIds.length) {\r\n            this.setSVGAttribute({ \"aria-labelledby\": labelledByIds.join(\" \") });\r\n        }\r\n        if (describedByIds.length) {\r\n            this.setSVGAttribute({ \"aria-describedby\": describedByIds.join(\" \") });\r\n        }\r\n        // Apply role\r\n        if (role) {\r\n            this.setSVGAttribute({ \"role\": role });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"role\");\r\n        }\r\n        // Apply aria-hidden\r\n        if (hidden) {\r\n            this.setSVGAttribute({ \"aria-hidden\": \"true\" });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-hidden\");\r\n        }\r\n        // Apply aria-checked\r\n        if (checked) {\r\n            this.setSVGAttribute({ \"aria-checked\": \"true\" });\r\n        }\r\n        else if (checked === false) {\r\n            this.setSVGAttribute({ \"aria-checked\": \"false\" });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-checked\");\r\n        }\r\n        // Apply aria-controls\r\n        if (controls) {\r\n            this.setSVGAttribute({ \"aria-controls\": controls });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-controls\");\r\n        }\r\n        // Apply aria-live\r\n        if (live) {\r\n            this.setSVGAttribute({ \"aria-live\": live });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-live\");\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"readerTitle\", {\r\n        /**\r\n         * @return {string} Title\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerTitle\");\r\n        },\r\n        /**\r\n         * Screen reader title of the element.\r\n         *\r\n         * @param {string} value Title\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"readerTitle\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerDescription\", {\r\n        /**\r\n         * @return {string} Description\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerDescription\");\r\n        },\r\n        /**\r\n         * Screen reader description of the element.\r\n         *\r\n         * @param {string} value Description\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"readerDescription\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"role\", {\r\n        /**\r\n         * @return {Roles} Role\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"role\");\r\n        },\r\n        /**\r\n         * A WAI-ARIA role for the element.\r\n         *\r\n         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#role_definitions} for more information on WAI-ARIA roles\r\n         * @param {Roles}  value  Role\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"role\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerHidden\", {\r\n        /**\r\n         * @return {boolean} Hidden?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerHidden\");\r\n        },\r\n        /**\r\n         * Controls if element should be hidden from screen readers.\r\n         *\r\n         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-hidden} for more information\r\n         * @param {boolean}  value  Hidden?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"readerHidden\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerChecked\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {boolean} Checked?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerChecked\");\r\n        },\r\n        /**\r\n         * Controls if element is currently marked as \"checked\".\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-checked} for more information\r\n         * @param {boolean} value Checked?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"readerChecked\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerControls\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {string} Setting value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerControls\");\r\n        },\r\n        /**\r\n         * A `uid` of an element this element controls.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-controls} for more information\r\n         * @param {string} value Setting value\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"readerControls\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerLive\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {AriaLive} Setting value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerLive\");\r\n        },\r\n        /**\r\n         * Controls accessibility setting \"aria-live\" for the element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @see {@link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions} for more information\r\n         * @param {AriaLive} value Setting value\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"readerLive\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerLabelledBy\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {Sprite} Target element\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerLabelledBy\");\r\n        },\r\n        /**\r\n         * A `uid` of an element that describes this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby} for more information\r\n         * @param {Sprite} value Target element\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"readerLabelledBy\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerDescribedBy\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {Sprite} Target element\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerDescribedBy\");\r\n        },\r\n        /**\r\n         * A `uid` of an element that describes this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-describedby} for more information\r\n         * @param {Sprite} value Target element\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"readerDescribedBy\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"keyboardOptions\", {\r\n        /**\r\n         * ==========================================================================\r\n         * USER INTERACTIONS\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns elements keyboard options.\r\n         *\r\n         * @return {IKeyboardOptions} Keyboard options\r\n         */\r\n        get: function () {\r\n            if (!this.interactions.keyboardOptions) {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.keyboardOptions;\r\n                }\r\n                if (this.parent) {\r\n                    return this.parent.keyboardOptions;\r\n                }\r\n            }\r\n            return this.interactions.keyboardOptions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"interactions\", {\r\n        /**\r\n         * Returns (creates if necessary) an [[InteractionObject]] associated with\r\n         * this element.\r\n         *\r\n         * [[InteractionObject]] is used to attach all kinds of user-interactions to\r\n         * the element, e.g. click/touch, dragging, hovering, and similar events.\r\n         *\r\n         * @return {InteractionObject} Interaction object\r\n         */\r\n        get: function () {\r\n            if (!this._interaction) {\r\n                var interaction = getInteraction().getInteraction(this.dom);\r\n                this._interaction = interaction;\r\n                this._interaction.clickable = this.clickable;\r\n                this._interaction.hoverable = this.hoverable;\r\n                this._interaction.trackable = this.trackable;\r\n                this._interaction.draggable = this.draggable;\r\n                this._interaction.swipeable = this.swipeable;\r\n                this._interaction.resizable = this.resizable;\r\n                this._interaction.wheelable = this.wheelable;\r\n                this._interaction.inert = this.inert;\r\n                this._interaction.sprite = this;\r\n                this._disposers.push(this._interaction);\r\n            }\r\n            return this._interaction;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns true if interactions object was created. Mostly used just to avoid creating interactions object if not needed.\r\n     * @return {boolean} Is Sprite interactive?\r\n     */\r\n    Sprite.prototype.isInteractive = function () {\r\n        if (this._interaction) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"focusable\", {\r\n        /**\r\n         * @return {Optional<boolean>} Can element be focused?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"focusable\");\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * ELEMENT FOCUS-RELATED STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Controls if the element can gain focus.\r\n         *\r\n         * Focusable element will be selectable via TAB key.\r\n         *\r\n         * Please note, clicking it with a mouse or touching will not add focus to\r\n         * it.\r\n         *\r\n         * Focused element will show a system-specific highlight, which might ruin\r\n         * the overal look. This is why we don't focus element on click/touch.\r\n         *\r\n         * A default setting varies for different elements. By default all elements\r\n         * are not focusable, except certain items like buttons, legend items, etc.\r\n         *\r\n         * @default undefined (auto)\r\n         * @param {Optional<boolean>}  value  Can element be focused?\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"focusable\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                }\r\n                else {\r\n                    this.interactions.focusable = value;\r\n                    if (value) {\r\n                        this.setSVGAttribute({ \"focusable\": value });\r\n                    }\r\n                    else {\r\n                        this.removeSVGAttribute(\"focusable\");\r\n                    }\r\n                    // Set focus events that would apply \"focus\" state\r\n                    // setEventDisposer will also remove listeners if value == false\r\n                    this.interactions.setEventDisposer(\"sprite-focusable\", value, function () { return new MultiDisposer([\r\n                        _this.events.on(\"blur\", _this.handleBlur, _this, false),\r\n                        _this.events.on(\"focus\", _this.handleFocus, _this, false)\r\n                    ]); });\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Applies filters (if set) when element gains focus.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AMEvent<Sprite, ISpriteEvents>[\"focus\"]} ev Original event\r\n     */\r\n    Sprite.prototype.handleFocus = function (ev) {\r\n        if (this.focusable) {\r\n            if (this.topParent) {\r\n                this.topParent.hasFocused = true;\r\n            }\r\n            if (this.focusFilter) {\r\n                // Any `filters` manipulation will trigger `applyFilters()` so we don't\r\n                // need to call it here\r\n                this.filters.push(this.focusFilter);\r\n            }\r\n            if (this.hoverOnFocus) {\r\n                // Trigger a hover event as well\r\n                this.isHover = true;\r\n                this.handleOver();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Removes focus filter (if set) when elementloses focus.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AMEvent<Sprite, ISpriteEvents>[\"blur\"]} ev Original event\r\n     */\r\n    Sprite.prototype.handleBlur = function (ev) {\r\n        if (this.focusable) {\r\n            if (this.topParent) {\r\n                this.topParent.hasFocused = false;\r\n            }\r\n            if (this.focusFilter) {\r\n                // Any `filters` manipulation will trigger `applyFilters()` so we don't\r\n                // need to call it here\r\n                this.filters.removeValue(this.focusFilter);\r\n            }\r\n            if (this.hoverOnFocus) {\r\n                // Trigger a out event as well\r\n                this.isHover = false;\r\n                this.handleOut();\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"focusFilter\", {\r\n        /**\r\n         * A reference to a [[Filter]] to apply to element when it gains focus.\r\n         *\r\n         * Normally, browsers will draw a default ugly square around focused element,\r\n         * which totally makes sense because its purpose is to help identify active\r\n         * element for visually impaired people.\r\n         *\r\n         * However, if you would rather apply a filter, so you can modify how focused\r\n         * element looks like, use `focusFilter`.\r\n         *\r\n         * Simply set it to an anstance of [[FocusFilter]], or any other filter\r\n         * object.\r\n         *\r\n         * ```TypeScript\r\n         * chart.focusFilter = new am4core.FocusFilter();\r\n         * ```\r\n         * ```JavaScript\r\n         * chart.focusFilter = new am4core.FocusFilter();\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"focusFilter\": {\r\n         *     \"type\": \"FocusFilter\"\r\n         *   },\r\n         *   // ...\r\n         * }\r\n         * ```\r\n         *\r\n         * @see {@link Filter}\r\n         * @ignore Exclude from docs\r\n         * @return {Optional<Filter>} Focused element filter\r\n         * @todo This is still experimental, use at your own risk.\r\n         */\r\n        get: function () {\r\n            /*if (!this._focusFilter) {\r\n                this._focusFilter = new FocusFilter();\r\n                this._disposers.push(this._focusFilter);\r\n            }*/\r\n            //return this._focusFilter;\r\n            var focusFilter = this._focusFilter;\r\n            if (focusFilter) {\r\n                return focusFilter;\r\n            }\r\n            if (this.virtualParent) {\r\n                return this.virtualParent.focusFilter;\r\n            }\r\n            else if (this.parent) {\r\n                return this.parent.focusFilter;\r\n            }\r\n            //this._focusFilter = new FocusFilter();\r\n            //this._disposers.push(this._focusFilter);\r\n        },\r\n        /**\r\n         * @see {@link Filter}\r\n         * @ignore Exclude from docs\r\n         * @todo This is still experimental, don't use it\r\n         */\r\n        set: function (value) {\r\n            this._focusFilter = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"hoverOnFocus\", {\r\n        /**\r\n         * @return {boolean} Trigger hover on focus?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"hoverOnFocus\");\r\n        },\r\n        /**\r\n         * If set to `true`, this element will also trigger `\"over\"` event with all\r\n         * the related consequences, like \"hover\" state being applied and tooltip\r\n         * being shown.\r\n         *\r\n         * Useful as an accessibility feature to display rollover tooltips on items\r\n         * selected via keyboard.\r\n         *\r\n         * @param {boolean}  value  Trigger hover on focus?\r\n         * @default false\r\n         */\r\n        set: function (value) {\r\n            if (value !== this.hoverOnFocus) {\r\n                this.setPropertyValue(\"hoverOnFocus\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tabindex\", {\r\n        /**\r\n         * Returns current TAB index for focusable item.\r\n         *\r\n         * @return {number} TAB index\r\n         */\r\n        get: function () {\r\n            var index = this._tabindex;\r\n            if (index != null) {\r\n                return index;\r\n            }\r\n            else if (this.virtualParent) {\r\n                return this.virtualParent.tabindex;\r\n            }\r\n            else if (this.parent) {\r\n                return this.parent.tabindex;\r\n            }\r\n        },\r\n        /**\r\n         * Sets TAB index.\r\n         *\r\n         * Tab index maintains the order in which focusable elements gain focus when\r\n         * TAB key is pressed.\r\n         *\r\n         * Please note, tab index is not local to the chart. It affects the whole\r\n         * of the page, including non-SVG elements. Maintain extreme causion when\r\n         * setting tab indexes, as it affects the user experience for the whole\r\n         * web page.\r\n         *\r\n         * @param {number} value TAB index\r\n         */\r\n        set: function (value) {\r\n            value = $type.toNumber(value);\r\n            if (this.setPropertyValue(\"tabindex\", value) && $type.isNumber(value)) {\r\n                this.interactions.tabindex = value;\r\n                this.setSVGAttribute({ \"tabindex\": value });\r\n                if (value > -1) {\r\n                    this.focusable = true;\r\n                }\r\n                else {\r\n                    this.focusable = undefined;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"inertiaOptions\", {\r\n        /**\r\n         * ==========================================================================\r\n         * DRAGGING AND RELATED STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns element's options to be used for inertia. This setting is\r\n         * inheritable, meaning that if not set directly, it will search in all its\r\n         * ascendants until very top.\r\n         *\r\n         * Inertia is used only if element's `inert` is set to `true`.\r\n         *\r\n         * \"Inert\" element, when dragged and released, will carry the momentum of the\r\n         * movement, and will continue moving in the same drag direction, gradually\r\n         * reducing in speed until finally stops.\r\n         *\r\n         * Check [[IInertiaOptions]] for how you tweak inertia animations.\r\n         *\r\n         * @return {Dictionary<InertiaTypes, IInertiaOptions>} Inertia options\r\n         */\r\n        get: function () {\r\n            if (!this.interactions.inertiaOptions) {\r\n                if (this.parent) {\r\n                    return this.parent.inertiaOptions;\r\n                }\r\n            }\r\n            return this.interactions.inertiaOptions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"draggable\", {\r\n        /**\r\n         * @return {boolean} `true` if element can be dragged\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"draggable\");\r\n        },\r\n        /**\r\n         * Controls if the element is draggable.\r\n         *\r\n         * @param {boolean}  value  `true` if element can be dragged\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"draggable\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                }\r\n                else {\r\n                    this.applyCursorStyle();\r\n                    this.interactions.draggable = value;\r\n                    //interaction.processDraggable(this);\r\n                    // Add events\r\n                    // @todo Maybe attach to InteractionObject's multidisposer so that\r\n                    // sprites events get disposed together with them?\r\n                    // this.interactions.disposers.getItem(\"movable\")\r\n                    // setEventDisposer will also remove listeners if value == false\r\n                    this.interactions.setEventDisposer(\"sprite-draggable\", value, function () { return new MultiDisposer([\r\n                        _this.events.on(\"down\", _this.handleDown, _this, false),\r\n                        _this.events.on(\"dragstart\", _this.handleDragStart, _this, false),\r\n                        _this.events.on(\"drag\", _this.handleDragMove, _this, false),\r\n                        _this.events.on(\"dragstop\", _this.handleDragStop, _this, false)\r\n                    ]); });\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Executes when dragged element is being started to drag.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.handleDragStart = function () {\r\n        this.interactions.originalPosition = {\r\n            x: this.pixelX,\r\n            y: this.pixelY\r\n        };\r\n        this._isDragged = true;\r\n        this.hideTooltip(0);\r\n    };\r\n    /**\r\n     * Tell this element to start being dragged. This is useful if you want to\r\n     * drag items by interactions performed not directly on the target element.\r\n     *\r\n     * Parameter `pointer` is highly recommended. By passing in the Pointer you\r\n     * will ensure that movement is tracked for the pointer that you want. If not\r\n     * supplied, the system will try to determine the most logical pointer.\r\n     *\r\n     * However this may fail if you have more than one pointer active, which\r\n     * might happen if you have several objects being dragged on a touch device.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IPointer} pointer Pointer to use for movement\r\n     */\r\n    Sprite.prototype.dragStart = function (pointer) {\r\n        //this.dragStop(pointer);\r\n        //this.draggable = true;\r\n        this._isDragged = true;\r\n        getInteraction().dragStart(this.interactions, pointer);\r\n    };\r\n    /**\r\n     * Executes when dragged element is being dropped.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.handleDragStop = function () {\r\n        this._isDragged = false;\r\n        this.showTooltip();\r\n        this.interactions.originalPosition = undefined;\r\n    };\r\n    /**\r\n     * Stops manually initiated dragging of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IPointer} pointer Pointer to use as a reference\r\n     */\r\n    Sprite.prototype.dragStop = function (pointer) {\r\n        //this.draggable = false;\r\n        this._isDragged = false;\r\n        getInteraction().dragStop(this.interactions, pointer);\r\n        //this.handleDragStop();\r\n    };\r\n    /**\r\n     * Executes when {Sprite} is being dragged.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionEvent} ev Event object\r\n     * @todo Implement parent position offset calculation\r\n     */\r\n    Sprite.prototype.handleDragMove = function (ev) {\r\n        var point = this.interactions.originalPosition;\r\n        if (point) {\r\n            var globalScale = this.parent.globalScale * this.svgContainer.cssScale;\r\n            this.moveTo({ x: point.x + ev.shift.x / globalScale, y: point.y + ev.shift.y / globalScale }, undefined, undefined, true);\r\n            //this.dispatchImmediately(\"drag\", ev);\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"inert\", {\r\n        /**\r\n         * @return {boolean} `true` if element should use inertia when animated\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"inert\");\r\n        },\r\n        /**\r\n         * Controls if the element should use inertia when interacted with.\r\n         *\r\n         * \"Inert\" element, when dragged and released, will carry the momentum of the\r\n         * movement, and will continue moving in the same drag direction, gradually\r\n         * reducing in speed until finally stops.\r\n         *\r\n         * @default false\r\n         * @param {boolean} value `true` if element should use inertia when animated\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"inert\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.interactions.inert = value;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"hoverOptions\", {\r\n        /**\r\n         * ==========================================================================\r\n         * HOVERING\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns Sprite's hover options.\r\n         *\r\n         * @see {@link IHoverOptions} for available options.\r\n         * @return {IHoverOptions} Options\r\n         */\r\n        get: function () {\r\n            if (!this.interactions.hoverOptions) {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.hoverOptions;\r\n                }\r\n                if (this.parent) {\r\n                    return this.parent.hoverOptions;\r\n                }\r\n            }\r\n            return this.interactions.hoverOptions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"hoverable\", {\r\n        /**\r\n         * @return {boolean} `true` if element is hoverable\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"hoverable\");\r\n        },\r\n        /**\r\n         * Controls if the element is hoverable (hover events are registered).\r\n         *\r\n         * Use `over` and `out` events, to watch for those respective actions.\r\n         *\r\n         * @default false\r\n         * @param {boolean} value `true` if element can be hovered\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"hoverable\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.applyCursorStyle();\r\n                    this.interactions.hoverable = value;\r\n                    // setEventDisposer will also remove listeners if value == false\r\n                    this.interactions.setEventDisposer(\"sprite-hoverable\", value, function () { return new MultiDisposer([\r\n                        _this.events.on(\"over\", _this.handleOver, _this, false),\r\n                        _this.events.on(\"out\", _this.handleOut, _this, false),\r\n                    ]); });\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Handles tasks when element becomes hovered:\r\n     * * Shows [[Tooltip]] if applicable\r\n     * * Applies \"hover\" state\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AMEvent<Sprite, ISpriteEvents>[\"over\"]} ev Event object\r\n     */\r\n    Sprite.prototype.handleOver = function (ev) {\r\n        if (this._outTimeout) {\r\n            this._outTimeout.dispose();\r\n        }\r\n        if (this.isHover) {\r\n            if (this.states.hasKey(\"hover\")) {\r\n                //this.setState(\"hover\");\r\n                // This will check `isHover` and will set \"hover\" state\r\n                if (!this.isHidden) {\r\n                    this.applyCurrentState();\r\n                }\r\n            }\r\n            var point = void 0;\r\n            if (ev && ev.pointer) {\r\n                point = $utils.documentPointToSvg(ev.pointer.point, this.svgContainer.SVGContainer, this.svgContainer.cssScale);\r\n            }\r\n            this.showTooltip(point);\r\n        }\r\n        else {\r\n            this.hideTooltip();\r\n            if (!this.isHidden && this.states.hasKey(\"hover\")) {\r\n                this.applyCurrentState();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Handles tasks when element loses hover:\r\n     *\r\n     * * Hides [[Tooltip]]\r\n     * * Applies default state\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AMEvent<Sprite, ISpriteEvents>[\"out\"]} ev [description]\r\n     */\r\n    Sprite.prototype.handleOut = function (ev) {\r\n        this.hideTooltip();\r\n        this._outTimeout = this.setTimeout(this.handleOutReal.bind(this), this.rollOutDelay);\r\n    };\r\n    /**\r\n     * [handleOutReal description]\r\n     *\r\n     * @ignore\r\n     * @todo description\r\n     */\r\n    Sprite.prototype.handleOutReal = function () {\r\n        if (!this.isHidden && !this.isHiding && this.states.hasKey(\"hover\")) {\r\n            this.applyCurrentState();\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"hitOptions\", {\r\n        /**\r\n         * ==========================================================================\r\n         * CLICKING/TAPPING AND TOGGLING STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns Sprite's click (hit) options.\r\n         *\r\n         * Click (hit) options control things like double-click, timeouts, etc.\r\n         *\r\n         * @see {@link IHitOptions} for available options.\r\n         * @return {IHitOptions} Options\r\n         */\r\n        get: function () {\r\n            if (!this.interactions.hitOptions) {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.hitOptions;\r\n                }\r\n                if (this.parent) {\r\n                    return this.parent.hitOptions;\r\n                }\r\n            }\r\n            return this.interactions.hitOptions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Prepares element's after `down` event.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AMEvent<Sprite, ISpriteEvents>[\"down\"]} ev Event\r\n     */\r\n    Sprite.prototype.handleDown = function (ev) {\r\n        if (this.interactions.downPointers.length === 1) {\r\n            this.interactions.originalPosition = {\r\n                x: this.pixelX,\r\n                y: this.pixelY\r\n            };\r\n            this.interactions.originalAngle = this.rotation;\r\n            this.interactions.originalScale = this.scale;\r\n            if (this.states.hasKey(\"down\")) {\r\n                this.setState(\"down\");\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Prepares element's after `up` event.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AMEvent<Sprite, ISpriteEvents>[\"up\"]} ev Event\r\n     */\r\n    Sprite.prototype.handleUp = function (ev) {\r\n        /*if (!this.isDown) {\r\n            this.interactions.originalPosition = null;\r\n            this.interactions.originalAngle = null;\r\n            this.interactions.originalScale = null;\r\n        }*/\r\n        if (this.states.hasKey(\"down\")) {\r\n            this.applyCurrentState();\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"clickable\", {\r\n        /**\r\n         * @return {boolean}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"clickable\");\r\n        },\r\n        /**\r\n         * Indicates if the element is clickable.\r\n         *\r\n         * Some type of the elements, like buttons are clickable by default.\r\n         *\r\n         * Most of the elements are not clickable by default.\r\n         *\r\n         * Use `hit`, `doublehit`, `up`, `down`, `toggled` events to watch for\r\n         * respective click/touch actions.\r\n         *\r\n         * @param {boolean} value `true` if element can be clicked\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"clickable\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.applyCursorStyle();\r\n                    this.interactions.clickable = value;\r\n                    // setEventDisposer will also remove listeners if value == false\r\n                    this.interactions.setEventDisposer(\"sprite-clickable\", value, function () { return new MultiDisposer([\r\n                        _this.events.on(\"down\", _this.handleDown, _this, false),\r\n                        _this.events.on(\"up\", _this.handleUp, _this, false)\r\n                    ]); });\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"togglable\", {\r\n        /**\r\n         * @return {boolean} Is togglable?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"togglable\");\r\n        },\r\n        /**\r\n         * Indicates if element can be toggled on and off by subsequent clicks/taps.\r\n         *\r\n         * Togglable element will alternate its `isActive` property between `true`\r\n         * and `false` with each click.\r\n         *\r\n         * @param {boolean} value Is togglable?\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"togglable\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                    // void\r\n                }\r\n                else {\r\n                    // setEventDisposer will also remove listeners if value == false\r\n                    this.interactions.setEventDisposer(\"sprite-togglable\", value, function () { return _this.events.on(\"hit\", _this.handleToggle, _this, false); });\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Handles toggling of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AMEvent<Sprite, ISpriteEvents>[\"hit\"]} ev Event\r\n     */\r\n    Sprite.prototype.handleToggle = function (ev) {\r\n        this.isActive = !this.isActive;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"url\", {\r\n        /**\r\n         * @return {Optional<string>} URL\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"url\");\r\n        },\r\n        /**\r\n         * Click-through URL for this element.\r\n         *\r\n         * If set, clicking/tapping this element will open the new URL in a target\r\n         * window/tab as set by `urlTarget`.\r\n         *\r\n         * Please note that URL will be parsed by data placeholders in curly\r\n         * brackets, to be populated from data. E.g.:\r\n         *\r\n         * ```TypeScript\r\n         * series.columns.template.url = \"https://www.google.com/search?q={category.urlEncode()}\";\r\n         * ```\r\n         * ```JavaScript\r\n         * series.columns.template.url = \"https://www.google.com/search?q={category.urlEncode()}\";\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"series\": [{\r\n         *     // ...\r\n         *     \"columns\": {\r\n         *       \"url\": \"https://www.google.com/search?q={category.urlEncode()}\"\r\n         *     }\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * @param {Optional<string>} value URL\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"url\", value)) {\r\n                if (this._urlDisposer) {\r\n                    this._urlDisposer.dispose();\r\n                }\r\n                // If URL is not empty, set up events\r\n                if ($utils.isNotEmpty(value)) {\r\n                    this._urlDisposer = this.events.on(\"hit\", this.urlHandler, this, false);\r\n                    // Set other required parameters\r\n                    this.clickable = true;\r\n                    this.cursorOverStyle = MouseCursorStyle.pointer;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"baseId\", {\r\n        get: function () {\r\n            if (!this._baseId && this.parent) {\r\n                this.baseId = this.parent.baseId;\r\n            }\r\n            return this._baseId;\r\n        },\r\n        set: function (value) {\r\n            this.setBaseId(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Sprite.prototype.setBaseId = function (value) {\r\n        if (value != this._baseId) {\r\n            if (this.invalid) {\r\n                this.invalid = false;\r\n                registry.removeFromInvalidSprites(this);\r\n                this.invalidate();\r\n            }\r\n            this._baseId = value;\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"urlTarget\", {\r\n        /**\r\n         * @return {string} URL target\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"urlTarget\");\r\n        },\r\n        /**\r\n         * Target to use for URL clicks:\r\n         *\r\n         * * _blank\r\n         * * _self (default)\r\n         * * _parent\r\n         * * _top\r\n         * * Name of the window/frame\r\n         *\r\n         * Ignored if `url` is not set.\r\n         *\r\n         * @param {string} value URL target\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"urlTarget\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Handles URL transition on element click.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionEvent} ev An event object\r\n     */\r\n    Sprite.prototype.urlHandler = function (ev) {\r\n        // Is URL set?\r\n        if ($utils.isNotEmpty(this.url)) {\r\n            // Proceed to the URL\r\n            var url = this.populateString(this.url);\r\n            if (this.urlTarget === \"_self\") {\r\n                window.location.href = url;\r\n            }\r\n            else {\r\n                window.open(url, this.urlTarget);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"swipeOptions\", {\r\n        /**\r\n         * ==========================================================================\r\n         * SWIPING GESTURE TRACKING\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns element's swipe gesture options.\r\n         *\r\n         * @return {ISwipeOptions} Swipe gesture options\r\n         */\r\n        get: function () {\r\n            if (!this.interactions.swipeOptions) {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.swipeOptions;\r\n                }\r\n                if (this.parent) {\r\n                    return this.parent.swipeOptions;\r\n                }\r\n            }\r\n            return this.interactions.swipeOptions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"swipeable\", {\r\n        /**\r\n         * @return {boolean} Element swipable?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"swipeable\");\r\n        },\r\n        /**\r\n         * Controls if element is swipeable.\r\n         *\r\n         * Swipable element will invoke `swipe`, `swipeleft` and `swiperight` events,\r\n         * when quick horizontal drag action is performed with either mouse or touch.\r\n         *\r\n         * Please note that combining swipe and drag is possible, however will incur\r\n         * a slight but noticeable delay in drag start.\r\n         *\r\n         * @param {boolean}  value  Element swipable?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"swipeable\", value)) {\r\n                this.applyCursorStyle();\r\n                if (!value && !this.isInteractive()) {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.interactions.swipeable = value;\r\n                }\r\n                //interaction.processSwipeable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"trackable\", {\r\n        /**\r\n         * @return {boolean} Track cursor movement over element?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"trackable\");\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * POINTER TRACKING\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Indicates if the element is trackable (mouse position over it is reported to\r\n         * event listeners).\r\n         *\r\n         * Will invoke `track` events whenever pointer (cursor) changes position\r\n         * while over element.\r\n         *\r\n         * Please note, touch devices will also invoke `track` events when touch\r\n         * point is moved while holding down on a trackable element.\r\n         *\r\n         * @param {boolean} value Track cursor movement over element?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"trackable\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.applyCursorStyle();\r\n                    this.interactions.trackable = value;\r\n                }\r\n                //interaction.processTrackable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"wheelable\", {\r\n        /**\r\n         * @return {boolean} Mouse wheel events enabled?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"wheelable\");\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * MOUSE-WHEEL RELATED\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Indicates if the element can be interacted with mouse wheel.\r\n         *\r\n         * Will invoke `wheel`, `wheelup`, `wheeldown`, `wheelleft`, and `wheelright`\r\n         * events when using mouse wheel over the element.\r\n         *\r\n         * @param {boolean} value Mouse wheel events enabled?\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"wheelable\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.applyCursorStyle();\r\n                    this.interactions.wheelable = value;\r\n                }\r\n                //interaction.processWheelable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"resizable\", {\r\n        /**\r\n         * @return {boolean} Element resizable?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"resizable\");\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * RESIZE\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Indicates if this element is resizable.\r\n         *\r\n         * Enabling resize will turn on various interactions on the element. Their\r\n         * actual functionality will depend on other properties.\r\n         *\r\n         * If the element also `draggable`, resize will only happen with two points\r\n         * of contact on a touch device.\r\n         *\r\n         * If the element is not draggable, resize can be performed with just one\r\n         * point of contact, touch or mouse.\r\n         *\r\n         * Will invoke `resize` event every time the size of the element changes.\r\n         *\r\n         * @param {boolean}  value  Element resizable?\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"resizable\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.applyCursorStyle();\r\n                    this.interactions.resizable = value;\r\n                    // setEventDisposer will also remove listeners if value == false\r\n                    this.interactions.setEventDisposer(\"sprite-resizable\", value, function () { return new MultiDisposer([\r\n                        _this.events.on(\"down\", _this.handleDown, _this, false),\r\n                        _this.events.on(\"resize\", _this.handleResize, _this, false)\r\n                    ]); });\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Handles resize intermediate step.\r\n     *\r\n     * By default this method resizes actual element. Each element, can override\r\n     * this method to implement their own resize logic.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionEvent} ev Event object\r\n     */\r\n    Sprite.prototype.handleResize = function (ev) {\r\n        this.scale = this.interactions.originalScale * ev.scale;\r\n        this.validatePosition();\r\n        /*center: (io.draggable\r\n        ? $math.getMidPoint(point1, point2)\r\n        : {\r\n            \"x\": io.originalPosition.x,\r\n            \"y\": io.originalPosition.y\r\n        })*/\r\n        //this.moveTo(this.originalPosition.x + ev.shift.x, this.originalPosition.y + ev.shift.y);\r\n        if (this.draggable) {\r\n            var svgPoint1 = $utils.documentPointToSvg(ev.point1, this.htmlContainer, this.svgContainer.cssScale);\r\n            var svgPoint2 = $utils.documentPointToSvg(ev.point2, this.htmlContainer, this.svgContainer.cssScale);\r\n            var svgMidPoint = $math.getMidPoint(svgPoint1, svgPoint2);\r\n            var parentPoint1 = $utils.documentPointToSprite(ev.startPoint1, this.parent);\r\n            var parentPoint2 = $utils.documentPointToSprite(ev.startPoint2, this.parent);\r\n            var originalPosition = this.interactions.originalPosition;\r\n            var originalScale = this.interactions.originalScale;\r\n            if (originalPosition) {\r\n                var spritePoint1 = { x: (parentPoint1.x - originalPosition.x) / originalScale, y: (parentPoint1.y - originalPosition.y) / originalScale };\r\n                var spritePoint2 = { x: (parentPoint2.x - originalPosition.x) / originalScale, y: (parentPoint2.y - originalPosition.y) / originalScale };\r\n                var spriteMidPoint = $math.getMidPoint(spritePoint1, spritePoint2);\r\n                var parentPoint = $utils.svgPointToSprite(svgMidPoint, this.parent);\r\n                this.moveTo({ x: parentPoint.x - spriteMidPoint.x * this.scale, y: parentPoint.y - spriteMidPoint.y * this.scale });\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"cursorOptions\", {\r\n        /**\r\n         * ==========================================================================\r\n         * MOUSE-RELATED\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns element's cursor options.\r\n         *\r\n         * Cursor options usually define cursor style for various states of the\r\n         * hovered element.\r\n         *\r\n         * Elements inherit `cursorOptions` from their parents if they don't have\r\n         * them set explicitly.\r\n         *\r\n         * @see {@link ICursorOptions} for a list of available options\r\n         * @return {ICursorOptions} Cursor options\r\n         */\r\n        get: function () {\r\n            if (!this.interactions.cursorOptions) {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.cursorOptions;\r\n                }\r\n                if (this.parent) {\r\n                    return this.parent.cursorOptions;\r\n                }\r\n            }\r\n            return this.interactions.cursorOptions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"cursorOverStyle\", {\r\n        /**\r\n         * A shortcut to setting mouse cursor on hover.\r\n         *\r\n         * Example:\r\n         *\r\n         * ```TypeScript\r\n         * series.slices.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;\r\n         * ```\r\n         * ```JavaScript\r\n         * series.slices.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"series\": {\r\n         *     // ...\r\n         *     \"slices\": {\r\n         *       \"cursorOverStyle\": \"pointer\"\r\n         *     }\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * @param {Array<IStyleProperty>} style An array of styles to apply onhover\r\n         */\r\n        set: function (style) {\r\n            this.cursorOptions.overStyle = style;\r\n            getInteraction().applyCursorOverStyle(this.interactions);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"cursorDownStyle\", {\r\n        /**\r\n         * A shortcut to setting mouse cursor when button is pressed down.\r\n         *\r\n         * Example:\r\n         *\r\n         * ```TypeScript\r\n         * series.slices.template.cursorDownStyle = am4core.MouseCursorStyle.grabbing;\r\n         * ```\r\n         * ```JavaScript\r\n         * series.slices.template.cursorDownStyle = am4core.MouseCursorStyle.grabbing;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"series\": {\r\n         *     // ...\r\n         *     \"slices\": {\r\n         *       \"cursorDownStyle\": \"grabbing\"\r\n         *     }\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * @param {Array<IStyleProperty>} style An array of styles to apply onhover\r\n         */\r\n        set: function (style) {\r\n            this.cursorOptions.downStyle = style;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Applies default cursor styles for interactable elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Determine if this is necessary. Maybe let's not apply any cursor styles by default\r\n     */\r\n    Sprite.prototype.applyCursorStyle = function () {\r\n        // Draggable styles\r\n        /*if (this.draggable) {\r\n\r\n            if (!$type.hasValue(this.cursorOptions.overStyle)) {\r\n                this.cursorOptions.overStyle = MouseCursorStyle.grab;\r\n            }\r\n\r\n            if (!$type.hasValue(this.cursorOptions.downStyle)) {\r\n                this.cursorOptions.downStyle = MouseCursorStyle.grabbing;\r\n            }\r\n        }*/\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"interactionsEnabled\", {\r\n        /**\r\n         * @return {boolean} Is interaction enabled for this element?\r\n         */\r\n        get: function () {\r\n            var value = this.getPropertyValue(\"interactionsEnabled\");\r\n            if (value === false) {\r\n                return false;\r\n            }\r\n            if (this.virtualParent) {\r\n                return this.virtualParent.interactionsEnabled;\r\n            }\r\n            if (this.parent) {\r\n                return this.parent.interactionsEnabled;\r\n            }\r\n            return true;\r\n        },\r\n        /**\r\n         * Setting this to `false` will effectively disable all interactivity on the\r\n         * element.\r\n         *\r\n         * @param {boolean}  value  Is interaction enabled for this element?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"interactionsEnabled\", value)) {\r\n                var pointerEvents = null; // must be null, not \"null\"!\r\n                if (!value) {\r\n                    pointerEvents = \"none\";\r\n                }\r\n                else {\r\n                    // this is for IE\r\n                    this.group.node.style.pointerEvents = \"\";\r\n                }\r\n                this.group.node.style.pointerEvents = pointerEvents;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"exporting\", {\r\n        /**\r\n         * @return {Export} Export instance\r\n         */\r\n        get: function () {\r\n            return this.getExporting();\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * EXPORT-RELATED STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * An [[Export]] instance.\r\n         *\r\n         * Used to access API of the chart export functionality.\r\n         *\r\n         * If `exporting` is not set, the element inherits [[Export]] instance from\r\n         * its parents.\r\n         *\r\n         * Upon request, if no parent has such instance, a new one is created, using\r\n         * default settings, what in most cases is just enough.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/exporting/} for more info about exporting\r\n         * @param {Export}  exp  Export\r\n         */\r\n        set: function (exp) {\r\n            this._exporting.set(exp, exp);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * This is here as a method so that inheriting classes could override it.\r\n     *\r\n     * @return {Export} Export instance\r\n     */\r\n    Sprite.prototype.getExporting = function () {\r\n        var _export = this._exporting.get();\r\n        if (_export) {\r\n            return _export;\r\n        }\r\n        else {\r\n            if (this.isStandaloneInstance || !this.parent) {\r\n                _export = new Export(this.svgContainer.SVGContainer);\r\n                _export.sprite = this;\r\n                _export.language = this.language;\r\n                _export.dateFormatter = this.dateFormatter;\r\n                _export.durationFormatter = this.durationFormatter;\r\n                this._exporting.set(_export, _export);\r\n            }\r\n            else {\r\n                return this.parent.exporting;\r\n            }\r\n        }\r\n        return _export;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"exportable\", {\r\n        /**\r\n         * @return {boolean} Export?\r\n         */\r\n        get: function () {\r\n            var svgContainer = this.svgContainer;\r\n            return !svgContainer || $array.indexOf(svgContainer.nonExportableSprites, this) == -1;\r\n        },\r\n        /**\r\n         * If set to `false` this element will be omitted when exporting the chart\r\n         * to an image.\r\n         *\r\n         * @default true\r\n         * @param {boolean}  value  Export?\r\n         */\r\n        set: function (value) {\r\n            var svgContainer = this.svgContainer;\r\n            if (svgContainer && value != this.exportable) {\r\n                if (value) {\r\n                    $array.remove(svgContainer.nonExportableSprites, this);\r\n                }\r\n                else {\r\n                    svgContainer.nonExportableSprites.push(this);\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * ==========================================================================\r\n     * MODAL/POPUP RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Private method to be used for \"classPrefix\" adapter for modals/popups.\r\n     *\r\n     * @param {string}  value  Prefix\r\n     */\r\n    Sprite.prototype.modalPrefix = function (value) {\r\n        value = options.classNamePrefix + value;\r\n        return value;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"modal\", {\r\n        /**\r\n         * Returns a [[Modal]] instance, associated with this chart.\r\n         * (elements top parent)\r\n         *\r\n         * Accessing modal does not make it appear. To make a modal appear, use\r\n         * `showModal()` method.\r\n         *\r\n         * @see {@link Modal} for more information about using Modal windows\r\n         * @return {Modal} Modal instance\r\n         */\r\n        get: function () {\r\n            var svgContainer = this.svgContainer;\r\n            if (svgContainer) {\r\n                var modal = svgContainer.modal;\r\n                if (!modal.adapter.has(\"classPrefix\", this.modalPrefix)) {\r\n                    modal.adapter.add(\"classPrefix\", this.modalPrefix);\r\n                }\r\n                return modal;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Opens a modal window with specific content (`text` parameter) and,\r\n     * optionally, `title`.\r\n     *\r\n     * The `text` parameter can contain HTML content.\r\n     *\r\n     * @see {@link Modal} for more information about using Modal windows\r\n     * @param {string}  text   Modal contents\r\n     * @param {string}  title  Title for the modal window\r\n     */\r\n    Sprite.prototype.openModal = function (text, title) {\r\n        var svgContainer = this.svgContainer;\r\n        if (svgContainer) {\r\n            return svgContainer.openModal(text, title);\r\n        }\r\n    };\r\n    /**\r\n     * Hides modal window if there is one currently open.\r\n     */\r\n    Sprite.prototype.closeModal = function () {\r\n        var svgContainer = this.svgContainer;\r\n        if (svgContainer) {\r\n            svgContainer.closeModal();\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"popups\", {\r\n        /**\r\n         * A list of popups for this chart.\r\n         *\r\n         * @return {ListTemplate<Popup>} Popups\r\n         */\r\n        get: function () {\r\n            var svgContainer = this.svgContainer;\r\n            if (svgContainer) {\r\n                var popups = svgContainer.popups;\r\n                popups.template.sprite = this;\r\n                if (!popups.template.adapter.has(\"classPrefix\", this.modalPrefix)) {\r\n                    popups.template.adapter.add(\"classPrefix\", this.modalPrefix);\r\n                }\r\n                return popups;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates, opens, and returns a new [[Popup]] window.\r\n     *\r\n     * `text` can be any valid HTML.\r\n     *\r\n     * `title` is currently not supported.\r\n     *\r\n     * @param  {string}  text   Popup contents\r\n     * @param  {string}  title  Popup title\r\n     * @return {Popup}          Popup instance\r\n     */\r\n    Sprite.prototype.openPopup = function (text, title) {\r\n        var svgContainer = this.svgContainer;\r\n        if (svgContainer) {\r\n            return svgContainer.openPopup(text, title);\r\n        }\r\n    };\r\n    /**\r\n     * Closes all currently open popup windows\r\n     */\r\n    Sprite.prototype.closeAllPopups = function () {\r\n        var svgContainer = this.svgContainer;\r\n        if (svgContainer) {\r\n            return svgContainer.closeAllPopups();\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"x\", {\r\n        /**\r\n         * @return {number | Percent} X coordinate\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"x\");\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * POSITIONAL PROPERTIES AND RELATED STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Element's absolute or relative X coordinate.\r\n         *\r\n         * If setting both X and Y, please consider using `moveTo()` method instead,\r\n         * as it will be faster to set both coordinates at once.\r\n         *\r\n         * @param {number | Percent} value X coordinate\r\n         */\r\n        set: function (value) {\r\n            if (!this.isDragged) {\r\n                this.setPercentProperty(\"x\", value, false, true, this._positionPrecision, true);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelX\", {\r\n        /**\r\n         * Returns element's current absolute X coordinate in pixels.\r\n         *\r\n         * @readonly\r\n         * @return {number} X coordinate (px)\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"pixelX\", $math.fitToRange(this.getPixelX(this.x), this.minX, this.maxX));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativeX\", {\r\n        /**\r\n         * Returns element's current relative X coordinate in [[Percent]].\r\n         *\r\n         * @return {number} X coordinate ([[Percent]])\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"relativeX\", this.getRelativeX(this.x));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"minX\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {number} Min X (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minX\");\r\n        },\r\n        /**\r\n         * The smallest allowable absolute X coordinate for this element.\r\n         *\r\n         * This is used to contain element movement within certain boundaries.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {number} value Min X (px)\r\n         */\r\n        set: function (value) {\r\n            if ($type.isNumber(value)) {\r\n                value = $math.round(value, this._positionPrecision, true);\r\n                this.setPropertyValue(\"minX\", value, false, true);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"maxX\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {number} Max X (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxX\");\r\n        },\r\n        /**\r\n         * The biggest allowable absolute X coordinate for this element.\r\n         *\r\n         * This is used to contain element movement within certain boundaries.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {number} value Max X (px)\r\n         */\r\n        set: function (value) {\r\n            if ($type.isNumber(value)) {\r\n                value = $math.round(value, this._positionPrecision, true);\r\n                this.setPropertyValue(\"maxX\", value, false, true);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"y\", {\r\n        /**\r\n         * @return {number | Percent} Y coordinate\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"y\");\r\n        },\r\n        /**\r\n         * Element's absolute or relative Y coordinate.\r\n         *\r\n         * If setting both X and Y, please consider using `moveTo()` method instead,\r\n         * as it will be faster to set both coordinates at once.\r\n         *\r\n         * @param {number | Percent}  value  Y coordinate\r\n         */\r\n        set: function (value) {\r\n            if (!this.isDragged) {\r\n                this.setPercentProperty(\"y\", value, false, true, this._positionPrecision, true);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelY\", {\r\n        /**\r\n         * Returns element's current absolute Y coordinate in pixels.\r\n         *\r\n         * @readonly\r\n         * @return {number} Y coordinate (px)\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"pixelY\", $math.fitToRange(this.getPixelY(this.y), this.minY, this.maxY));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativeY\", {\r\n        /**\r\n         * Returns element's current relative Y coordinate in [[Percent]].\r\n         *\r\n         * @readonly\r\n         * @return {number} Y coordinate ([[Percent]])\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"relativeY\", this.getRelativeX(this.y));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"minY\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {number} Min Y (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minY\");\r\n        },\r\n        /**\r\n         * The smallest allowable absolute Y coordinate for this element.\r\n         *\r\n         * This is used to contain element movement within certain boundaries.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {number} value Min Y (px)\r\n         */\r\n        set: function (value) {\r\n            if ($type.isNumber(value)) {\r\n                value = $math.round(value, this._positionPrecision, true);\r\n                this.setPropertyValue(\"minY\", value, false, true);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"maxY\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {number} Max Y (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxY\");\r\n        },\r\n        /**\r\n         * The biggest allowable absolute Y coordinate for this element.\r\n         *\r\n         * This is used to contain element movement within certain boundaries.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {number}  value  Max Y (px)\r\n         */\r\n        set: function (value) {\r\n            if ($type.isNumber(value)) {\r\n                value = $math.round(value, this._positionPrecision, true);\r\n                this.setPropertyValue(\"maxY\", value, false, true);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"dx\", {\r\n        /**\r\n         * @return {number} Horizontal offset (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"dx\");\r\n        },\r\n        /**\r\n         * A horizontal offset for the element in pixels.\r\n         *\r\n         * Can be negative value for offset to the left.\r\n         *\r\n         * @param {number}  value  Horizontal offset (px)\r\n         */\r\n        set: function (value) {\r\n            if ($type.isNumber(value)) {\r\n                value = $math.round(value, this._positionPrecision, true);\r\n                this.setPropertyValue(\"dx\", value, false, true);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"dy\", {\r\n        /**\r\n         * @return {number} Vertical offset (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"dy\");\r\n        },\r\n        /**\r\n         * A vertical offset for the element in pixels.\r\n         *\r\n         * Can be negative value for offset upwards.\r\n         *\r\n         * @param {number}  value  Vertical offset (px)\r\n         */\r\n        set: function (value) {\r\n            if ($type.isNumber(value)) {\r\n                value = $math.round(value, this._positionPrecision, true);\r\n                this.setPropertyValue(\"dy\", value, false, true);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"rotation\", {\r\n        /**\r\n         * @return {number} Rotation (0-360)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"rotation\");\r\n        },\r\n        /**\r\n         * Rotation of the element in degrees. (0-360)\r\n         *\r\n         * @param {number}  value  Rotation (0-360)\r\n         */\r\n        set: function (value) {\r\n            value = $type.toNumber(value);\r\n            if (!$type.isNumber(value)) {\r\n                value = 0;\r\n            }\r\n            this.setPropertyValue(\"rotation\", value, false, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"align\", {\r\n        /**\r\n         * @return {Align} Horizontal align\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"align\");\r\n        },\r\n        /**\r\n         * Controls horizontal alignment of the element.\r\n         *\r\n         * This is used by parent [[Container]] when layouting its children.\r\n         *\r\n         * @param {Align}  value  Horizontal align\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"align\", value)) {\r\n                if (this.parent) {\r\n                    this.parent.invalidateLayout();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"valign\", {\r\n        /**\r\n         * @return {VerticalAlign} Vertical align\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"valign\");\r\n        },\r\n        /**\r\n         * Controls vertical alignment of the element.\r\n         *\r\n         * This is used by parent [[Container]] when layouting its children.\r\n         *\r\n         * @param {VerticalAlign}  value  Vertical align\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"valign\", value)) {\r\n                if (this.parent) {\r\n                    this.parent.invalidateLayout();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"horizontalCenter\", {\r\n        /**\r\n         * @return {HorizontalCenter} Horizontal center\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"horizontalCenter\");\r\n        },\r\n        /**\r\n         * Controls which part of the element to treat as a horizontal center.\r\n         *\r\n         * The setting will be used when positioning, resizing and rotating the\r\n         * element.\r\n         *\r\n         * @param {HorizontalCenter}  value  Horizontal center\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"horizontalCenter\", value)) {\r\n                this.updateCenter();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"verticalCenter\", {\r\n        /**\r\n         * @return {VerticalCenter} Vertical center\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"verticalCenter\");\r\n        },\r\n        /**\r\n         * Controls which part of the element to treat as a vertical center.\r\n         *\r\n         * The setting will be used when positioning, resizing and rotating the\r\n         * element.\r\n         *\r\n         * @param {VerticalCenter}  value  Vertical center\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"verticalCenter\", value)) {\r\n                this.updateCenter();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"maxWidth\", {\r\n        /**\r\n         * @return {number} Maximum width (px)\r\n         */\r\n        get: function () {\r\n            var maxWidth = this.getPropertyValue(\"maxWidth\");\r\n            if (!$type.isNumber(maxWidth)) {\r\n                if (this.parent) {\r\n                    return this.parent.maxWidth;\r\n                }\r\n            }\r\n            return maxWidth;\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * DIMENSIONAL PROPERTIES AND RELATED STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Maximum allowed width for the element in pixels.\r\n         *\r\n         * @param {number}  value  Maximum width (px)\r\n         */\r\n        set: function (value) {\r\n            this.setMaxWidth(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Sprite.prototype.setMaxWidth = function (value) {\r\n        var prevWidth = this.maxWidth;\r\n        var prevHeight = this.maxHeight;\r\n        if (this.setPropertyValue(\"maxWidth\", value)) {\r\n            if ($type.isNumber(this.relativeWidth)) {\r\n                this.invalidate();\r\n            }\r\n            var event_2 = {\r\n                type: \"maxsizechanged\",\r\n                target: this,\r\n                previousWidth: prevWidth,\r\n                previousHeight: prevHeight\r\n            };\r\n            this.dispatchImmediately(\"maxsizechanged\", event_2);\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"maxHeight\", {\r\n        /**\r\n         * @return {number} Maximum height (px)\r\n         */\r\n        get: function () {\r\n            var maxHeight = this.getPropertyValue(\"maxHeight\");\r\n            if (!$type.isNumber(maxHeight)) {\r\n                if (this.parent) {\r\n                    return this.parent.maxHeight;\r\n                }\r\n            }\r\n            return maxHeight;\r\n        },\r\n        /**\r\n         * Maximum allowed height for the element in pixels.\r\n         *\r\n         * @param {number}  value  Maximum height (px)\r\n         */\r\n        set: function (value) {\r\n            this.setMaxHeight(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Sprite.prototype.setMaxHeight = function (value) {\r\n        var prevWidth = this.maxWidth;\r\n        var prevHeight = this.maxHeight;\r\n        if (this.setPropertyValue(\"maxHeight\", value)) {\r\n            if ($type.isNumber(this.relativeHeight)) {\r\n                this.invalidate();\r\n            }\r\n            var event_3 = {\r\n                type: \"maxsizechanged\",\r\n                target: this,\r\n                previousWidth: prevWidth,\r\n                previousHeight: prevWidth\r\n            };\r\n            this.dispatchImmediately(\"maxsizechanged\", event_3);\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"minWidth\", {\r\n        /**\r\n         * @return {Optional<number>} Minimum width (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minWidth\");\r\n        },\r\n        /**\r\n         * Minimum width of the element in pixels.\r\n         *\r\n         * Set to `undefined` to remove the limit.\r\n         *\r\n         * @param {Optional<number>}  value  Minimum width (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"minWidth\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"minHeight\", {\r\n        /**\r\n         * @return {Optional<number>} Minimum height (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minHeight\");\r\n        },\r\n        /**\r\n         * Minimum height for the element in pixels.\r\n         *\r\n         * Set to `undefined` to remove the limit.\r\n         *\r\n         * @param {Optional<number>}  value  Minimum height (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"minHeight\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"width\", {\r\n        /**\r\n         * @return {number | Percent} Width (absolute or relative)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"width\");\r\n        },\r\n        /**\r\n         * Element's absolute or relative width.\r\n         *\r\n         * The width can either be absolute, set in numer pixels, or relative, set\r\n         * in [[Percent]].\r\n         *\r\n         * Relative width will be calculated using closest measured ancestor\r\n         * [[Container]].\r\n         *\r\n         * @param {number | Percent}  value  Width (numeric in pixels or relative)\r\n         */\r\n        set: function (value) {\r\n            var changed = this.setPercentProperty(\"width\", value, true, false, this._positionPrecision, true);\r\n            if (changed) {\r\n                this.percentWidth = undefined;\r\n                this.relativeWidth = undefined;\r\n                if (value instanceof Percent) {\r\n                    this.percentWidth = value.percent;\r\n                    if ($type.isNumber(this._pixelWidth)) {\r\n                        this.maxWidth = undefined;\r\n                    }\r\n                    this._pixelWidth = undefined;\r\n                }\r\n                else {\r\n                    this._pixelWidth = Number(value);\r\n                    //this._measuredWidth = this._pixelWidth;\r\n                    this.maxWidth = this._pixelWidth;\r\n                }\r\n                this.invalidatePosition();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"height\", {\r\n        /**\r\n         * @return {number | Percent} height (absolute or relative)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"height\");\r\n        },\r\n        /**\r\n         * Element's absolute or relative height.\r\n         *\r\n         * The height can either be absolute, set in numer pixels, or relative, set\r\n         * in [[Percent]].\r\n         *\r\n         * Relative height will be calculated using closest measured ancestor\r\n         * [[Container]].\r\n         *\r\n         * @param {number | Percent}  value  Height (numeric in pixels or relative)\r\n         */\r\n        set: function (value) {\r\n            var changed = this.setPercentProperty(\"height\", value, true, false, this._positionPrecision, true);\r\n            if (changed) {\r\n                this.percentHeight = undefined;\r\n                this._relativeHeight = undefined;\r\n                if (value instanceof Percent) {\r\n                    this.percentHeight = value.percent;\r\n                    if ($type.isNumber(this._pixelHeight)) {\r\n                        this.maxHeight = undefined;\r\n                    }\r\n                    this._pixelHeight = undefined;\r\n                }\r\n                else {\r\n                    this._pixelHeight = Number(value);\r\n                    //this._measuredHeight = this._pixelHeight;\r\n                    this.maxHeight = this._pixelHeight; // yes, we reset maxWidth\r\n                }\r\n                this.invalidatePosition();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelWidth\", {\r\n        /**\r\n         * Returns element's width in pixels, if width was set. For actual width use measuredWidth property.\r\n         *\r\n         * @readonly\r\n         * @return {number} Width (px)\r\n         */\r\n        get: function () {\r\n            var width;\r\n            if ($type.isNumber(this.percentWidth)) {\r\n                width = this.maxWidth;\r\n            }\r\n            else if ($type.isNumber(this._pixelWidth)) {\r\n                width = this._pixelWidth;\r\n            }\r\n            else {\r\n                width = 0;\r\n            }\r\n            var minWidth = this.minWidth;\r\n            if (minWidth != null && width < minWidth) {\r\n                width = minWidth;\r\n            }\r\n            return this.adapter.apply(\"pixelWidth\", $math.round(width, this._positionPrecision, true));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelHeight\", {\r\n        /**\r\n         * Returns element's height in pixels. For actual height use measuredHeight property.\r\n         *\r\n         * @readonly\r\n         * @return {number} Height (px)\r\n         */\r\n        get: function () {\r\n            var height;\r\n            if ($type.isNumber(this.percentHeight)) {\r\n                height = this.maxHeight;\r\n            }\r\n            else if ($type.isNumber(this._pixelHeight)) {\r\n                height = this._pixelHeight;\r\n            }\r\n            else {\r\n                height = 0; //this._measuredHeightSelf;\r\n            }\r\n            var minHeight = this.minHeight;\r\n            if (minHeight != null && height < minHeight) {\r\n                height = minHeight;\r\n            }\r\n            return this.adapter.apply(\"pixelHeight\", $math.round(height, this._positionPrecision, true));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativeWidth\", {\r\n        /**\r\n         * @return {$type.Optional<number>} Relative width\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            var relativeWidth = this._relativeWidth;\r\n            if ($type.isNumber(relativeWidth)) {\r\n                return this.adapter.apply(\"relativeWidth\", relativeWidth);\r\n            }\r\n        },\r\n        /**\r\n         * Element's relative width in [[Percent]].\r\n         * @ignore\r\n         *\r\n         * @param {$type.Optional<number>}  value  Relative width\r\n         */\r\n        set: function (value) {\r\n            if (this._relativeWidth != value) {\r\n                this._relativeWidth = value;\r\n                //\t\t\tthis.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativeHeight\", {\r\n        /**\r\n         * @return {$type.Optional<number>} Relative height\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            var relativeHeight = this._relativeHeight;\r\n            if ($type.isNumber(relativeHeight)) {\r\n                return this.adapter.apply(\"relativeHeight\", relativeHeight);\r\n            }\r\n        },\r\n        /**\r\n         * Element's relative height in [[Percent]].\r\n         *\r\n         * @param {$type.Optional<number>}  value  Relative height\r\n         * @ignore\r\n         */\r\n        set: function (value) {\r\n            if (this._relativeHeight != value) {\r\n                this._relativeHeight = value;\r\n                //\t\t\tthis.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"measuredWidth\", {\r\n        /**\r\n         * Returns element's measured width in pixels.\r\n         *\r\n         * A measured width is actual width of contents plus `paddingRight` and* `paddingLeft`, relative to sprite parent, meaning that\r\n         * rotation and scale is taken into account.\r\n         *\r\n         * @readonly\r\n         * @return {number} Width (px)\r\n         */\r\n        get: function () {\r\n            if (this.disabled || this.__disabled) {\r\n                return 0;\r\n            }\r\n            return this.adapter.apply(\"measuredWidth\", this._measuredWidth);\r\n            // it's not good to fit to min/max range as then rotations and scale won't be taken into account\r\n            //return this.adapter.apply(\"measuredWidth\", $math.fitToRange(this._measuredWidth, this.minWidth, this.maxWidth));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"measuredHeight\", {\r\n        /**\r\n         * Returns elements's measured height in pixels.\r\n         *\r\n         * A measured height is actual height of contents plus `paddingTop` and `paddingBottom`, relative to sprite parent, meaning that\r\n         * rotation and scale taken into account.\r\n         *\r\n         * @readonly\r\n         * @return {number} Height (px)\r\n         */\r\n        get: function () {\r\n            if (this.disabled || this.__disabled) {\r\n                return 0;\r\n            }\r\n            // it's not good to fit to min/max range as then rotations and scale won't be taken into account\r\n            //return this.adapter.apply(\"measuredHeight\", $math.fitToRange(this._measuredHeight, this.minHeight, this.maxHeight));\r\n            return this.adapter.apply(\"measuredHeight\", this._measuredHeight);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"outerWidth\", {\r\n        /**\r\n         * Returns element's measured width plus its left and right margins in\r\n         * pixels.\r\n         *\r\n         * @readonly\r\n         * @return {number} Outer width (px)\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"outerWidth\", this.pixelWidth + this.pixelMarginRight + this.pixelMarginLeft);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"outerHeight\", {\r\n        /**\r\n         * Returns element's measured height plus its top and bottom margins in\r\n         * pixels.\r\n         *\r\n         * @readonly\r\n         * @return {number} Outer height (px)\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"outerHeight\", this.pixelHeight + this.pixelMarginTop + this.pixelMarginBottom);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"innerWidth\", {\r\n        /**\r\n         * Returns element's measured inner width in pixels.\r\n         *\r\n         * Inner width is actual available space for content, e.g. element's width\r\n         * minus horizontal padding.\r\n         *\r\n         * @readonly\r\n         * @return {number} Inner width (px)\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"innerWidth\", Math.max(0, this.pixelWidth - this.pixelPaddingRight - this.pixelPaddingLeft));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"innerHeight\", {\r\n        /**\r\n         * Returns element's measured inner height in pixels.\r\n         *\r\n         * Inner height is actual available space for content, e.g. element's height\r\n         * minus vertical padding.\r\n         *\r\n         * @readonly\r\n         * @return {number} Inner height (px)\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"innerHeight\", Math.max(0, this.pixelHeight - this.pixelPaddingTop - this.pixelPaddingBottom));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"globalScale\", {\r\n        /**\r\n         * Returns element's current \"global\" scale.\r\n         *\r\n         * Scale values accumulate over hierarchy of elements.\r\n         *\r\n         * E.g. if a [[Container]] has `scale = 2` and it's child has a `scale = 2`,\r\n         * the child's `globalScale` will be 4. (a multitude of `2 x 2`)\r\n         *\r\n         * @readonly\r\n         * @return {number} Global scale\r\n         */\r\n        get: function () {\r\n            var scale = this.scale;\r\n            if (this.parent) {\r\n                scale = scale * this.parent.globalScale;\r\n            }\r\n            return this.adapter.apply(\"globalScale\", scale);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"scale\", {\r\n        /**\r\n         * @return {number} Scale (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"scale\");\r\n        },\r\n        /**\r\n         * Scale of the element.\r\n         *\r\n         * The scale is set from 0 (element reduced to nothing) to 1 (default size).\r\n         * * 2 will mean element is increased twice.\r\n         * * 0.5 - reduced by 50%.\r\n         *\r\n         * Etc.\r\n         *\r\n         * @param {number}  value  Scale (0-1)\r\n         */\r\n        set: function (value) {\r\n            value = $type.toNumber(value);\r\n            if (value < 0) {\r\n                value = 0;\r\n            }\r\n            if (value != this.getPropertyValue(\"scale\")) {\r\n                this.setPropertyValue(\"scale\", value, false, true);\r\n                this.handleGlobalScale();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets all four margins for the element at once.\r\n     *\r\n     * Margins are set in pixels.\r\n     *\r\n     * @param  {number}  top     Top margin\r\n     * @param  {number}  right   Right margin\r\n     * @param  {number}  bottom  Bottom margin\r\n     * @param  {number}  left    Left margin\r\n     * @return {Sprite}          Current element\r\n     */\r\n    Sprite.prototype.margin = function (top, right, bottom, left) {\r\n        this.marginTop = top;\r\n        this.marginRight = right;\r\n        this.marginBottom = bottom;\r\n        this.marginLeft = left;\r\n        return this;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"marginLeft\", {\r\n        /**\r\n         * @return {number | Percent} Margin value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"marginLeft\");\r\n        },\r\n        /**\r\n         * Left margin - absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param {number | Percent}  value  Margin value\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"marginLeft\", value, true, true, this._positionPrecision, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"marginRight\", {\r\n        /**\r\n         * @return {number | Percent} Margin value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"marginRight\");\r\n        },\r\n        /**\r\n         * Right margin - absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param {number | Percent}  value  Margin value\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"marginRight\", value, true, true, this._positionPrecision, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"marginTop\", {\r\n        /**\r\n         * @return {number | Percent} Margin value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"marginTop\");\r\n        },\r\n        /**\r\n         * Top margin - absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param {number | Percent}  value  Margin value\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"marginTop\", value, true, true, this._positionPrecision, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"marginBottom\", {\r\n        /**\r\n         * @return {number | Percent} Margin value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"marginBottom\");\r\n        },\r\n        /**\r\n         * Bottom margin - absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param {number | Percent}  value  Margin value\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"marginBottom\", value, true, true, this._positionPrecision, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelMarginRight\", {\r\n        /**\r\n         * Returns current right margin in pixels.\r\n         *\r\n         * @readonly\r\n         * @return {number} Right margin (px)\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"pixelMarginRight\", this.getPixelX(this.marginRight));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativeMarginRight\", {\r\n        /**\r\n         * Returns current relative right margin.\r\n         *\r\n         * @readonly\r\n         * @return {number} Relative right margin\r\n         */\r\n        get: function () {\r\n            // @todo Maybe use [[Percent]]?\r\n            return this.adapter.apply(\"relativeMarginRight\", this.getRelativeX(this.marginRight));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelMarginLeft\", {\r\n        /**\r\n         * Returns current left margin in pixels.\r\n         *\r\n         * @readonly\r\n         * @return {number} Left margin (px)\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"pixelMarginLeft\", this.getPixelX(this.marginLeft));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativeMarginLeft\", {\r\n        /**\r\n         * Returns current relative left margin.\r\n         *\r\n         * @readonly\r\n         * @return {number} Relative left margin\r\n         */\r\n        get: function () {\r\n            //@todo Maybe use [[Percent]]?\r\n            return this.adapter.apply(\"relativeMarginLeft\", this.getRelativeX(this.marginLeft));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelMarginTop\", {\r\n        /**\r\n         * Returns current top margin in pixels.\r\n         *\r\n         * @readonly\r\n         * @return {number} Top margin (px)\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"pixelMarginTop\", this.getPixelY(this.marginTop));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativeMarginTop\", {\r\n        /**\r\n         * Returns current relative top margin.\r\n         *\r\n         * @readonly\r\n         * @return {number} Relative top margin\r\n         */\r\n        get: function () {\r\n            // @todo Maybe use [[Percent]]?\r\n            return this.adapter.apply(\"relativeMarginTop\", this.getRelativeY(this.marginTop));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelMarginBottom\", {\r\n        /**\r\n         * Returns current bottom margin in pixels.\r\n         *\r\n         * @readonly\r\n         * @return {number} Bottom margin (px)\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"pixelMarginBottom\", this.getPixelY(this.marginBottom));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativeMarginBottom\", {\r\n        /**\r\n         * Returns current relative bottom margin.\r\n         *\r\n         * @readonly\r\n         * @return {number} Relative bottom margin\r\n         */\r\n        get: function () {\r\n            // @todo Maybe use [[Percent]]?\r\n            return this.adapter.apply(\"relativeMarginBottom\", this.getRelativeY(this.marginBottom));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets padding for the element in pixels.\r\n     *\r\n     * @param  {number}  top     Top padding (px)\r\n     * @param  {number}  right   Right padding (px)\r\n     * @param  {number}  bottom  Bottom padding (px)\r\n     * @param  {number}  left    Left padding (px)\r\n     * @return {Sprite}          Element\r\n     */\r\n    Sprite.prototype.padding = function (top, right, bottom, left) {\r\n        this.paddingTop = top;\r\n        this.paddingRight = right;\r\n        this.paddingBottom = bottom;\r\n        this.paddingLeft = left;\r\n        return this;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"paddingLeft\", {\r\n        /**\r\n         * @return {number | Percent} Padding value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"paddingLeft\");\r\n        },\r\n        /**\r\n         * Left padding - absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param {number | Percent}  value  Padding value\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"paddingLeft\", value, true, true, this._positionPrecision, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"paddingRight\", {\r\n        /**\r\n         * @return {number | Percent} Padding value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"paddingRight\");\r\n        },\r\n        /**\r\n         * Right padding - absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param {number | Percent}  value  Padding value\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"paddingRight\", value, true, true, this._positionPrecision, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"paddingTop\", {\r\n        /**\r\n         * @return {number | Percent} Padding value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"paddingTop\");\r\n        },\r\n        /**\r\n         * Top padding - absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param {number | Percent}  value  Padding value\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"paddingTop\", value, true, true, this._positionPrecision, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"paddingBottom\", {\r\n        /**\r\n         * @return {number | Percent} Padding value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"paddingBottom\");\r\n        },\r\n        /**\r\n         * Bottom padding - absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param {number | Percent}  value  Padding value\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"paddingBottom\", value, true, true, this._positionPrecision, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelPaddingRight\", {\r\n        /**\r\n         * Returns current right padding in pixels.\r\n         *\r\n         * @readonly\r\n         * @return {number} Right padding (px)\r\n         */\r\n        get: function () {\r\n            return this.getPixelX(this.paddingRight);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativePaddingRight\", {\r\n        /**\r\n         * Returns current relative right padding.\r\n         *\r\n         * @readonly\r\n         * @return {number} Relative right padding\r\n         */\r\n        get: function () {\r\n            // @todo Maybe use [[Percent]]?\r\n            return this.getRelativeX(this.paddingRight);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelPaddingLeft\", {\r\n        /**\r\n         * Returns current left padding in pixels.\r\n         *\r\n         * @readonly\r\n         * @return {number} Left padding (px)\r\n         */\r\n        get: function () {\r\n            return this.getPixelX(this.paddingLeft);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativePaddingLeft\", {\r\n        /**\r\n         * Returns current relative left padding.\r\n         *\r\n         * @readonly\r\n         * @return {number} Relative left padding\r\n         */\r\n        get: function () {\r\n            // @todo Maybe use [[Percent]]?\r\n            return this.getRelativeX(this.paddingLeft);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelPaddingTop\", {\r\n        /**\r\n         * Returns current top padding in pixels.\r\n         *\r\n         * @readonly\r\n         * @return {number} Top padding (px)\r\n         */\r\n        get: function () {\r\n            return this.getPixelY(this.paddingTop);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativePaddingTop\", {\r\n        /**\r\n         * Returns current relative top padding.\r\n         *\r\n         * @readonly\r\n         * @return {number} Relative top padding\r\n         */\r\n        get: function () {\r\n            // @todo Maybe use [[Percent]]?\r\n            return this.getRelativeY(this.paddingTop);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelPaddingBottom\", {\r\n        /**\r\n         * Returns current bottom padding in pixels.\r\n         *\r\n         * @readonly\r\n         * @return {number} Bottom padding (px)\r\n         */\r\n        get: function () {\r\n            return this.getPixelY(this.paddingBottom);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativePaddingBottom\", {\r\n        /**\r\n         * Returns current relative bottom padding.\r\n         *\r\n         * @readonly\r\n         * @return {number} Relative bottom padding\r\n         */\r\n        get: function () {\r\n            // @todo Maybe use [[Percent]]?\r\n            return this.getRelativeY(this.paddingBottom);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"path\", {\r\n        /**\r\n         * Path of a tick element\r\n         * @type {string}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"path\");\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * APPEARANCE-RELATED PROPERTIES AND RELATED STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Path of a sprite element\r\n         * @type {string}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"path\", value)) {\r\n                if (!this.element) {\r\n                    this.element = this.paper.add(\"path\");\r\n                }\r\n                this.element.attr({ \"d\": value });\r\n                this.invalidatePosition();\r\n                // otherwise is 0x0\r\n                if (!this.inited) {\r\n                    this.events.once(\"inited\", this.validatePosition, this, false);\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"fillModifier\", {\r\n        /**\r\n         * @return {ColorModifier} Fill color modifier\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"fillModifier\");\r\n        },\r\n        /**\r\n         * [[ColorModifier]] that can be used to modify color and pattern of the\r\n         * element's fill, e.g. create gradients.\r\n         *\r\n         * @param {ColorModifier}  value  Fill color modifiier\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"fillModifier\", value)) {\r\n                this.setFill(this.fill);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"strokeModifier\", {\r\n        /**\r\n         * @return {ColorModifier} Stroke color modifier\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"strokeModifier\");\r\n        },\r\n        /**\r\n         * [[ColorModifier]] that can be used to modify color and pattern of the\r\n         * element's stroke (outline), e.g. create gradients.\r\n         *\r\n         * @param {ColorModifier}  value  Stroke color modifier\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"strokeModifier\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"fillOpacity\", {\r\n        /**\r\n         * @return {number} Opacity (0-9)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"fillOpacity\");\r\n        },\r\n        /**\r\n         * Element's fill opacity.\r\n         *\r\n         * Opacity ranges from 0 (fully transparent) to 1 (fully opaque).\r\n         *\r\n         * @param {number}  value  Opacity (0-1)\r\n         */\r\n        set: function (value) {\r\n            value = $math.toNumberRange(value, 0, 1);\r\n            if (this.setPropertyValue(\"fillOpacity\", value)) {\r\n                this.setSVGAttribute({ \"fill-opacity\": value });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"fill\", {\r\n        /**\r\n         * @return {Color} Fill\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"fill\");\r\n        },\r\n        /**\r\n         * Element's fill color or pattern.\r\n         *\r\n         * @param {Optional<Color | Pattern | LinearGradient | RadialGradient>}  value  Fill\r\n         */\r\n        set: function (value) {\r\n            this.setFill(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets actual `fill` property on the SVG element, including applicable color\r\n     * modifiers.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Optional<Color | Pattern | LinearGradient | RadialGradient>}  value  Fill\r\n     */\r\n    Sprite.prototype.setFill = function (value) {\r\n        if (!$type.isObject(value)) {\r\n            value = toColor(value);\r\n        }\r\n        if (this.setColorProperty(\"fill\", value) || this.fillModifier) {\r\n            // this can not go into next if, as value is turned to Gradient\r\n            if (value instanceof Color) {\r\n                if (this.fillModifier) {\r\n                    value = this.fillModifier.modify(value);\r\n                }\r\n            }\r\n            this.realFill = value;\r\n            // todo: review this place when some Color type will be added\r\n            if (value instanceof Color) {\r\n                this.setSVGAttribute({ \"fill\": value.toString() });\r\n            }\r\n            else if (!$type.hasValue(value)) {\r\n                this.removeSVGAttribute(\"fill\");\r\n            }\r\n            else if (value instanceof Pattern || value instanceof LinearGradient || value instanceof RadialGradient) {\r\n                var fill = value;\r\n                fill.paper = this.paper;\r\n                this.setSVGAttribute({ \"fill\": \"url(#\" + fill.id + \")\" });\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"opacity\", {\r\n        /**\r\n         * @return {number} Opacity (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"opacity\");\r\n        },\r\n        /**\r\n         * Element's opacity.\r\n         *\r\n         * Opacity setting can range from 0 (fully transparent) to 1 (fully opaque).\r\n         *\r\n         * ATTENTION: It is highly not recommended to use `opacity` directly on the\r\n         * element. The charts use `opacity` to hide/show elements, so your setting\r\n         * might be lost if element is hidden and then later shown.\r\n         *\r\n         * Instead use methods `hide()` and `show()` to completely toggle off and on\r\n         * the element.\r\n         *\r\n         * Or, use properties `fillOpacity` and `strokeOpacity`, if you need to make\r\n         * the element semi-transparent.\r\n         *\r\n         * @param {number} value Opacity (0-1)\r\n         */\r\n        set: function (value) {\r\n            value = $math.toNumberRange(value, 0, 1);\r\n            if (this.setPropertyValue(\"opacity\", value)) {\r\n                this.setSVGAttribute({ \"opacity\": value });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"stroke\", {\r\n        /**\r\n         * @return {Color} Stroke setting\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"stroke\");\r\n        },\r\n        /**\r\n         * Element's stroke (outline) color or pattern.\r\n         *\r\n         * @param {Color | Pattern | LinearGradient | RadialGradient}  value  Stroke setting\r\n         */\r\n        set: function (value) {\r\n            this.setStroke(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets actual `stroke` property on the SVG element, including applicable\r\n     * color modifiers.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Color | Pattern | LinearGradient | RadialGradient} value Stroke setting\r\n     */\r\n    Sprite.prototype.setStroke = function (value) {\r\n        if (!$type.isObject(value)) {\r\n            value = toColor(value);\r\n        }\r\n        if (this.setColorProperty(\"stroke\", value) || this.strokeModifier) {\r\n            // this can not go into next if, as value is turned to Gradient\r\n            if (value instanceof Color) {\r\n                if (this.strokeModifier) {\r\n                    value = this.strokeModifier.modify(value);\r\n                }\r\n            }\r\n            this.realStroke = value;\r\n            if (value instanceof Color) {\r\n                if (value.hex == \"none\") {\r\n                    this.removeSVGAttribute(\"stroke\");\r\n                }\r\n                else {\r\n                    this.setSVGAttribute({ \"stroke\": value.toString() });\r\n                }\r\n            }\r\n            else if (!$type.hasValue(value)) {\r\n                this.removeSVGAttribute(\"stroke\");\r\n            }\r\n            else if (value instanceof Pattern || value instanceof LinearGradient || value instanceof RadialGradient) {\r\n                var stroke = value;\r\n                stroke.paper = this.paper;\r\n                this.setSVGAttribute({ \"stroke\": \"url(#\" + stroke.id + \")\" });\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"strokeOpacity\", {\r\n        /**\r\n         * @return {number} Opacity (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"strokeOpacity\");\r\n        },\r\n        /**\r\n         * Stroke (outline) opacity.\r\n         *\r\n         * The values may range from 0 (fully transparent) to 1 (fully opaque).\r\n         *\r\n         * @param {number}  value  Opacity (0-1)\r\n         */\r\n        set: function (value) {\r\n            value = $math.toNumberRange(value, 0, 1);\r\n            if (this.setPropertyValue(\"strokeOpacity\", value)) {\r\n                this.setSVGAttribute({ \"stroke-opacity\": value });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"nonScalingStroke\", {\r\n        /**\r\n         * @return {boolean} Do not scale stroke (outline)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"nonScalingStroke\");\r\n        },\r\n        /**\r\n         * Controls if the element's stroke (outline) should remain keep constant\r\n         * thicnkess and do not scale when the whole element is resized.\r\n         *\r\n         * @param {boolean}  value  Do not scale stroke (outline)\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"nonScalingStroke\", value)) {\r\n                this.strokeWidth = this.strokeWidth;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"nonScaling\", {\r\n        /**\r\n         * @return {boolean} Is element scaleable?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"nonScaling\");\r\n        },\r\n        /**\r\n         * Controls if element should keep constant size and not scale even if there is\r\n         * space available, or it does not fit.\r\n         *\r\n         * @param {boolean}  value  Is element scaleable?\r\n         */\r\n        set: function (value) {\r\n            // @todo Description (review)\r\n            value = $type.toBoolean(value);\r\n            this.setPropertyValue(\"nonScaling\", value, false, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"strokeWidth\", {\r\n        /**\r\n         * @return {number} Thickness (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"strokeWidth\");\r\n        },\r\n        /**\r\n         * Stroke (outline) thickness in pixels.\r\n         *\r\n         * @param {number}  value  Thickness (px)\r\n         */\r\n        set: function (value) {\r\n            value = $type.toNumber(value);\r\n            this.setPropertyValue(\"strokeWidth\", value, true);\r\n            if (this.nonScalingStroke) {\r\n                if (!$type.isNumber(value)) {\r\n                    value = 1;\r\n                }\r\n                value = value / this.globalScale;\r\n            }\r\n            this.setSVGAttribute({ \"stroke-width\": value });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"strokeDasharray\", {\r\n        /**\r\n         * @return {string} `stroke-dasharray`\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"strokeDasharray\");\r\n        },\r\n        /**\r\n         * A `stroke-dasharray` for the stroke (outline).\r\n         *\r\n         * \"Dasharray\" allows setting rules to make lines dashed, dotted, etc.\r\n         *\r\n         * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray} for more info on `stroke-dasharray`\r\n         * @param {string}  value  `stroke-dasharray`\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"strokeDasharray\", value)) {\r\n                this.setSVGAttribute({ \"stroke-dasharray\": value });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"shapeRendering\", {\r\n        /**\r\n         * @return {ShapeRendering} 'shape-rendering' value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"shapeRendering\");\r\n        },\r\n        /**\r\n         * An SVG-specific `shape-rendering` value.\r\n         *\r\n         * `shape-rendering` controls how vector graphics are drawn and rendered.\r\n         *\r\n         * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering} for more information about `shape-rendering`\r\n         * @default \"auto\"\r\n         * @param {ShapeRendering}  value  'shape-rendering' value\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"shapeRendering\", value)) {\r\n                this.setSVGAttribute({ \"shape-rendering\": value });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelPerfect\", {\r\n        /**\r\n         * @return {boolean} Use pixel perfect?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"pixelPerfect\");\r\n        },\r\n        /**\r\n         * Controls if SVG vectors should be drawn with \"pixel\" precision, producing\r\n         * perfectly crisp lines on retina displays.\r\n         *\r\n         * Setting this to `true` might improve visual quality, but may have a\r\n         * negative effect on performance.\r\n         *\r\n         * Different elements use different default setting for `pixelPerfect`.\r\n         *\r\n         * We recommend leaving this at their default settings, unless there's a\r\n         * specific need.\r\n         *\r\n         * @param {boolean}  value  Use pixel perfect?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (value) {\r\n                this._positionPrecision = 0;\r\n            }\r\n            else {\r\n                this._positionPrecision = 3;\r\n            }\r\n            this.setPropertyValue(\"pixelPerfect\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"rtl\", {\r\n        /**\r\n         * @return {boolean} RTL?\r\n         */\r\n        get: function () {\r\n            if ($type.hasValue(this._rtl)) {\r\n                return this._rtl;\r\n            }\r\n            else if (this.virtualParent) {\r\n                return this.virtualParent.rtl;\r\n            }\r\n            else if (this.parent) {\r\n                return this.parent.rtl;\r\n            }\r\n            this.rtl = false;\r\n            return this.rtl;\r\n        },\r\n        /**\r\n         * An RTL (right-to-left) setting.\r\n         *\r\n         * RTL may affect alignment, text, and other visual properties.\r\n         *\r\n         * @param {DateFormatter}  value  `true` for to use RTL\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            this._rtl = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * ==========================================================================\r\n     * VISIBILITY AND ORDER PROPERTIES AND RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Reveals hidden element.\r\n     *\r\n     * Has no effect if element is already visible.\r\n     *\r\n     * If `duration` is not specified, it will use default.\r\n     *\r\n     * @param  {number}  duration  Fade in duration (ms)\r\n     * @return {Optional<Animation>} Animation object if such object was created\r\n     */\r\n    Sprite.prototype.show = function (duration) {\r\n        return this.showReal(duration);\r\n    };\r\n    /**\r\n     * Performs actual operations to reveal this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {number} duration Fade in duration (ms)\r\n     * @return {number}          Fade in duration (ms)\r\n     */\r\n    Sprite.prototype.showReal = function (duration) {\r\n        var _this = this;\r\n        var transition;\r\n        var properties = this.defaultState.properties;\r\n        if (!this.disabled && (this.isHidden || !this.visible || this.isHiding || (properties.opacity != null && this.opacity < properties.opacity && !this.isShowing))) {\r\n            // helps to avoid flicker, as show might change opacity or visibility but item might be at invalid state/position\r\n            if (this.invalid) {\r\n                this.validate();\r\n            }\r\n            if (this.positionInvalid) {\r\n                this.validatePosition();\r\n            }\r\n            if (!$type.isNumber(duration)) {\r\n                duration = this.defaultState.transitionDuration;\r\n            }\r\n            if (this._hideAnimation) {\r\n                this._hideAnimation.kill();\r\n                this._hideAnimation = undefined;\r\n            }\r\n            // Cancel hide handler just in case it was there\r\n            if (this._showHideDisposer) {\r\n                this.removeDispose(this._showHideDisposer);\r\n            }\r\n            this._isHidden = false;\r\n            this.isHiding = false;\r\n            this.isShowing = true;\r\n            // Apply current state\r\n            transition = this.applyCurrentState(duration);\r\n            if (transition && !transition.isFinished()) {\r\n                this._showHideDisposer = transition.events.on(\"animationended\", function () {\r\n                    _this.isShowing = false;\r\n                });\r\n                this._disposers.push(this._showHideDisposer);\r\n            }\r\n            else {\r\n                this.isShowing = false;\r\n            }\r\n            // Make it visible\r\n            var visible = this.defaultState.properties.visible;\r\n            if (!$type.hasValue(visible)) {\r\n                visible = true;\r\n            }\r\n            this.visible = visible;\r\n            // Dispatch \"show\" event\r\n            this.dispatchImmediately(\"shown\");\r\n        }\r\n        return transition;\r\n    };\r\n    /**\r\n     * Initiates hiding of Sprite.\r\n     * When called it will fade out the the Sprite to transparency, then make it\r\n     * invisible.\r\n     * @param {number} duration Duration in millisecons\r\n     */\r\n    /**\r\n     * Hides the element, by applying `hidden` state.\r\n     *\r\n     * Has no effect if element is already hidden.\r\n     *\r\n     * If `duration` is not specified, it will use default.\r\n     *\r\n     * While element is fading out, its `isHiding` property will resolve to\r\n     * `true`.\r\n     *\r\n     * When element is hidden, its `visible` property will resolve to `false`.\r\n     *\r\n     * @param  {number}  duration  Fade out duration (ms)\r\n     * @return {Optional<Animation>} hide Animation object if such object was created\r\n     */\r\n    Sprite.prototype.hide = function (duration) {\r\n        return this.hideReal(duration);\r\n    };\r\n    /**\r\n     * Hides actual SVG elements and handles hiding animations.\r\n     *\r\n     * @param  {number}  duration  Fade out duration (ms)\r\n     * @return {Animation}            Fade out duration (ms)\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.hideReal = function (duration) {\r\n        var _this = this;\r\n        var transition;\r\n        if (!this.isHiding && this.visible) {\r\n            this.hideTooltip(0);\r\n            if (this._hideAnimation) {\r\n                this._hideAnimation.kill();\r\n                this._hideAnimation = undefined;\r\n            }\r\n            this.isShowing = false;\r\n            // Cancel hide handler just in case it was there\r\n            if (this._showHideDisposer) {\r\n                this.removeDispose(this._showHideDisposer);\r\n            }\r\n            // Get state\r\n            var hiddenState = this.hiddenState;\r\n            // Transition to \"hidden\" state, provided Sprite has one set\r\n            if (hiddenState) {\r\n                // Yes, we have a \"hidden\" state\r\n                // `setState` will return an `Animation` object which we can set\r\n                // events on\r\n                transition = this.setState(hiddenState, duration, undefined);\r\n                if (transition && !transition.isFinished()) {\r\n                    this._hideAnimation = transition;\r\n                    this._showHideDisposer = transition.events.on(\"animationended\", function () {\r\n                        _this.isHiding = false;\r\n                        _this._isHidden = true;\r\n                    }, this);\r\n                    this._disposers.push(this._showHideDisposer);\r\n                    // Thrown everything into `_disposers` just in case Sprite gets\r\n                    // destroyed in the meantime\r\n                    this._disposers.push(transition);\r\n                }\r\n                else {\r\n                    this.isHiding = false;\r\n                    this._isHidden = true;\r\n                }\r\n            }\r\n            else {\r\n                // No hidden state, let's just set `visible` and call it a day\r\n                this.visible = false;\r\n                this.isHiding = false;\r\n                this._isHidden = true;\r\n            }\r\n            // Dispach \"hidden\" event\r\n            this.dispatchImmediately(\"hidden\");\r\n            this.invalidate(); // hide it at once to avoid flickers // validate() causes SO\r\n        }\r\n        if (!$type.isNumber(duration)) {\r\n            duration = this.hiddenState.transitionDuration;\r\n        }\r\n        return transition;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"visible\", {\r\n        /**\r\n         * Returns current visibility of the element.\r\n         *\r\n         * @return {boolean} Visible?\r\n         */\r\n        get: function () {\r\n            return this.getVisibility();\r\n        },\r\n        /**\r\n         * Sets visibility of the element.\r\n         *\r\n         * @param {boolean} value Visible?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            this.setVisibility(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns visibility value\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.getVisibility = function () {\r\n        var value = this.getPropertyValue(\"visible\");\r\n        if (!$type.hasValue(value)) {\r\n            value = true;\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Sets `visibility` property:\r\n     *\r\n     * * `true` - visible\r\n     * * `false` - hidden\r\n     *\r\n     * @param  {boolean}  value  true - visible, false - hidden\r\n     * @return {string}          Current visibility\r\n     */\r\n    Sprite.prototype.setVisibility = function (value) {\r\n        if (this.setPropertyValue(\"visible\", value)) {\r\n            if (value) {\r\n                this.group.removeAttr(\"visibility\");\r\n            }\r\n            else {\r\n                this.group.attr({ \"visibility\": \"hidden\" });\r\n            }\r\n            //this.invalidatePosition();\r\n            if (this.events.isEnabled(\"visibilitychanged\")) {\r\n                var event_4 = {\r\n                    type: \"visibilitychanged\",\r\n                    target: this,\r\n                    visible: value\r\n                };\r\n                this.events.dispatchImmediately(\"visibilitychanged\", event_4);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"zIndex\", {\r\n        /**\r\n         * @return {number} zIndex\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"zIndex\");\r\n        },\r\n        /**\r\n         * A \"zIndex\" of the element.\r\n         *\r\n         * \"zIndex\" determines the order of how elements are placed over each other.\r\n         *\r\n         * Higher \"zIndex\" will mean the element will be draw on top of elements\r\n         * with lower \"zIndexes\".\r\n         *\r\n         * @param {number}  value  zIndex\r\n         */\r\n        set: function (value) {\r\n            value = $type.toNumber(value);\r\n            if (this.setPropertyValue(\"zIndex\", value)) {\r\n                this.dispatch(\"zIndexChanged\");\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Moves the element to the very top in element order, so that it appears\r\n     * in front of other elements.\r\n     */\r\n    Sprite.prototype.toFront = function () {\r\n        var parent = this.parent;\r\n        if (parent && parent.children.indexOf(this) != parent.children.length - 1) {\r\n            parent.children.moveValue(this, parent.children.length - 1);\r\n            this.dispatch(\"zIndexChanged\");\r\n        }\r\n    };\r\n    /**\r\n     * Moves the element to the very bottom in the element order, so that it\r\n     * appears behind other elements.\r\n     */\r\n    Sprite.prototype.toBack = function () {\r\n        var parent = this.parent;\r\n        if (parent && parent.children.indexOf(this) != 0) {\r\n            parent.children.moveValue(this, 0);\r\n            this.dispatch(\"zIndexChanged\");\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"tooltip\", {\r\n        /**\r\n         * @return {Optional<Tooltip>} Tooltip\r\n         */\r\n        get: function () {\r\n            if (this._tooltip) {\r\n                return this._tooltip;\r\n            }\r\n            else if (this.virtualParent) {\r\n                return this.virtualParent.tooltip;\r\n            }\r\n            else if (this.parent) {\r\n                return this.parent.tooltip;\r\n            }\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * TOOLTIP-RELATED PROPERTIES STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * A [[Tooltip]] object to be used when displayed rollover information for\r\n         * the element.\r\n         *\r\n         * @param {Tooltip}  tooltip  Tooltip\r\n         */\r\n        set: function (tooltip) {\r\n            if (this._tooltip) {\r\n                //this._tooltip.dispose();\r\n                this.removeDispose(this._tooltip);\r\n            }\r\n            this._tooltip = tooltip;\r\n            if (tooltip) {\r\n                tooltip.parent = this.tooltipContainer;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tooltipDataItem\", {\r\n        /**\r\n         * @return {DataItem} Tooltip data item\r\n         */\r\n        get: function () {\r\n            var tooltipDataItem = this._tooltipDataItem;\r\n            if (tooltipDataItem) {\r\n                return tooltipDataItem;\r\n            }\r\n            else {\r\n                return this.dataItem;\r\n            }\r\n        },\r\n        /**\r\n         * A [[DataItem]] to use when populating content for the element's\r\n         * [[Tooltip]].\r\n         *\r\n         * @see {@link Tooltip}\r\n         * @see {@link DataItem}\r\n         * @param {DataItem}  value  Tooltip data item\r\n         */\r\n        set: function (value) {\r\n            // important: do not dispose tooltip dataItem, as it is some actual data item from data!\r\n            this._tooltipDataItem = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tooltipColorSource\", {\r\n        /**\r\n         * @return {Optional<Sprite>} Tooltip color source\r\n         */\r\n        get: function () {\r\n            return this._tooltipColorSource;\r\n        },\r\n        /**\r\n         * A [[Sprite]] or sprite template to use when getting colors for tooltip. If a template is set,\r\n         * tooltip will look for a clone in tooltipDataItem.sprites. If no clone is found, then template colors will be used.\r\n         *\r\n         * @see {@link Tooltip}\r\n         * @see {@link Sprite}\r\n         * @param {Optional<Sprite>}  sprite Sprite\r\n         */\r\n        set: function (sprite) {\r\n            this._tooltipColorSource = sprite;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Shows the element's [[Tooltip]].\r\n     *\r\n     * A tooltip will be populated using text templates in either `tooltipHTML` or\r\n     * `tooltipText` as well as data in `tooltipDataItem`.\r\n     *\r\n     * @see {@link Tooltip}\r\n     * @param {point} optional point (sprite-related) to which tooltip must point.\r\n     * @return {boolean} returns true if the tooltip was shown and false if it wasn't (no text was found)\r\n     */\r\n    Sprite.prototype.showTooltip = function (point) {\r\n        // do not show if hidden\r\n        var sprite = this;\r\n        while (sprite != undefined) {\r\n            if (!sprite.visible || sprite.disabled || sprite.__disabled) {\r\n                return;\r\n            }\r\n            sprite = sprite.parent;\r\n        }\r\n        if ($type.hasValue(this.tooltipText) || $type.hasValue(this.tooltipHTML)) {\r\n            var tooltip = this.tooltip;\r\n            var tooltipDataItem = this.tooltipDataItem;\r\n            if (tooltip) {\r\n                var colorSource_1 = this;\r\n                var tooltipColorSource_1 = this.tooltipColorSource;\r\n                if ((tooltip.getStrokeFromObject || tooltip.getFillFromObject) && tooltipColorSource_1) {\r\n                    if (tooltipColorSource_1.isTemplate) {\r\n                        if (tooltipDataItem) {\r\n                            $array.eachContinue(tooltipDataItem.sprites, function (sprite) {\r\n                                if (sprite.clonedFrom == tooltipColorSource_1) {\r\n                                    colorSource_1 = sprite;\r\n                                    return false;\r\n                                }\r\n                                return true;\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        colorSource_1 = tooltipColorSource_1;\r\n                    }\r\n                }\r\n                if (tooltip.getStrokeFromObject) {\r\n                    var stroke = this.stroke;\r\n                    var source = colorSource_1;\r\n                    while (source.parent != undefined) {\r\n                        stroke = source.stroke;\r\n                        if (stroke == undefined) {\r\n                            source = source.parent;\r\n                        }\r\n                        if (stroke != undefined) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (stroke instanceof Color) {\r\n                        tooltip.background.animate({ property: \"stroke\", to: stroke }, tooltip.animationDuration);\r\n                    }\r\n                    else {\r\n                        tooltip.background.stroke = stroke;\r\n                    }\r\n                }\r\n                // Set data item\r\n                tooltip.dataItem = tooltipDataItem;\r\n                tooltip.label.populateStringFrom = this;\r\n                if (tooltip.getFillFromObject) {\r\n                    var fill = this.fill;\r\n                    var source = colorSource_1;\r\n                    while (source.parent != undefined) {\r\n                        fill = source.fill;\r\n                        if (fill == undefined || (fill instanceof Color && fill.rgb == undefined)) {\r\n                            source = source.parent;\r\n                        }\r\n                        else if (fill != undefined) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (fill == undefined) {\r\n                        fill = color(\"#000000\");\r\n                    }\r\n                    if (fill instanceof Color) {\r\n                        if (!tooltip.visible) {\r\n                            tooltip.background.fill = fill;\r\n                        }\r\n                        else {\r\n                            tooltip.background.animate({ property: \"fill\", to: fill }, tooltip.animationDuration);\r\n                        }\r\n                    }\r\n                    else {\r\n                        tooltip.background.fill = fill;\r\n                    }\r\n                    if (tooltip.autoTextColor && fill instanceof Color) {\r\n                        tooltip.label.fill = fill.alternative;\r\n                    }\r\n                }\r\n                // Apply tooltip text\r\n                var text = \"\";\r\n                if (this.tooltipHTML) {\r\n                    tooltip.html = this.tooltipHTML;\r\n                    text = this.tooltipHTML;\r\n                }\r\n                if (this.tooltipText) {\r\n                    tooltip.text = this.tooltipText;\r\n                    text = this.tooltipText;\r\n                }\r\n                if (this.updateTooltipPosition(point)) {\r\n                    // Set accessibility option\r\n                    tooltip.readerDescribedBy = this.uidAttr();\r\n                    // make label to render to be able to check currentText\r\n                    if (tooltip.label.invalid) {\r\n                        tooltip.label.validate();\r\n                    }\r\n                    if (text != undefined && text != \"\" && tooltip.label.currentText != \"\") {\r\n                        //@todo: think of how to solve this better\r\n                        if (tooltip && !tooltip.parent) {\r\n                            tooltip.parent = this.tooltipContainer;\r\n                        }\r\n                        // Reveal tooltip\r\n                        // showing it in 1 ms helps to avoid strange flickering in IE\r\n                        var duration = tooltip.defaultState.transitionDuration;\r\n                        if (duration <= 0) {\r\n                            duration = 1;\r\n                        }\r\n                        tooltip.show(duration);\r\n                        return true;\r\n                    }\r\n                }\r\n                else {\r\n                    this.hideTooltip(0);\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.updateTooltipPosition = function (point) {\r\n        var _this = this;\r\n        if (this.tooltipPosition == \"pointer\") {\r\n            this._interactionDisposer = getInteraction().body.events.on(\"track\", function (ev) {\r\n                return _this.pointTooltipTo($utils.documentPointToSvg(ev.point, _this.svgContainer.SVGContainer, _this.svgContainer.cssScale), true);\r\n            });\r\n            if (point) {\r\n                return this.pointTooltipTo(point, true);\r\n            }\r\n        }\r\n        else {\r\n            // Point to the X/Y of this Sprite\r\n            var globalPoint = $utils.spritePointToSvg({\r\n                \"x\": this.tooltipX,\r\n                \"y\": this.tooltipY\r\n            }, this);\r\n            return this.pointTooltipTo(globalPoint);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the point the [[Tooltip]] should point to.\r\n     *\r\n     * @param {IPoint}   point      Coordinates to point to\r\n     * @param {boolean}  instantly  Move instantly without animation\r\n     */\r\n    Sprite.prototype.pointTooltipTo = function (point, instantly) {\r\n        var tooltip = this.tooltip;\r\n        if (tooltip) {\r\n            if ($math.isInRectangle(point, { x: 0, y: 0, width: this.topParent.maxWidth, height: this.topParent.maxHeight })) {\r\n                tooltip.pointTo(point, instantly);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Hides element's [[Tooltip]].\r\n     *\r\n     * @see {@link Tooltip}\r\n     */\r\n    Sprite.prototype.hideTooltip = function (duration) {\r\n        var tooltip = this.tooltip;\r\n        if (tooltip) {\r\n            tooltip.hide(duration);\r\n            if (this._interactionDisposer) {\r\n                this._interactionDisposer.dispose();\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"tooltipHTML\", {\r\n        /**\r\n         * @return {string} Tooltip HTML content template\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tooltipHTML\");\r\n        },\r\n        /**\r\n         * An HTML template to be used to populate [[Tooltip]] contents.\r\n         *\r\n         * If element has `tooltipDataItem` or `dataItem` set, this will be parsed\r\n         * for any data values to be replaced with the values from respective data\r\n         * items.\r\n         *\r\n         * @param {string} value Tooltip HTML content template\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            this.hoverable = true;\r\n            if (this.setPropertyValue(\"tooltipHTML\", value)) {\r\n                if (this.tooltip) {\r\n                    if (this.tooltip.visible) {\r\n                        this.showTooltip();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tooltipText\", {\r\n        /**\r\n         * @return {string} Tooltip content template\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tooltipText\");\r\n        },\r\n        /**\r\n         * A text template to be used to populate Tooltip's contents.\r\n         *\r\n         * If element has `tooltipDataItem` or `dataItem` set, this will be parsed\r\n         * for any data values to be replaced with the values from respective data\r\n         * items.\r\n         *\r\n         * This template will also be parsed for any special formatting tags.\r\n         *\r\n         * @param {string} value Tooltip content template\r\n         * @see {@link TextFormatter}\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (value) {\r\n                this.hoverable = true;\r\n            }\r\n            if (this.setPropertyValue(\"tooltipText\", value)) {\r\n                if (this.tooltip) {\r\n                    if (this.tooltip.visible) {\r\n                        this.showTooltip();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tooltipContainer\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {Optional<Container>} Container\r\n         */\r\n        get: function () {\r\n            if (this._tooltipContainer) {\r\n                return this._tooltipContainer;\r\n            }\r\n            else if (this.parent) {\r\n                return this.parent.tooltipContainer;\r\n            }\r\n        },\r\n        /**\r\n         * A container reference that should be used to place element's\r\n         * [[Tooltip]] in.\r\n         *\r\n         * Will use parent's container if does not have one set.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {Container} value Container\r\n         * @todo Dispose of the old _tooltipContainer ?\r\n         */\r\n        set: function (value) {\r\n            this._tooltipContainer = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tooltipX\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {number} Tooltip X (px)\r\n         */\r\n        get: function () {\r\n            return this.getTooltipX();\r\n        },\r\n        /**\r\n         * X coordinate the [[Tooltip]] should be shown at.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {number}  value  Tooltip X (px)\r\n         */\r\n        set: function (value) {\r\n            value = $type.toNumber(value);\r\n            if (this.setPropertyValue(\"tooltipX\", value) && this.tooltip) {\r\n                this.tooltip.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tooltipPosition\", {\r\n        /**\r\n         * @type {\"fixed\" | \"pointer\"} Position\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tooltipPosition\");\r\n        },\r\n        /**\r\n         * Specifies if [[Tooltip]] should follow the mouse or touch pointer or stay\r\n         * at the fixed position.\r\n         *\r\n         * @param { \"fixed\" | \"pointer\" }  value  Position\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tooltipPosition\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tooltipY\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {number} Tooltip Y (px)\r\n         */\r\n        get: function () {\r\n            return this.getTooltipY();\r\n        },\r\n        /**\r\n         * Y coordinate the [[Tooltip]] should be shown at.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {number}  value  Tooltip Y (px)\r\n         */\r\n        set: function (value) {\r\n            value = $type.toNumber(value);\r\n            if (this.setPropertyValue(\"tooltipY\", value) && this.tooltip) {\r\n                this.tooltip.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns Tooltip X coordinate if it's set, or middle of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {number} X (px)\r\n     */\r\n    Sprite.prototype.getTooltipX = function () {\r\n        var x = this.getPropertyValue(\"tooltipX\");\r\n        if (!$type.isNumber(x)) {\r\n            x = this.maxLeft + this.measuredWidth / 2 - this.pixelPaddingLeft - this.ex; // overflow is know only for measured items, so this is not always good\r\n        }\r\n        return x;\r\n    };\r\n    /**\r\n     * Returns Tooltip Y coordinate if it's set, or middle of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {number} Y (px)\r\n     */\r\n    Sprite.prototype.getTooltipY = function () {\r\n        var y = this.getPropertyValue(\"tooltipY\");\r\n        if (!$type.isNumber(y)) {\r\n            y = this.maxTop + this.measuredHeight / 2 - this.pixelPaddingTop - this.ey; // overflow is know only for measured items, so this is not always good\r\n        }\r\n        return y;\r\n    };\r\n    /**\r\n     * Displays a modal or console message with error, and halts any further\r\n     * processing of this item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Error} e Error\r\n     * @todo Implement from applying further actions to this item\r\n     */\r\n    Sprite.prototype.raiseCriticalError = function (e) {\r\n        if (this.svgContainer) {\r\n            this.modal.content = e.message;\r\n            this.modal.closable = false;\r\n            this.modal.open();\r\n            this.disabled = true;\r\n        }\r\n        if (options.verbose) {\r\n            console.log(e);\r\n        }\r\n    };\r\n    /**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param {object}  config  Config\r\n */\r\n    Sprite.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Tooltip color source\r\n            if ($type.hasValue(config.tooltipColorSource) && $type.isString(config.tooltipColorSource) && this.map.hasKey(config.tooltipColorSource)) {\r\n                config.tooltipColorSource = this.map.getKey(config.tooltipColorSource);\r\n            }\r\n            // Cursor styles\r\n            if ($type.hasValue(config.cursorOverStyle) && $type.isString(config.cursorOverStyle)) {\r\n                config.cursorOverStyle = this.getCursorStyle(config.cursorOverStyle);\r\n            }\r\n            if ($type.hasValue(config.cursorDowntyle) && $type.isString(config.cursorDowntyle)) {\r\n                config.cursorDowntyle = this.getCursorStyle(config.cursorDowntyle);\r\n            }\r\n            if ($type.hasValue(config.cursorOptions)) {\r\n                if ($type.hasValue(config.cursorOptions.overStyle) && $type.isString(config.cursorOptions.overStyle)) {\r\n                    config.cursorOptions.overStyle = this.getCursorStyle(config.cursorOptions.overStyle);\r\n                }\r\n                if ($type.hasValue(config.cursorOptions.downStyle) && $type.isString(config.cursorOptions.downStyle)) {\r\n                    config.cursorOptions.downStyle = this.getCursorStyle(config.cursorOptions.downStyle);\r\n                }\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    /**\r\n     * Converts string name of the cursor into actual [[MouseCursorStyle]].\r\n     *\r\n     * @param  {string}                      style  Cursor type\r\n     * @return {Optional<MouseCursorStyle>}         Cursor definition\r\n     */\r\n    Sprite.prototype.getCursorStyle = function (style) {\r\n        switch (style) {\r\n            case \"grab\":\r\n                return MouseCursorStyle.grab;\r\n            case \"grabbing\":\r\n                return MouseCursorStyle.grabbing;\r\n            case \"pointer\":\r\n                return MouseCursorStyle.pointer;\r\n            case \"horizontalResize\":\r\n                return MouseCursorStyle.horizontalResize;\r\n            case \"verticalResize\":\r\n                return MouseCursorStyle.verticalResize;\r\n            default:\r\n                return MouseCursorStyle.default;\r\n        }\r\n    };\r\n    /**\r\n     * This function is used to sort element's JSON config properties, so that\r\n     * some properties that absolutely need to be processed last, can be put at\r\n     * the end.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}  a  Element 1\r\n     * @param  {string}  b  Element 2\r\n     * @return {Ordering}   Sorting number\r\n     */\r\n    Sprite.prototype.configOrder = function (a, b) {\r\n        if (a == b) {\r\n            return 0;\r\n        }\r\n        // Must come last\r\n        else if (a == \"tooltipColorSource\") {\r\n            return 1;\r\n        }\r\n        else if (b == \"tooltipColorSource\") {\r\n            return -1;\r\n        }\r\n        else {\r\n            return _super.prototype.configOrder.call(this, a, b);\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"isHidden\", {\r\n        /**\r\n         * If `sprite.hide()` is called, we set isHidden to true when sprite is hidden.\r\n         * This was added becaus hidden state might have visibility set to true and so\r\n         * there would not be possible to find out if a sprite is technically hidden or not.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        get: function () {\r\n            if (this._isHidden) {\r\n                return this._isHidden;\r\n            }\r\n            else if (this._parent) {\r\n                return this._parent.isHidden;\r\n            }\r\n            return false;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"showOnInit\", {\r\n        /**\r\n         * @return {boolean} Show on init?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"showOnInit\");\r\n        },\r\n        /**\r\n         * If this is set to `true`, Sprite, when inited will be instantly hidden\r\n         * (\"hidden\" state applied) and then shown (\"default\" state applied).\r\n         *\r\n         * If your \"default\" state's `transitionDuration > 0` this will result in\r\n         * initial animation from \"hidden\" state to \"default\" state.\r\n         *\r\n         * If you need a Sprite which has `showOnInit = true` not to be shown\r\n         * initially, set `sprite.hidden = true`. Setting `sprite.visible = false`\r\n         * will not prevent the animation and the sprite will be shown.\r\n         *\r\n         * @param {boolean}  value show on init?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            this.setShowOnInit(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.setShowOnInit = function (value) {\r\n        if (this.setPropertyValue(\"showOnInit\", value)) {\r\n            if (!this.isTemplate) {\r\n                if (value && !this.inited && !this.hidden) {\r\n                    this._showOnInitDisposer = new MultiDisposer([\r\n                        registry.events.once(\"enterframe\", this.hideInitially, this),\r\n                        this.events.once(\"beforevalidated\", this.hideInitially, this, false),\r\n                        this.events.on(\"inited\", this.appear, this, false)\r\n                    ]);\r\n                    this._disposers.push(this._showOnInitDisposer);\r\n                }\r\n                else {\r\n                    if (this._showOnInitDisposer) {\r\n                        this._showOnInitDisposer.dispose();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.hideInitially = function () {\r\n        if (!this.isDisposed()) {\r\n            this.appeared = false;\r\n            //if (!this.hidden && !this._isHidden) { // not good for series, as on enterframe it doesn't have data items yet.\r\n            if (!this.inited) {\r\n                this.hide(0);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Hides the chart instantly and then shows it. If defaultState.transitionDuration > 0, this will result an animation in which properties of hidden state will animate to properties of visible state.\r\n     */\r\n    Sprite.prototype.appear = function () {\r\n        var _this = this;\r\n        this.appeared = false;\r\n        if (!this.hidden && !this.isHidden) {\r\n            this.hide(0);\r\n        }\r\n        if (!this.hidden) {\r\n            var animation = this.show();\r\n            if (animation && !animation.isFinished()) {\r\n                animation.events.on(\"animationended\", function () {\r\n                    _this.appeared = true;\r\n                });\r\n            }\r\n            else {\r\n                this.appeared = true;\r\n            }\r\n        }\r\n        else {\r\n            this.appeared = true;\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"hidden\", {\r\n        /**\r\n         * @return {boolean} Is initially hidden?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"hidden\");\r\n        },\r\n        /**\r\n         * If a sprite has `showOnInit = true`, it will animate from \"hidden\" to\r\n         * \"default\" state when initialized. To prevent this but keep\r\n         * `showOnInit = true`, you can set `sprite.hidden = true`.\r\n         *\r\n         * @param {boolean}  value initially hidden?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            this.setPropertyValue(\"hidden\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"bbox\", {\r\n        /**\r\n         * Returns bounding box (square) for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {IRectangle}\r\n         */\r\n        get: function () {\r\n            if (this.definedBBox) {\r\n                return this.definedBBox;\r\n            }\r\n            return this._bbox;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Sprite;\r\n}(BaseObjectEvents));\r\nexport { Sprite };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Sprite\"] = Sprite;\r\n//# sourceMappingURL=Sprite.js.map","import * as tslib_1 from \"tslib\";\r\nimport { Dictionary } from \"./utils/Dictionary\";\r\nimport { TargetedEventDispatcher } from \"./utils/EventDispatcher\";\r\nimport { MultiDisposer, CounterDisposer } from \"./utils/Disposer\";\r\nimport * as $utils from \"./utils/Utils\";\r\nimport * as $object from \"./utils/Object\";\r\n/**\r\n * An [[EventDispatcher]] for [[Sprite]].\r\n *\r\n * @type {TargetedEventDispatcher}\r\n * @important\r\n */\r\nvar SpriteEventDispatcher = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SpriteEventDispatcher, _super);\r\n    function SpriteEventDispatcher() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /**\r\n         * [_interactionEvents description]\r\n         *\r\n         * @todo Description\r\n         * @type {Dictionary}\r\n         */\r\n        _this._interactionEvents = new Dictionary();\r\n        return _this;\r\n    }\r\n    /**\r\n     * [_dispatchSpriteEvent description]\r\n     *\r\n     * @todo Description\r\n     * @type {[type]}\r\n     */\r\n    SpriteEventDispatcher.prototype._dispatchSpriteEvent = function (ev) {\r\n        if (this.target.disabled || this.target.isTemplate) {\r\n            return;\r\n        }\r\n        // TODO remove this <any> later\r\n        if (this.target.events.isEnabled(ev.type)) {\r\n            var imev = $object.merge(ev, {\r\n                target: this.target\r\n            });\r\n            this.target.events.dispatchImmediately(imev.type, imev);\r\n        }\r\n    };\r\n    /**\r\n     * [_dispatchSpritePointEvent description]\r\n     *\r\n     * @todo Description\r\n     * @type {[type]}\r\n     */\r\n    SpriteEventDispatcher.prototype._dispatchSpritePointEvent = function (ev) {\r\n        if (this.target.disabled || this.target.isTemplate) {\r\n            return;\r\n        }\r\n        // TODO remove this <any> later\r\n        if (this.target.events.isEnabled(ev.type)) {\r\n            var imev = $object.merge(ev, {\r\n                target: this.target,\r\n                spritePoint: $utils.documentPointToSprite(ev.point, this.target),\r\n                svgPoint: this.target.getSvgPoint(ev.point)\r\n            });\r\n            this.target.events.dispatchImmediately(imev.type, imev);\r\n        }\r\n    };\r\n    /**\r\n     * [_addInteractionObjectEvent description]\r\n     *\r\n     * @todo Description\r\n     * @type {[type]}\r\n     */\r\n    SpriteEventDispatcher.prototype._addInteractionObjectEvent = function (type, callback, context, shouldClone) {\r\n        var _this = this;\r\n        var counter = this._interactionEvents.insertKeyIfEmpty(type, function () {\r\n            var disposer = _this.target.interactions.events.on(type, callback, context, shouldClone);\r\n            return new CounterDisposer(function () {\r\n                _this._interactionEvents.removeKey(type);\r\n                disposer.dispose();\r\n            });\r\n        });\r\n        return counter.increment();\r\n    };\r\n    /**\r\n     * [_on description]\r\n     *\r\n     * @todo Description\r\n     * @type {[type]}\r\n     */\r\n    SpriteEventDispatcher.prototype._on = function (once, type, callback, context, shouldClone, dispatch) {\r\n        var info = _super.prototype._on.call(this, once, type, callback, context, shouldClone, dispatch);\r\n        var disposers = [info.disposer];\r\n        /**\r\n         * Catching Sprite-related events, converting them to [[SpriteEvent]] and\r\n         * triggering them on sprite\r\n         */\r\n        switch (type) {\r\n            case \"hit\":\r\n            case \"track\":\r\n            case \"doublehit\":\r\n            case \"wheel\":\r\n            case \"wheelup\":\r\n            case \"wheeldown\":\r\n            case \"wheelleft\":\r\n            case \"wheelright\":\r\n                disposers.push(this._addInteractionObjectEvent(type, this._dispatchSpritePointEvent, this, shouldClone));\r\n                break;\r\n            case \"rightclick\":\r\n            case \"down\":\r\n            //case \"hold\":\r\n            case \"up\":\r\n            case \"drag\":\r\n            case \"dragstart\":\r\n            case \"dragstop\":\r\n            case \"over\":\r\n            case \"out\":\r\n            case \"swipe\":\r\n            case \"swipeleft\":\r\n            case \"swiperight\":\r\n            case \"resize\":\r\n            //case \"rotate\":\r\n            case \"focus\":\r\n            case \"blur\":\r\n            case \"toggled\":\r\n                disposers.push(this._addInteractionObjectEvent(type, this._dispatchSpriteEvent, this, shouldClone));\r\n                break;\r\n        }\r\n        /**\r\n         * Set functional properties based on events. For example if we add a\r\n         * \"drag\" event handler, we want to make the Sprite draggable, even if we\r\n         * don't explicitly set \"draggable\"\r\n         */\r\n        switch (type) {\r\n            case \"hit\":\r\n            case \"doublehit\":\r\n            case \"rightclick\":\r\n            case \"down\":\r\n            case \"up\":\r\n                this.target.clickable = true;\r\n                break;\r\n            case \"toggled\":\r\n                this.target.togglable = true;\r\n                break;\r\n            case \"drag\":\r\n            case \"dragstart\":\r\n            case \"dragstop\":\r\n                this.target.draggable = true;\r\n                break;\r\n            case \"track\":\r\n                this.target.trackable = true;\r\n                break;\r\n            case \"resize\":\r\n                this.target.resizable = true;\r\n                break;\r\n            case \"swipe\":\r\n            case \"swipeleft\":\r\n            case \"swiperight\":\r\n                this.target.swipeable = true;\r\n                break;\r\n            case \"wheel\":\r\n            case \"wheelup\":\r\n            case \"wheeldown\":\r\n            case \"wheelleft\":\r\n            case \"wheelright\":\r\n                this.target.wheelable = true;\r\n                break;\r\n            case \"over\":\r\n                this.target.hoverable = true;\r\n            case \"out\":\r\n                this.target.hoverable = true;\r\n                break;\r\n            case \"focus\":\r\n            case \"blur\":\r\n                this.target.focusable = true;\r\n                break;\r\n        }\r\n        info.disposer = new MultiDisposer(disposers);\r\n        return info;\r\n    };\r\n    return SpriteEventDispatcher;\r\n}(TargetedEventDispatcher));\r\nexport { SpriteEventDispatcher };\r\n//# sourceMappingURL=SpriteEvents.js.map","/**\r\n * Module contains functionality related to [[Sprite]] states.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"./Base\";\r\nimport { Adapter } from \"./utils/Adapter\";\r\nimport { List, ListDisposer } from \"./utils/List\";\r\nimport { toColor } from \"./utils/Color\";\r\nimport { percent } from \"./utils/Percent\";\r\nimport * as $utils from \"./utils/Utils\";\r\nimport * as $ease from \"./utils/Ease\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\n/**\r\n * Defines a state for [[Sprite]].\r\n *\r\n * A \"state\" is a special object that has all the same properties as the\r\n * [[Sprite]] of the same type, and which can be used to quickly apply a set\r\n * of property values. (set state)\r\n *\r\n * When [[Sprite]] (or any object that extends Sprite) is created it creates a\r\n * \"default\" state. You can modify the \"default\" state so that when the Sprite\r\n * returns to default state certain properties are added.\r\n *\r\n * Default state can be accessed using Sprite's `defaultState` getter.\r\n *\r\n * ```TypeScript\r\n * sprite.defaultState.properties.fillOpacity = 0.5;\r\n * ```\r\n * ```JavaScript\r\n * sprite.defaultState.properties.fillOpacity = 0.5;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"defaultState\": {\r\n *     \"properties\": {\r\n *       \"fillOpacity\": 0.5\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * If Sprite is \"hoverable\", it automatically adds a \"hover\" state, which is\r\n * applied when it has a cursor over it.\r\n *\r\n * ```TypeScript\r\n * let hoverstate = sprite.states.create(\"hover\");\r\n * hoverstate.properties.fillOpacity = 1;\r\n * ```\r\n * ```JavaScript\r\n * var hoverstate = sprite.states.create(\"hover\");\r\n * hoverstate.properties.fillOpacity = 1;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"states\": {\r\n *     \"hover\": {\r\n *       \"properties\": {\r\n *         \"fillOpacity\": 0.5\r\n *       }\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * The above will automatically apply \"hover\" state when the Sprite is hovered,\r\n * thus will set its `fillOpacity` property to 1, and will reset it to 0.5 when\r\n * it's no longer hovered.\r\n *\r\n * Every object that inherits from [[Sprite]] can and will add their own\r\n * properties to the available list.\r\n *\r\n * User can create their own states, and apply them as needed:\r\n *\r\n * ```TypeScript\r\n * let myCustomState = sprite.states.create(\"mystate\");\r\n * myCustomState.properties.fillOpacity = 0.5;\r\n * myCustomState.properties.strokeOpacity = 0.8;\r\n * sprite.setState(\"mystate\");\r\n * ```\r\n * ```JavaScript\r\n * var myCustomState = sprite.states.create(\"mystate\");\r\n * myCustomState.properties.fillOpacity = 0.5;\r\n * myCustomState.properties.strokeOpacity = 0.8;\r\n * sprite.setState(\"mystate\");\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/states/}\r\n * @important\r\n */\r\nvar SpriteState = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SpriteState, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SpriteState() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Holds Adapter.\r\n         *\r\n         * @type {Adapter<Sprite, SpriteAdapters>}\r\n         */\r\n        _this.adapter = new Adapter(_this);\r\n        /**\r\n         * Duration of the transition to this state. 0 means instantenous transition.\r\n         * Any number means the [[Sprite]] will transit smoothly to this state,\r\n         * animating all animatable properties.\r\n         *\r\n         * @default 0\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n         * @type {number}\r\n         */\r\n        _this.transitionDuration = 0;\r\n        /**\r\n         * Easing function to use when transitioning to this state.\r\n         *\r\n         * @default cubicOut\r\n         * @see {@link Ease}\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n         * @type {(number) => number}\r\n         */\r\n        _this.transitionEasing = $ease.cubicOut;\r\n        /**\r\n         * Collection of properties and their values that should be applied to [[Sprite]]\r\n         * when switching to this State.\r\n         *\r\n         * The property values set on a [[SpriteState]] will override the ones set\r\n         * directly on a [[Sprite]].\r\n         *\r\n         * @type {Dictionary<string, any>}\r\n         */\r\n        _this.properties = {};\r\n        /**\r\n         * A collection of key/value pairs that can be used to bind specific Sprite\r\n         * properties to [[DataItem]].\r\n         *\r\n         * For example: `fill` property can be bound to `myCustomColor` field in\r\n         * DataItem. The Sprite will automatically get the value for `fill` from its\r\n         * DataItem.\r\n         *\r\n         * SpriteState-specific binding will override binding set directly on\r\n         * [[Sprite]]. I.e. you can make Sprite use different fill color on hover by\r\n         * adding a `fill` binding to a different DataItem key for Sprite's \"hover\"\r\n         * state object.\r\n         *\r\n         * @see {@link Sprite}\r\n         * @type {Object}\r\n         */\r\n        _this.propertyFields = {};\r\n        //public propertyFields: Dictionary<keyof this[\"_properties\"], string> = new Dictionary<keyof this[\"_properties\"], string>();;\r\n        /**\r\n         * A list of [[Filter]] elements to be applied to the relative [[Sprite]]\r\n         * when switching to this State.\r\n         *\r\n         * @param {List}\r\n         */\r\n        _this.filters = new List();\r\n        /**\r\n         * Identifies if this object is a \"template\" and should not be treated as\r\n         * real object that is drawn or actually used in the chart.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this.isTemplate = false;\r\n        _this.className = \"SpriteState\";\r\n        // Make filter list disposable\r\n        _this._disposers.push(new ListDisposer(_this.filters));\r\n        // Decorate adapter with events so that we can apply its settings whenever\r\n        // it is modified\r\n        _this.adapter.events.on(\"inserted\", function (ev) {\r\n            _this[ev.newValue.key] = _this[ev.newValue.key];\r\n        }, undefined, false);\r\n        _this.adapter.events.on(\"removed\", function (ev) {\r\n            _this[ev.newValue.key] = _this[ev.newValue.key];\r\n        }, undefined, false);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns [[Sprite]] element's property value.\r\n     *\r\n     * Will check if there are any bindings with [[DataItem]] and if there are\r\n     * any method callbacks set up for the specific property.\r\n     *\r\n     * @param  {Properties}  propertyName  Property name\r\n     * @return {any}                       Property value\r\n     */\r\n    SpriteState.prototype.getPropertyValue = function (propertyName) {\r\n        var propValue = this.properties[propertyName];\r\n        var sprite = this.sprite;\r\n        if (sprite) {\r\n            var fieldName = this.propertyFields[propertyName];\r\n            if ($type.hasValue(fieldName)) {\r\n                if (sprite.dataItem) {\r\n                    propValue = sprite.dataItem.dataContext[fieldName];\r\n                }\r\n            }\r\n            // Apply adapters\r\n            // If the value itself is undefined, we're going to pass in Sprite's\r\n            // value to adapters\r\n            // @todo get rid of <any>\r\n            if (!$type.hasValue(propValue)) {\r\n                var spriteValue = sprite.getPropertyValue(propertyName);\r\n                propValue = this.adapter.apply(propertyName, sprite.getPropertyValue(propertyName));\r\n                if (propValue == spriteValue) {\r\n                    propValue = undefined;\r\n                }\r\n            }\r\n            else {\r\n                propValue = this.adapter.apply(propertyName, propValue);\r\n            }\r\n            /*let method = this.propertyMethods.getKey(propertyName);\r\n            if (method) {\r\n                propValue = method(sprite, propertyName);\r\n            }*/\r\n        }\r\n        return propValue;\r\n    };\r\n    /**\r\n     * Copies all property and style values from another [[SpriteState]] object.\r\n     *\r\n     * @param {SpriteState}  source  Source [[SpriteState]]\r\n     */\r\n    SpriteState.prototype.copyFrom = function (source) {\r\n        if (source && source != this) {\r\n            this.transitionDuration = source.transitionDuration;\r\n            this.transitionEasing = source.transitionEasing;\r\n            $utils.copyProperties(source.properties, this.properties);\r\n            $utils.copyProperties(source.propertyFields, this.propertyFields);\r\n            this.filters.copyFrom(source.filters);\r\n            this.adapter.copyFrom(source.adapter);\r\n        }\r\n    };\r\n    Object.defineProperty(SpriteState.prototype, \"allValues\", {\r\n        /**\r\n         * Returns all values that should be applied by the SpriteState.\r\n         *\r\n         * It takes adapters into account.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {ISpriteProperties} Properties\r\n         * @todo Add adapter values\r\n         * @todo proper type this[\"_properties\"]\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            // Init return value\r\n            var res = {};\r\n            // Apply adapters to all values\r\n            $object.each(this.properties, function (prop, value) {\r\n                res[prop] = _this.getPropertyValue(prop);\r\n            });\r\n            // Cycle through all adapters and add values for missing properties\r\n            var keys = this.adapter.keys();\r\n            $object.each(keys, function (_x, prop) {\r\n                var value = _this.getPropertyValue(prop);\r\n                res[prop] = value;\r\n            });\r\n            // Cycle through all property fileds and add values for missing properties\r\n            var propertyFields = this.propertyFields;\r\n            $object.each(propertyFields, function (prop) {\r\n                var value = _this.getPropertyValue(prop);\r\n                res[prop] = value;\r\n            });\r\n            return res;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Resets the State to initial state - no values or Filters applied.\r\n     */\r\n    SpriteState.prototype.reset = function () {\r\n        this.properties = {};\r\n        this.filters.clear();\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {object}  config  Config\r\n     */\r\n    SpriteState.prototype.processConfig = function (config) {\r\n        if ($type.hasValue(config) && $type.hasValue(config[\"properties\"])) {\r\n            $object.each(config[\"properties\"], function (key, value) {\r\n                if ($type.isString(value)) {\r\n                    if (value.match(/^[0-9.\\-]+\\%$/)) {\r\n                        config[\"properties\"][key] = percent($type.toNumber(value));\r\n                    }\r\n                    else if (value.match(/^\\#[0-9abcdef]{3,}$/i)) {\r\n                        config[\"properties\"][key] = toColor(value);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    return SpriteState;\r\n}(BaseObject));\r\nexport { SpriteState };\r\n//# sourceMappingURL=SpriteState.js.map","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { registry } from \"./Registry\";\r\nimport { Container } from \"./Container\";\r\nimport { Component } from \"./Component\";\r\nimport { options } from \"./Options\";\r\nimport { raf } from \"./utils/AsyncPending\";\r\nimport { animations } from \"./utils/Animation\";\r\nimport { triggerIdle } from \"./utils/AsyncPending\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $object from \"./utils/Object\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * The main class that handles system-wide tasks, like caching, heartbeats, etc.\r\n * @important\r\n */\r\nvar System = /** @class */ (function () {\r\n    /**\r\n     * Performs initialization of the System object.\r\n     *\r\n     * Called when the first [[Sprite]] object is created.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    function System() {\r\n        /**\r\n         * A flag indicating if the system is on pause.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        this._isPaused = false;\r\n        /**\r\n         * Unique ID of the object.\r\n         *\r\n         * @type {string}\r\n         */\r\n        this.uid = registry.getUniqueId();\r\n        /**\r\n         * @todo Description\r\n         * @todo Needed?\r\n         * @ignore Exclude from docs\r\n         * @type {number}\r\n         */\r\n        this.dummyCounter = 0;\r\n        this._frameRequested = false;\r\n        this.updateStepDuration = 45;\r\n        this.time = Date.now();\r\n    }\r\n    /**\r\n     * Reports time elapsed since timer was reset.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Needed?\r\n     * @param {string}   msg    Message to report in console\r\n     * @param {boolean}  reset  Reset time counter\r\n     */\r\n    System.prototype.reportTime = function (msg, reset) {\r\n        if (this.dummyCounter < 6) {\r\n            //console.log(Date.now() - this.time, msg, this.dummyCounter2);\r\n        }\r\n        if (reset) {\r\n            this.time = Date.now();\r\n        }\r\n    };\r\n    /**\r\n     * Performs \"heartbeat\" operations `frameRate` number of times per second.\r\n     *\r\n     * When the chart element is invalidated, it is not immediately redrawn.\r\n     *\r\n     * Instead it waits for the next `update()` cycle to be re-validated.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Maybe should be private?\r\n     */\r\n    System.prototype.update = function () {\r\n        var _this = this;\r\n        if (this._isPaused) {\r\n            return;\r\n        }\r\n        this._frameRequested = false;\r\n        var time = Date.now();\r\n        registry.dispatchImmediately(\"enterframe\");\r\n        //this.validateLayouts();\r\n        //this.validatePositions();\r\n        /*\r\n                for (let key in registry.invalidLayouts) {\r\n                    this.validateLayouts(key);\r\n                }\r\n                for (let key in registry.invalidPositions) {\r\n                    this.validatePositions(key);\r\n                }\r\n        */\r\n        var skippedComponents = [];\r\n        // data objects first - do all calculations\r\n        // only data is parsed in chunks, thats why we do for loop instead of a while like with other invalid items.\r\n        // important to go backwards, as items are removed!\r\n        // TODO use iterator instead\r\n        for (var key in registry.invalidDatas) {\r\n            if ($object.hasKey(registry.invalidDatas, key)) {\r\n                var invalidData = registry.invalidDatas[key];\r\n                while (invalidData.length > 0) {\r\n                    var component = invalidData[0];\r\n                    var dataProvider = component.dataProvider;\r\n                    if (!component.isDisposed()) {\r\n                        if (dataProvider && dataProvider.dataInvalid) {\r\n                            try {\r\n                                dataProvider.validateData();\r\n                                if (dataProvider.dataValidationProgress < 1) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                            catch (e) {\r\n                                $array.remove(invalidData, dataProvider);\r\n                                dataProvider.raiseCriticalError(e);\r\n                            }\r\n                        }\r\n                        else {\r\n                            try {\r\n                                component.validateData();\r\n                                if (component.dataValidationProgress < 1) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                            catch (e) {\r\n                                $array.remove(invalidData, component);\r\n                                component.raiseCriticalError(e);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        $array.remove(invalidData, component);\r\n                    }\r\n                }\r\n                if (Date.now() - time > this.updateStepDuration) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        while (registry.invalidRawDatas.length > 0) {\r\n            var component = registry.invalidRawDatas[0];\r\n            if (!component.isDisposed()) {\r\n                try {\r\n                    component.validateRawData();\r\n                }\r\n                catch (e) {\r\n                    $array.remove(registry.invalidRawDatas, component);\r\n                    component.raiseCriticalError(e);\r\n                }\r\n            }\r\n            else {\r\n                $array.remove(registry.invalidRawDatas, component);\r\n            }\r\n        }\r\n        // TODO use iterator instead\r\n        while (registry.invalidDataItems.length > 0) {\r\n            var component = registry.invalidDataItems[0];\r\n            var dataProvider = component.dataProvider;\r\n            // this is needed to avoid partial value validation when data is parsed in chunks\r\n            if (component.isDisposed() || component.dataInvalid || (dataProvider && dataProvider.dataInvalid)) {\r\n                // void\r\n            }\r\n            else {\r\n                try {\r\n                    component.validateDataItems();\r\n                }\r\n                catch (e) {\r\n                    $array.remove(registry.invalidDataItems, component);\r\n                    component.raiseCriticalError(e);\r\n                }\r\n            }\r\n            // this might seem too much, as validateValues removes from invalidDataItems aswell, but just to be sure (in case validateData is overriden and no super is called)\r\n            $array.remove(registry.invalidDataItems, component);\r\n        }\r\n        // TODO use iterator instead\r\n        while (registry.invalidDataRange.length > 0) {\r\n            var component = registry.invalidDataRange[0];\r\n            var dataProvider = component.dataProvider;\r\n            if (component.isDisposed() || component.dataInvalid || (dataProvider && dataProvider.dataInvalid)) {\r\n                // void\r\n            }\r\n            else {\r\n                try {\r\n                    component.validateDataRange();\r\n                    if (!component.skipRangeEvent) {\r\n                        component.dispatchImmediately(\"datarangechanged\");\r\n                    }\r\n                    component.skipRangeEvent = false;\r\n                }\r\n                catch (e) {\r\n                    $array.remove(registry.invalidDataRange, component);\r\n                    component.raiseCriticalError(e);\r\n                }\r\n            }\r\n            // this might seem too much, as validateDataRange removes from invalidDataRange aswell, but just to be sure (in case validateData is overriden and no super is called)\r\n            $array.remove(registry.invalidDataRange, component);\r\n        }\r\n        var skippedSprites = [];\r\n        // display objects later\r\n        // TODO use iterator instead\r\n        $object.each(registry.invalidLayouts, function (key) {\r\n            _this.validateLayouts(key);\r\n        });\r\n        $object.each(registry.invalidPositions, function (key) {\r\n            _this.validatePositions(key);\r\n        });\r\n        var hasSkipped = false;\r\n        time = Date.now();\r\n        $object.each(registry.invalidSprites, function (key, invalidSprites) {\r\n            var count = 0;\r\n            while (invalidSprites.length > 0) {\r\n                _this.validateLayouts(key);\r\n                _this.validatePositions(key);\r\n                count++;\r\n                if (count == 5) {\r\n                    if (Date.now() - time > _this.updateStepDuration) {\r\n                        break;\r\n                    }\r\n                    count = 0;\r\n                }\r\n                var sprite = invalidSprites[invalidSprites.length - 1];\r\n                // we need to check this, as validateLayout might validate sprite\r\n                if (sprite && !sprite.isDisposed()) {\r\n                    if (!_this.checkIfValidate(sprite)) {\r\n                        // void\r\n                        skippedSprites.push(sprite);\r\n                    }\r\n                    else {\r\n                        if (!_this.checkIfValidate2(sprite)) {\r\n                            // void\r\n                            skippedSprites.push(sprite);\r\n                        }\r\n                        else {\r\n                            try {\r\n                                if (sprite instanceof Container) {\r\n                                    sprite.children.each(function (child) {\r\n                                        if (child.invalid) {\r\n                                            if (!_this.checkIfValidate(child)) {\r\n                                                skippedSprites.push(child);\r\n                                            }\r\n                                            else if (child.dataItem && child.dataItem.component && child.dataItem.component.dataInvalid) {\r\n                                                skippedSprites.push(child);\r\n                                            }\r\n                                            else {\r\n                                                child.validate();\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                }\r\n                                sprite.validate();\r\n                            }\r\n                            catch (e) {\r\n                                sprite.invalid = false;\r\n                                $array.remove(invalidSprites, sprite);\r\n                                sprite.raiseCriticalError(e);\r\n                            }\r\n                        }\r\n                    }\r\n                    // this might seem too much, but it's ok\r\n                    sprite.invalid = false;\r\n                }\r\n                $array.remove(invalidSprites, sprite);\r\n            }\r\n            registry.invalidSprites[key] = registry.invalidSprites[key].concat(skippedSprites);\r\n        });\r\n        $object.each(registry.invalidSprites, function (key, value) {\r\n            if (value.length > 0) {\r\n                hasSkipped = true;\r\n            }\r\n        });\r\n        $object.each(registry.invalidDatas, function (key, value) {\r\n            if (value.length > 0) {\r\n                hasSkipped = true;\r\n            }\r\n        });\r\n        // TODO make this more efficient\r\n        // TODO don't copy the array\r\n        $array.each($array.copy(animations), function (x) {\r\n            x.update();\r\n        });\r\n        //if(!hasSkipped){\r\n        $object.each(registry.invalidLayouts, function (key) {\r\n            _this.validateLayouts(key);\r\n        });\r\n        $object.each(registry.invalidPositions, function (key) {\r\n            _this.validatePositions(key);\r\n        });\r\n        //}\r\n        triggerIdle();\r\n        $object.each(registry.invalidLayouts, function (key) {\r\n            _this.validateLayouts(key);\r\n        });\r\n        $object.each(registry.invalidPositions, function (key) {\r\n            _this.validatePositions(key);\r\n        });\r\n        registry.dispatchImmediately(\"exitframe\");\r\n        if (hasSkipped || animations.length > 0 || skippedComponents.length > 0) {\r\n            this.requestFrame();\r\n        }\r\n        if (this.updateStepDuration < 200) {\r\n            var all0_1 = true;\r\n            $object.each(registry.invalidDatas, function (key, value) {\r\n                if (value.length > 0) {\r\n                    all0_1 = false;\r\n                }\r\n            });\r\n            $object.each(registry.invalidSprites, function (key, value) {\r\n                if (value.length > 0) {\r\n                    all0_1 = false;\r\n                }\r\n            });\r\n            if (all0_1) {\r\n                this.updateStepDuration = 200;\r\n            }\r\n        }\r\n    };\r\n    System.prototype.checkIfValidate = function (sprite) {\r\n        if (sprite instanceof Component && (sprite.dataInvalid || (sprite.dataProvider && sprite.dataProvider.dataInvalid))) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    };\r\n    System.prototype.checkIfValidate2 = function (sprite) {\r\n        if (sprite.dataItem && sprite.dataItem.component && sprite.dataItem.component.dataInvalid && !sprite.dataItem.component.isTemplate) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    };\r\n    /**\r\n     * Requests new animation frame\r\n     */\r\n    System.prototype.requestFrame = function () {\r\n        var _this = this;\r\n        if (!this._frameRequested) {\r\n            raf(function () {\r\n                _this.update();\r\n            });\r\n            this._frameRequested = true;\r\n        }\r\n    };\r\n    /**\r\n     * Triggers position re-validation on all [[Sprite]] elements that have\r\n     * invalid(ated) positions.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Maybe should be private?\r\n     */\r\n    System.prototype.validatePositions = function (id) {\r\n        // invalid positions\r\n        // TODO use iterator instead\r\n        var invalidPositions = registry.invalidPositions[id];\r\n        while (invalidPositions.length > 0) {\r\n            var sprite = invalidPositions[invalidPositions.length - 1];\r\n            if (!sprite.isDisposed()) {\r\n                try {\r\n                    if (sprite instanceof Container) {\r\n                        sprite.children.each(function (sprite) {\r\n                            if (sprite.positionInvalid) {\r\n                                sprite.validatePosition();\r\n                            }\r\n                        });\r\n                    }\r\n                    sprite.validatePosition();\r\n                }\r\n                catch (e) {\r\n                    sprite.positionInvalid = false;\r\n                    $array.remove(invalidPositions, sprite);\r\n                    sprite.raiseCriticalError(e);\r\n                }\r\n            }\r\n            else {\r\n                $array.remove(invalidPositions, sprite);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Triggers position re-validation on all [[Container]] elements that have\r\n     * invalid(ated) layouts.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Maybe should be private?\r\n     */\r\n    System.prototype.validateLayouts = function (id) {\r\n        // invalid positions\r\n        // TODO use iterator instead\r\n        var invalidLayouts = registry.invalidLayouts[id];\r\n        while (invalidLayouts.length > 0) {\r\n            var container = invalidLayouts[invalidLayouts.length - 1];\r\n            if (!container.isDisposed()) {\r\n                try {\r\n                    container.children.each(function (sprite) {\r\n                        if (sprite instanceof Container && sprite.layoutInvalid && !sprite.isDisposed()) {\r\n                            sprite.validateLayout();\r\n                        }\r\n                    });\r\n                    container.validateLayout();\r\n                }\r\n                catch (e) {\r\n                    container.layoutInvalid = false;\r\n                    $array.remove(invalidLayouts, container);\r\n                    container.raiseCriticalError(e);\r\n                }\r\n            }\r\n            else {\r\n                $array.remove(invalidLayouts, container);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Outputs string to console if `verbose` is `true`.\r\n     *\r\n     * @param {any} value Message to output to console\r\n     */\r\n    System.prototype.log = function (value) {\r\n        if (options.verbose) {\r\n            if (console) {\r\n                console.log(value);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(System.prototype, \"isPaused\", {\r\n        /**\r\n         * @return {boolean} Is system on pause?\r\n         */\r\n        get: function () {\r\n            return this._isPaused;\r\n        },\r\n        /**\r\n         * Pauses all the processes of all the amCharts objects on the page\r\n         *\r\n         * @return {boolean} is paused?\r\n         */\r\n        set: function (value) {\r\n            this._isPaused = value;\r\n            if (!value) {\r\n                this._frameRequested = false;\r\n                this.requestFrame();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * amCharts Version.\r\n     *\r\n     * This follows npm's semver specification.\r\n     *\r\n     * @see {@link https://docs.npmjs.com/misc/semver}\r\n     * @type {string}\r\n     */\r\n    System.VERSION = \"4.1.0\";\r\n    return System;\r\n}());\r\nexport { System };\r\n/**\r\n * A singleton global instance of [[System]].\r\n *\r\n * All code should use this, rather than instantiating their\r\n * own System objects.\r\n */\r\nexport var system = new System();\r\n//# sourceMappingURL=System.js.map","/**\r\n * CSV parser.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { DataParser } from \"./DataParser\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $array from \"../utils/Array\";\r\n/**\r\n * Define possible separators.\r\n */\r\nvar separators = [\",\", \";\", \"\\t\"];\r\n/**\r\n * A parser for CSV format.\r\n *\r\n * @important\r\n */\r\nvar CSVParser = /** @class */ (function (_super) {\r\n    tslib_1.__extends(CSVParser, _super);\r\n    function CSVParser() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /**\r\n         * Content-type suitable for CSV format.\r\n         *\r\n         * @type {string}\r\n         */\r\n        _this.contentType = \"text/csv\";\r\n        /**\r\n         * Parser options.\r\n         *\r\n         * @see {@link ICSVOptions} for description of each option\r\n         * @type {ICSVOptions}\r\n         */\r\n        _this.options = {\r\n            delimiter: \"\",\r\n            reverse: false,\r\n            skipRows: 0,\r\n            skipEmpty: true,\r\n            useColumnNames: false\r\n        };\r\n        return _this;\r\n    }\r\n    /**\r\n     * Tests if the format is CSV.\r\n     *\r\n     * @param  {string}   data  Source data\r\n     * @return {boolean}        Is it CSV?\r\n     */\r\n    CSVParser.isCSV = function (data) {\r\n        return CSVParser.getDelimiterFromData(data) ? true : false;\r\n    };\r\n    /**\r\n     * Tries to determine a column separator.\r\n     *\r\n     * @param  {string}  data  Source data\r\n     * @return {string}        Separator\r\n     */\r\n    CSVParser.getDelimiterFromData = function (data) {\r\n        // We're going to take first few lines of the CSV with different\r\n        // possible separators and check if it results in same number of columns.\r\n        // If it does, we're going to assume it's a CSV\r\n        var lines = data.split(\"\\n\");\r\n        var len = lines.length;\r\n        var separator;\r\n        $array.each(separators, function (sep) {\r\n            var columns = 0, lineColums = 0;\r\n            // TODO replace with iterators\r\n            for (var i = 0; i < len; ++i) {\r\n                // Get number of columns in a line\r\n                columns = lines[i].split(sep).length;\r\n                if (columns > 1) {\r\n                    // More than one column - possible candidate\r\n                    if (lineColums === 0) {\r\n                        // First line\r\n                        lineColums = columns;\r\n                    }\r\n                    else if (columns != lineColums) {\r\n                        // Incorrect number of columns, give up on this separator\r\n                        lineColums = 0;\r\n                        break;\r\n                    }\r\n                }\r\n                else {\r\n                    // Not this separator\r\n                    // Not point in continuing\r\n                    lineColums = 0;\r\n                    break;\r\n                }\r\n            }\r\n            // Check if we have a winner\r\n            if (lineColums) {\r\n                separator = sep;\r\n            }\r\n        });\r\n        return separator;\r\n    };\r\n    /**\r\n     * Parses and returns data.\r\n     *\r\n     * @param  {string}  data  Unparsed data\r\n     * @return {any}           Parsed data\r\n     */\r\n    CSVParser.prototype.parse = function (csv) {\r\n        // Check if we have delimiter set\r\n        if (!this.options.delimiter) {\r\n            this.options.delimiter = CSVParser.getDelimiterFromData(csv);\r\n        }\r\n        // Get CSV data as array\r\n        var data = this.CSVToArray(csv, this.options.delimiter);\r\n        // Do we need to cast some fields to numbers?\r\n        var empty = $type.hasValue(this.options.emptyAs);\r\n        var numbers = this.parsableNumbers;\r\n        var dates = this.parsableDates;\r\n        // Init resuling array\r\n        var res = [], cols = [], col, i;\r\n        // First row holds column names?\r\n        if (this.options.useColumnNames) {\r\n            cols = data.shift();\r\n            // Normalize column names\r\n            for (var x = 0; x < cols.length; x++) {\r\n                // trim\r\n                col = $type.hasValue(cols[x]) ? cols[x].replace(/^\\s+|\\s+$/gm, \"\") : \"\";\r\n                // Check for empty\r\n                if (\"\" === col) {\r\n                    col = \"col\" + x;\r\n                }\r\n                cols[x] = col;\r\n            }\r\n            if (0 < this.options.skipRows)\r\n                this.options.skipRows--;\r\n        }\r\n        // Skip rows\r\n        for (i = 0; i < this.options.skipRows; i++) {\r\n            data.shift();\r\n        }\r\n        // Iterate through the result set\r\n        var row;\r\n        while ((row = this.options.reverse ? data.pop() : data.shift())) {\r\n            if (this.options.skipEmpty && row.length === 1 && row[0] === \"\")\r\n                continue;\r\n            var dataPoint = {};\r\n            for (i = 0; i < row.length; i++) {\r\n                col = undefined === cols[i] ? \"col\" + i : cols[i];\r\n                dataPoint[col] = row[i] === \"\" ? this.options.emptyAs : row[i];\r\n                // Convert\r\n                if (empty) {\r\n                    dataPoint[col] = this.maybeToEmpty(dataPoint[col]);\r\n                }\r\n                if (numbers) {\r\n                    dataPoint[col] = this.maybeToNumber(col, dataPoint[col]);\r\n                }\r\n                if (dates) {\r\n                    dataPoint[col] = this.maybeToDate(col, dataPoint[col]);\r\n                }\r\n            }\r\n            res.push(dataPoint);\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Converts CSV into array.\r\n     *\r\n     * The functionality of this function is taken from here:\r\n     * http://www.bennadel.com/blog/1504-ask-ben-parsing-csv-strings-with-javascript-exec-regular-expression-command.htm\r\n     *\r\n     * @param  {string}  data       Source data\r\n     * @param  {string}  delimiter  Column delimiter\r\n     * @return {any[]}              Parsed array\r\n     */\r\n    CSVParser.prototype.CSVToArray = function (data, delimiter) {\r\n        // Check to see if the delimiter is defined. If not,\r\n        // then default to comma.\r\n        delimiter = (delimiter || ',');\r\n        // Create a regular expression to parse the CSV values.\r\n        var objPattern = new RegExp((\r\n        // Delimiters.\r\n        \"(\\\\\" + delimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\r\n            // Quoted fields.\r\n            \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\r\n            // Standard fields.\r\n            \"([^\\\"\\\\\" + delimiter + \"\\\\r\\\\n]*))\"), \"gi\");\r\n        // Create an array to hold our data. Give the array\r\n        // a default empty first row.\r\n        var arrData = [\r\n            []\r\n        ];\r\n        // Create an array to hold our individual pattern\r\n        // matching groups.\r\n        var arrMatches = null;\r\n        // Keep looping over the regular expression matches\r\n        // until we can no longer find a match.\r\n        while ((arrMatches = objPattern.exec(data))) {\r\n            // Get the delimiter that was found.\r\n            var strMatchedDelimiter = arrMatches[1];\r\n            // Check to see if the given delimiter has a length\r\n            // (is not the start of string) and if it matches\r\n            // field delimiter. If id does not, then we know\r\n            // that this delimiter is a row delimiter.\r\n            if (strMatchedDelimiter.length &&\r\n                (strMatchedDelimiter !== delimiter)) {\r\n                // Since we have reached a new row of data,\r\n                // add an empty row to our data array.\r\n                arrData.push([]);\r\n            }\r\n            // Now that we have our delimiter out of the way,\r\n            // let's check to see which kind of value we\r\n            // captured (quoted or unquoted).\r\n            var strMatchedValue = void 0;\r\n            if (arrMatches[2]) {\r\n                // We found a quoted value. When we capture\r\n                // this value, unescape any double quotes.\r\n                strMatchedValue = arrMatches[2].replace(new RegExp(\"\\\"\\\"\", \"g\"), \"\\\"\");\r\n            }\r\n            else {\r\n                // We found a non-quoted value.\r\n                strMatchedValue = arrMatches[3];\r\n            }\r\n            // Now that we have our value string, let's add\r\n            // it to the data array.\r\n            arrData[arrData.length - 1].push(strMatchedValue);\r\n        }\r\n        // Return the parsed data.\r\n        return (arrData);\r\n    };\r\n    return CSVParser;\r\n}(DataParser));\r\nexport { CSVParser };\r\n//# sourceMappingURL=CSVParser.js.map","/**\r\n * Data Loader is responsible for loading and parsing external data\r\n */\r\nimport { CSVParser } from \"./CSVParser\";\r\nimport { JSONParser } from \"./JSONParser\";\r\nimport { Adapter } from \"../utils/Adapter\";\r\nimport * as $net from \"../utils/Net\";\r\nimport * as $array from \"../utils/Array\";\r\n;\r\n/**\r\n * Data Loader is responsible for loading and parsing external data.\r\n *\r\n * There is just one instance of DataLoader per system. Unless you have a\r\n * speicific reason, do not instantiate additional instances.\r\n *\r\n * The global instance of Data Loader is accessible via:\r\n *\r\n * ```TypeScript\r\n * am4core.dataLoader;\r\n * ```\r\n * ```JavaScript\r\n * am4core.dataLoader;\r\n * ```\r\n *\r\n * A loading of specific data source is done via [[DataSource]].\r\n *\r\n     Please refer to [[DataSource]] for information how to use it.\r\n *\r\n * @see {@link IDataLoaderAdapters} for a list of available Adapters\r\n */\r\nvar DataLoader = /** @class */ (function () {\r\n    function DataLoader() {\r\n        /**\r\n         * Adapter.\r\n         *\r\n         * @type {Adapter<DataLoader, IDataLoaderAdapters>}\r\n         */\r\n        this.adapter = new Adapter(this);\r\n    }\r\n    /**\r\n     * Loads a supplied [[DataSource]] or an array of data sources, then calls\r\n     * their respective `parse` methods.\r\n     *\r\n     * @param  {DataSource | DataSource[]}  source  A single data source or an array of multiple of data sources\r\n     */\r\n    DataLoader.prototype.load = function (source) {\r\n        var sources = Array.isArray(source) ? source : [source];\r\n        // Add each Source to the list to be loaded simultaneously\r\n        var promises = $array.map(sources, function (x) {\r\n            // Dispatch events\r\n            x.dispatchImmediately(\"started\");\r\n            x.dispatchImmediately(\"loadstarted\");\r\n            return $net.load(x.url, x, x.requestOptions);\r\n        });\r\n        // Run all promises in parallel\r\n        Promise.all(promises).then(function (res) {\r\n            // Process each loaded source\r\n            $array.each(res, function (result) {\r\n                // Get Source\r\n                var source = result.target;\r\n                // Dispatch events\r\n                source.dispatchImmediately(\"loadended\");\r\n                if (result.error) {\r\n                    if (source.events.isEnabled(\"error\")) {\r\n                        source.events.dispatchImmediately(\"error\", {\r\n                            type: \"error\",\r\n                            code: result.xhr.status,\r\n                            message: source.language.translate(\"Unable to load file: %1\", null, source.url),\r\n                            target: source\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    // Initiate parsing of the loaded data\r\n                    source.processData(result.response, result.type);\r\n                }\r\n                source.dispatchImmediately(\"ended\");\r\n            });\r\n        }).catch(function (res) {\r\n            if (res.target) {\r\n                res.target.dispatchImmediately(\"loadended\");\r\n                if (res.target.events.isEnabled(\"error\")) {\r\n                    res.target.events.dispatchImmediately(\"error\", {\r\n                        type: \"error\",\r\n                        code: res.xhr.status,\r\n                        message: res.target.language.translate(\"Unable to load file: %1\", null, res.target.url),\r\n                        target: res.target\r\n                    });\r\n                }\r\n                res.target.dispatchImmediately(\"ended\");\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Instantiates a [[DataParser]] object based on the data type.\r\n     * Built-in parser types are as follows:\r\n     *\r\n     * * \"csv\" or \"text/csv\"\r\n     * * \"json\" or \"application/json\"\r\n     *\r\n     * @param  {string}      contentType  A format type\r\n     * @return {DataParser}               A parser object\r\n     */\r\n    DataLoader.prototype.getParserByType = function (contentType) {\r\n        // Let some plugin decide\r\n        var parser;\r\n        if (parser = this.adapter.apply(\"getParserByType\", {\r\n            parser: null,\r\n            type: contentType\r\n        }).parser) {\r\n            return parser;\r\n        }\r\n        if (contentType == \"csv\" || contentType == \"text/csv\" || contentType == \"application/vnd.ms-excel\") {\r\n            return new CSVParser();\r\n        }\r\n        if (contentType == \"json\" || contentType == \"application/json\") {\r\n            return new JSONParser();\r\n        }\r\n        return;\r\n    };\r\n    /**\r\n     * Tries to determine a parser out of content type and/or actual data.\r\n     *\r\n     * @param  {string}      data         Data\r\n     * @param  {string}      contentType  Content-type\r\n     * @return {DataParser}               Parser instance\r\n     */\r\n    DataLoader.prototype.getParserByData = function (data, contentType) {\r\n        // Let some plugin decide\r\n        var parser = this.adapter.apply(\"getParserByData\", {\r\n            parser: null,\r\n            data: data,\r\n            type: contentType\r\n        }).parser;\r\n        // Check if we have parser from outside code\r\n        if (!parser) {\r\n            // No, let's try to figure it out\r\n            if (parser = this.getParserByType(contentType)) {\r\n                // We're able to figure out parser by conten-type\r\n                return parser;\r\n            }\r\n            else if (JSONParser.isJSON(data)) {\r\n                return this.getParserByType(\"json\");\r\n            }\r\n            else if (CSVParser.isCSV(data)) {\r\n                return this.getParserByType(\"csv\");\r\n            }\r\n        }\r\n        return parser;\r\n    };\r\n    return DataLoader;\r\n}());\r\nexport { DataLoader };\r\n/**\r\n * Create instance of Data Loader\r\n */\r\nexport var dataLoader = new DataLoader();\r\n//# sourceMappingURL=DataLoader.js.map","/**\r\n * Data parser module.\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { DateFormatter } from \"../formatters/DateFormatter\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Base class for the data parsers.\r\n */\r\nvar DataParser = /** @class */ (function () {\r\n    function DataParser() {\r\n    }\r\n    /**\r\n     * A \"placeholder\" function for real parsers to override.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}  data  Source data\r\n     * @return {any}           Parsed data (empty)\r\n     */\r\n    DataParser.prototype.parse = function (data) {\r\n        return [];\r\n    };\r\n    ;\r\n    Object.defineProperty(DataParser.prototype, \"parsableNumbers\", {\r\n        /**\r\n         * Checks if there are any numeric fields that need to be converted to\r\n         * numbers.\r\n         *\r\n         * @return {boolean} Numeric fields?\r\n         */\r\n        get: function () {\r\n            return this.options.numberFields && (this.options.numberFields.length > 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts a value to 'number' if it is in `numberFields`.\r\n     *\r\n     * @param  {string}  field  Field name\r\n     * @param  {any}     value  Value\r\n     * @return {any}            Parsed or original value\r\n     */\r\n    DataParser.prototype.maybeToNumber = function (field, value) {\r\n        if (this.options.numberFields.indexOf(field) !== -1) {\r\n            return $utils.anyToNumber(value);\r\n        }\r\n        return value;\r\n    };\r\n    Object.defineProperty(DataParser.prototype, \"parsableDates\", {\r\n        /**\r\n         * Checks if there are any date fields that need to be converted to `Date`\r\n         * objects.\r\n         *\r\n         * @return {boolean} Date fields?\r\n         */\r\n        get: function () {\r\n            return this.options.dateFields && (this.options.dateFields.length > 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts a value to `Date` if it is in `dateFields`.\r\n     *\r\n     * @param  {string}  field  Field name\r\n     * @param  {any}     value  Value\r\n     * @return {any}            Parsed or original value\r\n     */\r\n    DataParser.prototype.maybeToDate = function (field, value) {\r\n        if (this.options.dateFields.indexOf(field) !== -1) {\r\n            return this.options.dateFormatter.parse(value, this.dateFormat);\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Replaces empty value with something else.\r\n     *\r\n     * @param  {any}  value  Source value\r\n     * @return {any}         Source value or replacement\r\n     */\r\n    DataParser.prototype.maybeToEmpty = function (value) {\r\n        if ((!$type.hasValue(value) || value == \"\") && $type.hasValue(this.options.emptyAs)) {\r\n            return this.options.emptyAs;\r\n        }\r\n        return value;\r\n    };\r\n    Object.defineProperty(DataParser.prototype, \"dateFormatter\", {\r\n        /**\r\n         * [[DateFormatter]] object for date parsing.\r\n         *\r\n         * If there was not [[DateFormatter]] supplied in parser options, a new one\r\n         * is created.\r\n         *\r\n         * @return {DateFormatter} Date formatter\r\n         * @see {@link DateFormatter}\r\n         */\r\n        get: function () {\r\n            if (!this.options.dateFormatter) {\r\n                this.options.dateFormatter = new DateFormatter;\r\n                if (this.options.dateFormat) {\r\n                    this.options.dateFormat = this.options.dateFormat;\r\n                }\r\n            }\r\n            return this.options.dateFormatter;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataParser.prototype, \"dateFormat\", {\r\n        /**\r\n         * A date format to use when parsing dates.\r\n         *\r\n         * @return {string} Date format\r\n         * @see {@link DateFormatter}\r\n         */\r\n        get: function () {\r\n            return this.options.dateFormat || this.dateFormatter.inputDateFormat;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DataParser;\r\n}());\r\nexport { DataParser };\r\n//# sourceMappingURL=DataParser.js.map","import * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { dataLoader } from \"./DataLoader\";\r\nimport { JSONParser } from \"./JSONParser\";\r\nimport { CSVParser } from \"./CSVParser\";\r\nimport { BaseObjectEvents } from \"../Base\";\r\nimport { Adapter } from \"../utils/Adapter\";\r\nimport { Language } from \"../utils/Language\";\r\nimport { DateFormatter } from \"../formatters/DateFormatter\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $object from \"../utils/Object\";\r\n;\r\n;\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Represents a single data source - external file with all of its settings,\r\n * such as format, data parsing, etc.\r\n *\r\n * ```TypeScript\r\n * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n * chart.dataSource.parser = am4core.JSONParser;\r\n * ```\r\n * ```JavaScript\r\n * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n * chart.dataSource.parser = am4core.JSONParser;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"dataSource\": {\r\n *     \"url\": \"http://www.myweb.com/data.json\",\r\n *     \"parser\": \"JSONParser\"\r\n *   },\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * @see {@link IDataSourceEvents} for a list of available events\r\n * @see {@link IDataSourceAdapters} for a list of available Adapters\r\n */\r\nvar DataSource = /** @class */ (function (_super) {\r\n    tslib_1.__extends(DataSource, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DataSource(url, parser) {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Adapter.\r\n         *\r\n         * @type {Adapter<DataSource, IDataSourceAdapters>}\r\n         */\r\n        _this.adapter = new Adapter(_this);\r\n        /**\r\n         * Custom options for HTTP(S) request.\r\n         *\r\n         * @type {INetRequestOptions}\r\n         */\r\n        _this._requestOptions = {};\r\n        /**\r\n         * If set to `true`, any subsequent data loads will be considered incremental\r\n         * (containing only new data points that are supposed to be added to existing\r\n         * data).\r\n         *\r\n         * NOTE: this setting works only with element's `data` property. It won't\r\n         * work with any other externally-loadable data property.\r\n         *\r\n         * @default false\r\n         * @type {boolean}\r\n         */\r\n        _this._incremental = false;\r\n        /**\r\n         * A collection of key/value pairs to attach to a data source URL when making\r\n         * an incremental request.\r\n         */\r\n        _this._incrementalParams = {};\r\n        /**\r\n         * This setting is used only when `incremental = true`. If set to `true`,\r\n         * it will try to retain the same number of data items across each load.\r\n         *\r\n         * E.g. if incremental load yeilded 5 new records, then 5 items from the\r\n         * beginning of data will be removed so that we end up with the same number\r\n         * of data items.\r\n         *\r\n         * @default false\r\n         * @type {boolean}\r\n         */\r\n        _this._keepCount = false;\r\n        /**\r\n         * Will show loading indicator when loading files.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this.showPreloader = true;\r\n        _this.className = \"DataSource\";\r\n        // Set defaults\r\n        if (url) {\r\n            _this.url = url;\r\n        }\r\n        // Set parser\r\n        if (parser) {\r\n            if (typeof parser == \"string\") {\r\n                _this.parser = dataLoader.getParserByType(parser);\r\n            }\r\n            else {\r\n                _this.parser = parser;\r\n            }\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * Processes the loaded data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {string}  data         Raw (unparsed) data\r\n     * @param {string}  contentType  Content type of the loaded data (optional)\r\n     */\r\n    DataSource.prototype.processData = function (data, contentType) {\r\n        // Parsing started\r\n        this.dispatchImmediately(\"parsestarted\");\r\n        // Check if parser is set\r\n        if (!this.parser) {\r\n            // Try to resolve from data\r\n            this.parser = dataLoader.getParserByData(data, contentType);\r\n            if (!this.parser) {\r\n                // We have a problem - nobody knows what to do with the data\r\n                // Raise error\r\n                if (this.events.isEnabled(\"parseerror\")) {\r\n                    var event_1 = {\r\n                        type: \"parseerror\",\r\n                        message: this.language.translate(\"No parser available for file: %1\", null, this.url),\r\n                        target: this\r\n                    };\r\n                    this.events.dispatchImmediately(\"parseerror\", event_1);\r\n                }\r\n                this.dispatchImmediately(\"parseended\");\r\n                return;\r\n            }\r\n        }\r\n        // Apply options adapters\r\n        this.parser.options = this.adapter.apply(\"parserOptions\", this.parser.options);\r\n        this.parser.options.dateFields = this.adapter.apply(\"dateFields\", this.parser.options.dateFields || []);\r\n        this.parser.options.numberFields = this.adapter.apply(\"numberFields\", this.parser.options.numberFields || []);\r\n        // Check if we need to pass in date formatter\r\n        if (this.parser.options.dateFields && !this.parser.options.dateFormatter) {\r\n            this.parser.options.dateFormatter = this.dateFormatter;\r\n        }\r\n        // Parse\r\n        this.data = this.adapter.apply(\"parsedData\", this.parser.parse(this.adapter.apply(\"unparsedData\", data)));\r\n        // Check for parsing errors\r\n        if (!$type.hasValue(this.data) && this.events.isEnabled(\"parseerror\")) {\r\n            var event_2 = {\r\n                type: \"parseerror\",\r\n                message: this.language.translate(\"Error parsing file: %1\", null, this.url),\r\n                target: this\r\n            };\r\n            this.events.dispatchImmediately(\"parseerror\", event_2);\r\n        }\r\n        // Wrap up\r\n        this.dispatchImmediately(\"parseended\");\r\n        if ($type.hasValue(this.data)) {\r\n            this.dispatchImmediately(\"done\", {\r\n                \"data\": this.data\r\n            });\r\n        }\r\n        // The component is responsible for updating its own data vtriggered via\r\n        // events.\r\n        // Update last data load\r\n        this.lastLoad = new Date();\r\n    };\r\n    Object.defineProperty(DataSource.prototype, \"url\", {\r\n        /**\r\n         * @return {string} URL\r\n         */\r\n        get: function () {\r\n            // Get URL\r\n            var url = this.disableCache\r\n                ? this.timestampUrl(this._url)\r\n                : this._url;\r\n            // Add incremental params\r\n            if (this.incremental && this.component.data.length) {\r\n                url = this.addUrlParams(url, this.incrementalParams);\r\n            }\r\n            return this.adapter.apply(\"url\", url);\r\n        },\r\n        /**\r\n         * URL of the data source.\r\n         *\r\n         * @param {string}  value  URL\r\n         */\r\n        set: function (value) {\r\n            this._url = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"requestOptions\", {\r\n        /**\r\n         * @return {INetRequestOptions} Options\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"requestOptions\", this._requestOptions);\r\n        },\r\n        /**\r\n         * Custom options for HTTP(S) request.\r\n         *\r\n         * At this moment the only option supported is: `requestHeaders`, which holds\r\n         * an array of objects for custom request headers, e.g.:\r\n         *\r\n         * ```TypeScript\r\n         * chart.dataSource.requestOptions.requestHeaders = [{\r\n         *   \"key\": \"x-access-token\",\r\n         *   \"value\": \"123456789\"\r\n         * }];\r\n         * ``````JavaScript\r\n         * chart.dataSource.requestOptions.requestHeaders = [{\r\n         *   \"key\": \"x-access-token\",\r\n         *   \"value\": \"123456789\"\r\n         * }];\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"dataSource\": {\r\n         *     // ...\r\n         *     \"requestOptions\": {\r\n         *       \"requestHeaders\": [{\r\n         *         \"key\": \"x-access-token\",\r\n         *         \"value\": \"123456789\"\r\n         *       }]\r\n         *     }\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * NOTE: setting this options on an-already loaded DataSource will not\r\n         * trigger a reload.\r\n         *\r\n         * @param {INetRequestOptions}  value  Options\r\n         */\r\n        set: function (value) {\r\n            this._requestOptions = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"parser\", {\r\n        /**\r\n         * @return {DataParser} Data parser\r\n         */\r\n        get: function () {\r\n            if (!this._parser) {\r\n                this._parser = new JSONParser();\r\n            }\r\n            return this.adapter.apply(\"parser\", this._parser);\r\n        },\r\n        /**\r\n         * A parser to be used to parse data.\r\n         *\r\n         * ```TypeScript\r\n         * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n         * chart.dataSource.parser = am4core.JSONParser;\r\n         * ```\r\n         * ```JavaScript\r\n         * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n         * chart.dataSource.parser = am4core.JSONParser;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"dataSource\": {\r\n         *     \"url\": \"http://www.myweb.com/data.json\",\r\n         *     \"parser\": \"JSONParser\"\r\n         *   },\r\n         *   // ...\r\n         * }\r\n         * ```\r\n         *\r\n         * @default JSONParser\r\n         * @param {DataParser}  value  Data parser\r\n         */\r\n        set: function (value) {\r\n            this._parser = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"reloadFrequency\", {\r\n        /**\r\n         * @return {number} Reload frequency (ms)\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"reloadTimeout\", this._reloadFrequency);\r\n        },\r\n        /**\r\n         * Data source reload frequency.\r\n         *\r\n         * If set, it will reload the same URL every X milliseconds.\r\n         *\r\n         * @param {number} value Reload frequency (ms)\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            if (this._reloadFrequency != value) {\r\n                this._reloadFrequency = value;\r\n                // Should we schedule a reload?\r\n                if (value) {\r\n                    if (!$type.hasValue(this._reloadDisposer)) {\r\n                        this._reloadDisposer = this.events.on(\"ended\", function (ev) {\r\n                            _this._reloadTimeout = setTimeout(function () {\r\n                                _this.load();\r\n                            }, _this.reloadFrequency);\r\n                        });\r\n                    }\r\n                }\r\n                else if ($type.hasValue(this._reloadDisposer)) {\r\n                    this._reloadDisposer.dispose();\r\n                    this._reloadDisposer = undefined;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"incremental\", {\r\n        /**\r\n         * @return {boolean} Incremental load?\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"incremental\", this._incremental);\r\n        },\r\n        /**\r\n         * Should subsequent reloads be treated as incremental?\r\n         *\r\n         * Incremental loads will assume that they contain only new data items\r\n         * since the last load.\r\n         *\r\n         * If `incremental = false` the loader will replace all of the target's\r\n         * data with each load.\r\n         *\r\n         * This setting does not have any effect trhe first time data is loaded.\r\n         *\r\n         * NOTE: this setting works only with element's `data` property. It won't\r\n         * work with any other externally-loadable data property.\r\n         *\r\n         * @default false\r\n         * @param {boolean} Incremental load?\r\n         */\r\n        set: function (value) {\r\n            this._incremental = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"incrementalParams\", {\r\n        /**\r\n         * @return {object} Incremental request parameters\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"incrementalParams\", this._incrementalParams);\r\n        },\r\n        /**\r\n         * An object consisting of key/value pairs to apply to an URL when data\r\n         * source is making an incremental request.\r\n         *\r\n         * @param {object}  value  Incremental request parameters\r\n         */\r\n        set: function (value) {\r\n            this._incrementalParams = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"keepCount\", {\r\n        /**\r\n         * @return {boolean} keepCount load?\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"keepCount\", this._keepCount);\r\n        },\r\n        /**\r\n         * This setting is used only when `incremental = true`. If set to `true`,\r\n         * it will try to retain the same number of data items across each load.\r\n         *\r\n         * E.g. if incremental load yeilded 5 new records, then 5 items from the\r\n         * beginning of data will be removed so that we end up with the same number\r\n         * of data items.\r\n         *\r\n         * @default false\r\n         * @param {boolean} Keep record count?\r\n         */\r\n        set: function (value) {\r\n            this._keepCount = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"language\", {\r\n        /**\r\n         * @return {Language} A [[Language]] instance to be used\r\n         */\r\n        get: function () {\r\n            if (this._language) {\r\n                return this._language;\r\n            }\r\n            else if (this.component) {\r\n                this._language = this.component.language;\r\n                return this._language;\r\n            }\r\n            this.language = new Language();\r\n            return this.language;\r\n        },\r\n        /**\r\n         * Language instance to use.\r\n         *\r\n         * Will inherit and use chart's language, if not set.\r\n         *\r\n         * @param {Language} value An instance of Language\r\n         */\r\n        set: function (value) {\r\n            this._language = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"dateFormatter\", {\r\n        /**\r\n         * @return {DateFormatter} A [[DateFormatter]] instance to be used\r\n         */\r\n        get: function () {\r\n            if (this._dateFormatter) {\r\n                return this._dateFormatter;\r\n            }\r\n            else if (this.component) {\r\n                this._dateFormatter = this.component.dateFormatter;\r\n                return this._dateFormatter;\r\n            }\r\n            this.dateFormatter = new DateFormatter();\r\n            return this.dateFormatter;\r\n        },\r\n        /**\r\n         * A [[DateFormatter]] to use when parsing dates from string formats.\r\n         *\r\n         * Will inherit and use chart's DateFormatter if not ser.\r\n         *\r\n         * @param {DateFormatter} value An instance of [[DateFormatter]]\r\n         */\r\n        set: function (value) {\r\n            this._dateFormatter = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Adds current timestamp to the URL.\r\n     *\r\n     * @param  {string}  url  Source URL\r\n     * @return {string}       Timestamped URL\r\n     */\r\n    DataSource.prototype.timestampUrl = function (url) {\r\n        var tstamp = new Date().getTime().toString();\r\n        var params = {};\r\n        params[tstamp] = \"\";\r\n        return this.addUrlParams(url, params);\r\n    };\r\n    /**\r\n     * Disposes of this object.\r\n     */\r\n    DataSource.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        if (this._reloadTimeout) {\r\n            clearTimeout(this._reloadTimeout);\r\n        }\r\n    };\r\n    /**\r\n     * Initiate the load.\r\n     *\r\n     * All loading in JavaScript is asynchronous. This function will trigger the\r\n     * load and will exit immediately.\r\n     *\r\n     * Use DataSource's events to watch for loaded data and errors.\r\n     */\r\n    DataSource.prototype.load = function () {\r\n        if (this._reloadTimeout) {\r\n            clearTimeout(this._reloadTimeout);\r\n        }\r\n        dataLoader.load(this);\r\n    };\r\n    /**\r\n     * Adds parameters to `url` as query strings. Will take care of proper\r\n     * separators.\r\n     *\r\n     * @param  {string}  url     Source URL\r\n     * @param  {object}  params  Parameters\r\n     * @return {string}          New URL\r\n     */\r\n    DataSource.prototype.addUrlParams = function (url, params) {\r\n        var join = url.match(/\\?/) ? \"&\" : \"?\";\r\n        var add = [];\r\n        $object.each(params, function (key, value) {\r\n            if (value != \"\") {\r\n                add.push(key + \"=\" + encodeURIComponent(value));\r\n            }\r\n            else {\r\n                add.push(key);\r\n            }\r\n        });\r\n        if (add.length) {\r\n            return url + join + add.join(\"&\");\r\n        }\r\n        return url;\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {object}  config  Config\r\n     */\r\n    DataSource.prototype.processConfig = function (config) {\r\n        registry.registeredClasses[\"json\"] = JSONParser;\r\n        registry.registeredClasses[\"JSONParser\"] = JSONParser;\r\n        registry.registeredClasses[\"csv\"] = CSVParser;\r\n        registry.registeredClasses[\"CSVParser\"] = CSVParser;\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    return DataSource;\r\n}(BaseObjectEvents));\r\nexport { DataSource };\r\n//# sourceMappingURL=DataSource.js.map","/**\r\n * JSON parser.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { DataParser } from \"./DataParser\";\r\nimport * as $object from \"../utils/Object\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * A parser for JSON.\r\n *\r\n * @important\r\n */\r\nvar JSONParser = /** @class */ (function (_super) {\r\n    tslib_1.__extends(JSONParser, _super);\r\n    function JSONParser() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /**\r\n         * Content-type suitable for JSON format.\r\n         *\r\n         * @type {string}\r\n         */\r\n        _this.contentType = \"application/json\";\r\n        /**\r\n         * Parser options.\r\n         *\r\n         * @see {@link IJSONOptions} for description of each option\r\n         * @type {IJSONOptions}\r\n         */\r\n        _this.options = {};\r\n        return _this;\r\n    }\r\n    /**\r\n     * Tests if the data is valid JSON.\r\n     *\r\n     * @param  {string}   data  Source data\r\n     * @return {boolean}        Is it JSON?\r\n     */\r\n    JSONParser.isJSON = function (data) {\r\n        try {\r\n            // Try parsing JSON\r\n            JSON.parse(data);\r\n            // If we got to this point it means it's a valid JSON\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Parses and returns data.\r\n     *\r\n     * @param  {string}  data  Unparsed data\r\n     * @return {any}           Parsed data\r\n     */\r\n    JSONParser.prototype.parse = function (data) {\r\n        var _this = this;\r\n        // Init return\r\n        var res;\r\n        // Try parsing\r\n        try {\r\n            if ($type.hasValue(JSON)) {\r\n                res = JSON.parse(data);\r\n            }\r\n        }\r\n        catch (e) {\r\n            return undefined;\r\n        }\r\n        // Do we need to cast some fields to numbers or dates?\r\n        var empty = $type.hasValue(this.options.emptyAs);\r\n        var numbers = this.parsableNumbers;\r\n        var dates = this.parsableDates;\r\n        if (Array.isArray(res) && (numbers || dates || empty)) {\r\n            var _loop_1 = function (i, len) {\r\n                var row = res[i];\r\n                $object.each(row, function (key, value) {\r\n                    if (empty) {\r\n                        row[key] = _this.maybeToEmpty(row[key]);\r\n                    }\r\n                    if (numbers) {\r\n                        row[key] = _this.maybeToNumber(key, row[key]);\r\n                    }\r\n                    if (dates) {\r\n                        row[key] = _this.maybeToDate(key, row[key]);\r\n                    }\r\n                });\r\n            };\r\n            // Iterate through the data and check if it needs to be converted\r\n            for (var i = 0, len = res.length; i < len; i++) {\r\n                _loop_1(i, len);\r\n            }\r\n        }\r\n        // Convert to array\r\n        //return Array.isArray(res) ? res : [res];\r\n        return res;\r\n    };\r\n    return JSONParser;\r\n}(DataParser));\r\nexport { JSONParser };\r\n//# sourceMappingURL=JSONParser.js.map","/**\r\n *\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { color } from \"../utils/Color\";\r\n/**\r\n * Defines a class that holds default properties for new SVG elements\r\n */\r\nvar SVGDefaults = /** @class */ (function () {\r\n    function SVGDefaults() {\r\n    }\r\n    SVGDefaults.opacity = 1;\r\n    SVGDefaults.strokeOpacity = 1;\r\n    SVGDefaults.strokeWidth = 1;\r\n    SVGDefaults.fillOpacity = 1;\r\n    SVGDefaults.fill = color(\"#000000\");\r\n    SVGDefaults.stroke = color(\"#000000\");\r\n    SVGDefaults.focusable = undefined;\r\n    SVGDefaults.tabindex = 0;\r\n    return SVGDefaults;\r\n}());\r\nexport { SVGDefaults };\r\n//# sourceMappingURL=SVGDefaults.js.map","/**\r\n * Cone module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../Container\";\r\nimport { Sprite, visualProperties } from \"../../Sprite\";\r\nimport { Ellipse } from \"../../elements/Ellipse\";\r\nimport { LinearGradientModifier } from \"../../rendering/fills/LinearGradientModifier\";\r\nimport { percent } from \"../../utils/Percent\";\r\nimport * as $object from \"../../utils/Object\";\r\nimport * as $path from \"../../rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Builds a round cone/cylinder.\r\n *\r\n * @see {@link IConeEvents} for a list of available events\r\n * @see {@link IConeAdapters} for a list of available Adapters\r\n */\r\nvar Cone = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Cone, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Cone() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Cone\";\r\n        _this.angle = 30;\r\n        _this.radius = percent(100);\r\n        _this.topRadius = percent(100);\r\n        _this.top = _this.createChild(Ellipse);\r\n        _this.top.shouldClone = false;\r\n        _this.bottom = _this.createChild(Ellipse);\r\n        _this.bottom.shouldClone = false;\r\n        _this.body = _this.createChild(Sprite);\r\n        _this.body.shouldClone = false;\r\n        _this.body.setElement(_this.paper.add(\"path\"));\r\n        _this.layout = \"none\";\r\n        _this.bodyFillModifier = new LinearGradientModifier();\r\n        _this.bodyFillModifier.lightnesses = [0, -0.25, 0];\r\n        _this.body.fillModifier = _this.bodyFillModifier;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Cone.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        $object.copyProperties(this, this.top, visualProperties);\r\n        $object.copyProperties(this, this.bottom, visualProperties);\r\n        $object.copyProperties(this, this.body, visualProperties);\r\n        var w = this.innerWidth;\r\n        var h = this.innerHeight;\r\n        var bottom = this.bottom;\r\n        var top = this.top;\r\n        var angle = this.angle;\r\n        var radiusBase;\r\n        var dx;\r\n        var dy;\r\n        if (this.orientation == \"horizontal\") {\r\n            radiusBase = h / 2;\r\n            bottom.y = h / 2;\r\n            top.y = h / 2;\r\n            top.x = w;\r\n            dx = (90 - angle) / 90;\r\n            dy = 0;\r\n            this.bodyFillModifier.gradient.rotation = 90;\r\n        }\r\n        else {\r\n            dx = 0;\r\n            dy = (90 - angle) / 90;\r\n            radiusBase = w / 2;\r\n            bottom.y = h;\r\n            bottom.x = w / 2;\r\n            top.x = w / 2;\r\n            this.bodyFillModifier.gradient.rotation = 0;\r\n        }\r\n        var radius = this.radius.value * radiusBase;\r\n        var topRadius = this.topRadius.value * radiusBase;\r\n        bottom.radius = radius - radius * dx;\r\n        bottom.radiusY = radius - radius * dy;\r\n        top.radius = topRadius - topRadius * dx;\r\n        top.radiusY = topRadius - topRadius * dy;\r\n        var path;\r\n        if (this.orientation == \"horizontal\") {\r\n            path = $path.moveTo({ x: 0, y: h / 2 - bottom.radiusY }) + $path.arcTo(-90, -180, bottom.radius, bottom.radiusY) + $path.lineTo({ x: w, y: h / 2 + top.radiusY }) + $path.arcTo(90, 180, top.radius, top.radiusY) + $path.closePath();\r\n        }\r\n        else {\r\n            path = $path.moveTo({ x: w / 2 - top.radius, y: 0 }) + $path.arcTo(180, -180, top.radius, top.radiusY) + $path.lineTo({ x: w / 2 + bottom.radius, y: h }) + $path.arcTo(0, 180, bottom.radius, bottom.radiusY) + $path.closePath();\r\n        }\r\n        this.body.path = path;\r\n    };\r\n    Object.defineProperty(Cone.prototype, \"angle\", {\r\n        /**\r\n         * @return {number} Angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"angle\");\r\n        },\r\n        /**\r\n         * Angle of the point of view to the 3D element. (0-360)\r\n         *\r\n         * @default 30\r\n         * @param {number}  value  Angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"angle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Cone.prototype, \"radius\", {\r\n        /**\r\n         * @return {Percent} Bottom radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * A relative radius of the cone's bottom (base).\r\n         *\r\n         * It is relevant to the inner width or height of the element.\r\n         *\r\n         * @default Percent(100)\r\n         * @param {Percent}  value  Bottom radius\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"radius\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Cone.prototype, \"topRadius\", {\r\n        /**\r\n         * @return {Percent} Top radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"topRadius\");\r\n        },\r\n        /**\r\n         * A relative radius of the cone's top (tip).\r\n         *\r\n         * It is relevant to the inner width or height of the element.\r\n         *\r\n         * @default Percent(0)\r\n         * @param {Percent}  value  Top radius\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"topRadius\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Cone.prototype, \"orientation\", {\r\n        /**\r\n         * @type {Orientation} Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"orientation\");\r\n        },\r\n        /**\r\n         * Orientation of the cone\r\n         *\r\n         * @default \"vertical\"\r\n         * @param {Orientation}  value  Orientation\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"orientation\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Cone;\r\n}(Container));\r\nexport { Cone };\r\n//# sourceMappingURL=Cone.js.map","/**\r\n * Creates a 3D rectangle.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../Container\";\r\nimport { Sprite } from \"../../Sprite\";\r\nimport { LightenFilter } from \"../../rendering/filters/LightenFilter\";\r\nimport * as $math from \"../../utils/Math\";\r\nimport * as $path from \"../../rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Builds a 3D rectangle\r\n * @see {@link IRectangle3DEvents} for a list of available events\r\n * @see {@link IRectangle3DAdapters} for a list of available Adapters\r\n */\r\nvar Rectangle3D = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Rectangle3D, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Rectangle3D() {\r\n        var _this = _super.call(this) || this;\r\n        _this.angle = 30;\r\n        _this.depth = 30;\r\n        _this.className = \"Rectangle3D\";\r\n        _this.layout = \"none\";\r\n        var sideBack = _this.createChild(Sprite);\r\n        sideBack.shouldClone = false;\r\n        sideBack.setElement(_this.paper.add(\"path\"));\r\n        sideBack.isMeasured = false;\r\n        var lightenFilterBack = new LightenFilter();\r\n        lightenFilterBack.lightness = -0.2;\r\n        sideBack.filters.push(lightenFilterBack);\r\n        _this.sideBack = sideBack;\r\n        _this._disposers.push(_this.sideBack);\r\n        var sideBottom = _this.createChild(Sprite);\r\n        sideBottom.shouldClone = false;\r\n        sideBottom.setElement(_this.paper.add(\"path\"));\r\n        sideBottom.isMeasured = false;\r\n        var lightenFilterBottom = new LightenFilter();\r\n        lightenFilterBottom.lightness = -0.5;\r\n        sideBottom.filters.push(lightenFilterBottom);\r\n        _this.sideBottom = sideBottom;\r\n        _this._disposers.push(_this.sideBottom);\r\n        var sideLeft = _this.createChild(Sprite);\r\n        sideLeft.shouldClone = false;\r\n        sideLeft.setElement(_this.paper.add(\"path\"));\r\n        sideLeft.isMeasured = false;\r\n        var lightenFilterLeft = new LightenFilter();\r\n        lightenFilterLeft.lightness = -0.4;\r\n        sideLeft.filters.push(lightenFilterLeft);\r\n        _this.sideLeft = sideLeft;\r\n        _this._disposers.push(_this.sideLeft);\r\n        var sideRight = _this.createChild(Sprite);\r\n        sideRight.shouldClone = false;\r\n        sideRight.setElement(_this.paper.add(\"path\"));\r\n        sideRight.isMeasured = false;\r\n        var lightenFilterRight = new LightenFilter();\r\n        lightenFilterRight.lightness = -0.2;\r\n        sideRight.filters.push(lightenFilterRight);\r\n        _this.sideRight = sideRight;\r\n        _this._disposers.push(_this.sideRight);\r\n        var sideTop = _this.createChild(Sprite);\r\n        sideTop.shouldClone = false;\r\n        sideTop.setElement(_this.paper.add(\"path\"));\r\n        sideTop.isMeasured = false;\r\n        var lightenFilterTop = new LightenFilter();\r\n        lightenFilterTop.lightness = -0.1;\r\n        sideTop.filters.push(lightenFilterTop);\r\n        _this.sideTop = sideTop;\r\n        _this._disposers.push(_this.sideTop);\r\n        var sideFront = _this.createChild(Sprite);\r\n        sideFront.shouldClone = false;\r\n        sideFront.setElement(_this.paper.add(\"path\"));\r\n        sideFront.isMeasured = false;\r\n        _this.sideFront = sideFront;\r\n        _this._disposers.push(_this.sideFront);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Rectangle3D.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var w = this.innerWidth;\r\n        var h = this.innerHeight;\r\n        var depth = this.depth;\r\n        var angle = this.angle;\r\n        var sin = $math.sin(angle);\r\n        var cos = $math.cos(angle);\r\n        var a = { x: 0, y: 0 };\r\n        var b = { x: w, y: 0 };\r\n        var c = { x: w, y: h };\r\n        var d = { x: 0, y: h };\r\n        var ah = { x: depth * cos, y: -depth * sin };\r\n        var bh = { x: depth * cos + w, y: -depth * sin };\r\n        var ch = { x: depth * cos + w, y: -depth * sin + h };\r\n        var dh = { x: depth * cos, y: -depth * sin + h };\r\n        this.sideFront.path = $path.moveTo(a) + $path.lineTo(b) + $path.lineTo(c) + $path.lineTo(d) + $path.closePath();\r\n        this.sideBack.path = $path.moveTo(ah) + $path.lineTo(bh) + $path.lineTo(ch) + $path.lineTo(dh) + $path.closePath();\r\n        this.sideLeft.path = $path.moveTo(a) + $path.lineTo(ah) + $path.lineTo(dh) + $path.lineTo(d) + $path.closePath();\r\n        this.sideRight.path = $path.moveTo(b) + $path.lineTo(bh) + $path.lineTo(ch) + $path.lineTo(c) + $path.closePath();\r\n        this.sideBottom.path = $path.moveTo(d) + $path.lineTo(dh) + $path.lineTo(ch) + $path.lineTo(c) + $path.closePath();\r\n        this.sideTop.path = $path.moveTo(a) + $path.lineTo(ah) + $path.lineTo(bh) + $path.lineTo(b) + $path.closePath();\r\n    };\r\n    Object.defineProperty(Rectangle3D.prototype, \"depth\", {\r\n        /**\r\n         * @return {number} Depth (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"depth\");\r\n        },\r\n        /**\r\n         * Depth (Z dimension) of the 3D rectangle in pixels.\r\n         *\r\n         * @default 30\r\n         * @param {number}  value  Depth (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"depth\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Rectangle3D.prototype, \"angle\", {\r\n        /**\r\n         * @return {number} Angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"angle\");\r\n        },\r\n        /**\r\n         * Angle of the point of view to the 3D element. (0-360)\r\n         *\r\n         * @default 30\r\n         * @param {number}  value  Angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"angle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Rectangle3D;\r\n}(Container));\r\nexport { Rectangle3D };\r\n//# sourceMappingURL=Rectangle3D.js.map","/**\r\n * 3D slice module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Slice } from \"../Slice\";\r\nimport { Sprite } from \"../../Sprite\";\r\nimport { Container } from \"../../Container\";\r\nimport { LightenFilter } from \"../../rendering/filters/LightenFilter\";\r\nimport * as $math from \"../../utils/Math\";\r\nimport * as $path from \"../../rendering/Path\";\r\nimport * as $type from \"../../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to draw a 3D slice of a Pie chart.\r\n *\r\n * @see {@link ISlice3DEvents} for a list of available events\r\n * @see {@link ISlice3DAdapters} for a list of available Adapters\r\n */\r\nvar Slice3D = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Slice3D, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Slice3D() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"Slice3D\";\r\n        _this.layout = \"none\";\r\n        // Create edge container\r\n        var edge = _this.createChild(Container);\r\n        _this.edge = edge;\r\n        edge.shouldClone = false;\r\n        edge.isMeasured = false;\r\n        var lightenFilter = new LightenFilter();\r\n        lightenFilter.lightness = -0.25;\r\n        edge.filters.push(lightenFilter);\r\n        edge.toBack();\r\n        //edge.strokeOpacity = 0;\r\n        _this._disposers.push(edge);\r\n        // Set defaults\r\n        _this.angle = 30;\r\n        _this.depth = 20;\r\n        // Create side A element\r\n        var sideA = _this.createChild(Sprite);\r\n        _this.sideA = sideA;\r\n        sideA.shouldClone = false;\r\n        sideA.isMeasured = false;\r\n        sideA.setElement(_this.paper.add(\"path\"));\r\n        var lightenFilterA = new LightenFilter();\r\n        lightenFilterA.lightness = -0.25;\r\n        sideA.filters.push(lightenFilterA);\r\n        //sideA.strokeOpacity = 0;\r\n        _this._disposers.push(sideA);\r\n        // Crate side B element\r\n        var sideB = _this.createChild(Sprite);\r\n        _this.sideB = sideB;\r\n        sideB.shouldClone = false;\r\n        sideB.isMeasured = false;\r\n        sideB.setElement(_this.paper.add(\"path\"));\r\n        var lightenFilterB = new LightenFilter();\r\n        lightenFilterB.lightness = -0.25;\r\n        sideB.filters.push(lightenFilterB);\r\n        _this._disposers.push(sideB);\r\n        //sideB.strokeOpacity = 0;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Slice3D.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        // this should go here to hide 3d slices if arc = 0\r\n        for (var i = 0, len = this.edge.children.length; i < len; i++) {\r\n            var slice = this.edge.children.getIndex(i);\r\n            if (slice instanceof Slice) {\r\n                slice.radiusY = this.radiusY;\r\n                slice.radius = this.radius;\r\n                slice.fill = this.fill;\r\n                slice.startAngle = this.startAngle;\r\n                slice.arc = this.arc;\r\n                slice.cornerRadius = this.cornerRadius;\r\n                slice.innerRadius = this.innerRadius;\r\n                slice.strokeOpacity = 0;\r\n            }\r\n        }\r\n        if (this.arc !== 0 && this.radius > 0 && this.depth > 0) {\r\n            this.sideB.show(0);\r\n            this.sideA.show(0);\r\n            this.edge.show(0);\r\n            var startAngle = this.startAngle;\r\n            var arc = this.arc;\r\n            var innerRadius = this.pixelInnerRadius || 0;\r\n            var radiusY = this.radiusY || 0;\r\n            var cornerRadius = this.cornerRadius || 0;\r\n            var innerCornerRadius = this.innerCornerRadius;\r\n            var radius = this.radius;\r\n            // this is code duplicate with $path.arc. @todo to think how to avoid it\r\n            var endAngle = startAngle + arc;\r\n            var crSin = $math.sin($math.min(arc, 45) / 2);\r\n            innerCornerRadius = innerCornerRadius || cornerRadius;\r\n            var innerRadiusY = (radiusY / radius) * innerRadius;\r\n            var cornerRadiusY = (radiusY / radius) * cornerRadius;\r\n            var innerCornerRadiusY = (radiusY / radius) * innerCornerRadius;\r\n            cornerRadius = $math.fitToRange(cornerRadius, 0, (radius - innerRadius) / 2);\r\n            cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\r\n            innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, (radius - innerRadius) / 2);\r\n            innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\r\n            cornerRadius = $math.fitToRange(cornerRadius, 0, radius * crSin);\r\n            cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, radiusY * crSin);\r\n            innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, innerRadius * crSin);\r\n            innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, innerRadiusY * crSin);\r\n            //let crAngle: number = Math.asin(cornerRadius / radius / 2) * $math.DEGREES * 2;\r\n            //let crAngleY: number = Math.asin(cornerRadiusY / radiusY / 2) * $math.DEGREES * 2;\r\n            if (innerRadius < innerCornerRadius) {\r\n                innerRadius = innerCornerRadius;\r\n            }\r\n            if (innerRadiusY < innerCornerRadiusY) {\r\n                innerRadiusY = innerCornerRadiusY;\r\n            }\r\n            var crInnerAngle = Math.asin(innerCornerRadius / innerRadius / 2) * $math.DEGREES * 2;\r\n            var crInnerAngleY = Math.asin(innerCornerRadiusY / innerRadiusY / 2) * $math.DEGREES * 2;\r\n            if (!$type.isNumber(crInnerAngle)) {\r\n                crInnerAngle = 0;\r\n            }\r\n            if (!$type.isNumber(crInnerAngleY)) {\r\n                crInnerAngleY = 0;\r\n            }\r\n            //let middleAngle = startAngle + arc / 2;\r\n            //let mPoint = { x: $math.round($math.cos(middleAngle) * innerRadius, 4), y: $math.round($math.sin(middleAngle) * innerRadiusY, 4) };\r\n            var a0 = { x: $math.round($math.cos(startAngle) * (innerRadius + innerCornerRadius), 4), y: $math.round($math.sin(startAngle) * (innerRadiusY + innerCornerRadiusY), 4) };\r\n            var b0 = { x: $math.round($math.cos(startAngle) * (radius - cornerRadius), 4), y: $math.round($math.sin(startAngle) * (radiusY - cornerRadiusY), 4) };\r\n            var c0 = { x: $math.round($math.cos(endAngle) * (radius - cornerRadius), 4), y: $math.round($math.sin(endAngle) * (radiusY - cornerRadiusY), 4) };\r\n            var d0 = { x: $math.round($math.cos(endAngle) * (innerRadius + innerCornerRadius), 4), y: $math.round($math.sin(endAngle) * (innerRadiusY + innerCornerRadiusY), 4) };\r\n            // end of duplicate\r\n            var h = this.depth;\r\n            var ah = { x: a0.x, y: a0.y - h };\r\n            var bh = { x: b0.x, y: b0.y - h };\r\n            var ch = { x: c0.x, y: c0.y - h };\r\n            var dh = { x: d0.x, y: d0.y - h };\r\n            this.sideA.path = $path.moveTo(a0) + $path.lineTo(b0) + $path.lineTo(bh) + $path.lineTo(ah) + $path.closePath();\r\n            this.sideB.path = $path.moveTo(c0) + $path.lineTo(d0) + $path.lineTo(dh) + $path.lineTo(ch) + $path.closePath();\r\n            if (this.startAngle < 90) {\r\n                this.sideA.toBack();\r\n            }\r\n            else {\r\n                this.sideA.toFront();\r\n            }\r\n            if (this.startAngle + this.arc > 90) {\r\n                this.sideB.toBack();\r\n            }\r\n            else {\r\n                this.sideB.toFront();\r\n            }\r\n        }\r\n        else {\r\n            this.sideA.hide(0);\r\n            this.sideB.hide(0);\r\n            this.edge.hide(0);\r\n        }\r\n    };\r\n    Object.defineProperty(Slice3D.prototype, \"depth\", {\r\n        /**\r\n         * @return {number} Depth (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"depth\");\r\n        },\r\n        /**\r\n         * Depth (height) of the 3D slice in pixels.\r\n         *\r\n         * @default 20\r\n         * @param {number}  depth  Depth (px)\r\n         */\r\n        set: function (depth) {\r\n            if (this.setPropertyValue(\"depth\", depth, true)) {\r\n                this.edge.removeChildren();\r\n                var d = 3;\r\n                if (depth > 0) {\r\n                    var count = Math.ceil(this.depth / d);\r\n                    var step = depth / count;\r\n                    for (var i = 0; i <= count; i++) {\r\n                        var slice = this.edge.createChild(Slice);\r\n                        slice.isMeasured = false;\r\n                        slice.y = -step * i;\r\n                    }\r\n                }\r\n                this.slice.dy = -this.depth;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice3D.prototype, \"angle\", {\r\n        /**\r\n         * @return {number} Angle\r\n         */\r\n        get: function () {\r\n            var angle = this.getPropertyValue(\"angle\");\r\n            if (!$type.isNumber(angle)) {\r\n                angle = 0;\r\n            }\r\n            return angle;\r\n        },\r\n        /**\r\n         * Angle of the point of view to the 3D element. (0-360)\r\n         *\r\n         * @default 30\r\n         * @param {number}  value  Angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"angle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice3D.prototype, \"radiusY\", {\r\n        /**\r\n         * @return {number} Vertical radius (0-1)\r\n         */\r\n        get: function () {\r\n            var radiusY = this.getPropertyValue(\"radiusY\");\r\n            if (!$type.isNumber(radiusY)) {\r\n                radiusY = this.radius - this.radius * this.angle / 90;\r\n            }\r\n            return radiusY;\r\n        },\r\n        /**\r\n         * Vertical radius for creating skewed slices.\r\n         *\r\n         * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n         * the `radius`.\r\n         *\r\n         * @param {number} value Vertical radius (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"radiusY\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all properties and related data from a different instance of Axis.\r\n     *\r\n     * @param {this} source Source Axis\r\n     */\r\n    Slice3D.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.edge.copyFrom(source.edge);\r\n        this.sideA.copyFrom(source.sideA);\r\n        this.sideB.copyFrom(source.sideB);\r\n    };\r\n    return Slice3D;\r\n}(Slice));\r\nexport { Slice3D };\r\n//# sourceMappingURL=Slice3D.js.map","/**\r\n * AmChartsLogo module.\r\n *\r\n * AmChartsLogo shows amCharts logo for non-commercial users of a library.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../Container\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Polyspline } from \"./Polyspline\";\r\nimport { color } from \"../utils/Color\";\r\nimport { LinearGradient } from \"../rendering/fills/LinearGradient\";\r\nimport { DesaturateFilter } from \"../rendering/filters/DesaturateFilter\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A class used to draw and display progress indicator.\r\n *\r\n * @see {@link IAmChartsLogoEvents} for a list of available events\r\n * @see {@link IAmChartsLogoAdapters} for a list of available Adapters\r\n * @ignore Exclude from docs\r\n */\r\nvar AmChartsLogo = /** @class */ (function (_super) {\r\n    tslib_1.__extends(AmChartsLogo, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function AmChartsLogo() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"AmChartsLogo\";\r\n        _this.valign = \"bottom\";\r\n        var d = 0.3;\r\n        _this.opacity = 0.3;\r\n        _this.defaultState.properties.opacity = 0.4;\r\n        _this.url = \"https://www.amcharts.com/\";\r\n        _this.urlTarget = \"_blank\";\r\n        _this.showSystemTooltip = true;\r\n        _this.readerTitle = \"Chart created using amCharts library\";\r\n        _this.width = 220 * d;\r\n        _this.height = 70 * d;\r\n        _this.background.opacity = 0;\r\n        var aColor = color(\"#474758\");\r\n        if (new InterfaceColorSet().getFor(\"background\").alternative.hex == \"#ffffff\") {\r\n            aColor = color(\"#ffffff\");\r\n        }\r\n        var aGradient = new LinearGradient();\r\n        aGradient.addColor(aColor);\r\n        aGradient.addColor(aColor, 1, 0.75);\r\n        aGradient.addColor(color(\"#3cabff\"), 1, 0.755);\r\n        aGradient.rotation = -10;\r\n        var aStroke = aGradient;\r\n        var m = _this.createChild(Polyspline);\r\n        m.shouldClone = false;\r\n        m.isMeasured = false;\r\n        m.segments = [[{ x: 50 * d, y: 50 * d }, { x: 90 * d, y: 50 * d }, { x: 120 * d, y: 20 * d }, { x: 135 * d, y: 35 * d }, { x: 150 * d, y: 20 * d }, { x: 180 * d, y: 50 * d }, { x: 200 * d, y: 50 * d }]];\r\n        m.strokeWidth = 6 * d;\r\n        m.tensionX = 0.8;\r\n        m.tensionY = 1;\r\n        m.stroke = color(\"#3cabff\");\r\n        var a = _this.createChild(Polyspline);\r\n        a.shouldClone = false;\r\n        a.isMeasured = false;\r\n        a.segments = [[{ x: 20 * d, y: 50 * d }, { x: 50 * d, y: 50 * d }, { x: 90 * d, y: 12 * d }, { x: 133 * d, y: 50 * d }, { x: 170 * d, y: 50 * d }, { x: 200 * d, y: 50 * d }]];\r\n        a.strokeWidth = 6 * d;\r\n        a.tensionX = 0.75;\r\n        a.tensionY = 1;\r\n        a.stroke = aStroke;\r\n        _this._disposers.push(a);\r\n        var desaturateFilter = new DesaturateFilter();\r\n        _this.filters.push(desaturateFilter);\r\n        var desaturateFilterHover = new DesaturateFilter();\r\n        desaturateFilterHover.saturation = 1;\r\n        var hoverState = _this.states.create(\"hover\");\r\n        hoverState.properties.opacity = 1;\r\n        hoverState.filters.push(desaturateFilterHover);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return AmChartsLogo;\r\n}(Container));\r\nexport { AmChartsLogo };\r\n//# sourceMappingURL=AmChartsLogo.js.map","/**\r\n * Functionality for drawing simple buttons.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../Container\";\r\nimport { Label } from \"./Label\";\r\nimport { RoundedRectangle } from \"../elements/RoundedRectangle\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { registry } from \"../Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Button class is capable of drawing a simple rectangular button with\r\n * optionally rounded corners and an icon in it.\r\n *\r\n * @see {@link IButtonEvents} for a list of available events\r\n * @see {@link IButtonAdapters} for a list of available Adapters\r\n */\r\nvar Button = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Button, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Button() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"Button\";\r\n        _this.tooltipY = 0;\r\n        // Set defaults\r\n        _this.iconPosition = \"left\";\r\n        _this.layout = \"horizontal\";\r\n        _this.contentAlign = \"center\";\r\n        _this.contentValign = \"middle\";\r\n        _this.padding(8, 16, 8, 16);\r\n        var interfaceColors = new InterfaceColorSet();\r\n        // Create background\r\n        var background = _this.background;\r\n        background.fill = interfaceColors.getFor(\"secondaryButton\");\r\n        background.stroke = interfaceColors.getFor(\"secondaryButtonStroke\");\r\n        background.fillOpacity = 1;\r\n        background.strokeOpacity = 1;\r\n        background.cornerRadius(3, 3, 3, 3);\r\n        // Create the label element\r\n        _this.label = new Label();\r\n        _this.label.fill = interfaceColors.getFor(\"secondaryButtonText\");\r\n        ;\r\n        // Create default states\r\n        var hoverState = background.states.create(\"hover\");\r\n        hoverState.properties.fillOpacity = 1;\r\n        hoverState.properties.fill = interfaceColors.getFor(\"secondaryButtonHover\");\r\n        var downState = background.states.create(\"down\");\r\n        downState.transitionDuration = 100;\r\n        downState.properties.fill = interfaceColors.getFor(\"secondaryButtonDown\");\r\n        downState.properties.fillOpacity = 1;\r\n        // Set up accessibility\r\n        // A button should be always focusable\r\n        _this.role = \"button\";\r\n        _this.focusable = true;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Button.prototype, \"icon\", {\r\n        /**\r\n         * @return {Sprite} Icon Sprite\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"icon\");\r\n        },\r\n        /**\r\n         * A [[Sprite]] to be used as an icon on button.\r\n         *\r\n         * @param {Sprite} icon Icon Sprite\r\n         */\r\n        set: function (icon) {\r\n            var currentIcon = this.getPropertyValue(\"icon\");\r\n            if (currentIcon) {\r\n                //this._icon.dispose();\r\n                //this.removeDispose(currentIcon);\r\n                currentIcon.parent = undefined;\r\n            }\r\n            if (icon) {\r\n                this.setPropertyValue(\"icon\", icon);\r\n                icon.parent = this;\r\n                icon.interactionsEnabled = false;\r\n                this.iconPosition = this.iconPosition;\r\n                this._disposers.push(icon);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Button.prototype, \"iconPosition\", {\r\n        /**\r\n         * @return {\"left\" | \"right\"} Icon position\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"iconPosition\");\r\n        },\r\n        /**\r\n         * Icon position: \"left\" or \"right\".\r\n         *\r\n         * @default \"left\"\r\n         * @param {\"left\" | \"right\"}  position  Icon position\r\n         */\r\n        set: function (position) {\r\n            this.setPropertyValue(\"iconPosition\", position);\r\n            if (this.icon) {\r\n                if (position == \"left\") {\r\n                    this.icon.toBack();\r\n                }\r\n                else {\r\n                    this.icon.toFront();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Button.prototype, \"label\", {\r\n        /**\r\n         * @return {Optional<Label>} Label element\r\n         */\r\n        get: function () {\r\n            return this._label;\r\n        },\r\n        /**\r\n         * [[Label]] element to be used for text.\r\n         *\r\n         * @param {Optional<Label>}  label element\r\n         */\r\n        set: function (label) {\r\n            if (this._label) {\r\n                //this._label.dispose();\r\n                this.removeDispose(this._label);\r\n            }\r\n            this._label = label;\r\n            if (label) {\r\n                label.parent = this;\r\n                label.interactionsEnabled = false;\r\n                this._disposers.push(this._label);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates a background element for the button.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {RoundedRectangle} Background element\r\n     */\r\n    Button.prototype.createBackground = function () {\r\n        return new RoundedRectangle();\r\n    };\r\n    return Button;\r\n}(Container));\r\nexport { Button };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Button\"] = Button;\r\n//# sourceMappingURL=Button.js.map","/**\r\n * Functionality for drawing circles.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { percent } from \"../utils/Percent\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $math from \"../utils/Math\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to create a circle\r\n * @see {@link ICircleEvents} for a list of available events\r\n * @see {@link ICircleAdapters} for a list of available Adapters\r\n */\r\nvar Circle = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Circle, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Circle() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Circle\";\r\n        _this.element = _this.paper.add(\"circle\");\r\n        _this.setPercentProperty(\"radius\", percent(100));\r\n        _this.setPropertyValue(\"horizontalCenter\", \"middle\");\r\n        _this.setPropertyValue(\"verticalCenter\", \"middle\");\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the circle.\r\n     */\r\n    Circle.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        this.element.attr({ \"r\": this.pixelRadius });\r\n    };\r\n    Object.defineProperty(Circle.prototype, \"radius\", {\r\n        /**\r\n         * @return {number} Radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Radius of the circle.\r\n         *\r\n         * Can be either absolute (pixels) or relative ([Percent]).\r\n         *\r\n         * @param {number | Percent}  value  Radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Circle.prototype, \"pixelRadius\", {\r\n        /**\r\n         * Radius of the circle in pixels.\r\n         *\r\n         * This is a read-only property. To set radius in pixels, use `radius`\r\n         * property.\r\n         *\r\n         * @readonly\r\n         * @return {number} Radius (px)\r\n         */\r\n        get: function () {\r\n            return $utils.relativeToValue(this.radius, $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates bounding box.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Circle.prototype.measureElement = function () {\r\n        var pixelRadius = this.pixelRadius;\r\n        this._bbox = {\r\n            x: -pixelRadius,\r\n            y: -pixelRadius,\r\n            width: pixelRadius * 2,\r\n            height: pixelRadius * 2\r\n        };\r\n    };\r\n    return Circle;\r\n}(Sprite));\r\nexport { Circle };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Circle\"] = Circle;\r\n//# sourceMappingURL=Circle.js.map","/**\r\n * Ellipse module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Circle } from \"./Circle\";\r\nimport { registry } from \"../Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws an ellipse\r\n * @see {@link IEllipseEvents} for a list of available events\r\n * @see {@link IEllipseAdapters} for a list of available Adapters\r\n */\r\nvar Ellipse = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Ellipse, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Ellipse() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Ellipse\";\r\n        _this.element = _this.paper.add(\"ellipse\");\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the ellipsis.\r\n     */\r\n    Ellipse.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        this.element.attr({ \"rx\": this.radius });\r\n        this.element.attr({ \"ry\": this.radiusY });\r\n    };\r\n    Object.defineProperty(Ellipse.prototype, \"radiusY\", {\r\n        /**\r\n         * @return {number} Vertical radius\r\n         */\r\n        get: function () {\r\n            return this.innerHeight / 2;\r\n        },\r\n        /**\r\n         * Vertical radius.\r\n         *\r\n         * It's a relative size to the `radius`.\r\n         *\r\n         * E.g. 0.8 will mean the height of the ellipsis will be 80% of it's\r\n         * horizontal radius.\r\n         *\r\n         * @param {number}  value  Vertical radius\r\n         */\r\n        set: function (value) {\r\n            this.height = value * 2;\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Ellipse.prototype, \"radius\", {\r\n        /**\r\n         * @return {number} Horizontal radius\r\n         */\r\n        get: function () {\r\n            return this.innerWidth / 2;\r\n        },\r\n        /**\r\n         * Horizontal radius.\r\n         *\r\n         * @param {number}  value  Horizontal radius\r\n         */\r\n        set: function (value) {\r\n            this.width = value * 2;\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Ellipse;\r\n}(Circle));\r\nexport { Ellipse };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Ellipse\"] = Ellipse;\r\n//# sourceMappingURL=Ellipse.js.map","/**\r\n * Functionality for adding images in SVG tree.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to add `<image>` elements to SVG.\r\n *\r\n * @see {@link IImageEvents} for a list of available events\r\n * @see {@link IImageAdapters} for a list of available Adapters\r\n */\r\nvar Image = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Image, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Image() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Image\";\r\n        _this.element = _this.paper.add(\"image\");\r\n        _this.applyTheme();\r\n        _this.width = 50;\r\n        _this.height = 50;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws an `<image>` element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Image.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        if (this.href) {\r\n            var width = this.innerWidth;\r\n            var height = this.innerHeight;\r\n            if ($type.isNumber(this.widthRatio)) {\r\n                width = height * this.widthRatio;\r\n                this.width = width;\r\n            }\r\n            if ($type.isNumber(this.heightRatio)) {\r\n                height = width * this.heightRatio;\r\n                this.height = height;\r\n            }\r\n            this.element.attr({\r\n                \"width\": width,\r\n                \"height\": height\r\n            });\r\n            this.element.attrNS($dom.XLINK, \"xlink:href\", this.href);\r\n        }\r\n    };\r\n    Object.defineProperty(Image.prototype, \"href\", {\r\n        /**\r\n         * @return {string} Image URI\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"href\");\r\n        },\r\n        /**\r\n         * An image URI.\r\n         *\r\n         * @param {string}  value  Image URI\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"href\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Image.prototype, \"widthRatio\", {\r\n        /**\r\n         * @return {number} Ratio\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"widthRatio\");\r\n        },\r\n        /**\r\n         * Sets image `width` relatively to its `height`.\r\n         *\r\n         * If image's `height = 100` and `widthRatio = 0.5` the actual width will be\r\n         * `50`.\r\n         *\r\n         * @param {number}  value  Ratio\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"widthRatio\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Image.prototype, \"heightRatio\", {\r\n        /**\r\n         * @return {number} Ratio\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"heightRatio\");\r\n        },\r\n        /**\r\n         * Sets image `height` relatively to its `width`.\r\n         *\r\n         * If image's `width = 100` and `heightRatio = 0.5` the actual height will be\r\n         * `50`.\r\n         *\r\n         * @param {number}  value  Ratio\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"heightRatio\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Image.prototype, \"bbox\", {\r\n        /**\r\n         * Returns bounding box (square) for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {IRectangle}\r\n         */\r\n        get: function () {\r\n            return {\r\n                x: 0,\r\n                y: 0,\r\n                width: this.pixelWidth,\r\n                height: this.pixelHeight\r\n            };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Image;\r\n}(Sprite));\r\nexport { Image };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Image\"] = Image;\r\n//# sourceMappingURL=Image.js.map","/**\r\n * Text class deals with all text placed on chart.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Container } from \"../Container\";\r\nimport { registry } from \"../Registry\";\r\nimport { getTextFormatter } from \"../formatters/TextFormatter\";\r\nimport { MultiDisposer } from \"../utils/Disposer\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\n;\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Text is used to display highly configurable, data-enabled textual elements.\r\n *\r\n * ## Data Binding\r\n *\r\n * A Text element can dynamically parse and populate its contents with values\r\n * from a [[DataItem]].\r\n *\r\n * To activate such binding, set element's `dataItem` property.\r\n *\r\n * When activated, text contents will be parsed for special tags, e.g.:\r\n *\r\n * ```TypeScript\r\n * label.dataItem = myDataItem;\r\n * label.text = \"The title is: {title}\";\r\n * ```\r\n * ```JavaScript\r\n * label.dataItem = myDataItem;\r\n * label.text = \"The title is: {title}\";\r\n * ```\r\n *\r\n * The above will automatically replace \"{title}\" in the string with the\r\n * actual data value from `myDataItem`.\r\n *\r\n * Note, that most often dataItem is set by the Component.\r\n *\r\n *\r\n * @see {@link ILabelEvents} for a list of available events\r\n * @see {@link ILabelAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-strings/} for info on string formatting and data binding\r\n * @todo Vertical align\r\n * @important\r\n */\r\nvar Label = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Label, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Label() {\r\n        var _this = \r\n        // Execute super's constructor\r\n        _super.call(this) || this;\r\n        /**\r\n         * Indicates if the whole text does not fit into max dimenstions set for it.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this.isOversized = false;\r\n        // Set this class name\r\n        _this.className = \"Label\";\r\n        _this.fill = new InterfaceColorSet().getFor(\"text\");\r\n        // not good to set this, as then these will appear on each label and values set on container won't be applied.\r\n        //this.textDecoration = \"none\";\r\n        //this.fontWeight = \"normal\";\r\n        // Set defaults\r\n        _this.wrap = false;\r\n        _this.truncate = false;\r\n        _this.fullWords = true;\r\n        _this.ellipsis = \"...\";\r\n        _this.textAlign = \"start\";\r\n        _this.textValign = \"top\";\r\n        _this.layout = \"absolute\";\r\n        // Set up adapters for manipulating accessibility\r\n        _this.adapter.add(\"readerTitle\", function (arg) {\r\n            if (!arg) {\r\n                arg = _this.populateString($utils.plainText($utils.isNotEmpty(_this.html)\r\n                    ? _this.html\r\n                    : _this.text));\r\n            }\r\n            return arg;\r\n        });\r\n        // Add events to watch for maxWidth/maxHeight changes so that we can\r\n        // invalidate this\r\n        _this.events.on(\"maxsizechanged\", function () {\r\n            if (_this.inited) {\r\n                _this.handleMaxSize();\r\n            }\r\n        }, _this, false);\r\n        // this solves strange bug when text just added to svg is 0x0\r\n        _this.events.once(\"validated\", _this.handleValidate, _this, false);\r\n        // Aply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * A placeholder method that is called **after** element finishes drawing\r\n     * itself.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Label.prototype.afterDraw = function () {\r\n        // since we removed validatePosition from sprite, we still need it here to handle rotated text\r\n        _super.prototype.afterDraw.call(this);\r\n        this.validatePosition();\r\n    };\r\n    /**\r\n     * Sets [[Paper]] instance to use to draw elements.\r\n     * @ignore\r\n     * @param {Paper} paper Paper\r\n     * @return {boolean} true if paper was changed, false, if it's the same\r\n     */\r\n    Label.prototype.setPaper = function (paper) {\r\n        var changed = _super.prototype.setPaper.call(this, paper);\r\n        if (changed) {\r\n            this.hardInvalidate();\r\n        }\r\n        return changed;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Label.prototype.handleValidate = function () {\r\n        if ((this.currentText || this.text) && (this.bbox.width == 0 || this.bbox.height == 0)) {\r\n            registry.events.once(\"exitframe\", this.hardInvalidate, this);\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Label.prototype.handleMaxSize = function () {\r\n        if ((this.bbox.width > this.availableWidth)\r\n            || ((this.bbox.width < this.availableWidth) && (this.isOversized || this.truncate))\r\n            || (this.bbox.height > this.availableHeight)\r\n            || ((this.bbox.height < this.availableHeight) && this.isOversized)) {\r\n            this.invalidate();\r\n        }\r\n        else {\r\n            this.alignSVGText();\r\n        }\r\n    };\r\n    /**\r\n     * [arrange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    Label.prototype.arrange = function () {\r\n    };\r\n    /**\r\n     * Updates current text according to data item and supported features.\r\n     * Returns `true` if current text has changed.\r\n     *\r\n     * @return {boolean} Text changed?\r\n     */\r\n    Label.prototype.updateCurrentText = function () {\r\n        // Determine output format\r\n        var output, text;\r\n        if ($utils.isNotEmpty(this.html) && this.paper.supportsForeignObject()) {\r\n            // We favor HTML text if it's set and browser supports `foreignObject`\r\n            output = \"html\";\r\n            text = this.html;\r\n        }\r\n        else {\r\n            output = \"svg\";\r\n            text = this.text;\r\n        }\r\n        // Need to format text all the time\r\n        if ($type.hasValue(text) && text !== \"\") {\r\n            text = this.populateString(text, this.dataItem);\r\n        }\r\n        if (output == \"html\") {\r\n            text = this.adapter.apply(\"htmlOutput\", text);\r\n        }\r\n        else {\r\n            text = this.adapter.apply(\"textOutput\", text);\r\n        }\r\n        // Update the text\r\n        var changed = text != this.currentText || output != this._currentFormat;\r\n        this.currentText = text;\r\n        this._currentFormat = output;\r\n        return changed;\r\n    };\r\n    /**\r\n     * Hard invalidate means the text will be redrawn even if it hasn't changed.\r\n     * This is used when we change `fontSize`, `fontFamily`, or for some other\r\n     * reasons.\r\n     */\r\n    Label.prototype.hardInvalidate = function () {\r\n        this._prevStatus = \"\";\r\n        this.invalidate();\r\n    };\r\n    /**\r\n     * Gets line bbox, uses caching to save cpu\r\n     * @ignore\r\n     */\r\n    Label.prototype.getLineBBox = function (lineInfo) {\r\n        //let cacheKey = lineInfo.text + lineInfo.style;\r\n        //let lineBBox = this.getCache(cacheKey);\r\n        //if (!lineBBox) {\r\n        //lineBBox = lineInfo.element.getBBox();\r\n        //if (lineBBox.width != 0 && lineBBox.height != 0) {\r\n        //\tthis.setCache(cacheKey, lineBBox, 5000);\r\n        //}\r\n        //}\r\n        lineInfo.bbox = lineInfo.element.getBBox();\r\n    };\r\n    /**\r\n     * Draws the textual label.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Label.prototype.draw = function () {\r\n        // Draw super\r\n        _super.prototype.draw.call(this);\r\n        var oldW = this.bbox.width;\r\n        var oldH = this.bbox.height;\r\n        var topParent = this.topParent;\r\n        if (topParent) {\r\n            if (!topParent.maxWidth || !topParent.maxHeight) {\r\n                topParent.events.once(\"maxsizechanged\", this.hardInvalidate, this, false);\r\n                return;\r\n            }\r\n        }\r\n        // Calculate max width and height\r\n        var maxWidth = $math.max(this.availableWidth - this.pixelPaddingLeft - this.pixelPaddingRight, 0);\r\n        var maxHeight = $math.max(this.availableHeight - this.pixelPaddingTop - this.pixelPaddingBottom, 0);\r\n        // save\r\n        var status = maxHeight + \",\" + maxWidth + this.wrap + this.truncate + this.fullWords + this.rtl + this.ellipsis;\r\n        // Update text\r\n        if (!this.updateCurrentText() && this.inited && this._prevStatus == status) {\r\n            return;\r\n        }\r\n        this._measuredWidth = 0;\r\n        this._measuredHeight = 0;\r\n        // Reset\r\n        this.isOversized = false;\r\n        // Determine output format\r\n        var output = this._currentFormat;\r\n        var text = this.currentText;\r\n        // Empty string\r\n        if (!$type.hasValue(text) || text == \"\") {\r\n            this.element.attr({ display: \"none\" });\r\n            return;\r\n        }\r\n        // Chop up text into lines\r\n        // We're still processing SVG and HTML in the same way for now\r\n        var lines = text.split(\"\\n\");\r\n        // Do we need to go through the trouble of measuring lines\r\n        //let measure: boolean = true;// (lines.length > 1) || this.wrap;\r\n        this._prevStatus = status;\r\n        this.textAlign = this.textAlign;\r\n        // need this to measure\r\n        var display = this.group.getAttr(\"display\");\r\n        if (display == \"none\") {\r\n            this.group.removeAttr(\"display\");\r\n        }\r\n        // SVG or HTML?\r\n        if (output === \"svg\") {\r\n            /**\r\n             * SVG\r\n             */\r\n            this.element.removeAttr(\"display\");\r\n            // Clear the element\r\n            var group = this.element;\r\n            this.resetBBox();\r\n            // Init state variables\r\n            var currentHeight = 0;\r\n            var currentFormat = \"\";\r\n            // Process each line\r\n            for (var i = 0; i < lines.length; i++) {\r\n                // Get line\r\n                var line = lines[i];\r\n                // Check if line is empty\r\n                if (line == \"\") {\r\n                    // It is, let's just update currentHeight and go to the next one\r\n                    // If it's the first line, we'll have to use arbirary line height,\r\n                    // since there's nothing to measure. For subsequent lines we can take\r\n                    // previous line's height\r\n                    var tempElement = this.getSVGLineElement(\"\", 0);\r\n                    tempElement.add(this.getSvgElement(\".\", getTextFormatter().translateStyleShortcuts(currentFormat)));\r\n                    group.add(tempElement);\r\n                    var offset = Math.ceil(tempElement.getBBox().height);\r\n                    if (offset > 0) {\r\n                        currentHeight += offset;\r\n                    }\r\n                    group.removeElement(tempElement);\r\n                    continue;\r\n                }\r\n                // Chunk up the line and process each chunk\r\n                var chunks = getTextFormatter().chunk(line, null, this.ignoreFormatting);\r\n                var currentLineHeight = 0;\r\n                var firstChunk = true;\r\n                var skipTextChunks = false;\r\n                // Create line element or grab it from cache\r\n                var lineInfo = void 0;\r\n                if (lineInfo = this.getLineInfo(i)) {\r\n                    // Empty line\r\n                    lineInfo.element.textContent = \"\";\r\n                }\r\n                else {\r\n                    // Init new line info\r\n                    lineInfo = {\r\n                        \"element\": this.getSVGLineElement(\"\", 0),\r\n                        \"complex\": false\r\n                    };\r\n                    // Create the line element\r\n                    //lineInfo.element = this.getSVGLineElement(\"\", 0);\r\n                    //lineElement = this.getSVGLineElement(\"\", 0);\r\n                    group.add(lineInfo.element);\r\n                }\r\n                lineInfo.element.removeAttr(\"display\");\r\n                lineInfo.element.removeChildren(); // memory leak without this\r\n                if (this.rtl) {\r\n                    chunks.reverse();\r\n                }\r\n                // Process each chunk\r\n                for (var x = 0; x < chunks.length; x++) {\r\n                    // If there's more than one chunk, means the line is \"complex\"\r\n                    if (x) {\r\n                        lineInfo.complex = true;\r\n                    }\r\n                    // Get chunk\r\n                    var chunk = chunks[x];\r\n                    // Is this chunk format or text?\r\n                    if (chunk.type === \"format\") {\r\n                        // Log current format, so that we can apply it to multiple lines if\r\n                        // necessary\r\n                        currentFormat = chunk.text;\r\n                    }\r\n                    else {\r\n                        // It's text block\r\n                        // Need to skip?\r\n                        // We do this when truncating. We can't just simply go ahead and\r\n                        // abandon chunk processing as they might have formatting\r\n                        // instructions in them that are relevant for subsequent lines\r\n                        if (skipTextChunks) {\r\n                            continue;\r\n                        }\r\n                        // Add chunk to the current element\r\n                        //lineInfo.element.content += $utils.trim(getTextFormatter().format(currentFormat + chunk.text, output));\r\n                        lineInfo.text = chunk.text;\r\n                        lineInfo.style = getTextFormatter().translateStyleShortcuts(currentFormat);\r\n                        lineInfo.element.add(this.getSvgElement(lineInfo.text, lineInfo.style));\r\n                        this.getLineBBox(lineInfo);\r\n                        lineInfo.bbox.width = Math.ceil(lineInfo.bbox.width);\r\n                        // Updated current line height\r\n                        if (currentLineHeight < lineInfo.bbox.height) {\r\n                            currentLineHeight = lineInfo.bbox.height;\r\n                        }\r\n                        // Wrapping?\r\n                        if ((this.wrap || this.truncate) && (lineInfo.bbox.width > maxWidth)) {\r\n                            // Set oversized\r\n                            this.isOversized = true;\r\n                            // Take temporary measurements\r\n                            var lineText = lineInfo.element.textContent;\r\n                            var avgCharWidth = (lineInfo.bbox.width / lineText.length); // * .9;\r\n                            // Calculate average number of symbols / width\r\n                            var excessChars = $math.min(Math.ceil((lineInfo.bbox.width - maxWidth) / avgCharWidth), lineText.length);\r\n                            // Are we truncating or auto-wrapping text?\r\n                            if (this.truncate) {\r\n                                /**\r\n                                 * Processing line truncation\r\n                                 * With the addition of each text chunk we measure if current\r\n                                 * line does not exceed maxWidth. If it does, we will stop\r\n                                 * addition of further chunks as well as try to truncate\r\n                                 * current or any number of previous chunks with an added\r\n                                 * ellipsis\r\n                                 */\r\n                                // Indicator whether we need to add ellipsis to the current\r\n                                // element, even if it fits. This is needed to indicate\r\n                                // whether we have already removed some subsequent chunks in\r\n                                // which case we need to add ellipsis.\r\n                                var addEllipsis = false;\r\n                                // Process each child in the temporary line, until the whole\r\n                                // line fits, preferably with an ellipsis\r\n                                // TODO use iterator instead\r\n                                var node_1 = lineInfo.element.node;\r\n                                if (node_1 && node_1.childNodes) {\r\n                                    for (var e = lineInfo.element.node.childNodes.length - 1; e >= 0; e--) {\r\n                                        // Get current element\r\n                                        var node_2 = lineInfo.element.node.childNodes[e];\r\n                                        // Add ellipsis only if previous chunk was removed in full\r\n                                        // and this chunk already fits\r\n                                        //if (addEllipsis && (bbox.width <= maxWidth)) {\r\n                                        if (addEllipsis && (lineInfo.bbox.width <= maxWidth)) {\r\n                                            // Add ellipsis\r\n                                            node_2.textContent += \" \" + this.ellipsis;\r\n                                            // Measure again (we need to make sure ellipsis fits)\r\n                                            lineInfo.bbox = lineInfo.element.getBBox();\r\n                                            lineInfo.bbox.width = Math.floor(lineInfo.bbox.width);\r\n                                            // If it fits, we're done here\r\n                                            // If it doesn't we continue rolling\r\n                                            if (lineInfo.bbox.width <= maxWidth) {\r\n                                                break;\r\n                                            }\r\n                                        }\r\n                                        addEllipsis = false;\r\n                                        // Get element text\r\n                                        var elementText = node_2.textContent;\r\n                                        // Calculate average number of symbols / width\r\n                                        lineText = lineInfo.element.textContent;\r\n                                        excessChars = $math.min(Math.ceil((lineInfo.bbox.width - maxWidth) / avgCharWidth), lineText.length);\r\n                                        // Do this until we fit\r\n                                        while ((lineInfo.bbox.width > maxWidth) && (excessChars <= lineText.length) && (excessChars > 0)) {\r\n                                            // Calculate max available chars\r\n                                            var maxChars = $math.max(elementText.length - excessChars - this.ellipsis.length, 1);\r\n                                            // Is there anything left?\r\n                                            if (maxChars <= 1) {\r\n                                                // Nope, let's jump to the previous item\r\n                                                // Set excess characters to zero so that this loop does\r\n                                                // not repeat when it over\r\n                                                excessChars = 0;\r\n                                                // Add ellipsis to previous item\r\n                                                // Subsequent iterations will check if the ellipsis fits\r\n                                                if (e > 0) {\r\n                                                    // Indicating to add ellipsis to previous item\r\n                                                    addEllipsis = true;\r\n                                                    // Removing this node\r\n                                                    lineInfo.element.node.removeChild(node_2);\r\n                                                }\r\n                                            }\r\n                                            // Truncate the text\r\n                                            elementText = $utils.truncateWithEllipsis(elementText, maxChars, this.ellipsis, this.fullWords, this.rtl);\r\n                                            if ((elementText.length > maxChars) && this.fullWords) {\r\n                                                // Still too long?\r\n                                                // Let's try truncating breaking words anyway\r\n                                                elementText = $utils.truncateWithEllipsis(elementText, maxChars, this.ellipsis, false, this.rtl);\r\n                                            }\r\n                                            // Set truncated text\r\n                                            node_2.textContent = elementText;\r\n                                            // Measure again\r\n                                            lineInfo.bbox = lineInfo.element.getBBox();\r\n                                            lineInfo.bbox.width = Math.floor(lineInfo.bbox.width);\r\n                                            // Increase excess characters count, just in case it still\r\n                                            // doesn't fit and we have to go at it again\r\n                                            excessChars = Math.ceil(excessChars * 1.1);\r\n                                        }\r\n                                        // Do not process further chunks\r\n                                        skipTextChunks = true;\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                /**\r\n                                 * Processign auto-wrap\r\n                                 * In this case we're going to be adding text chunks until\r\n                                 * they don't fit into current line. Once that happens we will\r\n                                 * inject the rest of the chunks to the next line\r\n                                 */\r\n                                // Get last node added and measure it\r\n                                var node_3 = lineInfo.element.node;\r\n                                if (node_3) {\r\n                                    var lastNode = lineInfo.element.node.lastChild;\r\n                                    // Init split lines\r\n                                    var splitLines = void 0;\r\n                                    while ((lineInfo.bbox.width > maxWidth) && (excessChars <= lineText.length) && (excessChars > 0)) {\r\n                                        // Calculate max available chars\r\n                                        var maxChars = $math.max(chunk.text.length - excessChars, 1);\r\n                                        // Don't split the words mid-word if it's not the first chunk\r\n                                        // in the line\r\n                                        if (firstChunk) {\r\n                                            // Split mid-word if necessary\r\n                                            splitLines = $utils.splitTextByCharCount(chunk.text, maxChars, true, this.rtl);\r\n                                        }\r\n                                        else {\r\n                                            // Don't split mid-word\r\n                                            splitLines = $utils.splitTextByCharCount(chunk.text, maxChars, true, this.rtl);\r\n                                            // Check if the first word is too long\r\n                                            if ((splitLines[0].length > maxChars) || maxChars === 1) {\r\n                                                // Yes - move the whole chunk to the next line\r\n                                                // Remove the element we just added\r\n                                                lineInfo.element.node.removeChild(lastNode);\r\n                                                // Break out of the while on next cycle\r\n                                                excessChars = 0;\r\n                                            }\r\n                                        }\r\n                                        // Use the first line to update last item\r\n                                        if (excessChars > 0) {\r\n                                            lastNode.textContent = getTextFormatter().cleanUp($utils.trim(splitLines.shift()));\r\n                                        }\r\n                                        // Measure again, just in case\r\n                                        lineInfo.bbox = lineInfo.element.getBBox();\r\n                                        lineInfo.bbox.width = Math.floor(lineInfo.bbox.width);\r\n                                        // Increase excess characters count, just in case it still\r\n                                        // doesn't fit and we have to go at it again\r\n                                        excessChars = Math.ceil(excessChars * 1.1);\r\n                                    }\r\n                                    // Construct the rest of the line\r\n                                    if (splitLines.length > 0) {\r\n                                        var restOfLine = \"\";\r\n                                        // Add leftovers from splitting the current chunk\r\n                                        if ($type.hasValue(splitLines)) {\r\n                                            if (this.rtl) {\r\n                                                restOfLine += splitLines.join(\"\") + currentFormat;\r\n                                            }\r\n                                            else {\r\n                                                restOfLine += currentFormat + splitLines.join(\"\");\r\n                                            }\r\n                                        }\r\n                                        // Add the rest of the chunks\r\n                                        for (var c = x + 1; c < chunks.length; c++) {\r\n                                            restOfLine += chunks[c].text;\r\n                                        }\r\n                                        // Inject the rest of the lines as chunks for subsequent\r\n                                        lines.splice(i + 1, 0, restOfLine);\r\n                                    }\r\n                                    // Skip processing the rest of the chunks\r\n                                    skipTextChunks = true;\r\n                                }\r\n                            }\r\n                        }\r\n                        // Let's update the text's bbox with the line's one\r\n                        if (this.bbox.width < lineInfo.bbox.width) {\r\n                            this.bbox.width = lineInfo.bbox.width;\r\n                        }\r\n                        // commented to avoid bug (seen on sankey link) where text is incorrectly aligned\r\n                        //if (this.bbox.x > lineInfo.bbox.x) {\r\n                        //this.bbox.x = lineInfo.bbox.x;\r\n                        //}\r\n                        this.bbox.height = currentHeight + currentLineHeight;\r\n                        // Position current line\r\n                        lineInfo.element.attr({\r\n                            \"x\": \"0\",\r\n                            \"y\": currentHeight + currentLineHeight,\r\n                            \"dy\": $math.round((-0.2 * currentLineHeight), 3).toString()\r\n                        });\r\n                        firstChunk = false;\r\n                    }\r\n                }\r\n                // Trim the last item\r\n                var node = lineInfo.element.node;\r\n                if (node) {\r\n                    var lastNode = node.lastChild;\r\n                    if (lastNode) {\r\n                        lastNode.textContent = this.rtl ?\r\n                            $utils.ltrim(lastNode.textContent) :\r\n                            $utils.rtrim(lastNode.textContent);\r\n                    }\r\n                }\r\n                // Increment collective height\r\n                currentHeight += currentLineHeight;\r\n                // Save line cache\r\n                this.addLineInfo(lineInfo, i);\r\n            }\r\n            // Check if maybe we need to hide the whole label if it doesn't fit\r\n            if (this.hideOversized) {\r\n                if ((this.availableWidth < this.bbox.width) || (this.availableHeight < this.bbox.height)) {\r\n                    this.element.attr({ display: \"none\" });\r\n                    this.isOversized = true;\r\n                }\r\n                else {\r\n                    this.element.removeAttr(\"display\");\r\n                    this.isOversized = false;\r\n                }\r\n            }\r\n            this._measuredWidth = $math.max(this.bbox.width, this.pixelWidth - this.pixelPaddingLeft - this.pixelPaddingRight);\r\n            this._measuredHeight = $math.max(this.bbox.height, this.pixelHeight - this.pixelPaddingTop - this.pixelPaddingBottom);\r\n            // Align the lines\r\n            this.alignSVGText();\r\n            this.bbox.width = this._measuredWidth;\r\n            this.bbox.height = this._measuredHeight;\r\n            if (oldH != this._measuredHeight || oldW != this._measuredWidth) {\r\n                this.dispatch(\"transformed\");\r\n            }\r\n            this.hideUnused(lines.length);\r\n        }\r\n        else {\r\n            /**\r\n             * HTML\r\n             */\r\n            this.element.removeAttr(\"display\");\r\n            this.resetBBox();\r\n            // Clear the element\r\n            var group = this.element;\r\n            group.removeChildren();\r\n            // Create a ForeignObject to use as HTML container\r\n            var fo = this.paper.foreignObject();\r\n            group.add(fo);\r\n            // Set group and foreignObject dimensions\r\n            var width = maxWidth > 0 ? (maxWidth).toString() + \"px\" : \"100%\";\r\n            var height = maxHeight > 0 ? (maxHeight).toString() + \"px\" : \"100%\";\r\n            // Create line element\r\n            //let lineElement: HTMLElement = this.getHTMLLineElement(getTextFormatter().format(this.html, output));\r\n            var lineElement = this.getHTMLLineElement(text);\r\n            fo.node.appendChild(lineElement);\r\n            // Temporarily set to inline-block so we can measure real width and height\r\n            lineElement.style.display = \"inline-block\";\r\n            var clientWidth = lineElement.clientWidth;\r\n            var clientHeight = lineElement.clientHeight;\r\n            lineElement.style.display = \"block\";\r\n            this._bbox = {\r\n                x: 0,\r\n                y: 0,\r\n                width: clientWidth,\r\n                height: clientHeight\r\n            };\r\n            // Set exact dimensions of foreignObject so it is sized exactly as\r\n            // the content within\r\n            fo.attr({\r\n                width: clientWidth,\r\n                height: clientHeight\r\n            });\r\n            // Set measurements and update bbox\r\n            this._measuredWidth = $math.max(this.bbox.width, this.pixelWidth - this.pixelPaddingLeft - this.pixelPaddingRight);\r\n            this._measuredHeight = $math.max(this.bbox.height, this.pixelHeight - this.pixelPaddingTop - this.pixelPaddingBottom);\r\n            this.bbox.width = this._measuredWidth;\r\n            this.bbox.height = this._measuredHeight;\r\n            // Don't let labels bleed out of the alotted area\r\n            if (this.truncate) {\r\n                lineElement.style.overflow = \"hidden\";\r\n            }\r\n            if ((clientWidth > maxWidth) || (clientHeight > maxHeight)) {\r\n                this.isOversized = true;\r\n            }\r\n        }\r\n        // Set applicable styles\r\n        this.setStyles();\r\n        this.updateCenter();\r\n        this.updateBackground();\r\n        if (display == \"none\") {\r\n            this.group.attr({ display: \"none\" });\r\n        }\r\n    };\r\n    /**\r\n     * Aligns the lines horizontally ant vertically, based on properties.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Label.prototype.alignSVGText = function () {\r\n        // Get Group\r\n        var group = this.element;\r\n        var children = group.node.children || group.node.childNodes;\r\n        // Is there anything to align?\r\n        if (!children || (children && children.length == 0)) {\r\n            return;\r\n        }\r\n        var width = this._measuredWidth;\r\n        var height = this._measuredHeight;\r\n        var paddingLeft = this.pixelPaddingLeft;\r\n        var paddingRight = this.pixelPaddingRight;\r\n        var paddingTop = this.pixelPaddingTop;\r\n        var paddingBottom = this.pixelPaddingBottom;\r\n        // Process each line\r\n        //$iter.each(group.children.backwards().iterator(), (element) => {\r\n        for (var i = children.length - 1; i >= 0; i--) {\r\n            // Align horizontally\r\n            // Since we are using `text-anchor` for horizontal alignment, all we need\r\n            // to do here is move the `x` position\r\n            var node = children[i];\r\n            node.setAttribute(\"text-anchor\", this.textAlign);\r\n            switch (this.textAlign) {\r\n                case \"middle\":\r\n                    node.setAttribute(\"x\", (width / 2).toString() + \"px\");\r\n                    break;\r\n                case \"end\":\r\n                    if (this.rtl) {\r\n                    }\r\n                    else {\r\n                        node.setAttribute(\"x\", width.toString());\r\n                    }\r\n                    break;\r\n                default:\r\n                    if (this.rtl) {\r\n                        node.setAttribute(\"x\", width.toString());\r\n                    }\r\n                    else {\r\n                        node.removeAttribute(\"text-anchor\");\r\n                    }\r\n                    break;\r\n            }\r\n            var y = $type.toNumber(node.getAttribute(\"y\"));\r\n            switch (this.textValign) {\r\n                case \"middle\":\r\n                    node.setAttribute(\"y\", (y + (height - this.bbox.height) / 2).toString());\r\n                    break;\r\n                case \"bottom\":\r\n                    node.setAttribute(\"y\", (y + height - this.bbox.height).toString());\r\n                    break;\r\n                default:\r\n                    node.setAttribute(\"y\", y.toString());\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Produces an SVG line element with formatted text.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}     text    Text to wrap into line\r\n     * @param  {number}     y       Current line vertical position\r\n     * @return {AMElement}          A DOM element\r\n     * @todo Implement HTML support\r\n     */\r\n    Label.prototype.getSVGLineElement = function (text, y) {\r\n        // Create a <text> node and set text\r\n        var element = this.paper.addGroup(\"text\");\r\n        element.textContent = text;\r\n        // Set parameters\r\n        element.attr({\r\n            \"x\": \"0\"\r\n            //\"alignment-baseline\": \"hanging\",\r\n            //\"baseline-shift\": \"-20%\",\r\n            //\"text-anchor\": \"center\"\r\n        });\r\n        // Set `y` position\r\n        if ($type.hasValue(y)) {\r\n            element.attr({\r\n                \"y\": y.toString()\r\n            });\r\n        }\r\n        // Don't let labels blled out of the alotted area\r\n        if (this.truncate || this.wrap) {\r\n            element.attr({ \"overflow\": \"hidden\" });\r\n        }\r\n        // Add RTL?\r\n        if (this.rtl) {\r\n            element.attr({\r\n                \"direction\": \"rtl\",\r\n                \"unicode-bidi\": \"bidi-override\"\r\n            });\r\n        }\r\n        return element;\r\n    };\r\n    /**\r\n     * Resets cached BBox.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Label.prototype.resetBBox = function () {\r\n        this._bbox = { x: 0, y: 0, width: 0, height: 0 };\r\n    };\r\n    /**\r\n     * Creates and returns an HTML line element (`<div>`).\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}       text  Text to add\r\n     * @return {HTMLElement}        `<div>` element reference\r\n     */\r\n    Label.prototype.getHTMLLineElement = function (text) {\r\n        // Create the <div> element\r\n        var div = document.createElement(\"div\");\r\n        div.innerHTML = text;\r\n        // Set text alignment\r\n        switch (this.textAlign) {\r\n            case \"middle\":\r\n                div.style.textAlign = \"center\";\r\n                break;\r\n            case \"end\":\r\n                div.style.textAlign = \"right\";\r\n                break;\r\n        }\r\n        // Disable or enable wrapping\r\n        if (this.wrap) {\r\n            div.style.wordWrap = \"break-word\";\r\n        }\r\n        else {\r\n            div.style.whiteSpace = \"nowrap\";\r\n        }\r\n        // Don't let labels bleed out of the alotted area\r\n        // Moved to `draw()` because setting \"hidden\" kills all measuring\r\n        /*if (this.truncate) {\r\n            div.style.overflow = \"hidden\";\r\n        }*/\r\n        // Set RTL-related styles\r\n        if (this.rtl) {\r\n            div.style.direction = \"rtl\";\r\n            div.style.unicodeBidi = \"bidi-override\";\r\n        }\r\n        // Translate some of the SVG styles into CSS\r\n        if ($type.hasValue(this.fill)) {\r\n            div.style.color = this.fill.toString();\r\n        }\r\n        return div;\r\n    };\r\n    /**\r\n     * Applies specific styles to text to make it not selectable, unless it is\r\n     * explicitly set as `selectable`.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Set styles via AMElement\r\n     */\r\n    Label.prototype.setStyles = function () {\r\n        var group = this.element;\r\n        if (!this.selectable || this.draggable || this.resizable || this.swipeable) {\r\n            group.addStyle({\r\n                \"webkitUserSelect\": \"none\",\r\n                \"msUserSelect\": \"none\"\r\n            });\r\n        }\r\n        else if (this.selectable) {\r\n            group.removeStyle(\"webkitUserSelect\");\r\n            group.removeStyle(\"msUserSelect\");\r\n        }\r\n    };\r\n    /**\r\n     * Hides unused lines\r\n     */\r\n    Label.prototype.hideUnused = function (index) {\r\n        this.initLineCache();\r\n        var lines = this.getCache(\"lineInfo\");\r\n        if (lines.length >= index) {\r\n            for (var i = index; i < lines.length; i++) {\r\n                var line = lines[i];\r\n                if (line && line.element) {\r\n                    line.element.attr({ \"display\": \"none\" });\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Label.prototype, \"text\", {\r\n        /**\r\n         * @return {string} SVG text\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"text\");\r\n        },\r\n        /**\r\n         * An SVG text.\r\n         *\r\n         * Please note that setting `html` will override this setting if browser\r\n         * supports `foreignObject` in SGV, such as most modern browsers excluding\r\n         * IEs.\r\n         *\r\n         * @param {string}  value  SVG Text\r\n         */\r\n        set: function (value) {\r\n            //this.setPropertyValue(\"html\", undefined);\r\n            this.setPropertyValue(\"text\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Label.prototype, \"wrap\", {\r\n        /**\r\n         * @return {boolean} Auto-wrap enabled or not\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"wrap\");\r\n        },\r\n        /**\r\n         * Enables or disables autowrapping of text.\r\n         *\r\n         * @param {boolean}  value  Auto-wrapping enabled\r\n         */\r\n        set: function (value) {\r\n            this.resetBBox();\r\n            this.setPropertyValue(\"wrap\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Label.prototype, \"truncate\", {\r\n        /**\r\n         * @return {boolean} Truncate text?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"truncate\");\r\n        },\r\n        /**\r\n         * Indicates if text lines need to be truncated if they do not fit, using\r\n         * configurable `ellipsis` string.\r\n         *\r\n         * `truncate` overrides `wrap` if both are set to `true`.\r\n         *\r\n         * NOTE: For HTML text, this setting **won't** trigger a parser and actual\r\n         * line truncation with ellipsis. It will just hide everything that goes\r\n         * outside the label.\r\n         *\r\n         * @param {boolean}  value  trincate text?\r\n         */\r\n        set: function (value) {\r\n            this.resetBBox();\r\n            this.setPropertyValue(\"truncate\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Label.prototype, \"fullWords\", {\r\n        /**\r\n         * @return {boolean} Truncate on full words?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"fullWords\");\r\n        },\r\n        /**\r\n         * If `truncate` is enabled, should Label try to break only on full words\r\n         * (`true`), or whenever needed, including middle of the word. (`false`)\r\n         *\r\n         * @default true\r\n         * @param {boolean}  value  Truncate on full words?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"fullWords\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Label.prototype, \"ellipsis\", {\r\n        /**\r\n         * @return {string} Ellipsis string\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"ellipsis\");\r\n        },\r\n        /**\r\n         * Ellipsis character to use if `truncate` is enabled.\r\n         *\r\n         * @param {string} value Ellipsis string\r\n         * @default \"...\"\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"ellipsis\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Label.prototype, \"selectable\", {\r\n        /**\r\n         * @return {boolean} Text selectable?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"selectable\");\r\n        },\r\n        /**\r\n         * Forces the text to be selectable. This setting will be ignored if the\r\n         * object has some kind of interaction attached to it, such as it is\r\n         * `draggable`, `swipeable`, `resizable`.\r\n         *\r\n         * @param {boolean}  value  Text selectable?\r\n         * @default false\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"selectable\", value, true);\r\n            this.setStyles();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Label.prototype, \"textAlign\", {\r\n        /**\r\n         * @return {TextAlign} Alignment\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"textAlign\");\r\n        },\r\n        /**\r\n         * Horizontal text alignment.\r\n         *\r\n         * Available choices:\r\n         * * \"start\"\r\n         * * \"middle\"\r\n         * * \"end\"\r\n         *\r\n         * @param {TextAlign}  value  Alignment\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"textAlign\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Label.prototype, \"textValign\", {\r\n        /**\r\n         * @ignore Exclude from docs (not used)\r\n         * @return {TextValign} Alignment\r\n         * @deprecated\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"textValign\");\r\n        },\r\n        /**\r\n         * Vertical text alignment.\r\n         *\r\n         * @ignore Exclude from docs (not used)\r\n         * @param {TextValign}  value  Alignment\r\n         * @deprecated\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"textValign\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Label.prototype, \"html\", {\r\n        /**\r\n         * @return {string} HTML content\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"html\");\r\n        },\r\n        /**\r\n         * Raw HTML to be used as text.\r\n         *\r\n         * NOTE: HTML text is subject to browser support. It relies on browsers\r\n         * supporting SVG `foreignObject` nodes. Some browsers (read IEs) do not\r\n         * support it. On those browsers, the text will fall back to basic SVG text,\r\n         * striping out all HTML markup and styling that goes with it.\r\n         *\r\n         * For more information about `foreignObject` and its browser compatibility\r\n         * refer to [this page](https://developer.mozilla.org/en/docs/Web/SVG/Element/foreignObject#Browser_compatibility).\r\n         *\r\n         * @param {string} value HTML text\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"html\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Label.prototype, \"hideOversized\", {\r\n        /**\r\n         * @return {boolean} Hide if text does not fit?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"hideOversized\");\r\n        },\r\n        /**\r\n         * Indicates whether the whole text should be hidden if it does not fit into\r\n         * its allotted space.\r\n         *\r\n         * @param {boolean}  value  Hide if text does not fit?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"hideOversized\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Label.prototype, \"ignoreFormatting\", {\r\n        /**\r\n         * @return {boolean} Ignore formatting?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"ignoreFormatting\");\r\n        },\r\n        /**\r\n         * If set to `true` square-bracket formatting blocks will be treated as\r\n         * regular text.\r\n         *\r\n         * @default false\r\n         * @param {boolean}  value  Ignore formatting?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"ignoreFormatting\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Override `mesaureElement` so it does not get measure again, because\r\n     * internal `_bbox` is being updated by measuring routines in Text itself.\r\n     */\r\n    Label.prototype.measureElement = function () { };\r\n    /**\r\n     * Returns information about a line element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {number}         index  Line index\r\n     * @return {ITextLineInfo}         Line info object\r\n     */\r\n    Label.prototype.getLineInfo = function (index) {\r\n        this.initLineCache();\r\n        var lines = this.getCache(\"lineInfo\");\r\n        return lines.length > index ? lines[index] : undefined;\r\n    };\r\n    /**\r\n     * Adds a line to line info cache.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {ITextLineInfo}  line     Line info object\r\n     * @param {number}         index    Insert at specified index\r\n     */\r\n    Label.prototype.addLineInfo = function (line, index) {\r\n        this.initLineCache();\r\n        this.getCache(\"lineInfo\")[index] = line;\r\n    };\r\n    /**\r\n     * Checks if line cache is initialized and initializes it.\r\n     */\r\n    Label.prototype.initLineCache = function () {\r\n        if (!$type.hasValue(this.getCache(\"lineInfo\"))) {\r\n            this.setCache(\"lineInfo\", [], 0);\r\n        }\r\n    };\r\n    /**\r\n     * Sets a [[DataItem]] to use for populating dynamic sections of the text.\r\n     *\r\n     * Check the description for [[Text]] class, for data binding.\r\n     *\r\n     * @param {DataItem} dataItem Data item\r\n     */\r\n    Label.prototype.setDataItem = function (dataItem) {\r\n        if (this._sourceDataItemEvents) {\r\n            this._sourceDataItemEvents.dispose();\r\n        }\r\n        if (dataItem) {\r\n            this._sourceDataItemEvents = new MultiDisposer([\r\n                dataItem.events.on(\"valuechanged\", this.invalidate, this, false),\r\n                dataItem.events.on(\"workingvaluechanged\", this.invalidate, this, false),\r\n                dataItem.events.on(\"calculatedvaluechanged\", this.invalidate, this, false),\r\n                dataItem.events.on(\"propertychanged\", this.invalidate, this, false)\r\n            ]);\r\n        }\r\n        _super.prototype.setDataItem.call(this, dataItem);\r\n    };\r\n    Object.defineProperty(Label.prototype, \"availableWidth\", {\r\n        /**\r\n         * Returns available horizontal space.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {number} Available width (px)\r\n         */\r\n        get: function () {\r\n            return $type.hasValue(this.maxWidth) ? this.maxWidth : this.pixelWidth;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Label.prototype, \"availableHeight\", {\r\n        /**\r\n         * Returns available vertical space.\r\n         *\r\n         * @return {number} Available height (px)\r\n         */\r\n        get: function () {\r\n            return $type.hasValue(this.maxHeight) ? this.maxHeight : this.pixelHeight;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    // temp, replacing textFormatter method\r\n    Label.prototype.getSvgElement = function (text, style) {\r\n        var element = this.paper.add(\"tspan\");\r\n        element.textContent = text;\r\n        if (style) {\r\n            element.node.setAttribute(\"style\", style);\r\n        }\r\n        return element;\r\n    };\r\n    /**\r\n     * Invalidates the whole element, including layout AND all its child\r\n     * elements.\r\n     */\r\n    Label.prototype.deepInvalidate = function () {\r\n        _super.prototype.deepInvalidate.call(this);\r\n        this.hardInvalidate();\r\n    };\r\n    return Label;\r\n}(Container));\r\nexport { Label };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Label\"] = Label;\r\n//# sourceMappingURL=Label.js.map","/**\r\n * Line drawing functionality.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { color } from \"../utils/Color\";\r\nimport { LinearGradient } from \"../rendering/fills/LinearGradient\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $math from \"../utils/Math\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a line.\r\n *\r\n * @see {@link ILineEvents} for a list of available events\r\n * @see {@link ILineAdapters} for a list of available Adapters\r\n */\r\nvar Line = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Line, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Line() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Line\";\r\n        _this.element = _this.paper.add(\"line\");\r\n        _this.fill = color(); //\"none\";\r\n        _this.x1 = 0;\r\n        _this.y1 = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the line.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Line.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        if (this.x1 == this.x2 || this.y1 == this.y2) {\r\n            this.pixelPerfect = true;\r\n        }\r\n        else {\r\n            this.pixelPerfect = false;\r\n        }\r\n        this.x1 = this.x1;\r\n        this.x2 = this.x2;\r\n        this.y1 = this.y1;\r\n        this.y2 = this.y2;\r\n    };\r\n    Object.defineProperty(Line.prototype, \"x1\", {\r\n        /**\r\n         * @return {number} X\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"x1\");\r\n        },\r\n        /**\r\n         * X coordinate of first end.\r\n         *\r\n         * @param {number} value X\r\n         */\r\n        set: function (value) {\r\n            if (!$type.isNumber(value)) {\r\n                value = 0;\r\n            }\r\n            var delta = 0;\r\n            if (this.pixelPerfect && this.stroke instanceof LinearGradient) {\r\n                delta = 0.00001;\r\n            }\r\n            this.setPropertyValue(\"x1\", value, true);\r\n            this.element.attr({ \"x1\": value + delta });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Line.prototype, \"x2\", {\r\n        /**\r\n         * @return {number} X\r\n         */\r\n        get: function () {\r\n            var value = this.getPropertyValue(\"x2\");\r\n            if (!$type.isNumber(value)) {\r\n                value = this.pixelWidth;\r\n            }\r\n            return value;\r\n        },\r\n        /**\r\n         * X coordinate of second end.\r\n         *\r\n         * @param {number} value X\r\n         */\r\n        set: function (value) {\r\n            if (!$type.isNumber(value)) {\r\n                value = 0;\r\n            }\r\n            this.setPropertyValue(\"x2\", value, true);\r\n            this.element.attr({ \"x2\": value });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Line.prototype, \"y1\", {\r\n        /**\r\n         * @return {number} Y\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"y1\");\r\n        },\r\n        /**\r\n         * Y coordinate of first end.\r\n         *\r\n         * @param {number} value Y\r\n         */\r\n        set: function (value) {\r\n            if (!$type.isNumber(value)) {\r\n                value = 0;\r\n            }\r\n            var delta = 0;\r\n            if (this.pixelPerfect && this.stroke instanceof LinearGradient) {\r\n                delta = 0.00001;\r\n            }\r\n            this.setPropertyValue(\"y1\", value, true);\r\n            this.element.attr({ \"y1\": value + delta });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Line.prototype, \"y2\", {\r\n        /**\r\n         * @return {number} Y\r\n         */\r\n        get: function () {\r\n            var value = this.getPropertyValue(\"y2\");\r\n            if (!$type.isNumber(value)) {\r\n                value = this.pixelHeight;\r\n            }\r\n            return value;\r\n        },\r\n        /**\r\n         * Y coordinate of second end.\r\n         *\r\n         * @param {number} value Y\r\n         */\r\n        set: function (value) {\r\n            if (!$type.isNumber(value)) {\r\n                value = 0;\r\n            }\r\n            this.setPropertyValue(\"y2\", value, true);\r\n            this.element.attr({ \"y2\": value });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts relative position along the line (0-1) into pixel coordinates.\r\n     *\r\n     * @param  {number}             position  Position (0-1)\r\n     * @return {IOrientationPoint}            Coordinates\r\n     */\r\n    Line.prototype.positionToPoint = function (position) {\r\n        var point1 = { x: this.x1, y: this.y1 };\r\n        var point2 = { x: this.x2, y: this.y2 };\r\n        var point = $math.getMidPoint(point1, point2, position);\r\n        var angle = $math.getAngle(point1, point2);\r\n        return { x: point.x, y: point.y, angle: angle };\r\n    };\r\n    return Line;\r\n}(Sprite));\r\nexport { Line };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Line\"] = Line;\r\n//# sourceMappingURL=Line.js.map","/**\r\n * Modal class is used to display information over chart area.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Popup } from \"./Popup\";\r\nimport { Adapter } from \"../utils/Adapter\";\r\n/**\r\n * Shows an HTML modal which covers window or a chart area.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/popups-and-modals/} For examples and docs on Popups and Modals.\r\n */\r\nvar Modal = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Modal, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Modal() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Adapter.\r\n         *\r\n         * @type {Adapter<Modal, IModalAdapters>}\r\n         */\r\n        _this.adapter = new Adapter(_this);\r\n        _this.className = \"Modal\";\r\n        _this.showCurtain = true;\r\n        _this.draggable = false;\r\n        return _this;\r\n    }\r\n    return Modal;\r\n}(Popup));\r\nexport { Modal };\r\n//# sourceMappingURL=Modal.js.map","/**\r\n * Play button functionality.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Button } from \"./Button\";\r\nimport { RoundedRectangle } from \"./RoundedRectangle\";\r\nimport { registry } from \"../Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Triangle } from \"./Triangle\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a zoom out button.\r\n *\r\n * @see {@link IPlayButtonEvents} for a list of available events\r\n * @see {@link IPlayButtonAdapters} for a list of available Adapters\r\n */\r\nvar PlayButton = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PlayButton, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PlayButton() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"PlayButton\";\r\n        _this.padding(12, 12, 12, 12);\r\n        _this.showSystemTooltip = true;\r\n        var interfaceColors = new InterfaceColorSet();\r\n        var background = _this.background;\r\n        background.cornerRadius(25, 25, 25, 25);\r\n        background.fill = interfaceColors.getFor(\"primaryButton\");\r\n        background.stroke = interfaceColors.getFor(\"primaryButtonStroke\");\r\n        background.strokeOpacity = 0;\r\n        background.states.getKey(\"hover\").properties.fill = interfaceColors.getFor(\"primaryButtonHover\");\r\n        background.states.getKey(\"down\").properties.fill = interfaceColors.getFor(\"primaryButtonActive\");\r\n        // Create a play icon\r\n        var playIcon = new Triangle();\r\n        playIcon.direction = \"right\";\r\n        playIcon.width = 9;\r\n        playIcon.height = 11;\r\n        playIcon.marginLeft = 1;\r\n        playIcon.marginRight = 1;\r\n        playIcon.horizontalCenter = \"middle\";\r\n        playIcon.verticalCenter = \"middle\";\r\n        playIcon.stroke = interfaceColors.getFor(\"primaryButtonText\");\r\n        playIcon.fill = playIcon.stroke;\r\n        _this.icon = playIcon;\r\n        // Create a play icon\r\n        var stopIcon = new RoundedRectangle();\r\n        stopIcon.width = 11;\r\n        stopIcon.height = 11;\r\n        stopIcon.horizontalCenter = \"middle\";\r\n        stopIcon.verticalCenter = \"middle\";\r\n        stopIcon.cornerRadius(0, 0, 0, 0);\r\n        stopIcon.stroke = interfaceColors.getFor(\"primaryButtonText\");\r\n        stopIcon.fill = playIcon.stroke;\r\n        _this.togglable = true;\r\n        var activeState = _this.states.create(\"active\");\r\n        activeState.transitionDuration = 0;\r\n        activeState.properties.icon = stopIcon;\r\n        _this.defaultState.transitionDuration = 0;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    PlayButton.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Play\");\r\n        }\r\n    };\r\n    return PlayButton;\r\n}(Button));\r\nexport { PlayButton };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PlayButton\"] = PlayButton;\r\n//# sourceMappingURL=PlayButton.js.map","/**\r\n * Pointed rectangle module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PointedShape } from \"./PointedShape\";\r\nimport * as $math from \"../utils/Math\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a rectangle with a pointer.\r\n *\r\n * @see {@link IPointedRectangleEvents} for a list of available events\r\n * @see {@link IPointedRectangleAdapters} for a list of available Adapters\r\n */\r\nvar PointedRectangle = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PointedRectangle, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PointedRectangle() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PointedRectangle\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.cornerRadius = 0;\r\n        _this.cornerRadius = 6;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PointedRectangle.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var cr = this.cornerRadius;\r\n        var w = this.innerWidth;\r\n        var h = this.innerHeight;\r\n        if (w > 0 && h > 0) {\r\n            var x = this.pointerX;\r\n            var y = this.pointerY;\r\n            var bwh = this.pointerBaseWidth / 2;\r\n            var maxcr = $math.min(w / 2, h / 2);\r\n            var crtl = $math.fitToRange(cr, 0, maxcr);\r\n            var crtr = $math.fitToRange(cr, 0, maxcr);\r\n            var crbr = $math.fitToRange(cr, 0, maxcr);\r\n            var crbl = $math.fitToRange(cr, 0, maxcr);\r\n            // corner coordinates\r\n            // top left\r\n            var xtl = 0;\r\n            var ytl = 0;\r\n            // top right\r\n            var xtr = w;\r\n            var ytr = 0;\r\n            // bottom right\r\n            var xbr = w;\r\n            var ybr = h;\r\n            // bottom left\r\n            var xbl = 0;\r\n            var ybl = h;\r\n            var lineT = void 0;\r\n            var lineR = void 0;\r\n            var lineB = void 0;\r\n            var lineL = void 0;\r\n            // find stem base side: http://$math.stackexchange.com/questions/274712/calculate-on-which-side-of-straign-line-is-dot-located\r\n            // d=(x−x1)(y2−y1)−(y−y1)(x2−x1)\r\n            var d1 = (x - xtl) * (ybr - ytl) - (y - ytl) * (xbr - xtl);\r\n            var d2 = (x - xbl) * (ytr - ybl) - (y - ybl) * (xtr - xbl);\r\n            // top\r\n            if (d1 > 0 && d2 > 0) {\r\n                var stemX = $math.fitToRange(x, crtl + bwh, w - bwh - crtr);\r\n                y = $math.fitToRange(y, -Infinity, 0);\r\n                lineT = \"M\" + crtl + \",0 L\" + (stemX - bwh) + \",0 L\" + x + \",\" + y + \" L\" + (stemX + bwh) + \",0 L\" + (w - crtr) + \",0\";\r\n            }\r\n            else {\r\n                lineT = \"M\" + crtl + \",0 L\" + (w - crtr) + \",0\";\r\n            }\r\n            // bottom\r\n            if (d1 < 0 && d2 < 0) {\r\n                var stemX = $math.fitToRange(x, crbl + bwh, w - bwh - crbr);\r\n                y = $math.fitToRange(y, h, Infinity);\r\n                lineB = \" L\" + (w - crbr) + \",\" + h + \" L\" + (stemX + bwh) + \",\" + h + \" L\" + x + \",\" + y + \" L\" + (stemX - bwh) + \",\" + h + \" L\" + crbl + \",\" + h;\r\n            }\r\n            else {\r\n                lineB = \" L\" + crbl + \",\" + h;\r\n            }\r\n            // left\r\n            if (d1 < 0 && d2 > 0) {\r\n                var stemY = $math.fitToRange(y, crtl + bwh, h - crbl - bwh);\r\n                x = $math.fitToRange(x, -Infinity, 0);\r\n                lineL = \" L0,\" + (h - crbl) + \" L0,\" + (stemY + bwh) + \" L\" + x + \",\" + y + \" L0,\" + (stemY - bwh) + \" L0,\" + crtl;\r\n            }\r\n            else {\r\n                lineL = \" L0,\" + crtl;\r\n            }\r\n            // right\r\n            if (d1 > 0 && d2 < 0) {\r\n                var stemY = $math.fitToRange(y, crtr + bwh, h - bwh - crbr);\r\n                x = $math.fitToRange(x, w, Infinity);\r\n                lineR = \" L\" + w + \",\" + crtr + \" L\" + w + \",\" + (stemY - bwh) + \" L\" + x + \",\" + y + \" L\" + w + \",\" + (stemY + bwh) + \" L\" + w + \",\" + (h - crbr);\r\n            }\r\n            else {\r\n                lineR = \" L\" + w + \",\" + (h - crbr);\r\n            }\r\n            var arcTR = \" a\" + crtr + \",\" + crtr + \" 0 0 1 \" + crtr + \",\" + crtr;\r\n            var arcBR = \" a\" + crbr + \",\" + crbr + \" 0 0 1 -\" + crbr + \",\" + crbr;\r\n            var arcBL = \" a\" + crbl + \",\" + crbl + \" 0 0 1 -\" + crbl + \",-\" + crbl;\r\n            var arcTL = \" a\" + crtl + \",\" + crtl + \" 0 0 1 \" + crtl + \",-\" + crtl;\r\n            this.path = lineT + arcTR + lineR + arcBR + lineB + arcBL + lineL + arcTL;\r\n        }\r\n    };\r\n    Object.defineProperty(PointedRectangle.prototype, \"cornerRadius\", {\r\n        /**\r\n         * @return {number} Corner radius (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"cornerRadius\");\r\n        },\r\n        /**\r\n         * Radius of rectangle's border in pixels.\r\n         *\r\n         * @default 0\r\n         * @param {number}  value  Corner radius (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"cornerRadius\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PointedRectangle;\r\n}(PointedShape));\r\nexport { PointedRectangle };\r\n//# sourceMappingURL=PointedRectangle.js.map","/**\r\n * Pointed shape module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a shape with a pointer.\r\n *\r\n * @see {@link IPointedShapeEvents} for a list of available events\r\n * @see {@link IPointedShapeAdapters} for a list of available Adapters\r\n */\r\nvar PointedShape = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PointedShape, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PointedShape() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PointedShape\";\r\n        _this.pointerBaseWidth = 15;\r\n        _this.pointerLength = 10;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PointedShape.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        if (!$type.isNumber(this.pointerX)) {\r\n            this.pointerX = this.pixelWidth / 2;\r\n        }\r\n        if (!$type.isNumber(this.pointerY)) {\r\n            this.pointerY = this.pixelHeight + 10;\r\n        }\r\n    };\r\n    Object.defineProperty(PointedShape.prototype, \"pointerBaseWidth\", {\r\n        /**\r\n         * @return {number} Width (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"pointerBaseWidth\");\r\n        },\r\n        /**\r\n         * A width of the pinter's (stem's) thick end (base) in pixels.\r\n         *\r\n         * @default 15\r\n         * @param {number}  value  Width (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"pointerBaseWidth\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PointedShape.prototype, \"pointerLength\", {\r\n        /**\r\n         * @return {number} Length (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"pointerLength\");\r\n        },\r\n        /**\r\n         * A length of the pinter (stem) in pixels.\r\n         *\r\n         * @default 10\r\n         * @param {number}  value  Length (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"pointerLength\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PointedShape.prototype, \"pointerX\", {\r\n        /**\r\n         * @return {number} X\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"pointerX\");\r\n        },\r\n        /**\r\n         * X coordinate the shape is pointing to.\r\n         *\r\n         * @param {number}  value  X\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"pointerX\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PointedShape.prototype, \"pointerY\", {\r\n        /**\r\n         * @return {number} Y\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"pointerY\");\r\n        },\r\n        /**\r\n         * Y coordinate the shape is pointing to.\r\n         *\r\n         * @param {number}  value  Y\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"pointerY\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PointedShape;\r\n}(Sprite));\r\nexport { PointedShape };\r\n//# sourceMappingURL=PointedShape.js.map","/**\r\n * Module for a multi-part arched line.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Polyline } from \"./Polyline\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a multi-part arched line.\r\n *\r\n * @see {@link IPolyarcEvents} for a list of available events\r\n * @see {@link IPolyarcAdapters} for a list of available Adapters\r\n */\r\nvar Polyarc = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Polyarc, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Polyarc() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Polyarc\";\r\n        _this.controlPointDistance = 0.5;\r\n        _this.controlPointPosition = 0.5;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creats and adds an SVG path for the arc.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Polyarc.prototype.makePath = function () {\r\n        this._distance = 0;\r\n        var segments = this.segments;\r\n        if (segments && segments.length > 0) {\r\n            var path = \"\";\r\n            this._realSegments = [];\r\n            for (var i = 0, len = segments.length; i < len; i++) {\r\n                var points = segments[i];\r\n                var realPoints = [];\r\n                this._realSegments.push(realPoints);\r\n                if (points.length > 0) {\r\n                    path += $path.moveTo(points[0]);\r\n                    for (var p = 1; p < points.length; p++) {\r\n                        var pointA = points[p - 1];\r\n                        var pointB = points[p];\r\n                        var distanceAB = $math.getDistance(pointB, pointA);\r\n                        var cpDistance = distanceAB * this.controlPointDistance;\r\n                        var controlPointPosition = this.controlPointPosition;\r\n                        var angle = -$math.getAngle(pointA, pointB);\r\n                        var cpx = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 0.5 - cpDistance * $math.sin(angle);\r\n                        var cpy = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 0.5 - cpDistance * $math.cos(angle);\r\n                        var controlPoint1 = { x: cpx, y: cpy };\r\n                        var cpx2 = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 1.5 - cpDistance * $math.sin(angle);\r\n                        var cpy2 = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 1.5 - cpDistance * $math.cos(angle);\r\n                        var controlPoint2 = { x: cpx2, y: cpy2 };\r\n                        path += $path.cubicCurveTo(pointB, controlPoint1, controlPoint2);\r\n                        // we add a lot of points in order to get the position/angle later\r\n                        var stepCount = Math.ceil(distanceAB);\r\n                        var prevPoint = pointA;\r\n                        if (stepCount > 0) {\r\n                            for (var i_1 = 0; i_1 <= stepCount; i_1++) {\r\n                                var point = $math.getPointOnCubicCurve(pointA, pointB, controlPoint1, controlPoint2, i_1 / stepCount);\r\n                                realPoints.push(point);\r\n                                this._distance += $math.getDistance(prevPoint, point);\r\n                                prevPoint = point;\r\n                            }\r\n                        }\r\n                        else {\r\n                            realPoints.push(pointA);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.path = path;\r\n        }\r\n    };\r\n    Object.defineProperty(Polyarc.prototype, \"controlPointPosition\", {\r\n        /**\r\n         * @return {number} Position (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"controlPointPosition\");\r\n        },\r\n        /**\r\n         * Relative position along the line the control point is. (0-1)\r\n         *\r\n         * @default 0.5\r\n         * @param {number}  value  Position (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"controlPointPosition\", value);\r\n            this.makePath();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Polyarc.prototype, \"controlPointDistance\", {\r\n        /**\r\n         * @return {number} Distance (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"controlPointDistance\");\r\n        },\r\n        /**\r\n         * Relative distance of the control point. (0-1)\r\n         *\r\n         * Default is half the length of the line. (0.5)\r\n         *\r\n         * @default 0.5\r\n         * @param {number}  value  Distance (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"controlPointDistance\", value);\r\n            this.makePath();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Polyarc;\r\n}(Polyline));\r\nexport { Polyarc };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Polyarc\"] = Polyarc;\r\n//# sourceMappingURL=Polyarc.js.map","/**\r\n * Polygon module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Morpher } from \"../utils/Morpher\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a polygon.\r\n *\r\n * @see {@link IPolygonEvents} for a list of available events\r\n * @see {@link IPolygonAdapters} for a list of available Adapters\r\n */\r\nvar Polygon = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Polygon, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Polygon() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Polygon\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.shapeRendering = \"auto\";\r\n        _this._currentPoints = [];\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Polygon.prototype, \"points\", {\r\n        /**\r\n         * @return {IPoint[]} Polygon points\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"points\");\r\n        },\r\n        /**\r\n         * An array of X/Y coordinates for each elbow of the polygon.\r\n         *\r\n         * @todo Example\r\n         * @param {IPoint[][][]}  points  Polygon points\r\n         */\r\n        set: function (points) {\r\n            this.setPropertyValue(\"points\", points, true);\r\n            this._currentPoints = this.points;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Polygon.prototype, \"currentPoints\", {\r\n        /**\r\n         * @return {IPoint[]} Polygon points\r\n         */\r\n        get: function () {\r\n            return this._currentPoints;\r\n        },\r\n        /**\r\n         * Current points. Used when morphing the element, so that original `points`\r\n         * are not overwritten.\r\n         *\r\n         * @param {IPoint[][][]}  points  Polygon points\r\n         */\r\n        set: function (points) {\r\n            if (this._currentPoints != points) {\r\n                this._currentPoints = points;\r\n                this.draw();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Polygon.prototype.draw = function () {\r\n        var path = \"\";\r\n        var points = this._currentPoints;\r\n        var left;\r\n        var right;\r\n        var top;\r\n        var bottom;\r\n        if (points.length > 0) {\r\n            // separate areas\r\n            for (var i = 0, len = points.length; i < len; i++) {\r\n                // surface\r\n                var surface = points[i][0];\r\n                var hole = points[i][1];\r\n                if (surface && surface.length > 0) {\r\n                    var point = surface[0];\r\n                    path += $path.moveTo(point);\r\n                    for (var s = 0; s < surface.length; s++) {\r\n                        point = surface[s];\r\n                        path += $path.lineTo(point);\r\n                        if (!$type.isNumber(right) || (right < point.x)) {\r\n                            right = point.x;\r\n                        }\r\n                        if (!$type.isNumber(left) || (left > point.x)) {\r\n                            left = point.x;\r\n                        }\r\n                        if (!$type.isNumber(top) || (top > point.y)) {\r\n                            top = point.y;\r\n                        }\r\n                        if (!$type.isNumber(bottom) || (bottom < point.y)) {\r\n                            bottom = point.y;\r\n                        }\r\n                    }\r\n                }\r\n                // hole\r\n                if (hole && hole.length > 0) {\r\n                    var point = hole[0];\r\n                    path += $path.moveTo(point);\r\n                    for (var h = 0, hlen = hole.length; h < hlen; h++) {\r\n                        point = hole[h];\r\n                        path += $path.lineTo(point);\r\n                    }\r\n                }\r\n            }\r\n            if (path) {\r\n                path += $path.closePath();\r\n            }\r\n            this.bbox.x = left;\r\n            this.bbox.y = top;\r\n            this.bbox.width = right - left;\r\n            this.bbox.height = bottom - top;\r\n        }\r\n        this.path = path;\r\n    };\r\n    /**\r\n     * Measures element\r\n     */\r\n    Polygon.prototype.measureElement = function () {\r\n        // Overriding to avoid extra measurement.\r\n    };\r\n    Object.defineProperty(Polygon.prototype, \"centerPoint\", {\r\n        /**\r\n         * A calculated center point for the shape.\r\n         *\r\n         * @readonly\r\n         * @return {IPoint} Center\r\n         */\r\n        get: function () {\r\n            return { x: this.bbox.x + this.bbox.width / 2, y: this.bbox.y + this.bbox.height / 2 };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Polygon.prototype, \"morpher\", {\r\n        /**\r\n         * A [[Morpher]] instance that is used to morph polygon into some other\r\n         * shape.\r\n         *\r\n         * @readonly\r\n         * @return {Morpher} Morpher instance\r\n         */\r\n        get: function () {\r\n            if (!this._morpher) {\r\n                this._morpher = new Morpher(this);\r\n                this._disposers.push(this._morpher);\r\n            }\r\n            return this._morpher;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Polygon;\r\n}(Sprite));\r\nexport { Polygon };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Polygon\"] = Polygon;\r\n//# sourceMappingURL=Polygon.js.map","/**\r\n * Polyline module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { color } from \"../utils/Color\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a polyline.\r\n *\r\n * @see {@link IPolylineEvents} for a list of available events\r\n * @see {@link IPolylineAdapters} for a list of available Adapters\r\n */\r\nvar Polyline = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Polyline, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Polyline() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * [_distance description]\r\n         *\r\n         * @todo Description\r\n         * @type {number}\r\n         */\r\n        _this._distance = 0;\r\n        _this.className = \"Polyline\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.shapeRendering = \"auto\";\r\n        _this.fill = color();\r\n        _this.strokeOpacity = 1;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creats and adds an SVG path for the arc.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Polyline.prototype.makePath = function () {\r\n        this._distance = 0;\r\n        var segments = this.segments;\r\n        if (segments && segments.length > 0) {\r\n            var path = \"\";\r\n            for (var i = 0, len = segments.length; i < len; i++) {\r\n                var points = segments[i];\r\n                if (points.length > 0) {\r\n                    path += $path.moveTo(points[0]);\r\n                    for (var p = 1; p < points.length; p++) {\r\n                        var point = points[p];\r\n                        path += $path.lineTo(point);\r\n                        this._distance += $math.getDistance(points[p - 1], point);\r\n                    }\r\n                }\r\n            }\r\n            this.path = path;\r\n        }\r\n        this._realSegments = segments;\r\n    };\r\n    Object.defineProperty(Polyline.prototype, \"segments\", {\r\n        /**\r\n         * @return {Optional<IPoint[]>} Segments\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"segments\");\r\n        },\r\n        /**\r\n         * A list of segment coordinates for the multi-part line.\r\n         *\r\n         * @todo Example\r\n         * @param {Optional<IPoint[][]>}  segments  Segments\r\n         */\r\n        set: function (segments) {\r\n            this.setPropertyValue(\"segments\", segments);\r\n            this.makePath();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Polyline.prototype, \"distance\", {\r\n        /**\r\n         * [distance description]\r\n         *\r\n         * @todo Description\r\n         * @return {number} [description]\r\n         */\r\n        get: function () {\r\n            return this._distance;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts relative position along the line (0-1) into pixel coordinates.\r\n     *\r\n     * @param  {number}             position  Position (0-1)\r\n     * @return {IOrientationPoint}            Coordinates\r\n     */\r\n    Polyline.prototype.positionToPoint = function (position) {\r\n        var deltaAngle = 0;\r\n        if (position < 0) {\r\n            position = Math.abs(position);\r\n            deltaAngle = 180;\r\n        }\r\n        var segments = this._realSegments;\r\n        if (segments) {\r\n            var totalDistance = this.distance;\r\n            var currentDistance = 0;\r\n            var distanceAB = void 0;\r\n            var positionA = 0;\r\n            var positionB = 0;\r\n            var pointA = void 0;\r\n            var pointB = void 0;\r\n            for (var s = 0; s < segments.length; s++) {\r\n                var points = segments[s];\r\n                if (points.length > 1) {\r\n                    for (var p = 1; p < points.length; p++) {\r\n                        pointA = points[p - 1];\r\n                        pointB = points[p];\r\n                        positionA = currentDistance / totalDistance;\r\n                        distanceAB = $math.getDistance(pointA, pointB);\r\n                        currentDistance += distanceAB;\r\n                        positionB = currentDistance / totalDistance;\r\n                        if (positionA <= position && positionB > position) {\r\n                            s = segments.length;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                else if (points.length == 1) {\r\n                    pointA = points[0];\r\n                    pointB = points[0];\r\n                    positionA = 0;\r\n                    positionB = 1;\r\n                }\r\n            }\r\n            if (pointA && pointB) {\r\n                var positionAB = (position - positionA) / (positionB - positionA);\r\n                var midPoint = $math.getMidPoint(pointA, pointB, positionAB);\r\n                return { x: midPoint.x, y: midPoint.y, angle: deltaAngle + $math.getAngle(pointA, pointB) };\r\n            }\r\n        }\r\n        return { x: 0, y: 0, angle: 0 };\r\n    };\r\n    return Polyline;\r\n}(Sprite));\r\nexport { Polyline };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Polyline\"] = Polyline;\r\n//# sourceMappingURL=Polyline.js.map","/**\r\n * Polyspline (smoothed line) module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Polyline } from \"./Polyline\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a polysline. (smoothed multi-sigment line)\r\n *\r\n * @see {@link IPolysplineEvents} for a list of available events\r\n * @see {@link IPolysplineAdapters} for a list of available Adapters\r\n */\r\nvar Polyspline = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Polyspline, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Polyspline() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Polyspline\";\r\n        _this.tensionX = 0.5;\r\n        _this.tensionY = 0.5;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creats and adds an SVG path for the arc.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Polyspline.prototype.makePath = function () {\r\n        this._distance = 0;\r\n        var segments = this.segments;\r\n        var tensionX = this.tensionX;\r\n        var tensionY = this.tensionY;\r\n        if (segments && segments.length > 0) {\r\n            var path = \"\";\r\n            this._realSegments = [];\r\n            for (var i = 0, len = segments.length; i < len; i++) {\r\n                var points = segments[i];\r\n                var realPoints = [];\r\n                this._realSegments.push(realPoints);\r\n                if (points.length > 0) {\r\n                    path += $path.moveTo(points[0]);\r\n                    for (var p = 0; p < points.length - 1; p++) {\r\n                        var p0 = points[p - 1];\r\n                        var p1 = points[p];\r\n                        var p2 = points[p + 1];\r\n                        var p3 = points[p + 2];\r\n                        if (p === 0) {\r\n                            p0 = points[p];\r\n                        }\r\n                        else if (p == points.length - 2) {\r\n                            p3 = points[p + 1];\r\n                        }\r\n                        if (!p3) {\r\n                            p3 = p2;\r\n                        }\r\n                        var controlPointA = $math.getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY);\r\n                        var controlPointB = $math.getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY);\r\n                        path += $path.cubicCurveTo(p2, controlPointA, controlPointB);\r\n                        // now split to small segments so that we could have positionToPoint later\r\n                        var stepCount = Math.ceil($math.getDistance(p1, p2)) / 2;\r\n                        var prevPoint = p1;\r\n                        if (stepCount > 0) {\r\n                            for (var s = 0; s <= stepCount; s++) {\r\n                                var point = $math.getPointOnCubicCurve(p1, p2, controlPointA, controlPointB, s / stepCount);\r\n                                realPoints.push(point);\r\n                                this._distance += $math.getDistance(prevPoint, point);\r\n                                //path += $path.lineTo(point);\r\n                                prevPoint = point;\r\n                            }\r\n                        }\r\n                        else {\r\n                            realPoints.push(p0);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.path = path;\r\n        }\r\n    };\r\n    Object.defineProperty(Polyspline.prototype, \"tensionX\", {\r\n        /**\r\n         * @return {number} Tension\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tensionX\");\r\n        },\r\n        /**\r\n         * Horizontal tension for the spline.\r\n         *\r\n         * Used by the line smoothing algorithm.\r\n         *\r\n         * @default 0.5\r\n         * @param {number}  value  Tension\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tensionX\", value);\r\n            this.makePath();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Polyspline.prototype, \"tensionY\", {\r\n        /**\r\n         * @return {number} Tension\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tensionY\");\r\n        },\r\n        /**\r\n         * Vertical tension for the spline.\r\n         *\r\n         * Used by the line smoothing algorithm.\r\n         *\r\n         * @default 0.5\r\n         * @param {number}  value  Tensions\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tensionY\", value, true);\r\n            this.makePath();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Polyspline;\r\n}(Polyline));\r\nexport { Polyspline };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Polyspline\"] = Polyspline;\r\n//# sourceMappingURL=Polyspline.js.map","/**\r\n * Popup class is used to display information over chart area.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport popupCSS from \"./PopupCSS\";\r\nimport { Adapter } from \"../utils/Adapter\";\r\nimport { BaseObjectEvents } from \"../Base\";\r\nimport { getInteraction } from \"../interaction/Interaction\";\r\nimport { keyboard } from \"../utils/Keyboard\";\r\nimport { MultiDisposer } from \"../utils/Disposer\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $object from \"../utils/Object\";\r\n/**\r\n * Shows an HTML popup which covers window or a chart area.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/popups-and-modals/} For examples and docs on Popups and Modals.\r\n * @todo Positioning over whole window\r\n */\r\nvar Popup = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Popup, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Popup() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Adapter.\r\n         *\r\n         * @type {Adapter<Popup, IPopupAdapters>}\r\n         */\r\n        _this.adapter = new Adapter(_this);\r\n        /**\r\n         * Holds references to various HTML elements, Popup consists of.\r\n         */\r\n        _this._elements = {};\r\n        /**\r\n         * Holdes Interaction objects for various Popup's elements.\r\n         */\r\n        _this._IOs = {};\r\n        /**\r\n         * Contents of popup window.\r\n         *\r\n         * @type {string}\r\n         */\r\n        _this._content = \"\";\r\n        /**\r\n         * Title of the popup window.\r\n         *\r\n         * @type {string}\r\n         */\r\n        _this._title = \"\";\r\n        /**\r\n         * Prefix to apply to class names for popup elements.\r\n         *\r\n         * @type {string}\r\n         */\r\n        _this._classPrefix = \"ampopup\";\r\n        /**\r\n         * If set to `true` [[Popup]] will use default styles.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this._defaultStyles = true;\r\n        /**\r\n         * If set to `true` [[Popup]] will dim out all chart content behind it by\r\n         * showing a semi-transparent fill. (curtain)\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this._showCurtain = false;\r\n        /**\r\n         * Indicates whether popup can be dragged.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this._draggable = true;\r\n        /**\r\n         * Horizontal position of the content window.\r\n         *\r\n         * @type {Align}\r\n         */\r\n        _this._align = \"center\";\r\n        /**\r\n         * Vertical position of the content window.\r\n         *\r\n         * @type {VerticalAlign}\r\n         */\r\n        _this._verticalAlign = \"middle\";\r\n        /**\r\n         * Shift in position of the element. (used for dragging)\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this._shift = {\r\n            x: 0,\r\n            y: 0\r\n        };\r\n        /**\r\n         * Temporary shift in position of the element. (used for dragging)\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this._tempShift = {\r\n            x: 0,\r\n            y: 0\r\n        };\r\n        /**\r\n         * A title for screen readers. It is very highly recommended to set that title\r\n         * so that people using screen reader tools can get an immediate summary of\r\n         * the information in the popup.\r\n         *\r\n         * @type {string}\r\n         */\r\n        _this._readerTitle = \"\";\r\n        /**\r\n         * Is popup closable?\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this._closable = true;\r\n        /**\r\n         * Was CSS already loaded?\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this._cssLoaded = false;\r\n        /**\r\n         * If set to other than \"none\" will try to re-adjust the position of the\r\n         * popop to fit within chart container or browser window.\r\n         *\r\n         * @ignore Feature not yet implemented\r\n         * @todo Implement\r\n         * @type {\"none\" | \"container\" | \"window\"}\r\n         */\r\n        _this._fitTo = \"window\";\r\n        /**\r\n         * Identifies if this object is a \"template\" and should not be treated as\r\n         * real object that is drawn or actually used in the chart.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {boolean}\r\n         */\r\n        _this.isTemplate = false;\r\n        /**\r\n         * Indicates if the element was already sized and should not be measured for\r\n         * sized again, saving some precious resources.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this._sized = false;\r\n        _this.className = \"Popup\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * Shows popup window.\r\n     */\r\n    Popup.prototype.open = function () {\r\n        if (this.container) {\r\n            if (this._elements.wrapper) {\r\n                this.container.appendChild(this._elements.wrapper);\r\n            }\r\n            if (this._elements.curtain) {\r\n                this.container.appendChild(this._elements.curtain);\r\n                this.showCurtain = this.showCurtain;\r\n            }\r\n            this.positionElement();\r\n            this.dispatchImmediately(\"opened\");\r\n        }\r\n    };\r\n    /**\r\n     * Hides popup window.\r\n     */\r\n    Popup.prototype.close = function () {\r\n        if (this._elements.wrapper) {\r\n            if (this._elements.wrapper.parentElement) {\r\n                this._elements.wrapper.parentElement.removeChild(this._elements.wrapper);\r\n            }\r\n        }\r\n        if (this._elements.curtain) {\r\n            if (this._elements.curtain.parentElement) {\r\n                this._elements.curtain.parentElement.removeChild(this._elements.curtain);\r\n            }\r\n        }\r\n        this.dispatchImmediately(\"closed\");\r\n        this.releasePointers();\r\n    };\r\n    /**\r\n     * Destroy (dispose) popup.\r\n     */\r\n    Popup.prototype.dispose = function () {\r\n        this.close();\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    /**\r\n     * Positions content element in the center of popup based on its actual size.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Popup.prototype.positionElement = function (forceResize) {\r\n        var _this = this;\r\n        if (forceResize === void 0) { forceResize = true; }\r\n        if (!this._elements.wrapper) {\r\n            return;\r\n        }\r\n        setTimeout(function () {\r\n            if (!_this._elements.wrapper) {\r\n                return;\r\n            }\r\n            if (forceResize || !_this._sized) {\r\n                _this._elements.wrapper.style.opacity = \"0.01\";\r\n                _this._elements.wrapper.style.left = \"0\";\r\n                _this._elements.wrapper.style.top = \"0\";\r\n                _this._elements.wrapper.style.margin = \"0 0 0 0\";\r\n                // Size the element, but only for the first time\r\n                if (!_this._elements.wrapper.style.width) {\r\n                    var bbox = _this._elements.wrapper.getBoundingClientRect();\r\n                    _this._elements.wrapper.style.width = bbox.width + \"px\";\r\n                    _this._elements.wrapper.style.height = bbox.height + \"px\";\r\n                }\r\n                _this._sized = true;\r\n            }\r\n            setTimeout(function () {\r\n                if (!_this._elements.wrapper) {\r\n                    return;\r\n                }\r\n                var bbox;\r\n                if ((forceResize || !_this._sized) && _this._bbox) {\r\n                    bbox = _this._bbox;\r\n                }\r\n                else {\r\n                    bbox = _this._elements.wrapper.getBoundingClientRect();\r\n                    _this._elements.wrapper.style.opacity = \"\";\r\n                }\r\n                // Set horizontal positioning\r\n                switch (_this.align) {\r\n                    case \"left\":\r\n                        _this._elements.wrapper.style.left = \"0\";\r\n                        _this._elements.wrapper.style.right = \"auto\";\r\n                        _this._elements.wrapper.style.marginLeft = _this.toStyle(_this._shift.x + _this._tempShift.x);\r\n                        break;\r\n                    case \"center\":\r\n                        _this._elements.wrapper.style.left = \"50%\";\r\n                        _this._elements.wrapper.style.right = \"auto\";\r\n                        _this._elements.wrapper.style.marginLeft = _this.toStyle(Math.round(-bbox.width / 2) + (_this._shift.x + _this._tempShift.x));\r\n                        break;\r\n                    case \"right\":\r\n                        _this._elements.wrapper.style.left = \"auto\";\r\n                        _this._elements.wrapper.style.right = \"0\";\r\n                        _this._elements.wrapper.style.marginLeft = _this.toStyle(_this._shift.x + _this._tempShift.x);\r\n                        break;\r\n                    default:\r\n                        _this._elements.wrapper.style.left = _this.toStyle(_this.left) || \"auto\";\r\n                        _this._elements.wrapper.style.right = _this.toStyle(_this.right) || \"auto\";\r\n                        _this._elements.wrapper.style.marginLeft = _this.toStyle(_this._shift.x + _this._tempShift.x);\r\n                        break;\r\n                }\r\n                // Set vertical positioning\r\n                switch (_this.verticalAlign) {\r\n                    case \"top\":\r\n                        _this._elements.wrapper.style.top = \"0\";\r\n                        _this._elements.wrapper.style.bottom = \"auto\";\r\n                        _this._elements.wrapper.style.marginTop = _this.toStyle(_this._shift.y + _this._tempShift.y);\r\n                        break;\r\n                    case \"middle\":\r\n                        _this._elements.wrapper.style.top = \"50%\";\r\n                        _this._elements.wrapper.style.bottom = \"auto\";\r\n                        _this._elements.wrapper.style.marginTop = _this.toStyle(Math.round(-bbox.height / 2) + (_this._shift.y + _this._tempShift.y));\r\n                        break;\r\n                    case \"bottom\":\r\n                        _this._elements.wrapper.style.top = \"auto\";\r\n                        _this._elements.wrapper.style.bottom = \"0\";\r\n                        _this._elements.wrapper.style.marginTop = _this.toStyle(_this._shift.y + _this._tempShift.y);\r\n                        break;\r\n                    default:\r\n                        _this._elements.wrapper.style.top = _this.toStyle(_this.top) || \"auto\";\r\n                        _this._elements.wrapper.style.bottom = _this.toStyle(_this.bottom) || \"auto\";\r\n                        _this._elements.wrapper.style.marginTop = _this.toStyle(_this._shift.y + _this._tempShift.y);\r\n                        break;\r\n                }\r\n            }, 1);\r\n        }, 1);\r\n    };\r\n    Popup.prototype.setupDragging = function () {\r\n        var _this = this;\r\n        if (this.draggable) {\r\n            if (!this._IOs.wrapper.events.has(\"drag\")) {\r\n                this._IOs.wrapper.events.on(\"drag\", function (ev) {\r\n                    _this._tempShift.x = ev.shift.x;\r\n                    _this._tempShift.y = ev.shift.y;\r\n                    _this.positionElement(false);\r\n                });\r\n            }\r\n            if (!this._IOs.wrapper.events.has(\"dragstop\")) {\r\n                this._IOs.wrapper.events.on(\"dragstop\", function (ev) {\r\n                    _this._shift.x += _this._tempShift.x;\r\n                    _this._shift.y += _this._tempShift.y;\r\n                    _this._tempShift.x = 0;\r\n                    _this._tempShift.y = 0;\r\n                    _this.positionElement(false);\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            // @todo Remove events\r\n        }\r\n    };\r\n    Popup.prototype.toStyle = function (value) {\r\n        if (!$type.hasValue(value)) {\r\n            return null;\r\n        }\r\n        else if ($type.isNumber(value)) {\r\n            return \"\" + value + \"px\";\r\n        }\r\n        else {\r\n            return value.toString();\r\n        }\r\n    };\r\n    Object.defineProperty(Popup.prototype, \"classPrefix\", {\r\n        /**\r\n         * A prefix that is applied to class names of various popup elements.\r\n         *\r\n         * @return {string} Class name prefix\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"classPrefix\", this._classPrefix);\r\n        },\r\n        /**\r\n         * @param {string} value Class name prefix\r\n         */\r\n        set: function (value) {\r\n            this._classPrefix = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Popup.prototype, \"classPrefixRaw\", {\r\n        /**\r\n         * Returns raw prefix (without adapters applied).\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {string} Class name prefix\r\n         */\r\n        get: function () {\r\n            return this._classPrefix;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Popup.prototype, \"content\", {\r\n        /**\r\n         * @return {string} Popup content\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"content\", this._content);\r\n        },\r\n        /**\r\n         * Popup content.\r\n         *\r\n         * Popup content can be any valid HTML, including CSS.\r\n         *\r\n         * @param {string} value Popup content\r\n         */\r\n        set: function (value) {\r\n            if (this._content != value) {\r\n                this._content = value;\r\n                if (!this._elements.content) {\r\n                    this.createContentElement();\r\n                }\r\n                this._elements.content.innerHTML = value;\r\n                this.positionElement();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Popup.prototype.getClassNames = function () {\r\n        return this.adapter.apply(\"classNames\", {\r\n            wrapperClass: this.classPrefix + \"\",\r\n            titleClass: this.classPrefix + \"-title\",\r\n            contentClass: this.classPrefix + \"-content\",\r\n            curtainClass: this.classPrefix + \"-curtain\",\r\n            closeClass: this.classPrefix + \"-close\"\r\n        });\r\n    };\r\n    /**\r\n     * Creates content element.\r\n     */\r\n    Popup.prototype.createContentElement = function () {\r\n        // Check if it's created already\r\n        if (this._elements.wrapper) {\r\n            return;\r\n        }\r\n        // Get class names for popup elements\r\n        var classNames = this.getClassNames();\r\n        // Create content element\r\n        var wrapper = document.createElement(\"div\");\r\n        wrapper.className = classNames.contentClass;\r\n        wrapper.style.opacity = \"0.01\";\r\n        // Create close button\r\n        var close = document.createElement(\"a\");\r\n        close.className = classNames.closeClass;\r\n        // Content title\r\n        var title = document.createElement(\"div\");\r\n        title.innerHTML = this.title;\r\n        title.className = classNames.titleClass;\r\n        if (!this.title) {\r\n            title.style.display = \"none\";\r\n        }\r\n        // Content div\r\n        var content = document.createElement(\"div\");\r\n        content.innerHTML = this.content;\r\n        // Set up events for content\r\n        this._IOs.wrapper = getInteraction().getInteraction(wrapper);\r\n        this._disposers.push(this._IOs.wrapper);\r\n        // Set hover/out events\r\n        this._IOs.wrapper.events.on(\"over\", this.disablePointers, this);\r\n        this._IOs.wrapper.events.on(\"out\", this.releasePointers, this);\r\n        // Create an InteractionObject for close\r\n        this._IOs.close = getInteraction().getInteraction(close);\r\n        this._disposers.push(this._IOs.close);\r\n        // Hide close for now\r\n        close.style.visibility = \"hidden\";\r\n        // Add accessible stuff\r\n        wrapper.setAttribute(\"role\", \"dialog\");\r\n        // Add to wrapper\r\n        wrapper.appendChild(close);\r\n        wrapper.appendChild(title);\r\n        wrapper.appendChild(content);\r\n        this.container.appendChild(wrapper);\r\n        // Save for later access\r\n        this._elements.wrapper = wrapper;\r\n        this._elements.content = content;\r\n        this._elements.title = title;\r\n        this._elements.close = close;\r\n        // Load CSS\r\n        if (this.defaultStyles) {\r\n            this.loadDefaultCSS();\r\n        }\r\n        // Create curtain as well\r\n        this.createCurtainElement();\r\n        // Apply events\r\n        this.applyEvents();\r\n        this.applyReaderSettings();\r\n        // Draggable?\r\n        this.setupDragging();\r\n    };\r\n    Object.defineProperty(Popup.prototype, \"title\", {\r\n        /**\r\n         * @return {string} Popup title\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"title\", this._title);\r\n        },\r\n        /**\r\n         * Popup title.\r\n         *\r\n         * Popup title can be any valid HTML, including CSS.\r\n         *\r\n         * @param {string}  value  Popup title\r\n         */\r\n        set: function (value) {\r\n            if (this._title != value) {\r\n                this._title = value;\r\n                if (!this._elements.content) {\r\n                    this.createContentElement();\r\n                }\r\n                this._elements.title.innerHTML = value;\r\n                this.positionElement();\r\n                this.applyReaderSettings();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Popup.prototype, \"readerTitle\", {\r\n        /**\r\n         * @return {string} Popup content\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"readerTitle\", this._readerTitle != \"\" ? this._readerTitle : this.title);\r\n        },\r\n        /**\r\n         * A title for screen readers. It is very highly recommended to set that title\r\n         * so that people using screen reader tools can get an immediate summary of\r\n         * the information in the popup.\r\n         *\r\n         * @param {string}  value  Reader title\r\n         */\r\n        set: function (value) {\r\n            if (this._readerTitle != value) {\r\n                this._readerTitle = value;\r\n                this.applyReaderSettings();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Popup.prototype, \"closable\", {\r\n        /**\r\n         * @return {boolean} Closable?\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"closable\", this._closable);\r\n        },\r\n        /**\r\n         * Is popup closable?\r\n         *\r\n         * If it is, it can be closed in a number of ways, e.g. by hitting ESC key,\r\n         * clicking curtain, or clicking the close button.\r\n         *\r\n         * If it is not closable, the only way to close it is via `close()` call.\r\n         *\r\n         * @param {boolean} value Closable?\r\n         */\r\n        set: function (value) {\r\n            if (value !== this._closable) {\r\n                this._closable = value;\r\n                this.applyEvents();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Popup.prototype, \"fitTo\", {\r\n        /**\r\n         * @ignore\r\n         * @todo Implement\r\n         * @return {\"none\" | \"container\" | \"window\"} Fit option\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"fitTo\", this._fitTo);\r\n        },\r\n        /**\r\n         * If set to other than \"none\" will try to re-adjust the position of the\r\n         * popop to fit within chart container or browser window.\r\n         *\r\n         * @ignore\r\n         * @todo Implement\r\n         * @default \"window\"\r\n         * @param {\"none\" | \"container\" | \"window\"}  value  Fit option\r\n         */\r\n        set: function (value) {\r\n            if (value != this._fitTo) {\r\n                this._fitTo = value;\r\n                this.positionElement;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Popup.prototype, \"defaultStyles\", {\r\n        /**\r\n         * @return {boolean} Use default CSS?\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"defaultStyles\", this._defaultStyles);\r\n        },\r\n        /**\r\n         * Should popup use default CSS?\r\n         *\r\n         * If default CSS is disabled, an external CSS should handle the look of the\r\n         * popup, since it will look quite out of place otherwise.\r\n         *\r\n         * @default true\r\n         * @param {string} Use default CSS?\r\n         */\r\n        set: function (value) {\r\n            if (this._defaultStyles != value) {\r\n                this._defaultStyles = value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Popup.prototype, \"showCurtain\", {\r\n        /**\r\n         * @return {boolean} Show curtain?\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"showCurtain\", this._showCurtain);\r\n        },\r\n        /**\r\n         * Should popup use dim out all content behind it?\r\n         *\r\n         * @default false\r\n         * @param {boolean} Show curtain?\r\n         */\r\n        set: function (value) {\r\n            if (this._showCurtain != value) {\r\n                this._showCurtain = value;\r\n                if (this._elements.curtain) {\r\n                    this._elements.curtain.style.display = value ? \"block\" : \"none\";\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates curtain element.\r\n     */\r\n    Popup.prototype.createCurtainElement = function () {\r\n        // Get class names for popup elements\r\n        var classNames = this.getClassNames();\r\n        // Create the curtain\r\n        var curtain = document.createElement(\"div\");\r\n        curtain.className = classNames.curtainClass;\r\n        // Append curtain to wrapper\r\n        this.container.appendChild(curtain);\r\n        // Create an InteractionObject for curtain because we might need to\r\n        // set interactions on it\r\n        this._IOs.curtain = getInteraction().getInteraction(curtain);\r\n        // Add Curtain IO to disposers\r\n        this._disposers.push(this._IOs.curtain);\r\n        // Set events to disable underlying interactivity\r\n        this._IOs.curtain.events.on(\"over\", this.disablePointers, this);\r\n        this._IOs.curtain.events.on(\"out\", this.releasePointers, this);\r\n        // Hide it?\r\n        curtain.style.display = this.showCurtain ? \"block\" : \"none\";\r\n        // Save for later\r\n        this._elements.curtain = curtain;\r\n    };\r\n    Object.defineProperty(Popup.prototype, \"draggable\", {\r\n        /**\r\n         * @return {boolean} Show curtain?\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"draggable\", this._draggable);\r\n        },\r\n        /**\r\n         * Can the popup be dragged with a pointer?\r\n         *\r\n         * @default false\r\n         * @param {boolean} Show curtain?\r\n         */\r\n        set: function (value) {\r\n            if (this._draggable != value) {\r\n                this._draggable = value;\r\n                this.setupDragging();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Popup.prototype, \"align\", {\r\n        /**\r\n         * @return {boolean} Horizontal position\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"align\", this._align);\r\n        },\r\n        /**\r\n         * Horizontal positioning of the content window.\r\n         *\r\n         * Available options: \"left\", \"center\" (default), \"right\", and \"none\".\r\n         *\r\n         * @default \"center\"\r\n         * @param {Align} Horizontal position\r\n         */\r\n        set: function (value) {\r\n            if (this._align != value) {\r\n                this._align = value;\r\n                this.positionElement();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Popup.prototype, \"verticalAlign\", {\r\n        /**\r\n         * @return {boolean} Vertical position\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"verticalAlign\", this._verticalAlign);\r\n        },\r\n        /**\r\n         * Vertical positioning of the content window.\r\n         *\r\n         * Available options: \"top\", \"middle\" (default), \"bottom\", and \"none\".\r\n         *\r\n         * @default \"middle\"\r\n         * @param {VerticalAlign} Vertical position\r\n         */\r\n        set: function (value) {\r\n            if (this._verticalAlign != value) {\r\n                this._verticalAlign = value;\r\n                this.positionElement();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Popup.prototype, \"left\", {\r\n        /**\r\n         * @return {boolean} Left\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"left\", this._left);\r\n        },\r\n        /**\r\n         * \"left\" coordinate of a non-aligned (`align = \"none\"`) popup.\r\n         *\r\n         * Can be either absolute pixel value, or relative (`Percent`).\r\n         *\r\n         * Setting this property will automatically set `align` to \"none\".\r\n         *\r\n         * NOTE: The position is relative to the chart container.\r\n         *\r\n         * @param {number | Percent} Left\r\n         */\r\n        set: function (value) {\r\n            if (this.left != value) {\r\n                this._left = value;\r\n                this._align = \"none\";\r\n                this.positionElement();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Popup.prototype, \"right\", {\r\n        /**\r\n         * @return {boolean} Right\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"right\", this._right);\r\n        },\r\n        /**\r\n         * \"right\" coordinate of a non-aligned (`align = \"none\"`) popup.\r\n         *\r\n         * Can be either absolute pixel value, or relative (`Percent`).\r\n         *\r\n         * Setting this property will automatically set `align` to \"none\".\r\n         *\r\n         * NOTE: The position is relative to the chart container.\r\n         *\r\n         * @param {number | Percent} Right\r\n         */\r\n        set: function (value) {\r\n            if (this.right != value) {\r\n                this._right = value;\r\n                this._align = \"none\";\r\n                this.positionElement();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Popup.prototype, \"top\", {\r\n        /**\r\n         * @return {boolean} Top\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"top\", this._top);\r\n        },\r\n        /**\r\n         * \"top\" coordinate of a non-aligned (`verticalAlign = \"none\"`) popup.\r\n         *\r\n         * Can be either absolute pixel value, or relative (`Percent`).\r\n         *\r\n         * Setting this property will automatically set `verticalAlign` to \"none\".\r\n         *\r\n         * NOTE: The position is relative to the chart container.\r\n         *\r\n         * @param {number | Percent} Top\r\n         */\r\n        set: function (value) {\r\n            if (this.top != value) {\r\n                this._top = value;\r\n                this._verticalAlign = \"none\";\r\n                this.positionElement();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Popup.prototype, \"bottom\", {\r\n        /**\r\n         * @return {boolean} Bottom\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"bottom\", this._bottom);\r\n        },\r\n        /**\r\n         * \"bottom\" coordinate of a non-aligned (`verticalAlign = \"none\"`) popup.\r\n         *\r\n         * Can be either absolute pixel value, or relative (`Percent`).\r\n         *\r\n         * Setting this property will automatically set `verticalAlign` to \"none\".\r\n         *\r\n         * NOTE: The position is relative to the chart container.\r\n         *\r\n         * @param {number | Percent} Bottom\r\n         */\r\n        set: function (value) {\r\n            if (this.bottom != value) {\r\n                this._bottom = value;\r\n                this._verticalAlign = \"none\";\r\n                this.positionElement();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Popup.prototype, \"elements\", {\r\n        /**\r\n         * Returns an object with references to various elements of the Popup.\r\n         *\r\n         * * `wrapper`\r\n         * * `title`\r\n         * * `content`\r\n         * * `close`\r\n         * * `curtain`\r\n         */\r\n        get: function () {\r\n            return this._elements;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Loads popup CSS.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Popup.prototype.loadDefaultCSS = function () {\r\n        if (!this._cssLoaded) {\r\n            this._disposers.push(popupCSS(this.classPrefix));\r\n            $object.each(this._elements, function (key, el) {\r\n                el.style.display = \"\";\r\n            });\r\n            this._cssLoaded = true;\r\n        }\r\n    };\r\n    /**\r\n     * If popup is closable, this method adds various events to popup elements.\r\n     */\r\n    Popup.prototype.applyEvents = function () {\r\n        var _this = this;\r\n        if (this._IOs.close) {\r\n            if (this.closable) {\r\n                this._IOs.close.element.style.visibility = \"visible\";\r\n                var disposers = [\r\n                    getInteraction().body.events.on(\"keyup\", function (ev) {\r\n                        if (keyboard.isKey(ev.event, \"esc\") && _this.closable) {\r\n                            _this.close();\r\n                        }\r\n                    }),\r\n                    this._IOs.close.events.on(\"hit\", function (ev) {\r\n                        _this.close();\r\n                    })\r\n                ];\r\n                disposers.push(this._IOs.curtain.events.on(\"hit\", function (ev) {\r\n                    if (_this.showCurtain) {\r\n                        _this.close();\r\n                    }\r\n                }));\r\n                this._disposers.push(new MultiDisposer(disposers));\r\n            }\r\n            else {\r\n                this._IOs.close.element.style.visibility = \"hidden\";\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Disables interactivity on parent chart.\r\n     */\r\n    Popup.prototype.disablePointers = function () {\r\n        if (this.sprite) {\r\n            this._spriteInteractionsEnabled = this.sprite.interactionsEnabled;\r\n            this.sprite.interactionsEnabled = false;\r\n        }\r\n    };\r\n    /**\r\n     * Releases temporarily disabled pointers on parent chart.\r\n     */\r\n    Popup.prototype.releasePointers = function () {\r\n        if ($type.hasValue(this._spriteInteractionsEnabled)) {\r\n            this.sprite.interactionsEnabled = this._spriteInteractionsEnabled;\r\n            this._spriteInteractionsEnabled = undefined;\r\n        }\r\n    };\r\n    /**\r\n     * Sets screen reader related settings.\r\n     */\r\n    Popup.prototype.applyReaderSettings = function () {\r\n        this.elements.wrapper.setAttribute(\"aria-label\", this.readerTitle);\r\n    };\r\n    /**\r\n     * Copies all properties and related data from different element.\r\n     *\r\n     * @param {this} object Source element\r\n     */\r\n    Popup.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.container = source.container;\r\n        this.sprite = source.sprite;\r\n        this.classPrefix = source.classPrefixRaw;\r\n        this.content = source.content;\r\n        this.title = source.title;\r\n        this.readerTitle = source.readerTitle;\r\n        this.defaultStyles = source.defaultStyles;\r\n        this.showCurtain = source.showCurtain;\r\n        this.align = source.align;\r\n        this.verticalAlign = source.verticalAlign;\r\n        this.left = source.left;\r\n        this.right = source.right;\r\n        this.top = source.top;\r\n        this.bottom = source.bottom;\r\n        this.adapter.copyFrom(source.adapter);\r\n    };\r\n    return Popup;\r\n}(BaseObjectEvents));\r\nexport { Popup };\r\n//# sourceMappingURL=Popup.js.map","import { StyleRule } from \"../utils/DOM\";\r\nimport { Dictionary } from \"../utils/Dictionary\";\r\nimport { MultiDisposer, CounterDisposer } from \"../utils/Disposer\";\r\nvar rules = new Dictionary();\r\n/**\r\n * Default CSS for Popup.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {string}     prefix  Prefix for CSS classes\r\n * @return {IDisposer}          Disposer for the CSS definition\r\n */\r\nexport default function (prefix) {\r\n    if (!prefix) {\r\n        prefix = \"ampopup\";\r\n    }\r\n    var counter = rules.insertKeyIfEmpty(prefix, function () {\r\n        var disposer = new MultiDisposer([\r\n            new StyleRule(\".\" + prefix, {\r\n                //\"width\": \"100%\",\r\n                //\"height\": \"100%\",\r\n                \"overflow\": \"visible\",\r\n                \"position\": \"absolute\",\r\n                \"top\": \"0\",\r\n                \"left\": \"0\",\r\n                \"z-index\": \"2000\"\r\n            }),\r\n            new StyleRule(\".\" + prefix + \"-curtain\", {\r\n                \"width\": \"100%\",\r\n                \"height\": \"100%\",\r\n                \"position\": \"absolute\",\r\n                \"top\": \"0\",\r\n                \"left\": \"0\",\r\n                \"z-index\": \"2001\",\r\n                \"background\": \"#fff\",\r\n                \"opacity\": \"0.5\"\r\n            }),\r\n            new StyleRule(\".\" + prefix + \"-title\", {\r\n                \"font-weight\": \"bold\",\r\n                \"font-size\": \"120%\"\r\n            }),\r\n            new StyleRule(\".\" + prefix + \"-content\", {\r\n                /*\"width\": \"100%\",\r\n                \"height\": \"100%\",*/\r\n                \"padding\": \"1em 2em\",\r\n                \"background\": \"rgb(255, 255, 255);\",\r\n                \"background-color\": \"rgba(255, 255, 255, 0.8)\",\r\n                \"display\": \"inline-block\",\r\n                \"position\": \"absolute\",\r\n                \"top\": \"0\",\r\n                \"left\": \"0\",\r\n                \"max-width\": \"90%\",\r\n                \"max-height\": \"90%\",\r\n                \"overflow\": \"auto\",\r\n                \"z-index\": \"2002\"\r\n            }),\r\n            new StyleRule(\".\" + prefix + \"-close\", {\r\n                \"display\": \"block\",\r\n                \"position\": \"absolute\",\r\n                \"top\": \"0.3em\",\r\n                \"right\": \"0.3em\",\r\n                \"background-color\": \"rgb(100, 100, 100)\",\r\n                \"background\": \"rgba(100, 100, 100, 0.1) url(data:image/svg+xml;charset=utf-8;base64,PHN2ZyBoZWlnaHQ9IjUxMiIgdmVyc2lvbj0iMSIgdmlld0JveD0iMCAwIDUxMiA1MTIiIHdpZHRoPSI1MTIiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+PHBhdGggZD0iTTQ0NS4yIDEwOS4ybC00Mi40LTQyLjRMMjU2IDIxMy42IDEwOS4yIDY2LjhsLTQyLjQgNDIuNEwyMTMuNiAyNTYgNjYuOCA0MDIuOGw0Mi40IDQyLjRMMjU2IDI5OC40bDE0Ni44IDE0Ni44IDQyLjQtNDIuNEwyOTguNCAyNTYiLz48L3N2Zz4=) no-repeat center\",\r\n                \"background-size\": \"80%\",\r\n                \"width\": \"1.2em\",\r\n                \"height\": \"1.2em\",\r\n                \"cursor\": \"pointer\"\r\n            }),\r\n        ]);\r\n        return new CounterDisposer(function () {\r\n            rules.removeKey(prefix);\r\n            disposer.dispose();\r\n        });\r\n    });\r\n    return counter.increment();\r\n}\r\n//# sourceMappingURL=PopupCSS.js.map","/**\r\n * Preloader module.\r\n *\r\n * Preloader is a progress indicator.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../Container\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Slice } from \"./Slice\";\r\nimport { Label } from \"./Label\";\r\nimport { registry } from \"../Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A class used to draw and display progress indicator.\r\n *\r\n * @see {@link IPreloaderEvents} for a list of available events\r\n * @see {@link IPreloaderAdapters} for a list of available Adapters\r\n */\r\nvar Preloader = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Preloader, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Preloader() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"Preloader\";\r\n        // Set dimensions\r\n        _this.width = percent(100);\r\n        _this.height = percent(100);\r\n        var interfaceColors = new InterfaceColorSet();\r\n        // Create main container\r\n        var sliceContainer = _this.createChild(Container);\r\n        sliceContainer.shouldClone = false;\r\n        // Add background (100%) slice\r\n        var backgroundSlice = sliceContainer.createChild(Slice);\r\n        backgroundSlice.shouldClone = false;\r\n        backgroundSlice.radius = 53;\r\n        backgroundSlice.arc = 360;\r\n        backgroundSlice.fill = interfaceColors.getFor(\"fill\");\r\n        backgroundSlice.fillOpacity = 0.8;\r\n        backgroundSlice.innerRadius = 42;\r\n        backgroundSlice.isMeasured = false;\r\n        _this.backgroundSlice = backgroundSlice;\r\n        // Add progress slice\r\n        var progressSlice = sliceContainer.createChild(Slice);\r\n        progressSlice.shouldClone = false;\r\n        progressSlice.radius = 50;\r\n        progressSlice.innerRadius = 45;\r\n        progressSlice.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n        progressSlice.fillOpacity = 0.2;\r\n        progressSlice.isMeasured = false;\r\n        _this.progressSlice = progressSlice;\r\n        // Add text label element\r\n        var label = sliceContainer.createChild(Label);\r\n        label.shouldClone = false;\r\n        label.horizontalCenter = \"middle\";\r\n        label.verticalCenter = \"middle\";\r\n        label.isMeasured = false;\r\n        label.fill = interfaceColors.getFor(\"text\");\r\n        label.align = \"center\";\r\n        label.valign = \"middle\";\r\n        label.fillOpacity = 0.4;\r\n        _this.label = label;\r\n        // Set defaults\r\n        _this.background.opacity = 1;\r\n        _this.background.fill = interfaceColors.getFor(\"background\");\r\n        _this.contentAlign = \"center\";\r\n        _this.contentValign = \"middle\";\r\n        _this.delay = 500;\r\n        // Create hidden state\r\n        var hiddenState = _this.states.create(\"hidden\");\r\n        hiddenState.properties.opacity = 0;\r\n        // Hide by default\r\n        _this.visible = false;\r\n        _this.hide(0);\r\n        _this.__disabled = true;\r\n        // Make it disposable\r\n        // @todo Maybe it's enough to just dispose `sliceContainer`?\r\n        _this._disposers.push(_this.backgroundSlice);\r\n        _this._disposers.push(_this.progressSlice);\r\n        _this._disposers.push(_this.label);\r\n        _this._disposers.push(sliceContainer);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Preloader.prototype, \"progress\", {\r\n        /**\r\n         * @return {number} Progress (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"progress\");\r\n        },\r\n        /**\r\n         * Current preload progress. (0-1)\r\n         *\r\n         * * 0 - 0%\r\n         * * 0.5 - 50%\r\n         * * 1 - 100%\r\n         *\r\n         * Setting this to a value less than 1, will automatically reveal the\r\n         * preloader, while setting it to 1 (100%) will hide it.\r\n         *\r\n         * @param {number} value Progress (0-1)\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            this.__disabled = false;\r\n            this.validateLayout(); // show not in center without this\r\n            this.setPropertyValue(\"progress\", value);\r\n            /*if (!this.visible && value == 1) {\r\n                return;\r\n            }*/\r\n            this.progressSlice.arc = 360 * value;\r\n            if (this.label) {\r\n                this.label.text = Math.round(value * 100) + \"%\";\r\n            }\r\n            if (value >= 1) {\r\n                // Cancel the timeout\r\n                if (this._started) {\r\n                    this._started = undefined;\r\n                }\r\n                // TODO remove closure ?\r\n                registry.events.once(\"enterframe\", function () {\r\n                    var animation = _this.hide();\r\n                    if (animation && !animation.isFinished()) {\r\n                        animation.events.once(\"animationended\", function () {\r\n                            _this.__disabled = true;\r\n                        });\r\n                    }\r\n                    else {\r\n                        _this.__disabled = true;\r\n                    }\r\n                });\r\n                this.interactionsEnabled = false;\r\n                this.setPropertyValue(\"progress\", 0);\r\n            }\r\n            else if (value > 0) {\r\n                if (this.delay) {\r\n                    if (!this._started) {\r\n                        this._started = new Date().getTime();\r\n                    }\r\n                    else if ((this._started + this.delay) >= new Date().getTime()) {\r\n                        this.__disabled = false;\r\n                        this.show();\r\n                        this.interactionsEnabled = true;\r\n                    }\r\n                }\r\n                else {\r\n                    this.__disabled = false;\r\n                    this.show();\r\n                    this.interactionsEnabled = true;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Preloader.prototype, \"delay\", {\r\n        /**\r\n         * @return {number} Delay (ms)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"delay\");\r\n        },\r\n        /**\r\n         * Delay display of preloader by X milliseconds.\r\n         *\r\n         * When loading starts (`progress` is set to <1) and finishes (`progress` is\r\n         * set to 1) before `delay` ms, the loader is never shown.\r\n         *\r\n         * This is used to avoid brief flashing of the preload for very quick loads.\r\n         *\r\n         * @default 1000\r\n         * @param {number}  value  Delay (ms)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"delay\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Preloader;\r\n}(Container));\r\nexport { Preloader };\r\n//# sourceMappingURL=Preloader.js.map","/**\r\n * Functionality for drawing quadratic curves.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line } from \"./Line\";\r\nimport { color } from \"../utils/Color\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\r\nvar QuadraticCurve = /** @class */ (function (_super) {\r\n    tslib_1.__extends(QuadraticCurve, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function QuadraticCurve() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"QuadraticCurve\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.pixelPerfect = false;\r\n        _this.fill = color();\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the waved line.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    QuadraticCurve.prototype.draw = function () {\r\n        //super.draw();\r\n        if ($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy)) {\r\n            var p1 = { x: this.x1, y: this.y1 };\r\n            var p2 = { x: this.x2, y: this.y2 };\r\n            var cp = { x: this.cpx, y: this.cpy };\r\n            var d = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\r\n            this.path = d;\r\n        }\r\n    };\r\n    Object.defineProperty(QuadraticCurve.prototype, \"cpx\", {\r\n        /**\r\n         * @return {number} X\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"cpx\");\r\n        },\r\n        /**\r\n         * X coordinate of control point.\r\n         *\r\n         * @param {number} value X\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"cpx\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(QuadraticCurve.prototype, \"cpy\", {\r\n        /**\r\n         * @return {number} Y\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"cpy\");\r\n        },\r\n        /**\r\n         * Y coordinate of control point.\r\n         *\r\n         * @param {number} value Y\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"cpy\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts relative position along the line (0-1) into pixel coordinates.\r\n     *\r\n     * @param  {number}             position  Position (0-1)\r\n     * @return {IOrientationPoint}            Coordinates\r\n     */\r\n    QuadraticCurve.prototype.positionToPoint = function (position) {\r\n        var p1 = { x: this.x1, y: this.y1 };\r\n        var cp = { x: this.cpx, y: this.cpy };\r\n        var p2 = { x: this.x2, y: this.y2 };\r\n        var point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\r\n        var point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\r\n        return { x: point1.x, y: point1.y, angle: $math.getAngle(point1, point2) };\r\n    };\r\n    return QuadraticCurve;\r\n}(Line));\r\nexport { QuadraticCurve };\r\n//# sourceMappingURL=QuadraticCurve.js.map","/**\r\n * Functionality for drawing rectangles.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../utils/Math\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to draw a rectangle.\r\n *\r\n * @see {@link IRectangleEvents} for a list of available events\r\n * @see {@link IRectangleAdapters} for a list of available Adapters\r\n */\r\nvar Rectangle = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Rectangle, _super);\r\n    /**\r\n     * Constructor\r\n     * * Creates a `<rect>` element\r\n     * * Creates default state\r\n     */\r\n    function Rectangle() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Rectangle\";\r\n        _this.element = _this.paper.add(\"rect\");\r\n        //this.pixelPerfect = false;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Rectangle.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var precision = this._positionPrecision;\r\n        if (this.pixelPerfect) {\r\n            precision = 0;\r\n        }\r\n        var w = $math.round(this.innerWidth, precision);\r\n        var h = $math.round(this.innerHeight, precision);\r\n        this.element.attr({\r\n            \"width\": w,\r\n            \"height\": h\r\n        });\r\n    };\r\n    /**\r\n     * Measures the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Rectangle.prototype.measureElement = function () {\r\n    };\r\n    Object.defineProperty(Rectangle.prototype, \"bbox\", {\r\n        /**\r\n         * Returns bounding box (square) for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {IRectangle}\r\n         */\r\n        get: function () {\r\n            if (this.definedBBox) {\r\n                return this.definedBBox;\r\n            }\r\n            if (this.isMeasured) {\r\n                return {\r\n                    x: 0,\r\n                    y: 0,\r\n                    width: this.innerWidth,\r\n                    height: this.innerHeight\r\n                };\r\n            }\r\n            else {\r\n                return { x: 0, y: 0, width: 0, height: 0 };\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Rectangle;\r\n}(Sprite));\r\nexport { Rectangle };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Rectangle\"] = Rectangle;\r\n//# sourceMappingURL=Rectangle.js.map","/**\r\n * Resize button module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Button } from \"./Button\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a draggable resize/grip button.\r\n *\r\n * @see {@link IResizeButtonEvents} for a list of available events\r\n * @see {@link IResizeButtonAdapters} for a list of available Adapters\r\n */\r\nvar ResizeButton = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ResizeButton, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ResizeButton() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"ResizeButton\";\r\n        // Set defaults\r\n        _this.orientation = \"horizontal\";\r\n        _this.layout = \"absolute\";\r\n        _this.horizontalCenter = \"middle\";\r\n        _this.verticalCenter = \"middle\";\r\n        _this.draggable = true;\r\n        _this.padding(8, 8, 8, 8);\r\n        _this.background.cornerRadius(20, 20, 20, 20);\r\n        // Create an icon\r\n        var icon = new Sprite();\r\n        icon.element = _this.paper.add(\"path\");\r\n        var path = $path.moveTo({ x: -2, y: -6 });\r\n        path += $path.lineTo({ x: -2, y: 6 });\r\n        path += $path.moveTo({ x: 2, y: -6 });\r\n        path += $path.lineTo({ x: 2, y: 6 });\r\n        icon.path = path;\r\n        icon.pixelPerfect = true;\r\n        icon.padding(0, 4, 0, 4);\r\n        icon.stroke = new InterfaceColorSet().getFor(\"alternativeText\");\r\n        icon.strokeOpacity = 0.7;\r\n        //icon.align = \"center\";\r\n        //icon.valign = \"middle\";\r\n        _this.icon = icon;\r\n        _this.label.dispose();\r\n        _this.label = undefined;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ResizeButton.prototype, \"orientation\", {\r\n        /**\r\n         * Use for setting of direction (orientation) of the resize button.\r\n         *\r\n         * Available options: \"horizontal\", \"vertical\".\r\n         *\r\n         * @param {Orientation} value Orientation\r\n         */\r\n        set: function (value) {\r\n            var icon = this.icon;\r\n            if (icon) {\r\n                if (value == \"horizontal\") {\r\n                    icon.rotation = 0;\r\n                }\r\n                else {\r\n                    icon.rotation = -90;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ResizeButton;\r\n}(Button));\r\nexport { ResizeButton };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ResizeButton\"] = ResizeButton;\r\n//# sourceMappingURL=ResizeButton.js.map","/**\r\n * Rounded rectangle module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a rectangle with rounded corners.\r\n *\r\n * @see {@link IRoundedRectangleEvents} for a list of available events\r\n * @see {@link IRoundedRectangleAdapters} for a list of available Adapters\r\n */\r\nvar RoundedRectangle = /** @class */ (function (_super) {\r\n    tslib_1.__extends(RoundedRectangle, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function RoundedRectangle() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"RoundedRectangle\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        //this.pixelPerfect = false;\r\n        _this.cornerRadius(3, 3, 3, 3);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    RoundedRectangle.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var w = this.innerWidth;\r\n        var h = this.innerHeight;\r\n        if ($type.isNumber(w) && $type.isNumber(h)) {\r\n            var maxcr = $math.min(Math.abs(w / 2), Math.abs(h / 2));\r\n            var crtl = $math.fitToRange(this.cornerRadiusTopLeft, 0, maxcr);\r\n            var crtr = $math.fitToRange(this.cornerRadiusTopRight, 0, maxcr);\r\n            var crbr = $math.fitToRange(this.cornerRadiusBottomRight, 0, maxcr);\r\n            var crbl = $math.fitToRange(this.cornerRadiusBottomLeft, 0, maxcr);\r\n            var lineT = \"M\" + crtl + \",0 L\" + (w - crtr) + \",0\";\r\n            var lineB = \" L\" + crbl + \",\" + h;\r\n            var lineL = \" L0,\" + crtl;\r\n            var lineR = \" L\" + w + \",\" + (h - crbr);\r\n            var arcTR = \" a\" + crtr + \",\" + crtr + \" 0 0 1 \" + crtr + \",\" + crtr;\r\n            var arcBR = \" a\" + crbr + \",\" + crbr + \" 0 0 1 -\" + crbr + \",\" + crbr;\r\n            var arcBL = \" a\" + crbl + \",\" + crbl + \" 0 0 1 -\" + crbl + \",-\" + crbl;\r\n            var arcTL = \" a\" + crtl + \",\" + crtl + \" 0 0 1 \" + crtl + \",-\" + crtl;\r\n            var path = lineT + arcTR + lineR + arcBR + lineB + arcBL + lineL + arcTL + \" Z\";\r\n            this.path = path;\r\n        }\r\n    };\r\n    /**\r\n     * Sets radius for all four corners at ones.\r\n     *\r\n     * All numbers are in pixels.\r\n     *\r\n     * @param {number}  tl  Top-left corner\r\n     * @param {number}  tr  Top-right corner\r\n     * @param {number}  bl  Bottom-left corner\r\n     * @param {number}  br  Bottom-right corner\r\n     */\r\n    RoundedRectangle.prototype.cornerRadius = function (tl, tr, bl, br) {\r\n        this.cornerRadiusTopLeft = tl;\r\n        this.cornerRadiusTopRight = tr;\r\n        this.cornerRadiusBottomLeft = bl;\r\n        this.cornerRadiusBottomRight = br;\r\n    };\r\n    Object.defineProperty(RoundedRectangle.prototype, \"cornerRadiusTopLeft\", {\r\n        /**\r\n         * @return {number} Radius (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"cornerRadiusTopLeft\");\r\n        },\r\n        /**\r\n         * Radius of the top-left corner in pixels.\r\n         *\r\n         * @default 3\r\n         * @param {number}  value  Radius (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"cornerRadiusTopLeft\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RoundedRectangle.prototype, \"cornerRadiusTopRight\", {\r\n        /**\r\n         * @return {number} Radius (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"cornerRadiusTopRight\");\r\n        },\r\n        /**\r\n         * Radius of the top-right corner in pixels.\r\n         *\r\n         * @default 3\r\n         * @param {number}  value  Radius (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"cornerRadiusTopRight\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RoundedRectangle.prototype, \"cornerRadiusBottomRight\", {\r\n        /**\r\n         * @return {number} Radius (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"cornerRadiusBottomRight\");\r\n        },\r\n        /**\r\n         * Radius of the bottom-right corner in pixels.\r\n         *\r\n         * @default 3\r\n         * @param {number}  value  Radius (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"cornerRadiusBottomRight\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RoundedRectangle.prototype, \"cornerRadiusBottomLeft\", {\r\n        /**\r\n         * @return {number} Radius (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"cornerRadiusBottomLeft\");\r\n        },\r\n        /**\r\n         * Radius of the bottom-left corner in pixels.\r\n         *\r\n         * @default 3\r\n         * @param {number}  value  Radius (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"cornerRadiusBottomLeft\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Measures the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    RoundedRectangle.prototype.measureElement = function () {\r\n    };\r\n    Object.defineProperty(RoundedRectangle.prototype, \"bbox\", {\r\n        /**\r\n         * Returns bounding box (square) for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {IRectangle}\r\n         */\r\n        get: function () {\r\n            if (this.definedBBox) {\r\n                return this.definedBBox;\r\n            }\r\n            if (this.isMeasured) {\r\n                return {\r\n                    x: 0,\r\n                    y: 0,\r\n                    width: this.innerWidth,\r\n                    height: this.innerHeight\r\n                };\r\n            }\r\n            else {\r\n                return { x: 0, y: 0, width: 0, height: 0 };\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return RoundedRectangle;\r\n}(Sprite));\r\nexport { RoundedRectangle };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RoundedRectangle\"] = RoundedRectangle;\r\n//# sourceMappingURL=RoundedRectangle.js.map","/**\r\n * Provides functionality used to build scrollbars.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../Container\";\r\nimport { ResizeButton } from \"../elements/ResizeButton\";\r\nimport { Button } from \"../elements/Button\";\r\nimport { getInteraction } from \"../interaction/Interaction\";\r\nimport { MouseCursorStyle } from \"../interaction/Mouse\";\r\nimport { RoundedRectangle } from \"../elements/RoundedRectangle\";\r\nimport { registry } from \"../Registry\";\r\nimport { keyboard } from \"../utils/Keyboard\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../utils/Percent\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $ease from \"../utils/Ease\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $utils from \"../utils/Utils\";\r\n;\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Scrollbar is a generic control allowing to select a range of values or pan\r\n * the selection.\r\n *\r\n * @see {@link IScrollbarEvents} for a list of available events\r\n * @see {@link IScrollbarAdapters} for a list of available Adapters\r\n */\r\nvar Scrollbar = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Scrollbar, _super);\r\n    /**\r\n     * Construtor\r\n     */\r\n    function Scrollbar() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * A value of previously selected lower value, used for doubleclick function.\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this._prevStart = 0;\r\n        /**\r\n         * A value of previously selected upper value, used for doubleclick function.\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this._prevEnd = 1;\r\n        /**\r\n         * Indicates if the Scrollbar is currently \"busy\" (animating and or\r\n         * performing zoom by user interaction).\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this._isBusy = false;\r\n        /**\r\n         * [_skipRangeEvents description]\r\n         *\r\n         * @todo Description\r\n         * @type {boolean}\r\n         */\r\n        _this._skipRangeEvents = false;\r\n        /**\r\n         * Update the selection when dragging the grips.\r\n         *\r\n         * If set to `false` selection will be updated only when the grip is\r\n         * released.\r\n         *\r\n         * @default true\r\n         * @type {boolean}\r\n         */\r\n        _this.updateWhileMoving = true;\r\n        _this.className = \"Scrollbar\";\r\n        _this.minHeight = 12;\r\n        _this.minWidth = 12;\r\n        _this.animationDuration = 0;\r\n        _this.animationEasing = $ease.cubicOut;\r\n        _this.margin(10, 10, 10, 10);\r\n        var interfaceColors = new InterfaceColorSet();\r\n        // background is also container as it might contain graphs, grid, etc\r\n        var background = _this.background;\r\n        background.cornerRadius(10, 10, 10, 10);\r\n        background.fill = interfaceColors.getFor(\"fill\");\r\n        background.fillOpacity = 0.5;\r\n        _this.startGrip = new ResizeButton();\r\n        _this.endGrip = new ResizeButton();\r\n        // Default orientation...\r\n        // ... is set in `applyInternalDefaults()` because it accesses `language`\r\n        // and should only be started to access when parent is set\r\n        // Set events\r\n        _this.events.on(\"transformed\", _this.updateThumb, _this);\r\n        // Initial positions\r\n        _this.start = 0;\r\n        _this.end = 1;\r\n        // Set roles\r\n        _this.role = \"scrollbar\";\r\n        _this.thumb.role = \"slider\";\r\n        _this.thumb.readerLive = \"polite\";\r\n        _this.startGrip.role = \"slider\";\r\n        _this.endGrip.role = \"slider\";\r\n        // otherwise range changed wont' be registered\r\n        _this.events.once(\"inited\", function () {\r\n            _this._previousStart = undefined;\r\n            _this.dispatchRangeChange();\r\n        });\r\n        _this.hideGrips = false;\r\n        _this.orientation = \"horizontal\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    Scrollbar.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Set screen reader tetxt accordingly\r\n        if (this.orientation === \"horizontal\") {\r\n            if (!$type.hasValue(this.readerTitle)) {\r\n                this.readerTitle = this.language.translate(\"Use TAB to select grip buttons or left and right arrows to change selection\");\r\n            }\r\n            if (!$type.hasValue(this.thumb.readerDescription)) {\r\n                this.thumb.readerDescription = this.language.translate(\"Use left and right arrows to move selection\");\r\n            }\r\n            if (!$type.hasValue(this.startGrip.readerDescription)) {\r\n                this.startGrip.readerDescription = this.language.translate(\"Use left and right arrows to move left selection\");\r\n            }\r\n            if (!$type.hasValue(this.endGrip.readerDescription)) {\r\n                this.endGrip.readerDescription = this.language.translate(\"Use left and right arrows to move right selection\");\r\n            }\r\n        }\r\n        else {\r\n            if (!$type.hasValue(this.readerTitle)) {\r\n                this.readerTitle = this.language.translate(\"Use TAB select grip buttons or up and down arrows to change selection\");\r\n            }\r\n            if (!$type.hasValue(this.thumb.readerDescription)) {\r\n                this.thumb.readerDescription = this.language.translate(\"Use up and down arrows to move selection\");\r\n            }\r\n            if (!$type.hasValue(this.startGrip.readerDescription)) {\r\n                this.startGrip.readerDescription = this.language.translate(\"Use up and down arrows to move upper selection\");\r\n            }\r\n            if (!$type.hasValue(this.endGrip.readerDescription)) {\r\n                this.endGrip.readerDescription = this.language.translate(\"Use up and down arrows to move lower selection\");\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Validates the layout of the scrollbar's elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.validateLayout = function () {\r\n        this.updateSize();\r\n        _super.prototype.validateLayout.call(this);\r\n        // when size changes, need to update extremes\r\n        this.updateExtremes();\r\n    };\r\n    /**\r\n     * Update background for the scrollbar.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.processBackground = function () {\r\n        _super.prototype.processBackground.call(this);\r\n        var background = this.background;\r\n        background.clickable = true;\r\n        background.events.on(\"hit\", this.handleBgHit, this);\r\n    };\r\n    /**\r\n     * Zooms to the particular place when clicked/tapped on the scrollbar\r\n     * background.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {ISpriteEvents[\"hit\"]}  event  Event\r\n     */\r\n    Scrollbar.prototype.handleBgHit = function (event) {\r\n        this.makeBusy();\r\n        var point = event.spritePoint;\r\n        point = $utils.spritePointToSprite(point, this.background, this);\r\n        var thumb = this.thumb;\r\n        if (this.orientation == \"horizontal\") {\r\n            var thumbX = point.x - thumb.pixelWidth / 2;\r\n            thumbX = $math.fitToRange(thumbX, 0, this.innerWidth - thumb.pixelWidth);\r\n            this._thumbAnimation = thumb.animate({ property: \"x\", to: thumbX }, this.animationDuration, this.animationEasing);\r\n        }\r\n        else {\r\n            var thumbY = point.y - thumb.pixelHeight / 2;\r\n            thumbY = $math.fitToRange(thumbY, 0, this.innerHeight - thumb.pixelHeight);\r\n            this._thumbAnimation = thumb.animate({ property: \"y\", to: thumbY }, this.animationDuration, this.animationEasing);\r\n        }\r\n        if (this.animationDuration > 0) {\r\n            this._thumbAnimation.events.on(\"animationended\", this.makeUnbusy, this);\r\n        }\r\n        else {\r\n            this._thumb.validate();\r\n            this.makeUnbusy();\r\n        }\r\n    };\r\n    /**\r\n     * Set scrollbar as busy. (currently zooming)\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.makeBusy = function () {\r\n        this._isBusy = true;\r\n        this._skipRangeEvents = false;\r\n        if (this._unbusyTimeout) {\r\n            this.removeDispose(this._unbusyTimeout);\r\n        }\r\n        this._unbusyTimeout = undefined;\r\n        this.stopAnimations();\r\n    };\r\n    /**\r\n     * Stops all animations, currently playing for the scrollbar.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.stopAnimations = function () {\r\n        if (this._thumbAnimation) {\r\n            this._thumbAnimation.stop(true);\r\n        }\r\n        if (this._zoomAnimation) {\r\n            this._zoomAnimation.stop(true);\r\n        }\r\n    };\r\n    /**\r\n     * Cancels \"busy\" status of the Scrollbar.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.makeUnbusy = function () {\r\n        /**\r\n         * We cannot make Scrollbar not busy right after release, because then axes\r\n         * will take over controll and Scrollbar will start to animate.\r\n         * Theorethically, it's not right to set timeout by `animationDuration`,\r\n         * however we can not know all the durations of elements we scroll, so we\r\n         * assume that animation duration will be the same as\r\n         * `interpolationDuration` or `rangeChange` duration.\r\n         */\r\n        this._unbusyTimeout = this.setTimeout(this.makeUnbusyReal.bind(this), this.animationDuration * 1.1);\r\n    };\r\n    /**\r\n     * [makeUnbusyReal description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.makeUnbusyReal = function () {\r\n        this._usingGrip = undefined;\r\n        this._isBusy = false;\r\n        if (!this.updateWhileMoving) {\r\n            this.dispatchRangeChange();\r\n        }\r\n    };\r\n    /**\r\n     * Disptatches rangechanged event if it really changed\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.dispatchRangeChange = function () {\r\n        if (this._previousEnd != this.end || this._previousStart != this.start) {\r\n            this._previousStart = this.start;\r\n            this._previousEnd = this.end;\r\n            this.dispatch(\"rangechanged\");\r\n        }\r\n    };\r\n    /**\r\n     * Updates the \"thumb\" element. A draggable element between the grips.\r\n     */\r\n    Scrollbar.prototype.updateThumb = function () {\r\n        if (!this.parent) {\r\n            return;\r\n        }\r\n        var thumb = this.thumb;\r\n        var start = this.start;\r\n        var end = this.end;\r\n        var startGrip = this.startGrip;\r\n        var endGrip = this.endGrip;\r\n        if (this.orientation == \"horizontal\") {\r\n            var innerWidth_1 = this.innerWidth;\r\n            thumb.width = innerWidth_1 * (end - start);\r\n            thumb.maxX = innerWidth_1 - thumb.pixelWidth;\r\n            thumb.x = start * innerWidth_1;\r\n            startGrip.moveTo({ x: thumb.pixelX, y: 0 }, undefined, undefined, true); // overrides dragging\r\n            endGrip.moveTo({ x: thumb.pixelX + thumb.pixelWidth, y: 0 }, undefined, undefined, true);\r\n            startGrip.readerTitle = this.language.translate(\"From %1\", undefined, this.adapter.apply(\"positionValue\", {\r\n                value: Math.round(start * 100) + \"%\",\r\n                position: start\r\n            }).value);\r\n            endGrip.readerTitle = this.language.translate(\"To %1\", undefined, this.adapter.apply(\"positionValue\", {\r\n                value: Math.round(end * 100) + \"%\",\r\n                position: end\r\n            }).value);\r\n        }\r\n        else {\r\n            var innerHeight_1 = this.innerHeight;\r\n            thumb.height = innerHeight_1 * (end - start);\r\n            thumb.maxY = innerHeight_1 - thumb.pixelHeight;\r\n            thumb.y = (1 - end) * innerHeight_1;\r\n            startGrip.moveTo({ x: 0, y: thumb.pixelY + thumb.pixelHeight }, undefined, undefined, true);\r\n            endGrip.moveTo({ x: 0, y: thumb.pixelY }, undefined, undefined, true);\r\n            startGrip.readerTitle = this.language.translate(\"To %1\", undefined, this.adapter.apply(\"positionValue\", {\r\n                value: Math.round((1 - start) * 100) + \"%\",\r\n                position: (1 - start)\r\n            }).value);\r\n            endGrip.readerTitle = this.language.translate(\"From %1\", undefined, this.adapter.apply(\"positionValue\", {\r\n                value: Math.round((1 - end) * 100) + \"%\",\r\n                position: (1 - end)\r\n            }).value);\r\n        }\r\n        // Add accessibility\r\n        thumb.readerTitle = this.language.translate(\"From %1 to %2\", undefined, this.adapter.apply(\"positionValue\", {\r\n            value: Math.round(start * 100) + \"%\",\r\n            position: start\r\n        }).value, this.adapter.apply(\"positionValue\", {\r\n            value: Math.round(end * 100) + \"%\",\r\n            position: end\r\n        }).value);\r\n        if (!this._skipRangeEvents && this.updateWhileMoving) {\r\n            this.dispatchRangeChange();\r\n        }\r\n    };\r\n    /**\r\n     * Updates extremes of the scrollbar.\r\n     */\r\n    Scrollbar.prototype.updateExtremes = function () {\r\n        var orientation = this.orientation;\r\n        var minX = 0;\r\n        var minY = 0;\r\n        var maxX = 0;\r\n        var maxY = 0;\r\n        if (orientation == \"horizontal\") {\r\n            maxX = this.innerWidth;\r\n            minY = maxY = this.innerHeight / 2;\r\n        }\r\n        else {\r\n            maxY = this.innerHeight;\r\n            minX = maxX = this.innerWidth / 2;\r\n        }\r\n        var startGrip = this.startGrip;\r\n        startGrip.minX = minX;\r\n        startGrip.maxX = maxX;\r\n        startGrip.minY = minY;\r\n        startGrip.maxY = maxY;\r\n        var endGrip = this.endGrip;\r\n        endGrip.minX = minX;\r\n        endGrip.maxX = maxX;\r\n        endGrip.minY = minY;\r\n        endGrip.maxY = maxY;\r\n        var thumb = this.thumb;\r\n        thumb.minX = minX;\r\n        thumb.maxX = maxX;\r\n        thumb.minY = minY;\r\n        thumb.maxY = maxY;\r\n    };\r\n    /**\r\n     * Updates size of the scrollbar.\r\n     */\r\n    Scrollbar.prototype.updateSize = function () {\r\n        var orientation = this.orientation;\r\n        var startGrip = this.startGrip;\r\n        if (startGrip) {\r\n            startGrip.orientation = orientation;\r\n        }\r\n        if (this.endGrip) {\r\n            this.endGrip.orientation = orientation;\r\n        }\r\n        var thumb = this.thumb;\r\n        if (thumb) {\r\n            if (orientation == \"horizontal\") {\r\n                if (!$type.isNumber(this._pixelWidth)) {\r\n                    this.width = percent(100);\r\n                }\r\n                // this teorethically might be wrong, if user indeed sets height of a horizontal scrollbar in percent\r\n                // however without this height might be equal to 100% if previous orientation was set to horizontal\r\n                // so this is ok solution, in case user really wants to have scrollbar height set in percent,\r\n                // he should do this after orientation.\r\n                if ($type.hasValue(this.percentHeight)) {\r\n                    this.height = this.minHeight;\r\n                }\r\n                thumb.height = this.innerHeight;\r\n                thumb.verticalCenter = \"middle\";\r\n                thumb.horizontalCenter = \"left\";\r\n            }\r\n            else {\r\n                if (!$type.isNumber(this._pixelHeight)) {\r\n                    this.height = percent(100);\r\n                }\r\n                // same as above with percentHeight\r\n                if ($type.hasValue(this.percentWidth)) {\r\n                    this.width = this.minWidth;\r\n                }\r\n                thumb.width = this.innerWidth;\r\n                thumb.verticalCenter = \"top\";\r\n                thumb.horizontalCenter = \"middle\";\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Scrollbar.prototype, \"start\", {\r\n        /**\r\n         * @return {number} Position (0-1)\r\n         */\r\n        get: function () {\r\n            return Math.min(this.getPosition(this._start), this.getPosition(this._end));\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * POSITIONS\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Relative position (0-1) of the start grip.\r\n         *\r\n         * @param {number}  position  Position (0-1)\r\n         */\r\n        set: function (position) {\r\n            if (!this._isBusy) {\r\n                this.__start = position;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scrollbar.prototype, \"__start\", {\r\n        /**\r\n         * @return {number} [description]\r\n         */\r\n        get: function () {\r\n            return this._start;\r\n        },\r\n        /**\r\n         * [__start description]\r\n         *\r\n         * @todo Description\r\n         * @param {number} position [description]\r\n         */\r\n        set: function (position) {\r\n            this._start = this.getPosition(position);\r\n            this.updateThumb();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scrollbar.prototype, \"end\", {\r\n        /**\r\n         * @return {number} Position (0-1)\r\n         */\r\n        get: function () {\r\n            return Math.max(this.getPosition(this._start), this.getPosition(this._end));\r\n        },\r\n        /**\r\n         * Relative position (0-1) of the end grip.\r\n         *\r\n         * @param {number}  position  Position (0-1)\r\n         */\r\n        set: function (position) {\r\n            if (!this._isBusy) {\r\n                this.__end = position;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scrollbar.prototype, \"__end\", {\r\n        /**\r\n         * @return {number} [description]\r\n         */\r\n        get: function () {\r\n            return this._end;\r\n        },\r\n        /**\r\n         * [__end description]\r\n         *\r\n         * @todo Description\r\n         * @param {number} position [description]\r\n         */\r\n        set: function (position) {\r\n            this._end = this.getPosition(position);\r\n            this.updateThumb();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scrollbar.prototype, \"range\", {\r\n        /**\r\n         * Current selection range.\r\n         *\r\n         * @readonly\r\n         * @return {IRange} Range\r\n         */\r\n        get: function () {\r\n            return { start: this.start, end: this.end, priority: this._usingGrip };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Disables range change events.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.skipRangeEvents = function () {\r\n        if (!this._isBusy) {\r\n            this._skipRangeEvents = true;\r\n        }\r\n    };\r\n    /**\r\n     * [fixRange description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     * @param {IRange}  range  Range\r\n     */\r\n    Scrollbar.prototype.fixRange = function (range) {\r\n        if (range.start != $math.round(this._start, 2) || range.end != $math.round(this._end, 2)) {\r\n            this._start = range.start;\r\n            this._end = range.end;\r\n            this._skipRangeEvents = true;\r\n            this.updateThumb();\r\n            this._skipRangeEvents = false;\r\n            this.thumb.validate();\r\n            this.thumb.background.validate();\r\n        }\r\n    };\r\n    /**\r\n     * [getPosition description]\r\n     *\r\n     * @todo Description\r\n     * @param  {number}  position  [description]\r\n     * @return {number}            [description]\r\n     */\r\n    Scrollbar.prototype.getPosition = function (position) {\r\n        return $math.fitToRange($math.round(position, 4), 0, 1);\r\n    };\r\n    Object.defineProperty(Scrollbar.prototype, \"orientation\", {\r\n        /**\r\n         * @return {Orientation} Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"orientation\");\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * MISC\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Orientation of the scrollbar.\r\n         *\r\n         * Available options: \"horizontal\" (default) and \"vertical\".\r\n         *\r\n         * @default \"horizontal\"\r\n         * @param {Orientation}  value  Orientation\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"orientation\", value)) {\r\n                // Set mouse cursors and screen reader tetxt accordingly\r\n                if (value === \"horizontal\") {\r\n                    // Mouse styles\r\n                    this.startGrip.cursorOverStyle = MouseCursorStyle.horizontalResize;\r\n                    this.endGrip.cursorOverStyle = MouseCursorStyle.horizontalResize;\r\n                    // Reader text\r\n                    /*this.readerTitle = this.language.translate(\"Use TAB to select grip buttons or left and right arrows to change selection\");\r\n                    this.thumb.readerDescription = this.language.translate(\"Use left and right arrows to move selection\");\r\n                    this.startGrip.readerDescription = this.language.translate(\"Use left and right arrows to move left selection\");\r\n                    this.endGrip.readerDescription = this.language.translate(\"Use left and right arrows to move right selection\");*/\r\n                }\r\n                else {\r\n                    // Mouse styles\r\n                    this.startGrip.cursorOverStyle = MouseCursorStyle.verticalResize;\r\n                    this.endGrip.cursorOverStyle = MouseCursorStyle.verticalResize;\r\n                    // Reader text\r\n                    /*this.readerTitle = this.language.translate(\"Use TAB select grip buttons or up and down arrows to change selection\");\r\n                    this.thumb.readerDescription = this.language.translate(\"Use up and down arrows to move selection\");\r\n                    this.startGrip.readerDescription = this.language.translate(\"Use up and down arrows to move upper selection\");\r\n                    this.endGrip.readerDescription = this.language.translate(\"Use up and down arrows to move lower selection\");*/\r\n                }\r\n                this.updateByOrientation();\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    Scrollbar.prototype.updateByOrientation = function () {\r\n    };\r\n    Object.defineProperty(Scrollbar.prototype, \"startGrip\", {\r\n        /**\r\n         * @return {ResizeButton} Grip element\r\n         */\r\n        get: function () {\r\n            return this._startGrip;\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * GRIPS\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Start grip element. (button)\r\n         *\r\n         * @param {ResizeButton}  button  Grip element\r\n         */\r\n        set: function (button) {\r\n            if (this._startGrip) {\r\n                this.removeDispose(this._startGrip);\r\n            }\r\n            this._startGrip = button;\r\n            this.processGrip(button);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scrollbar.prototype, \"endGrip\", {\r\n        /**\r\n         * @return {ResizeButton} Grip element\r\n         */\r\n        get: function () {\r\n            return this._endGrip;\r\n        },\r\n        /**\r\n         * End grip element. (button)\r\n         *\r\n         * @param {ResizeButton}  button  Grip element\r\n         */\r\n        set: function (button) {\r\n            if (this._endGrip) {\r\n                this.removeDispose(this._endGrip);\r\n            }\r\n            this._endGrip = button;\r\n            this.processGrip(button);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Decorates the grip button with properties and events.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {ResizeButton} button Grip button\r\n     */\r\n    Scrollbar.prototype.processGrip = function (button) {\r\n        button.parent = this;\r\n        button.isMeasured = false;\r\n        button.focusable = true;\r\n        // Set button defaults\r\n        button.showSystemTooltip = true;\r\n        button.zIndex = 100;\r\n        button.events.on(\"drag\", this.handleGripDrag, this);\r\n        button.events.on(\"dragstop\", this.makeUnbusy, this);\r\n        button.events.on(\"down\", this.makeBusy, this);\r\n        this._disposers.push(button);\r\n    };\r\n    /**\r\n     * Updates positions of related elements after grip element is dragged.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {AMEvent<ResizeButton, ISpriteEvents>[\"drag\"]}  event  Event\r\n     */\r\n    Scrollbar.prototype.handleGripDrag = function (event) {\r\n        this.makeBusy();\r\n        if (event.target === this._startGrip) {\r\n            this._usingGrip = \"start\";\r\n        }\r\n        else {\r\n            this._usingGrip = \"end\";\r\n        }\r\n        if (this.orientation == \"horizontal\") {\r\n            this._start = this.startGrip.pixelX / this.innerWidth;\r\n            this._end = this.endGrip.pixelX / this.innerWidth;\r\n        }\r\n        else {\r\n            this._start = 1 - this.startGrip.pixelY / this.innerHeight;\r\n            this._end = 1 - this.endGrip.pixelY / this.innerHeight;\r\n        }\r\n        this.updateThumb();\r\n    };\r\n    Object.defineProperty(Scrollbar.prototype, \"thumb\", {\r\n        /**\r\n         * @return {RoundedRectangle} Thumb element\r\n         */\r\n        get: function () {\r\n            if (!this._thumb) {\r\n                // Create scrollbar controls (setters will handle adding disposers)\r\n                var thumb = new Button();\r\n                thumb.background.cornerRadius(10, 10, 10, 10);\r\n                thumb.padding(0, 0, 0, 0);\r\n                this.thumb = thumb;\r\n            }\r\n            return this._thumb;\r\n        },\r\n        /**\r\n         * A \"thumb\" element.\r\n         *\r\n         * It's a draggable square space between the grips, that can be used to\r\n         * pan the seleciton.\r\n         *\r\n         * @param {RoundedRectangle}  thumb  Thumb element\r\n         */\r\n        set: function (thumb) {\r\n            var _this = this;\r\n            if (thumb) {\r\n                if (this._thumb) {\r\n                    this.removeDispose(this._thumb);\r\n                }\r\n                this._thumb = thumb;\r\n                thumb.parent = this;\r\n                thumb.isMeasured = false;\r\n                thumb.inert = true;\r\n                thumb.draggable = true;\r\n                thumb.clickable = true;\r\n                thumb.hoverable = true;\r\n                thumb.focusable = true;\r\n                thumb.zIndex = 0;\r\n                // TODO remove closures ?\r\n                // Add events\r\n                // Add cursor styles to thumb\r\n                thumb.cursorOverStyle = MouseCursorStyle.grab;\r\n                thumb.cursorDownStyle = MouseCursorStyle.grabbing;\r\n                thumb.events.on(\"dragstart\", this.makeBusy, this);\r\n                thumb.events.on(\"dragstop\", this.makeUnbusy, this);\r\n                thumb.events.on(\"positionchanged\", this.handleThumbPosition, this);\r\n                thumb.events.on(\"sizechanged\", this.handleThumbPosition, this);\r\n                thumb.events.on(\"doublehit\", this.handleDoubleClick, this);\r\n                // Add event for space and ENTER to toggle full zoom out and back\r\n                // (same as doubleclick)\r\n                this._disposers.push(getInteraction().body.events.on(\"keyup\", function (ev) {\r\n                    if (keyboard.isKey(ev.event, [\"space\", \"enter\"]) && _this.thumb.isFocused) {\r\n                        ev.event.preventDefault();\r\n                        _this.handleDoubleClick();\r\n                    }\r\n                }));\r\n                this._disposers.push(this._thumb);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Zooms-in and out the selection on double-click of the thumb.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.handleDoubleClick = function () {\r\n        this.makeBusy();\r\n        var newStart = 0;\r\n        var newEnd = 1;\r\n        if (this.start != 0 || this.end != 1) {\r\n            this._prevStart = this.start;\r\n            this._prevEnd = this.end;\r\n        }\r\n        else {\r\n            newStart = this._prevStart;\r\n            newEnd = this._prevEnd;\r\n        }\r\n        var zoomAnimation = this.animate([{ property: \"__start\", to: newStart }, { property: \"__end\", to: newEnd }], this.animationDuration, this.animationEasing);\r\n        if (zoomAnimation && !zoomAnimation.isFinished()) {\r\n            zoomAnimation.events.on(\"animationended\", this.makeUnbusy, this);\r\n            this._zoomAnimation = zoomAnimation;\r\n        }\r\n        else {\r\n            this.makeUnbusy();\r\n        }\r\n    };\r\n    /**\r\n     * Updates positions of other elements when thumb is moved.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.handleThumbPosition = function () {\r\n        var thumb = this.thumb;\r\n        if (this.orientation == \"horizontal\") {\r\n            var innerWidth_2 = this.innerWidth;\r\n            var w = thumb.innerWidth;\r\n            var x = thumb.pixelX;\r\n            this._start = x / innerWidth_2;\r\n            this._end = (x + w) / innerWidth_2;\r\n            this.updateThumb();\r\n        }\r\n        else {\r\n            var innerHeight_2 = this.innerHeight;\r\n            var h = thumb.innerHeight;\r\n            var y = thumb.pixelY;\r\n            this._start = 1 - (y + h) / innerHeight_2;\r\n            this._end = 1 - y / innerHeight_2;\r\n            this.updateThumb();\r\n        }\r\n    };\r\n    /**\r\n     * Creates a background element for the scrollbar.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {RoundedRectangle} Background\r\n     */\r\n    Scrollbar.prototype.createBackground = function () {\r\n        return new RoundedRectangle();\r\n    };\r\n    Object.defineProperty(Scrollbar.prototype, \"hideGrips\", {\r\n        /**\r\n         * @return {boolean} Show only on hover?\r\n         */\r\n        get: function () {\r\n            return this._hideGrips;\r\n        },\r\n        /**\r\n         * Use this property to set whether grips should be always visible (`false`),\r\n         * or they should just appear on scrollbar hover (`true`).\r\n         *\r\n         * @param {boolean}  value  Show only on hover?\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            this._hideGrips = value;\r\n            if (this._overDisposer) {\r\n                this.removeDispose(this._overDisposer);\r\n            }\r\n            if (this._outDisposer) {\r\n                this.removeDispose(this._outDisposer);\r\n            }\r\n            if (value) {\r\n                this._overDisposer = this.events.on(\"over\", function () {\r\n                    _this.startGrip.show();\r\n                    _this.endGrip.show();\r\n                });\r\n                this._outDisposer = this.events.on(\"out\", function () {\r\n                    _this.startGrip.hide();\r\n                    _this.endGrip.hide();\r\n                });\r\n                this.startGrip.hide();\r\n                this.endGrip.hide();\r\n            }\r\n            else {\r\n                this.startGrip.show();\r\n                this.endGrip.show();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scrollbar.prototype, \"animationDuration\", {\r\n        /**\r\n         * @return {PointerOrientation} Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"animationDuration\");\r\n        },\r\n        /**\r\n         * Duration in milliseconds of scrollbar animation (happens when user clicks on a background of a scrollbar)\r\n         * @default 0\r\n         * @param {number} value number\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"animationDuration\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scrollbar.prototype, \"animationEasing\", {\r\n        /**\r\n         * @return {Function}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"animationEasing\");\r\n        },\r\n        /**\r\n         * Animation easing function.\r\n         * @todo: review description and default\r\n         * @default $ease.cubicOut\r\n         * @param {Function}  value (value: number) => number\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"animationEasing\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Scrollbar;\r\n}(Container));\r\nexport { Scrollbar };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Scrollbar\"] = Scrollbar;\r\n//# sourceMappingURL=Scrollbar.js.map","/**\r\n * Slice module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../Container\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport { RadialGradient } from \"../rendering/fills/RadialGradient\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a wedged semi-circle - slice. Usually used for Pie/Donut charts.\r\n *\r\n * @see {@link ISliceEvents} for a list of available events\r\n * @see {@link ISliceAdapters} for a list of available Adapters\r\n */\r\nvar Slice = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Slice, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Slice() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"Slice\";\r\n        // Set defaults\r\n        _this.setPropertyValue(\"cornerRadius\", 0);\r\n        _this.setPropertyValue(\"startAngle\", 0);\r\n        _this.setPercentProperty(\"innerRadius\", 0);\r\n        _this.setPercentProperty(\"radius\", 0);\r\n        _this.setPropertyValue(\"arc\", 0);\r\n        _this.setPropertyValue(\"shiftRadius\", 0);\r\n        _this.strokeOpacity = 1;\r\n        _this.setPropertyValue(\"layout\", \"none\");\r\n        // Create a slice wedge element\r\n        _this.slice = _this.createChild(Sprite);\r\n        _this.slice.isMeasured = false;\r\n        _this._disposers.push(_this.slice);\r\n        //this.element.attr({ \"stroke-linejoin\": \"round\" });\r\n        //this.element.attr({ \"stroke-linecap\": \"round\" });\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Slice.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        this.slice.path = $path.arc(this.startAngle, this.arc, this.radius, this.pixelInnerRadius, this.radiusY, this.cornerRadius, this.innerCornerRadius);\r\n        this.slice.invalidate();\r\n        this.shiftRadius = this.shiftRadius;\r\n        if (this.realFill instanceof RadialGradient) {\r\n            this.updateGradient(this.realFill);\r\n        }\r\n        if (this.realStroke instanceof RadialGradient) {\r\n            this.updateGradient(this.realStroke);\r\n        }\r\n    };\r\n    Slice.prototype.updateGradient = function (gradient) {\r\n        gradient.element.attr({ \"gradientUnits\": \"userSpaceOnUse\" });\r\n        gradient.element.attr({ \"r\": this.radius });\r\n        gradient.cx = 0;\r\n        gradient.cy = 0;\r\n        gradient.element.attr({ radius: this.radius });\r\n    };\r\n    Object.defineProperty(Slice.prototype, \"bbox\", {\r\n        /**\r\n         * Returns bounding box (square) for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {IRectangle}\r\n         */\r\n        get: function () {\r\n            if (this.definedBBox) {\r\n                return this.definedBBox;\r\n            }\r\n            if (this.isMeasured) {\r\n                var innerRect = $math.getArcRect(this.startAngle, this.startAngle + this.arc, this.pixelInnerRadius);\r\n                var outerRect = $math.getArcRect(this.startAngle, this.startAngle + this.arc, this.radius);\r\n                return $math.getCommonRectangle([innerRect, outerRect]);\r\n            }\r\n            else {\r\n                return { x: 0, y: 0, width: 0, height: 0 };\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"startAngle\", {\r\n        /**\r\n         * @return {number} Angle (0-360)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * The angle at which left edge of the slice is drawn. (0-360)\r\n         *\r\n         * 0 is to the right of the center.\r\n         *\r\n         * @param {number}  value  Angle (0-360)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"arc\", {\r\n        /**\r\n         * @return {number} [description]\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"arc\");\r\n        },\r\n        /**\r\n         * [arc description]\r\n         *\r\n         * @todo Description\r\n         * @param {number} value [description]\r\n         */\r\n        set: function (value) {\r\n            if (!$type.isNumber(value)) {\r\n                value = 0;\r\n            }\r\n            this.setPropertyValue(\"arc\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"radius\", {\r\n        /**\r\n         * @return {number} Radius (px)\r\n         */\r\n        get: function () {\r\n            var radius = this.getPropertyValue(\"radius\");\r\n            if (!$type.isNumber(radius)) {\r\n                radius = 0;\r\n            }\r\n            return radius;\r\n        },\r\n        /**\r\n         * Radius of the slice in pixels.\r\n         *\r\n         * @param {number}  value  Radius (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"radius\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"radiusY\", {\r\n        /**\r\n         * @return {number} Vertical radius (0-1)\r\n         */\r\n        get: function () {\r\n            var value = this.getPropertyValue(\"radiusY\");\r\n            if (!$type.isNumber(value)) {\r\n                value = this.radius;\r\n            }\r\n            return value;\r\n        },\r\n        /**\r\n         * Vertical radius for creating skewed slices.\r\n         *\r\n         * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n         * the `radius`.\r\n         *\r\n         * @param {number} value Vertical radius (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"radiusY\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return {number | Percent} Radius (px or %)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius of the slice for creating cut out (donut) slices.\r\n         *\r\n         * @default 0\r\n         * @param {number | Percent}  value  Radius (px or %)\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"pixelInnerRadius\", {\r\n        /**\r\n         * @return {number} Radius px\r\n         */\r\n        get: function () {\r\n            return $utils.relativeToValue(this.innerRadius, this.radius);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"cornerRadius\", {\r\n        /**\r\n         * @return {number} Radius (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"cornerRadius\");\r\n        },\r\n        /**\r\n         * Radius of slice's outer corners in pixels.\r\n         *\r\n         * @default 0\r\n         * @param {number}  value  Radius (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"cornerRadius\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"innerCornerRadius\", {\r\n        /**\r\n         * @return {number} Radius (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerCornerRadius\");\r\n        },\r\n        /**\r\n         * Radius of slice's inner corners in pixels.\r\n         *\r\n         * @default 0\r\n         * @param {number}  value  Radius (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"innerCornerRadius\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"shiftRadius\", {\r\n        /**\r\n         * @return {number} [description]\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"shiftRadius\");\r\n        },\r\n        /**\r\n         * [shiftRadius description]\r\n         *\r\n         * 0-1\r\n         *\r\n         * @todo Description\r\n         * @param {number} value [description]\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"shiftRadius\", value);\r\n            this.dx = value * this.radius * this.ix;\r\n            this.dy = value * this.radiusY * this.iy;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"ix\", {\r\n        /**\r\n         * [ix description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @return {number} [description]\r\n         */\r\n        get: function () {\r\n            return $math.cos(this.middleAngle);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"iy\", {\r\n        /**\r\n         * [iy description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @return {number} [description]\r\n         */\r\n        get: function () {\r\n            if (this.radius > 0) {\r\n                return $math.sin(this.middleAngle);\r\n            }\r\n            else {\r\n                return $math.sin(this.middleAngle);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"middleAngle\", {\r\n        /**\r\n         * An angle of the slice's middle.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {number} Angle\r\n         */\r\n        get: function () {\r\n            return this.startAngle + this.arc / 2;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * X coordinate for the slice tooltip.\r\n     *\r\n     * @return {number} X\r\n     */\r\n    Slice.prototype.getTooltipX = function () {\r\n        var value = this.getPropertyValue(\"tooltipX\");\r\n        if (!$type.isNumber(value)) {\r\n            var innerRadius = $utils.relativeToValue(this.innerRadius, this.radius);\r\n            value = this.ix * (innerRadius + (this.radius - innerRadius) / 2);\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Y coordinate for the slice tooltip.\r\n     *\r\n     * @return {number} Y\r\n     */\r\n    Slice.prototype.getTooltipY = function () {\r\n        var value = this.getPropertyValue(\"tooltipY\");\r\n        if (!$type.isNumber(value)) {\r\n            var innerRadius = $utils.relativeToValue(this.innerRadius, this.radius);\r\n            value = this.iy * (innerRadius + (this.radius - innerRadius) / 2);\r\n        }\r\n        return value;\r\n    };\r\n    return Slice;\r\n}(Container));\r\nexport { Slice };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Slice\"] = Slice;\r\n//# sourceMappingURL=Slice.js.map","/**\r\n * Slider is a scrollbar with just one selection grip.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar } from \"../../core/elements/Scrollbar\";\r\nimport { registry } from \"../Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a slider - a version of scrollbar with just one grip.\r\n *\r\n * @see {@link ISliderEvents} for a list of available events\r\n * @see {@link ISliderAdapters} for a list of available Adapters\r\n */\r\nvar Slider = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Slider, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Slider() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Slider\";\r\n        _this.thumb.opacity = 0;\r\n        _this.thumb.interactionsEnabled = false;\r\n        _this.endGrip.opacity = 0;\r\n        _this.endGrip.interactionsEnabled = false;\r\n        _this.startGrip.events.on(\"drag\", function () {\r\n            _this.endGrip.x = _this.startGrip.x;\r\n            _this.endGrip.y = _this.startGrip.y;\r\n        });\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Slider.prototype, \"__end\", {\r\n        /**\r\n         * @return {number} [description]\r\n         */\r\n        get: function () {\r\n            return this._start;\r\n        },\r\n        set: function (value) {\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slider.prototype, \"end\", {\r\n        /**\r\n         * @return {number} [description]\r\n         */\r\n        get: function () {\r\n            return this._start;\r\n        },\r\n        /**\r\n         * Relative position (0-1) of the end grip.\r\n         *\r\n         * @param {number}  position  Position (0-1)\r\n         */\r\n        set: function (position) {\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slider.prototype, \"start\", {\r\n        /**\r\n         * @return {number} Position (0-1)\r\n         */\r\n        get: function () {\r\n            return this._start;\r\n        },\r\n        /**\r\n         * Relative position (0-1) of the start grip.\r\n         *\r\n         * @param {number}  position  Position (0-1)\r\n         */\r\n        set: function (position) {\r\n            if (!this._isBusy) {\r\n                this.__start = position;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Slider;\r\n}(Scrollbar));\r\nexport { Slider };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Slider\"] = Slider;\r\n//# sourceMappingURL=Slider.js.map","/**\r\n * A module that defines Text element used to indicate links.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { registry } from \"../Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a text element with a link.\r\n *\r\n * @see {@link ITextLinkEvents} for a list of available events\r\n * @see {@link ITextLinkAdapters} for a list of available Adapters\r\n */\r\nvar TextLink = /** @class */ (function (_super) {\r\n    tslib_1.__extends(TextLink, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function TextLink() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"TextLink\";\r\n        _this.selectable = true;\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.fill = interfaceColors.getFor(\"primaryButton\").brighten(0.3);\r\n        var hoverState = _this.states.create(\"hover\");\r\n        hoverState.properties.fill = interfaceColors.getFor(\"primaryButtonHover\").brighten(0.3);\r\n        var downState = _this.states.create(\"down\");\r\n        downState.properties.fill = interfaceColors.getFor(\"primaryButtonDown\").brighten(0.3);\r\n        _this.cursorOverStyle = MouseCursorStyle.pointer;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return TextLink;\r\n}(Label));\r\nexport { TextLink };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TextLink\"] = TextLink;\r\n//# sourceMappingURL=TextLink.js.map","/**\r\n * Provides functionality used to creating and showing tooltips (balloons).\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../Container\";\r\nimport { PointedRectangle } from \"./PointedRectangle\";\r\nimport { Label } from \"../elements/Label\";\r\nimport { Animation } from \"../utils/Animation\";\r\nimport { color } from \"../utils/Color\";\r\nimport { DropShadowFilter } from \"../rendering/filters/DropShadowFilter\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $ease from \"../utils/Ease\";\r\nimport * as $utils from \"../utils/Utils\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Tooltip displays text and/or multimedia information in a balloon over chart\r\n * area.\r\n * @see {@link ITooltipEvents} for a list of available events\r\n * @see {@link ITooltipAdapters} for a list of available Adapters\r\n */\r\nvar Tooltip = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Tooltip, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Tooltip() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Holds numeric boundary values. Calculated from the `boundingContainer`.\r\n         *\r\n         * @type {IRectangle}\r\n         */\r\n        _this._boundingRect = { x: -40000, y: -40000, width: 80000, height: 80000 };\r\n        /**\r\n         * Coordinates tooltip's pointer (stem) should point to.\r\n         *\r\n         * @type {IPoint}\r\n         */\r\n        _this._pointTo = { x: 0, y: 0 };\r\n        /**\r\n         * If set to `true` the pointer/stem of the Tooltip will not go outside\r\n         * Tooltip's width or height depending on pointer's orientation.\r\n         *\r\n         * @default false\r\n         * @type {boolean}\r\n         */\r\n        _this.fitPointerToBounds = false;\r\n        /**\r\n         * If tooltipOrientation is vertical, it can be drawn below or above point. We need to know this when solving overlapping\r\n         *\r\n         * @type \"up\" | \"down\"\r\n         */\r\n        _this._verticalOrientation = \"up\";\r\n        _this.className = \"Tooltip\";\r\n        _this.isMeasured = false;\r\n        _this.getFillFromObject = true;\r\n        _this.margin(5, 5, 5, 5);\r\n        _this.defaultState.transitionDuration = 1;\r\n        _this.hiddenState.transitionDuration = 1;\r\n        // Create chrome/background\r\n        var background = _this.background;\r\n        background.interactionsEnabled = false;\r\n        background.fillOpacity = 0.9;\r\n        background.strokeWidth = 1;\r\n        background.strokeOpacity = 1;\r\n        background.stroke = color(\"#ffffff\");\r\n        background.cornerRadius = 3;\r\n        background.pointerLength = 6;\r\n        background.pointerBaseWidth = 10;\r\n        var dropShadow = new DropShadowFilter();\r\n        dropShadow.dy = 1;\r\n        dropShadow.dx = 1;\r\n        dropShadow.opacity = 0.5;\r\n        background.filters.push(dropShadow);\r\n        _this.autoTextColor = true;\r\n        // Create text element\r\n        var label = _this.createChild(Label);\r\n        label.shouldClone = false;\r\n        _this.label = label;\r\n        label.padding(7, 12, 6, 12);\r\n        label.interactionsEnabled = false;\r\n        label.horizontalCenter = \"middle\";\r\n        label.fill = color(\"#ffffff\");\r\n        _this._disposers.push(label);\r\n        _this.label.events.on(\"sizechanged\", _this.drawBackground, _this);\r\n        _this.label.zIndex = 1; // @todo remove this line when bg sorting is solved\r\n        // Set defaults\r\n        _this.pointerOrientation = \"vertical\";\r\n        _this.animationDuration = 0;\r\n        _this.animationEasing = $ease.cubicOut;\r\n        // Set accessibility options\r\n        _this.role = \"tooltip\";\r\n        _this.visible = false;\r\n        _this.opacity = 0;\r\n        _this.x = 0;\r\n        _this.y = 0;\r\n        _this.events.on(\"visibilitychanged\", _this.handleVisibility, _this);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Tooltip.prototype.handleVisibility = function () {\r\n        if (this.visible) {\r\n            this.label.invalidate();\r\n        }\r\n    };\r\n    Object.defineProperty(Tooltip.prototype, \"getStrokeFromObject\", {\r\n        /**\r\n         * Specifies if tooltip background should get stroke color from the sprite it is pointing to.\r\n         *\r\n         * @return {boolean}\r\n         * @default false\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"getStrokeFromObject\");\r\n        },\r\n        /**\r\n         * Specifies if tooltip background should get stroke color from the sprite it is pointing to.\r\n         *\r\n         * @param {value} value boolean\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"getStrokeFromObject\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"autoTextColor\", {\r\n        /**\r\n         * @return {boolean}\r\n         * @default true\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"autoTextColor\");\r\n        },\r\n        /**\r\n         * Specifies if text color should be chosen automatically for a better\r\n         * readability.\r\n         *\r\n         * IMPORTANT: this feature is generally ignored, if `getFillFromObject = false`.\r\n         *\r\n         * If inheriting of `fill` color from object tooltip is displayed for is\r\n         * disabled, this feature will not work. If you are explicitly setting a\r\n         * color for tooltip background, you may set a color for its label as well\r\n         * using `tooltip.label.fill` property.\r\n         *\r\n         *\r\n         * @param {value} value boolean\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"autoTextColor\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"getFillFromObject\", {\r\n        /**\r\n         * Specifies if tooltip background should get fill color from the sprite it is pointing to.\r\n         *\r\n         * @return {boolean}\r\n         * @default true\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"getFillFromObject\");\r\n        },\r\n        /**\r\n         * @param {value} value boolean\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"getFillFromObject\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates and returns a background element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {PointedRectangle} Background\r\n     */\r\n    Tooltip.prototype.createBackground = function () {\r\n        return new PointedRectangle();\r\n    };\r\n    Object.defineProperty(Tooltip.prototype, \"pointerOrientation\", {\r\n        /**\r\n         * @return {PointerOrientation} Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"pointerOrientation\");\r\n        },\r\n        /**\r\n         * Pointer orientation: \"horizontal\" or \"vertical\".\r\n         *\r\n         * @default \"vertical\"\r\n         * @param {PointerOrientation}  value  Orientation\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"pointerOrientation\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"animationDuration\", {\r\n        /**\r\n         * @return {PointerOrientation} Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"animationDuration\");\r\n        },\r\n        /**\r\n         * Duration in milliseconds for the animation to take place when the tooltip\r\n         * is moving from one place to another.\r\n         *\r\n         * @default 0\r\n         * @param {number}  value  number\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"animationDuration\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"animationEasing\", {\r\n        /**\r\n         * @return {Function}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"animationEasing\");\r\n        },\r\n        /**\r\n         * Tooltip animation (moving from one place to another) easing function.\r\n         *\r\n         * @default $ease.cubicOut\r\n         * @param {Function}  value (value: number) => number\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"animationEasing\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"html\", {\r\n        /**\r\n         * @return {string} HTML content\r\n         */\r\n        get: function () {\r\n            return this.label.html;\r\n        },\r\n        /**\r\n         * HTML content for the Tooltip.\r\n         *\r\n         * Provided value will be used as is, without applying any further\r\n         * formatting to it.\r\n         *\r\n         * @param {string}  value  HTML content\r\n         */\r\n        set: function (value) {\r\n            if (this.label.html != value) {\r\n                this.label.html = value;\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"text\", {\r\n        /**\r\n         * @return {string} SVG text\r\n         */\r\n        get: function () {\r\n            return this.label.text;\r\n        },\r\n        /**\r\n         * SVG text content for the Tooltip.\r\n         *\r\n         * Text can have a number of formatting options supported by\r\n         * [[TextFormatter]].\r\n         *\r\n         * @param {string}  value  SVG text\r\n         */\r\n        set: function (value) {\r\n            if (this.label.text != value) {\r\n                this.label.text = value;\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates the Tooltip.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Tooltip.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var label = this.label;\r\n        if (label.invalid) {\r\n            label.validate();\r\n        }\r\n        var x = this._pointTo.x;\r\n        var y = this._pointTo.y;\r\n        var boundingRect = this._boundingRect;\r\n        var textW = label.measuredWidth;\r\n        var textH = label.measuredHeight;\r\n        var pointerLength = this.background.pointerLength;\r\n        var textX;\r\n        var textY;\r\n        // try to handle if text is wider than br\r\n        if (textW > boundingRect.width) {\r\n            var p0 = $utils.spritePointToDocument({ x: boundingRect.x, y: boundingRect.y }, this.parent);\r\n            var p1 = $utils.spritePointToDocument({ x: boundingRect.x + boundingRect.width, y: boundingRect.y + boundingRect.height }, this.parent);\r\n            var documentWidth = document.body.offsetWidth;\r\n            var documentHeight = document.body.offsetHeight;\r\n            if (p1.x > documentWidth / 2) {\r\n                boundingRect.x = boundingRect.width - textW;\r\n            }\r\n            else {\r\n                boundingRect.width = boundingRect.x + textW;\r\n            }\r\n        }\r\n        // horizontal\r\n        if (this.pointerOrientation == \"horizontal\") {\r\n            textY = -textH / 2;\r\n            if (x > boundingRect.x + boundingRect.width / 2) {\r\n                textX = -textW / 2 - pointerLength;\r\n            }\r\n            else {\r\n                textX = textW / 2 + pointerLength;\r\n            }\r\n        }\r\n        // vertical pointer\r\n        else {\r\n            textX = $math.fitToRange(0, boundingRect.x - x + textW / 2, boundingRect.x - x + boundingRect.width - textW / 2);\r\n            if (y > boundingRect.y + textH + pointerLength) {\r\n                textY = -textH - pointerLength;\r\n                this._verticalOrientation = \"up\";\r\n            }\r\n            else {\r\n                textY = pointerLength;\r\n                this._verticalOrientation = \"down\";\r\n            }\r\n        }\r\n        textY = $math.fitToRange(textY, boundingRect.y - y, boundingRect.y + boundingRect.height - textH - y);\r\n        label.x = textX;\r\n        label.y = textY;\r\n        this.drawBackground();\r\n    };\r\n    /**\r\n     * Overrides functionality from the superclass.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Tooltip.prototype.updateBackground = function () {\r\n        this.group.addToBack(this.background.group);\r\n    };\r\n    /**\r\n     * Draws Tooltip background (chrome, background and pointer/stem).\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Tooltip.prototype.drawBackground = function () {\r\n        var label = this.label;\r\n        var background = this.background;\r\n        var textWidth = label.measuredWidth;\r\n        var textHeight = label.measuredHeight;\r\n        var boundingRect = this._boundingRect;\r\n        var bgWidth = textWidth;\r\n        var bgX = label.pixelX - textWidth / 2;\r\n        var bgHeight = textHeight;\r\n        var bgY = label.pixelY;\r\n        var x = this._pointTo.x;\r\n        var y = this._pointTo.y;\r\n        var boundX1 = boundingRect.x - x;\r\n        var boundX2 = boundX1 + boundingRect.width;\r\n        var boundY1 = boundingRect.y - y;\r\n        var boundY2 = boundY1 + boundingRect.height;\r\n        background.x = bgX;\r\n        background.y = bgY;\r\n        background.width = bgWidth;\r\n        background.height = bgHeight;\r\n        if (this.fitPointerToBounds) {\r\n            background.pointerX = $math.fitToRange(-background.x, boundX1 - background.x, boundX2 - background.x);\r\n            background.pointerY = $math.fitToRange(-background.y, boundY1 - background.y, boundY2 - background.y);\r\n        }\r\n        else {\r\n            background.pointerX = -background.x;\r\n            background.pointerY = -background.y;\r\n        }\r\n        background.validate();\r\n    };\r\n    /**\r\n     * Set nes tooltip's anchor point and moves whole tooltip.\r\n     *\r\n     * @param {number}  x  X coordinate\r\n     * @param {number}  y  Y coordinate\r\n     */\r\n    Tooltip.prototype.pointTo = function (point, instantly) {\r\n        if (this._pointTo.x != point.x || this._pointTo.y != point.y) {\r\n            this._pointTo = point;\r\n            this.invalidate();\r\n            // this helps to avoid strange animation from nowhere on initial show or when balloon was hidden already\r\n            if (!this.visible || instantly) {\r\n                this.moveTo(this._pointTo);\r\n                if (this._animation) {\r\n                    this._animation.kill();\r\n                }\r\n            }\r\n            else {\r\n                // helps to avoid flicker on top/left corner\r\n                if (this.pixelX == 0 && this.pixelY == 0) {\r\n                    this.moveTo(this._pointTo);\r\n                }\r\n                else {\r\n                    if (this._animation) {\r\n                        this._animation.kill();\r\n                    }\r\n                    this._animation = new Animation(this, [{ property: \"x\", to: point.x, from: this.pixelX }, { property: \"y\", to: point.y, from: this.pixelY }], this.animationDuration, this.animationEasing).start();\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets numeric boundaries Tooltip needs to obey (so it does not go outside\r\n     * specific area).\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IRectangle} rectangle Boundary rectangle\r\n     */\r\n    Tooltip.prototype.setBounds = function (rectangle) {\r\n        var oldRect = this._boundingRect;\r\n        if (oldRect.x != rectangle.x || oldRect.y != rectangle.y || oldRect.width != rectangle.width || oldRect.height != rectangle.height) {\r\n            this._boundingRect = rectangle;\r\n            this.invalidate();\r\n        }\r\n    };\r\n    Object.defineProperty(Tooltip.prototype, \"boundingContainer\", {\r\n        /**\r\n         * Sets a [[Container]] instance to be used when calculating numeric\r\n         * boundaries for the Tooltip.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {Container}  container  Boundary container\r\n         */\r\n        set: function (container) {\r\n            this._boundingContainer = container;\r\n            // TODO remove closures ?\r\n            container.events.on(\"sizechanged\", this.updateBounds, this);\r\n            container.events.on(\"positionchanged\", this.updateBounds, this);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates numeric boundaries for the Tooltip, based on the\r\n     * `boundingCountrainer`.\r\n     */\r\n    Tooltip.prototype.updateBounds = function () {\r\n        var boundingContainer = this._boundingContainer;\r\n        // to global\r\n        var rect = $utils.spriteRectToSvg({\r\n            x: boundingContainer.pixelX,\r\n            y: boundingContainer.pixelY,\r\n            width: boundingContainer.maxWidth,\r\n            height: boundingContainer.maxHeight\r\n        }, boundingContainer);\r\n        this.setBounds(rect);\r\n    };\r\n    Object.defineProperty(Tooltip.prototype, \"verticalOrientation\", {\r\n        /**\r\n         * If tooltipOrientation is vertical, it can be drawn below or above point.\r\n         * We need to know this when solving overlapping.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return \"up\" | \"down\"\r\n         */\r\n        get: function () {\r\n            return this._verticalOrientation;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"tooltip\", {\r\n        /**\r\n         * To avoid stackoverflow\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            return undefined;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies properties and other attributes.\r\n     *\r\n     * @param {Tooltip}  source  Source\r\n     */\r\n    Tooltip.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.label.copyFrom(source.label);\r\n    };\r\n    return Tooltip;\r\n}(Container));\r\nexport { Tooltip };\r\n//# sourceMappingURL=Tooltip.js.map","/**\r\n * Functionality for drawing a trapezoid.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $path from \"../rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to draw a Trapezoid.\r\n *\r\n * @see {@link ITrapezoidEvents} for a list of available events\r\n * @see {@link ITrapezoidAdapters} for a list of available Adapters\r\n */\r\nvar Trapezoid = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Trapezoid, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Trapezoid() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Trapezoid\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.topSide = percent(100);\r\n        _this.bottomSide = percent(100);\r\n        _this.leftSide = percent(100);\r\n        _this.rightSide = percent(100);\r\n        _this.isMeasured = false; // todo: add measureElement\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Trapezoid.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var w = this.pixelWidth;\r\n        var h = this.pixelHeight;\r\n        var ts = $utils.relativeToValue(this.topSide, w);\r\n        var bs = $utils.relativeToValue(this.bottomSide, w);\r\n        var ls = $utils.relativeToValue(this.leftSide, h);\r\n        var rs = $utils.relativeToValue(this.rightSide, h);\r\n        // 1----2\r\n        // |    |\r\n        // 4----3\r\n        var x0 = (w - ts) / 2;\r\n        var y0 = (h - ls) / 2;\r\n        var x1 = w - (w - ts) / 2;\r\n        var y1 = (h - rs) / 2;\r\n        var x2 = w - (w - bs) / 2;\r\n        var y2 = h - (h - rs) / 2;\r\n        var x3 = (w - bs) / 2;\r\n        var y3 = h - (h - ls) / 2;\r\n        var mt = \"\";\r\n        var mr = \"\";\r\n        var mb = \"\";\r\n        var ml = \"\";\r\n        if ($type.hasValue(this.horizontalNeck)) {\r\n            var hn = this.horizontalNeck.value;\r\n            mt = $path.lineTo({ x: w * hn, y: Math.max(y0, y1) });\r\n            mb = $path.lineTo({ x: w * hn, y: Math.min(y2, y3) });\r\n        }\r\n        if ($type.hasValue(this.verticalNeck)) {\r\n            var vn = this.verticalNeck.value;\r\n            mr = $path.lineTo({ x: Math.min(x1, x2), y: h * vn });\r\n            ml = $path.lineTo({ x: Math.max(x0, x3), y: h * vn });\r\n        }\r\n        var path = $path.moveTo({ x: x0, y: y0 })\r\n            + mt\r\n            + $path.lineTo({ x: x1, y: y1 })\r\n            + mr\r\n            + $path.lineTo({ x: x2, y: y2 })\r\n            + mb\r\n            + $path.lineTo({ x: x3, y: y3 })\r\n            + ml;\r\n        this.path = path;\r\n    };\r\n    Object.defineProperty(Trapezoid.prototype, \"topSide\", {\r\n        /**\r\n         * @return {number} Width\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"topSide\");\r\n        },\r\n        /**\r\n         * Wdith of the top side. Absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @default Percent(100)\r\n         * @param {number | Percent}  value  Width\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"topSide\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Trapezoid.prototype, \"bottomSide\", {\r\n        /**\r\n         * @return {number} Width\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"bottomSide\");\r\n        },\r\n        /**\r\n         * Wdith of the bottom side. Absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @default Percent(100)\r\n         * @param {number | Percent}  value  Width\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"bottomSide\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Trapezoid.prototype, \"leftSide\", {\r\n        /**\r\n         * @return {number} Height\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"leftSide\");\r\n        },\r\n        /**\r\n         * Height of the left side. Absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @default Percent(100)\r\n         * @param {number | Percent}  value  Height\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"leftSide\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Trapezoid.prototype, \"rightSide\", {\r\n        /**\r\n         * @return {number} Height\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"rightSide\");\r\n        },\r\n        /**\r\n         * Height of the right side. Absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @default Percent(100)\r\n         * @param {number | Percent}  value  Height\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"rightSide\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Trapezoid.prototype, \"horizontalNeck\", {\r\n        /**\r\n         * @return {Percent} Horizontal neck position\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"horizontalNeck\");\r\n        },\r\n        /**\r\n         * A relative vertical position of the \"neck\". If the top and bottom sides\r\n         * are of different width, and `horizontalNeck` is set, a choke point\r\n         * will be created at that position, creating a funnel shape.\r\n         *\r\n         * @param {Percent}  value  Horizontal neck position\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"horizontalNeck\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Trapezoid.prototype, \"verticalNeck\", {\r\n        /**\r\n         * @return {Percent} Vertical neck position\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"verticalNeck\");\r\n        },\r\n        /**\r\n         * A relative horizontal position of the \"neck\". If the left and right sides\r\n         * are of different height, and `verticalNeck` is set, a choke point\r\n         * will be created at that position, creating a funnel shape.\r\n         *\r\n         * @param {Percent}  value  Vertical neck position\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"verticalNeck\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Trapezoid;\r\n}(Sprite));\r\nexport { Trapezoid };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Trapezoid\"] = Trapezoid;\r\n//# sourceMappingURL=Trapezoid.js.map","/**\r\n * Functionality for drawing triangles.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to draw a triangle.\r\n *\r\n * @see {@link ITriangleEvents} for a list of available events\r\n * @see {@link ITriangleAdapters} for a list of available Adapters\r\n */\r\nvar Triangle = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Triangle, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Triangle() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Triangle\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.direction = \"top\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Triangle.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var w = this.pixelWidth;\r\n        var h = this.pixelHeight;\r\n        var path;\r\n        switch (this.direction) {\r\n            case \"right\":\r\n                path = $path.moveTo({ x: 0, y: 0 })\r\n                    + $path.lineTo({ x: w, y: h / 2 })\r\n                    + $path.lineTo({ x: 0, y: h })\r\n                    + $path.closePath();\r\n                break;\r\n            case \"left\":\r\n                path = $path.moveTo({ x: w, y: 0 })\r\n                    + $path.lineTo({ x: 0, y: h / 2 })\r\n                    + $path.lineTo({ x: w, y: h })\r\n                    + $path.closePath();\r\n                break;\r\n            case \"bottom\":\r\n                path = $path.moveTo({ x: 0, y: 0 })\r\n                    + $path.lineTo({ x: w, y: 0 })\r\n                    + $path.lineTo({ x: w / 2, y: h })\r\n                    + $path.closePath();\r\n                break;\r\n            case \"top\":\r\n                path = $path.moveTo({ x: w / 2, y: 0 })\r\n                    + $path.lineTo({ x: w, y: h })\r\n                    + $path.lineTo({ x: 0, y: h })\r\n                    + $path.closePath();\r\n                break;\r\n        }\r\n        this.path = path;\r\n    };\r\n    Object.defineProperty(Triangle.prototype, \"direction\", {\r\n        /**\r\n         * Returns direction of a triangle\r\n         *\r\n         * @return {\"left\" | \"right\" | \"top\" | \"bottom\"} value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"direction\");\r\n        },\r\n        /**\r\n         * Sets direction of a triangle\r\n         *\r\n         * @param {\"left\" | \"right\" | \"top\" | \"bottom\"} value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"direction\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Triangle;\r\n}(Sprite));\r\nexport { Triangle };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Triangle\"] = Triangle;\r\n//# sourceMappingURL=Triangle.js.map","/**\r\n * Functionality for drawing waved circles.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Circle } from \"./Circle\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a waved circle.\r\n *\r\n * @see {@link IWavedCircleEvents} for a list of available events\r\n * @see {@link IWavedCircleAdapters} for a list of available Adapters\r\n */\r\nvar WavedCircle = /** @class */ (function (_super) {\r\n    tslib_1.__extends(WavedCircle, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function WavedCircle() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"WavedCircle\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.waveLength = 16;\r\n        _this.waveHeight = 4;\r\n        _this.fill = undefined;\r\n        _this.fillOpacity = 0;\r\n        _this.tension = 0.8;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the waved line.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    WavedCircle.prototype.draw = function () {\r\n        var path = \"\";\r\n        var radius = this.pixelRadius;\r\n        if (radius > 0) {\r\n            var points = this.getPoints(radius);\r\n            path = $path.moveTo(points[0]) + new $smoothing.Tension(this.tension, this.tension).smooth(points);\r\n        }\r\n        var innerRadius = this.pixelInnerRadius;\r\n        if (innerRadius > 0) {\r\n            var points = this.getPoints(innerRadius);\r\n            points.reverse();\r\n            path += $path.moveTo(points[0]) + new $smoothing.Tension(this.tension, this.tension).smooth(points);\r\n        }\r\n        this.path = path;\r\n    };\r\n    /**\r\n     * Returns points that circle consists of.\r\n     *\r\n     * @param  {number}    radius  Radius (px)\r\n     * @return {IPoint[]}          Points\r\n     */\r\n    WavedCircle.prototype.getPoints = function (radius) {\r\n        var circleLength = radius * Math.PI * 2;\r\n        var halfWaveHeight = this.waveHeight / 2;\r\n        var waveLength = circleLength / Math.round(circleLength / this.waveLength);\r\n        var halfWaveLength = waveLength / 2;\r\n        var points = [];\r\n        var count = circleLength / waveLength;\r\n        for (var i = 0; i <= count; i++) {\r\n            var angle1 = (i * waveLength) / circleLength * 360;\r\n            var angle2 = (i * waveLength + halfWaveLength) / circleLength * 360;\r\n            points.push({ x: (radius - halfWaveHeight) * $math.cos(angle1), y: (radius - halfWaveHeight) * $math.sin(angle1) });\r\n            points.push({ x: (radius + halfWaveHeight) * $math.cos(angle2), y: (radius + halfWaveHeight) * $math.sin(angle2) });\r\n        }\r\n        points.pop();\r\n        return points;\r\n    };\r\n    Object.defineProperty(WavedCircle.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return {number} Inner radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius of the circle in pixels (absolute) or [[Percent]] (relative).\r\n         *\r\n         * @param {number | Percent}  value  Inner radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedCircle.prototype, \"pixelInnerRadius\", {\r\n        /**\r\n         * Calculated inner radius of the circle in pixels.\r\n         *\r\n         * @readonly\r\n         * @return {number} Inner radius (px)\r\n         */\r\n        get: function () {\r\n            return $utils.relativeToValue(this.innerRadius, $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedCircle.prototype, \"waveLength\", {\r\n        /**\r\n         * @return {number} Wave length (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"waveLength\");\r\n        },\r\n        /**\r\n         * Wave length in pixels.\r\n         *\r\n         * @default 16\r\n         * @param {number}  value  Wave length (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"waveLength\", value);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedCircle.prototype, \"waveHeight\", {\r\n        /**\r\n         * @return {number} Wave height (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"waveHeight\");\r\n        },\r\n        /**\r\n         * Wave height in pixels.\r\n         *\r\n         * @default 4\r\n         * @param {number}  value  Wave height (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"waveHeight\", value);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedCircle.prototype, \"tension\", {\r\n        /**\r\n         * @return {number} Tension\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tension\");\r\n        },\r\n        /**\r\n         * Tension of the wave.\r\n         *\r\n         * @default 0.8\r\n         * @param {number}  value  Tension\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tension\", value);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return WavedCircle;\r\n}(Circle));\r\nexport { WavedCircle };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"WavedCircle\"] = WavedCircle;\r\n//# sourceMappingURL=WavedCircle.js.map","/**\r\n * Functionality for drawing waved lines.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line } from \"./Line\";\r\nimport { color } from \"../utils/Color\";\r\nimport { wavedLine } from \"../rendering/Smoothing\";\r\nimport * as $path from \"../rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IWavedLineEvents} for a list of available events\r\n * @see {@link IWavedLineAdapters} for a list of available Adapters\r\n */\r\nvar WavedLine = /** @class */ (function (_super) {\r\n    tslib_1.__extends(WavedLine, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function WavedLine() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"WavedLine\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.waveLength = 16;\r\n        _this.waveHeight = 4;\r\n        _this.tension = 0.8;\r\n        _this.pixelPerfect = false;\r\n        _this.fill = color();\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the waved line.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    WavedLine.prototype.draw = function () {\r\n        //super.draw();\r\n        var p1 = { x: this.x1, y: this.y1 };\r\n        var p2 = { x: this.x2, y: this.y2 };\r\n        this.path = $path.moveTo(p1) + wavedLine(p1, p2, this.waveLength, this.waveHeight, this.tension, true);\r\n    };\r\n    Object.defineProperty(WavedLine.prototype, \"waveLength\", {\r\n        /**\r\n         * @return {number} Wave length (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"waveLength\");\r\n        },\r\n        /**\r\n         * Wave length in pixels.\r\n         *\r\n         * @default 16\r\n         * @param {number}  value  Wave length (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"waveLength\", value);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedLine.prototype, \"waveHeight\", {\r\n        /**\r\n         * @return {number} Wave height (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"waveHeight\");\r\n        },\r\n        /**\r\n         * Wave height in pixels.\r\n         *\r\n         * @default 4\r\n         * @param {number}  value  Wave height (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"waveHeight\", value);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedLine.prototype, \"tension\", {\r\n        /**\r\n         * @return {number} Tension\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tension\");\r\n        },\r\n        /**\r\n         * Tension of the wave.\r\n         *\r\n         * @default 0.8\r\n         * @param {number}  value  Tension\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tension\", value);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return WavedLine;\r\n}(Line));\r\nexport { WavedLine };\r\n//# sourceMappingURL=WavedLine.js.map","/**\r\n * Functionality for drawing rectangles with waved edges.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Rectangle } from \"./Rectangle\";\r\nimport { wavedLine } from \"../rendering/Smoothing\";\r\nimport * as $path from \"../rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a rectangle with waved edges.\r\n *\r\n * @see {@link IWavedRectangleEvents} for a list of available events\r\n * @see {@link IWavedRectangleAdapters} for a list of available Adapters\r\n */\r\nvar WavedRectangle = /** @class */ (function (_super) {\r\n    tslib_1.__extends(WavedRectangle, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function WavedRectangle() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Top waved?\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this._twaved = true;\r\n        /**\r\n         * Right side waved?\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this._rwaved = true;\r\n        /**\r\n         * Bottom waved?\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this._bwaved = true;\r\n        /**\r\n         * Left side waved?\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this._lwaved = true;\r\n        _this.className = \"WavedRectangle\";\r\n        // Add path element\r\n        _this.element = _this.paper.add(\"path\");\r\n        // Set defaults\r\n        _this.waveLength = 16;\r\n        _this.waveHeight = 4;\r\n        _this.tension = 0.8;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the waved rectangle.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    WavedRectangle.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var w = this.pixelWidth;\r\n        var h = this._pixelHeight;\r\n        if (w > 0 && h > 0) {\r\n            var p1 = { x: 0, y: 0 };\r\n            var p2 = { x: w, y: 0 };\r\n            var p3 = { x: w, y: h };\r\n            var p4 = { x: 0, y: h };\r\n            var waveLength = this.waveLength;\r\n            var waveHeight = this.waveHeight;\r\n            var td = \"\";\r\n            var rd = \"\";\r\n            var bd = \"\";\r\n            var ld = \"\";\r\n            if (this._twaved) {\r\n                td = wavedLine(p1, p2, waveLength, waveHeight, this.tension, true);\r\n            }\r\n            if (this._rwaved) {\r\n                ld = wavedLine(p2, p3, waveLength, waveHeight, this.tension, true);\r\n            }\r\n            if (this._bwaved) {\r\n                bd = wavedLine(p3, p4, waveLength, waveHeight, this.tension, true);\r\n            }\r\n            if (this._rwaved) {\r\n                rd = wavedLine(p4, p1, waveLength, waveHeight, this.tension, true);\r\n            }\r\n            this.path = $path.moveTo(p1) + td + $path.lineTo(p2) + ld + $path.lineTo(p3) + bd + $path.lineTo(p4) + rd + \"z\";\r\n        }\r\n    };\r\n    Object.defineProperty(WavedRectangle.prototype, \"waveLength\", {\r\n        /**\r\n         * @return {number} Wave length (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"waveLength\");\r\n        },\r\n        /**\r\n         * Wave length in pixels.\r\n         *\r\n         * @default 16\r\n         * @param {number}  value  Wave length (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"waveLength\", value);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedRectangle.prototype, \"waveHeight\", {\r\n        /**\r\n         * @return {number} Wave height (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"waveHeight\");\r\n        },\r\n        /**\r\n         * Wave height in pixels.\r\n         *\r\n         * @default 4\r\n         * @param {number}  value  Wave height (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"waveHeight\", value);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets which side should be waved or not. If particular side is set to\r\n     * `false`, a straight line will be drawn on that side.\r\n     *\r\n     * @param {boolean}  top     Top waved?\r\n     * @param {boolean}  right   Right side waved?\r\n     * @param {boolean}  bottom  Bottom Waved?\r\n     * @param {boolean}  left    Left side waved?\r\n     */\r\n    WavedRectangle.prototype.setWavedSides = function (top, right, bottom, left) {\r\n        this._twaved = top;\r\n        this._lwaved = right;\r\n        this._bwaved = bottom;\r\n        this._rwaved = left;\r\n    };\r\n    Object.defineProperty(WavedRectangle.prototype, \"tension\", {\r\n        /**\r\n         * @return {number} Tension\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tension\");\r\n        },\r\n        /**\r\n         * Tension of the wave.\r\n         *\r\n         * @default 0.8\r\n         * @param {number}  value  Tension\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tension\", value);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return WavedRectangle;\r\n}(Rectangle));\r\nexport { WavedRectangle };\r\n//# sourceMappingURL=WavedRectangle.js.map","/**\r\n * Zoom out button functionality.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Button } from \"./Button\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a zoom out button.\r\n *\r\n * @see {@link IZoomOutButtonEvents} for a list of available events\r\n * @see {@link IZoomOutButtonAdapters} for a list of available Adapters\r\n */\r\nvar ZoomOutButton = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ZoomOutButton, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ZoomOutButton() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"ZoomOutButton\";\r\n        _this.padding(9, 9, 9, 9);\r\n        //this.dx = - 5;\r\n        //this.dy = 5;\r\n        _this.showSystemTooltip = true;\r\n        var interfaceColors = new InterfaceColorSet();\r\n        var background = _this.background;\r\n        background.cornerRadius(20, 20, 20, 20);\r\n        background.fill = interfaceColors.getFor(\"primaryButton\");\r\n        background.stroke = interfaceColors.getFor(\"primaryButtonStroke\");\r\n        background.strokeOpacity = 0;\r\n        background.states.getKey(\"hover\").properties.fill = interfaceColors.getFor(\"primaryButtonHover\");\r\n        background.states.getKey(\"down\").properties.fill = interfaceColors.getFor(\"primaryButtonActive\");\r\n        // Create an icon\r\n        var icon = new Sprite();\r\n        icon.element = _this.paper.add(\"path\");\r\n        var path = $path.moveTo({ x: 0, y: 0 });\r\n        path += $path.lineTo({ x: 11, y: 0 });\r\n        icon.path = path;\r\n        icon.pixelPerfect = true;\r\n        icon.padding(8, 3, 8, 3);\r\n        icon.stroke = interfaceColors.getFor(\"primaryButtonText\");\r\n        _this.icon = icon;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    ZoomOutButton.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Zoom Out\");\r\n        }\r\n    };\r\n    return ZoomOutButton;\r\n}(Button));\r\nexport { ZoomOutButton };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ZoomOutButton\"] = ZoomOutButton;\r\n//# sourceMappingURL=ZoomOutButton.js.map","/**\r\n * Export module.\r\n *\r\n * Parts of Export functionality rely on the following third party libraries:\r\n *\r\n * [canvg.js](https://github.com/canvg/canvg)\r\n * Copyright (c) Gabe Lerner\r\n * Licensed under [MIT](https://github.com/canvg/canvg/blob/master/LICENSE)\r\n *\r\n * [pdfmake](http://pdfmake.org/)\r\n * Copyright (c) 2014 bpampuch\r\n * Licensed under [MIT](https://github.com/bpampuch/pdfmake/blob/master/LICENSE)\r\n *\r\n * [SheetJS Community Edition](https://github.com/sheetjs/js-xlsx)\r\n * Licensed under [Apache License 2.0](https://github.com/SheetJS/js-xlsx/blob/master/LICENSE)\r\n *\r\n * [JSZip](http://stuartk.com/jszip)\r\n * Copyright (c) Stuart Knightley\r\n * Dual licenced under the [MIT license or GPLv3](https://raw.githubusercontent.com/Stuk/jszip/master/LICENSE.markdown).\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ExportMenu } from \"./ExportMenu\";\r\nimport { Adapter } from \"../utils/Adapter\";\r\nimport { Modal } from \"../elements/Modal\";\r\nimport { List } from \"../utils/List\";\r\nimport { Dictionary } from \"../utils/Dictionary\";\r\nimport { DateFormatter } from \"../formatters/DateFormatter\";\r\nimport { DurationFormatter } from \"../formatters/DurationFormatter\";\r\nimport { Language } from \"../utils/Language\";\r\nimport { Validatable } from \"../utils/Validatable\";\r\nimport { color } from \"../utils/Color\";\r\nimport { registry } from \"../Registry\";\r\nimport { options } from \"../Options\";\r\nimport { StyleRule } from \"../utils/DOM\";\r\nimport * as $object from \"../utils/Object\";\r\nimport * as $net from \"../utils/Net\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $array from \"../utils/Array\";\r\n// TODO better parsing\r\nvar fontFamilySrcRegexp = /src: ([^;]+);/;\r\n// TODO better checks\r\nfunction supportsBlobUri() {\r\n    return window.navigator.msSaveOrOpenBlob != null;\r\n}\r\n// TODO move into utils or something ?\r\nfunction blobToDataUri(blob) {\r\n    return new Promise(function (resolve, reject) {\r\n        // TODO handle abort ?\r\n        var f = new FileReader();\r\n        f.onload = function (e) { resolve(f.result); };\r\n        f.onerror = function (e) { reject(e); };\r\n        f.readAsDataURL(blob);\r\n    });\r\n}\r\n// This loads a stylesheet by URL and then calls the function with it\r\n// TODO this should be moved into utils or something\r\nfunction loadStylesheet(url, f) {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        var response, s;\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, $net.load(url)];\r\n                case 1:\r\n                    response = _a.sent();\r\n                    s = document.createElement(\"style\");\r\n                    s.textContent = response.response;\r\n                    document.head.appendChild(s);\r\n                    _a.label = 2;\r\n                case 2:\r\n                    _a.trys.push([2, , 4, 5]);\r\n                    return [4 /*yield*/, f(s.sheet)];\r\n                case 3: return [2 /*return*/, _a.sent()];\r\n                case 4:\r\n                    document.head.removeChild(s);\r\n                    return [7 /*endfinally*/];\r\n                case 5: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n// This calls a function for each CSSRule inside of a CSSStyleSheet.\r\n// If the CSSStyleSheet has any @import, then it will recursively call the function for those CSSRules too.\r\n// TODO this should be moved into utils or something\r\nfunction eachStylesheet(topUrl, sheet, f) {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        var promises, _loop_1, i;\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    promises = [];\r\n                    _loop_1 = function (i) {\r\n                        var rule = sheet.cssRules[i];\r\n                        if (rule.type === CSSRule.IMPORT_RULE) {\r\n                            var url_1 = rule.href;\r\n                            if (url_1) {\r\n                                url_1 = $utils.joinUrl(topUrl, url_1);\r\n                                promises.push(loadStylesheet(url_1, function (sheet) { return eachStylesheet(url_1, sheet, f); }));\r\n                            }\r\n                        }\r\n                        else {\r\n                            f(topUrl, rule);\r\n                        }\r\n                    };\r\n                    for (i = 0; i < sheet.cssRules.length; i++) {\r\n                        _loop_1(i);\r\n                    }\r\n                    if (!promises.length) return [3 /*break*/, 2];\r\n                    return [4 /*yield*/, Promise.all(promises)];\r\n                case 1:\r\n                    _a.sent();\r\n                    _a.label = 2;\r\n                case 2: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n// This calls a function for each CSSRule for all of the stylesheets in the page.\r\n// If the CSSStyleSheet has any @import, then it will recursively call the function for those CSSRules too.\r\n// TODO this should be moved into utils or something\r\nfunction eachStylesheets(f) {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, Promise.all($array.map(document.styleSheets, function (sheet) {\r\n                        var url = sheet.href;\r\n                        if (url == null) {\r\n                            return eachStylesheet(location.href, sheet, f);\r\n                        }\r\n                        else {\r\n                            url = $utils.joinUrl(location.href, url);\r\n                            return loadStylesheet(url, function (sheet) { return eachStylesheet(url, sheet, f); });\r\n                        }\r\n                    }))];\r\n                case 1:\r\n                    _a.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * [[Export]] allows downloading of current snapshot of the chart as an\r\n * image, PDF, or its data in various formats.\r\n *\r\n * The export functionality is enabled by default in charts and is accessible\r\n * via API or optional export menu.\r\n *\r\n * To enable menu, simply access export's `menu` property. E.g.:\r\n *\r\n * ```TypeScript\r\n * chart.exporting.menu = new am4core.ExportMenu();\r\n * ```\r\n * ```JavaScript\r\n * chart.exporting.menu = new am4core.ExportMenu();\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"exporting\": {\r\n *     \"menu\": {}\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * To export via API, use `export()` method:\r\n *\r\n * ```TypeScript\r\n * chart.exporting.export(type, [options]);\r\n * ```\r\n * ```JavaScript\r\n * chart.exporting.export(type, [options]);\r\n * ```\r\n *\r\n * E.g.:\r\n *\r\n * ```TypeScript\r\n * chart.exporting.export(\"png\");\r\n * ```\r\n * ```JavaScript\r\n * chart.exporting.export(\"png\");\r\n * ```\r\n *\r\n * @todo Better loading indicator?\r\n * @todo Implement multiplier option\r\n * @todo Handling of hanged exports\r\n * @important\r\n */\r\nvar Export = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Export, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Export(container) {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Adapter.\r\n         *\r\n         * @type {Adapter<Export, IExportAdapters>}\r\n         */\r\n        _this.adapter = new Adapter(_this);\r\n        /**\r\n         * Holds options for each format.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {Dictionary<string, ExportOptions>}\r\n         */\r\n        _this._formatOptions = new Dictionary();\r\n        /**\r\n         * Holds a list of objects that were temporarily removed from the DOM while\r\n         * exporting. Those most probably are tainted images, or foreign objects that\r\n         * would otherwise prevent SVG to be converted to canvas.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {List<IExportRemovedObject>}\r\n         */\r\n        _this._removedObjects = new List();\r\n        /**\r\n         * Holds references to the objects that were temporarily hidden when export\r\n         * started, so that we can reveal them back when export ends.\r\n         *\r\n         * @type {Sprite[]}\r\n         */\r\n        _this._hiddenObjects = [];\r\n        /**\r\n         * Exported files will be prefixed with whatever it is set here.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {string}\r\n         */\r\n        _this._filePrefix = \"amCharts\";\r\n        /**\r\n         * If you are using web fonts (such as Google Fonts), your chart might be\r\n         * using them as well.\r\n         *\r\n         * Normally, exporting to image will require to download these fonts so the\r\n         * are carried over to exported image.\r\n         *\r\n         * This setting can be used to disable or enable this functionality.\r\n         *\r\n         * @default true\r\n         * @type {boolean}\r\n         */\r\n        _this.useWebFonts = true;\r\n        /**\r\n         * Many modern displays have use more actual pixels per displayed pixel. This\r\n         * results in sharper images on screen. Unfortunately, when exported to a\r\n         * bitmap image of the sam width/height size it will lose those extra pixels,\r\n         * resulting in somewhat blurry image.\r\n         *\r\n         * This is why we are going to export images larger than they are, so that we\r\n         * don't lose any details.\r\n         *\r\n         * If you'd rather export images without change in size, set this to `false`.\r\n         *\r\n         * @default true\r\n         * @type {boolean}\r\n         */\r\n        _this.useRetina = true;\r\n        /**\r\n         * If export operation takes longer than milliseconds in this second, we will\r\n         * show a modal saying export operation took longer than expected.\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this.timeoutDelay = 2000;\r\n        _this._container = container;\r\n        _this.className = \"Export\";\r\n        // Set default options\r\n        _this._formatOptions.setKey(\"png\", {});\r\n        _this._formatOptions.setKey(\"jpg\", {\r\n            quality: 0.8\r\n        });\r\n        _this._formatOptions.setKey(\"gif\", {});\r\n        _this._formatOptions.setKey(\"svg\", {});\r\n        _this._formatOptions.setKey(\"pdf\", {\r\n            fontSize: 14,\r\n            imageFormat: \"png\",\r\n            addURL: true\r\n        });\r\n        _this._formatOptions.setKey(\"json\", {\r\n            indent: 2,\r\n            useLocale: true\r\n        });\r\n        _this._formatOptions.setKey(\"csv\", {\r\n            addColumnNames: true,\r\n            emptyAs: \"\"\r\n        });\r\n        _this._formatOptions.setKey(\"xlsx\", {\r\n            addColumnNames: true,\r\n            useLocale: true,\r\n            emptyAs: \"\"\r\n        });\r\n        _this._formatOptions.setKey(\"print\", {\r\n            delay: 500,\r\n            printMethod: \"iframe\"\r\n        });\r\n        // Add options adapter\r\n        _this.adapter.add(\"options\", function (arg) {\r\n            var formatOptions = _this._formatOptions.getKey(arg.type);\r\n            if (arg.options) {\r\n                arg.options = $object.merge(arg.options, formatOptions);\r\n            }\r\n            else {\r\n                arg.options = formatOptions;\r\n            }\r\n            return arg;\r\n        });\r\n        _this.applyTheme();\r\n        _this.dispatchImmediately(\"inited\");\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Export.prototype, \"menu\", {\r\n        /**\r\n         * @return {Optional<ExportMenu>} ExportMenu instance\r\n         */\r\n        get: function () {\r\n            return this._menu;\r\n        },\r\n        /**\r\n         * An instance of [[ExportMenu]].\r\n         *\r\n         * To add an export menu to a chart, set this to a new instance of\r\n         * [[ExportMenu]].\r\n         *\r\n         * ```TypeScript\r\n         * chart.exporting.menu = new am4core.ExportMenu();\r\n         * ```\r\n         * ```JavaScript\r\n         * chart.exporting.menu = new am4core.ExportMenu();\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"exporting\": {\r\n         *     \"menu\": {}\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * @param {Optional<ExportMenu>}  menu  ExportMenu instance\r\n         */\r\n        set: function (menu) {\r\n            var _this = this;\r\n            if (this._menu) {\r\n                this.removeDispose(this._menu);\r\n            }\r\n            this._menu = menu;\r\n            // Set container and language\r\n            this._menu.container = this.container;\r\n            this._menu.language = this._language;\r\n            // Add adapter to check for browser support\r\n            this._menu.adapter.add(\"branch\", function (arg) {\r\n                arg.branch.unsupported = !_this.typeSupported(arg.branch.type);\r\n                return arg;\r\n            });\r\n            // Add click events\r\n            this._menu.events.on(\"hit\", function (ev) {\r\n                _this.export(ev.branch.type, ev.branch.options);\r\n                _this.menu.close();\r\n            });\r\n            this._menu.events.on(\"enter\", function (ev) {\r\n                _this.export(ev.branch.type, ev.branch.options);\r\n                _this.menu.close();\r\n            });\r\n            this._menu.events.on(\"over\", function (ev) {\r\n                _this._disablePointers();\r\n            });\r\n            this._menu.events.on(\"out\", function (ev) {\r\n                _this._releasePointers();\r\n            });\r\n            // Dispatch event\r\n            this.dispatchImmediately(\"menucreated\");\r\n            // Prefix with Sprite's class name\r\n            this._menu.adapter.add(\"classPrefix\", function (obj) {\r\n                obj.classPrefix = options.classNamePrefix + obj.classPrefix;\r\n                return obj;\r\n            });\r\n            // Add menu to disposers so that it's destroyed when Export is disposed\r\n            this._disposers.push(this._menu);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Checks if this specific menu item type is supported by current system.\r\n     *\r\n     * @param  {string}   type  Menu item type\r\n     * @return {boolean}        `false` if not supported\r\n     */\r\n    Export.prototype.typeSupported = function (type) {\r\n        var supported = true;\r\n        if (type === \"pdf\") {\r\n            supported = this.downloadSupport();\r\n        }\r\n        else if (type === \"xlsx\") {\r\n            supported = (this.downloadSupport() && this._hasData()) ? true : false;\r\n        }\r\n        else if (type == \"print\" && !window.print) {\r\n            supported = false;\r\n        }\r\n        else if ([\"json\", \"csv\"].indexOf(type) !== -1 && !this._hasData()) {\r\n            supported = false;\r\n        }\r\n        return this.adapter.apply(\"supported\", {\r\n            supported: supported,\r\n            type: type\r\n        }).supported;\r\n    };\r\n    /**\r\n     * Checks if data is available.\r\n     *\r\n     * @return {boolean} Has data?\r\n     */\r\n    Export.prototype._hasData = function () {\r\n        return this.data && this.data.length;\r\n    };\r\n    /**\r\n     * Get function to handle export for particular format.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @type {this}\r\n     */\r\n    Export.prototype._getFunction = function (type) {\r\n        switch (type) {\r\n            case \"png\":\r\n            case \"gif\":\r\n            case \"jpg\":\r\n                return this.getImage;\r\n            case \"svg\":\r\n                return this.getSVG;\r\n            case \"pdf\":\r\n                return this.getPDF;\r\n            case \"xlsx\":\r\n                return this.getExcel;\r\n            case \"csv\":\r\n                return this.getCSV;\r\n            case \"json\":\r\n                return this.getJSON;\r\n            case \"print\":\r\n                return this.getPrint;\r\n            default:\r\n                return this.unsupported;\r\n        }\r\n    };\r\n    /**\r\n     * Initiates export procedure.\r\n     *\r\n     * @param  {string}   type     Export type\r\n     * @param  {Object}   options  Options\r\n     * @return {boolean}           `true` if export was successful\r\n     * @async\r\n     */\r\n    Export.prototype.export = function (type, options) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            var event_1, func, data, event_2, event_3;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        // Dispatch event\r\n                        if (this.events.isEnabled(\"exportstarted\")) {\r\n                            event_1 = {\r\n                                \"type\": \"exportstarted\",\r\n                                \"target\": this,\r\n                                \"format\": type,\r\n                                \"options\": options\r\n                            };\r\n                            this.events.dispatchImmediately(\"exportstarted\", event_1);\r\n                        }\r\n                        // Check if it's a custom item, and do nothing or execute custom callback\r\n                        if (type == \"custom\") {\r\n                            this.handleCustom(options);\r\n                            return [2 /*return*/, true];\r\n                        }\r\n                        // Schedule a preloader\r\n                        this.showPreloader();\r\n                        // Schedule a timeout\r\n                        if (this.timeoutDelay) {\r\n                            this.hideTimeout();\r\n                            this._timeoutTimeout = this.setTimeout(function () {\r\n                                // Dispatch event\r\n                                if (_this.events.isEnabled(\"exporttimedout\")) {\r\n                                    var event_4 = {\r\n                                        \"type\": \"exporttimedout\",\r\n                                        \"target\": _this,\r\n                                        \"format\": type,\r\n                                        \"options\": options\r\n                                    };\r\n                                    _this.events.dispatchImmediately(\"exporttimedout\", event_4);\r\n                                }\r\n                                // Show modal\r\n                                _this.showTimeout();\r\n                            }, this.timeoutDelay);\r\n                        }\r\n                        // Hide items that should not be exported\r\n                        this.hideNonExportableSprites();\r\n                        func = this._getFunction(type);\r\n                        // Give chance for plugins to override both function and options\r\n                        options = this.adapter.apply(\"options\", {\r\n                            options: options,\r\n                            type: type\r\n                        }).options;\r\n                        func = this.adapter.apply(\"exportFunction\", {\r\n                            func: func,\r\n                            type: type,\r\n                            options: options\r\n                        }).func;\r\n                        return [4 /*yield*/, func.call(this, type, options)];\r\n                    case 1:\r\n                        data = _a.sent();\r\n                        // Restore temporarily hidden elements\r\n                        this.restoreNonExportableSprites();\r\n                        if (data) {\r\n                            // Dispatch event\r\n                            if (this.events.isEnabled(\"exportfinished\")) {\r\n                                event_2 = {\r\n                                    \"type\": \"exportfinished\",\r\n                                    \"target\": this,\r\n                                    \"format\": type,\r\n                                    \"options\": options\r\n                                };\r\n                                this.events.dispatchImmediately(\"exportfinished\", event_2);\r\n                            }\r\n                            // Hide preloader and timeout modals\r\n                            this.hidePreloader();\r\n                            this.hideTimeout();\r\n                            // Download or print\r\n                            if (type === \"print\") {\r\n                                return [2 /*return*/, this.print(data, options, this.adapter.apply(\"title\", {\r\n                                        title: this.title,\r\n                                        options: options\r\n                                    }).title)];\r\n                            }\r\n                            else {\r\n                                return [2 /*return*/, this.download(data, this.filePrefix + \".\" + type)];\r\n                            }\r\n                        }\r\n                        else {\r\n                            // Throw exception?\r\n                            // @todo\r\n                            // Dispatch event\r\n                            if (this.events.isEnabled(\"error\")) {\r\n                                event_3 = {\r\n                                    \"type\": \"error\",\r\n                                    \"target\": this,\r\n                                    \"format\": type,\r\n                                    \"options\": options\r\n                                };\r\n                                this.events.dispatchImmediately(\"error\", event_3);\r\n                            }\r\n                            return [2 /*return*/, false];\r\n                        }\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * A function that should handle unsupported export types.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}              type     Export type\r\n     * @param  {IExportImageOptions} options  Options\r\n     * @return {Promise<string>}               Promise\r\n     * @async\r\n     */\r\n    Export.prototype.unsupported = function (type, options) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            return tslib_1.__generator(this, function (_a) {\r\n                // TODO should this return `undefined`?\r\n                return [2 /*return*/, \"\"];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Handles click on a \"custom\" menu item.\r\n     *\r\n     * Basically, if it has \"callback\" enabled, it will be called. Nothing else.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IExportCustomOptions}  options  Options\r\n     */\r\n    Export.prototype.handleCustom = function (options) {\r\n        if ($type.hasValue(options.callback)) {\r\n            options.callback.call(this, options);\r\n        }\r\n    };\r\n    /**\r\n     * Requests a Print of the chart.\r\n     *\r\n     * @param  {string}               type     Export type\r\n     * @param  {IExportImageOptions}  options  Options\r\n     * @return {Promise<string>}               Promise\r\n     * @async\r\n     */\r\n    Export.prototype.getPrint = function (type, options) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            return tslib_1.__generator(this, function (_a) {\r\n                return [2 /*return*/, this.getImage(\"png\", options)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * A function that returns data: URI encoded @font-family, so that way it can be embedded into SVG.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {Promise<string>} String which can be embedded directly into a <style> element.\r\n     * @async\r\n     */\r\n    Export.prototype.getFontFamilies = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            var DOMURL, blobs, promises, a;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        DOMURL = this.getDOMURL();\r\n                        blobs = [];\r\n                        promises = [];\r\n                        return [4 /*yield*/, eachStylesheets(function (topUrl, rule) {\r\n                                if (rule.type === CSSRule.FONT_FACE_RULE) {\r\n                                    var cssText_1 = rule.cssText;\r\n                                    // TODO this is necessary because Edge doesn't let you access the src using getPropertyValue\r\n                                    var src = fontFamilySrcRegexp.exec(cssText_1);\r\n                                    if (src !== null) {\r\n                                        // TODO make this faster (don't create Promises for non-url stuff)\r\n                                        var urls = src[1].split(/ *, */).map(function (url) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n                                            var a, after, fullUrl, response, url_2, e_1;\r\n                                            return tslib_1.__generator(this, function (_a) {\r\n                                                switch (_a.label) {\r\n                                                    case 0:\r\n                                                        a = /^url\\([\"']?([^\"'\\)]+)[\"']?\\)([^,]*)$/.exec(url);\r\n                                                        if (!(a === null)) return [3 /*break*/, 1];\r\n                                                        return [2 /*return*/, url];\r\n                                                    case 1:\r\n                                                        after = a[2];\r\n                                                        fullUrl = $utils.joinUrl(topUrl, a[1]);\r\n                                                        _a.label = 2;\r\n                                                    case 2:\r\n                                                        _a.trys.push([2, 7, , 8]);\r\n                                                        return [4 /*yield*/, $net.load(fullUrl, undefined, { responseType: \"blob\" })];\r\n                                                    case 3:\r\n                                                        response = _a.sent();\r\n                                                        if (!supportsBlobUri()) return [3 /*break*/, 4];\r\n                                                        url_2 = DOMURL.createObjectURL(response.blob);\r\n                                                        blobs.push(url_2);\r\n                                                        return [3 /*break*/, 6];\r\n                                                    case 4: return [4 /*yield*/, blobToDataUri(response.blob)];\r\n                                                    case 5:\r\n                                                        url_2 = _a.sent();\r\n                                                        _a.label = 6;\r\n                                                    case 6: \r\n                                                    // TODO should it should escape the URI ?\r\n                                                    return [2 /*return*/, \"url(\\\"\" + url_2 + \"\\\")\" + after];\r\n                                                    case 7:\r\n                                                        e_1 = _a.sent();\r\n                                                        console.error(\"Failed to load font\", fullUrl, e_1);\r\n                                                        return [2 /*return*/, null];\r\n                                                    case 8: return [2 /*return*/];\r\n                                                }\r\n                                            });\r\n                                        }); });\r\n                                        promises.push(Promise.all(urls).then(function (a) {\r\n                                            a = a.filter(function (x) { return x != null; });\r\n                                            if (a.length === 0) {\r\n                                                return \"\";\r\n                                            }\r\n                                            else {\r\n                                                return cssText_1.replace(fontFamilySrcRegexp, \"src: \" + a.join(\", \") + \";\");\r\n                                            }\r\n                                        }));\r\n                                    }\r\n                                }\r\n                            })];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [4 /*yield*/, Promise.all(promises)];\r\n                    case 2:\r\n                        a = _a.sent();\r\n                        return [2 /*return*/, {\r\n                                blobs: blobs,\r\n                                cssText: a.filter(function (x) { return !!x; }).join(\"\\n\")\r\n                            }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Produces image output from the element.\r\n     *\r\n     * Converts to a `Canvas` first, then produces an image to download.\r\n     *\r\n     * This is an asynchronous function. Rather than returning a result, it\r\n     * returns a Promise.\r\n     *\r\n     * You can use `await` notion from other async functions, or `then()`\r\n     * anywhere else.\r\n     *\r\n     * ```TypeScript\r\n     * // Async\r\n     * let img = await chart.exporting.getImage( \"PNG\" );\r\n     *\r\n     * // Sync\r\n     * let img;\r\n     * chart.exporting.getImage( \"PNG\" ).then( ( data ) => {\r\n     *   img = exporing;\r\n     * } );\r\n     * ```\r\n     * ```JavaScript\r\n     * var img;\r\n     * chart.exporting.getImage( \"PNG\" ).then( ( data ) => {\r\n     *   var = data;\r\n     * } );\r\n     * ```\r\n     *\r\n     * @param  {string}               type     Image format\r\n     * @param  {IExportImageOptions}  options  Options\r\n     * @return {Promise<string>}               Promise\r\n     */\r\n    Export.prototype.getImage = function (type, options) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var background, DOMURL_1, url, blobs_1, width, height, font, fontSize, canvas, pixelRatio, ctx, promises, a, data, svg, img, uri, e_2;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.simplifiedImageExport()];\r\n                    case 1:\r\n                        if (!_a.sent()) return [3 /*break*/, 9];\r\n                        background = this.backgroundColor || this.findBackgroundColor(this.sprite.dom);\r\n                        DOMURL_1 = this.getDOMURL();\r\n                        url = null;\r\n                        blobs_1 = null;\r\n                        _a.label = 2;\r\n                    case 2:\r\n                        _a.trys.push([2, 5, 7, 8]);\r\n                        width = this.sprite.pixelWidth, height = this.sprite.pixelHeight, font = this.findFont(this.sprite.dom), fontSize = this.findFontSize(this.sprite.dom);\r\n                        canvas = this.getDisposableCanvas();\r\n                        pixelRatio = this.getPixelRatio();\r\n                        canvas.style.width = width + 'px';\r\n                        canvas.style.height = height + 'px';\r\n                        canvas.width = width * pixelRatio;\r\n                        canvas.height = height * pixelRatio;\r\n                        ctx = canvas.getContext(\"2d\");\r\n                        if (pixelRatio != 1) {\r\n                            ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n                        }\r\n                        // Add background if necessary\r\n                        if (background) {\r\n                            ctx.fillStyle = background.toString();\r\n                            ctx.fillRect(0, 0, width, height);\r\n                        }\r\n                        promises = [];\r\n                        if (this.useWebFonts) {\r\n                            // TODO what if one of the other things errors before it's been able to set `blobs` ?\r\n                            promises.push(this.getFontFamilies().then(function (fonts) {\r\n                                blobs_1 = fonts.blobs;\r\n                                return fonts.cssText;\r\n                            }));\r\n                        }\r\n                        promises.push(this.imagesToDataURI(this.sprite.dom, options));\r\n                        promises.push(this.prepForeignObjects(this.sprite.dom, options));\r\n                        return [4 /*yield*/, Promise.all(promises)];\r\n                    case 3:\r\n                        a = _a.sent();\r\n                        data = this.normalizeSVG(\"<style>\" + a[0] + \"</style>\" + this.serializeElement(this.sprite.paper.defs) + this.serializeElement(this.sprite.dom), options, width, height, font, fontSize);\r\n                        svg = new Blob([data], { type: \"image/svg+xml\" });\r\n                        url = DOMURL_1.createObjectURL(svg);\r\n                        return [4 /*yield*/, this.loadNewImage(url, width, height, \"anonymous\")];\r\n                    case 4:\r\n                        img = _a.sent();\r\n                        // Draw image on canvas\r\n                        ctx.drawImage(img, 0, 0);\r\n                        // Options are set?\r\n                        if (!$type.hasValue(options)) {\r\n                            options = {};\r\n                        }\r\n                        uri = canvas.toDataURL(this.getContentType(type), options.quality);\r\n                        // Get rid of the canvas\r\n                        this.disposeCanvas(canvas);\r\n                        return [2 /*return*/, uri];\r\n                    case 5:\r\n                        e_2 = _a.sent();\r\n                        return [4 /*yield*/, this.getImageAdvanced(type, options)];\r\n                    case 6: \r\n                    // An error occurred, let's try advanced method\r\n                    return [2 /*return*/, _a.sent()];\r\n                    case 7:\r\n                        if (url !== null) {\r\n                            DOMURL_1.revokeObjectURL(url);\r\n                        }\r\n                        if (blobs_1 !== null) {\r\n                            $array.each(blobs_1, function (url) {\r\n                                DOMURL_1.revokeObjectURL(url);\r\n                            });\r\n                        }\r\n                        // Restore replaced tainted images in DOM\r\n                        this.restoreRemovedObjects();\r\n                        return [7 /*endfinally*/];\r\n                    case 8: return [3 /*break*/, 11];\r\n                    case 9: return [4 /*yield*/, this.getImageAdvanced(type, options)];\r\n                    case 10: \r\n                    /**\r\n                     * Going the hard way. Converting to canvas from each node\r\n                     */\r\n                    return [2 /*return*/, _a.sent()];\r\n                    case 11: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Tries to dynamically load [canvg.js](https://github.com/canvg/canvg) and\r\n     * export an image using its functions.\r\n     *\r\n     * This is an asynchronous function. Check the description of `getImage()`\r\n     * for description and example usage.\r\n     *\r\n     * @param {string}               type     Image format\r\n     * @param {IExportImageOptions}  options  Options\r\n     * @return {Promise<string>}              Data uri\r\n     */\r\n    Export.prototype.getImageAdvanced = function (type, options) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var background, canvg, width, height, font, fontSize, data, canvas, pixelRatio, config, res, uri;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: \r\n                    // Convert external images to data uris\r\n                    return [4 /*yield*/, this.imagesToDataURI(this.sprite.dom, options)];\r\n                    case 1:\r\n                        // Convert external images to data uris\r\n                        _a.sent();\r\n                        background = this.backgroundColor || this.findBackgroundColor(this.sprite.dom);\r\n                        return [4 /*yield*/, this.canvg];\r\n                    case 2:\r\n                        canvg = _a.sent();\r\n                        width = this.sprite.pixelWidth, height = this.sprite.pixelHeight, font = this.findFont(this.sprite.dom), fontSize = this.findFontSize(this.sprite.dom);\r\n                        data = this.normalizeSVG(this.serializeElement(this.sprite.paper.defs) + this.serializeElement(this.sprite.dom), options, width, height, font, fontSize, background);\r\n                        canvas = this.getDisposableCanvas();\r\n                        pixelRatio = this.getPixelRatio();\r\n                        canvas.style.width = (width * pixelRatio) + 'px';\r\n                        canvas.style.height = (height * pixelRatio) + 'px';\r\n                        canvas.width = width * pixelRatio;\r\n                        canvas.height = height * pixelRatio;\r\n                        config = {\r\n                            //ignoreDimensions: true,\r\n                            useCORS: true\r\n                        };\r\n                        if (pixelRatio != 1) {\r\n                            config.ignoreDimensions = true;\r\n                            config.scaleWidth = width * pixelRatio;\r\n                            config.scaleHeight = height * pixelRatio;\r\n                        }\r\n                        res = canvg(canvas, data, config);\r\n                        // Options are set?\r\n                        if (!$type.hasValue(options)) {\r\n                            options = {};\r\n                        }\r\n                        uri = canvas.toDataURL(this.getContentType(type), options.quality);\r\n                        // Get rid of the canvas\r\n                        this.disposeCanvas(canvas);\r\n                        return [2 /*return*/, uri];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Creates a `<canvas>` element and returns it.\r\n     *\r\n     * @return {HTMLCanvasElement} Canvas element\r\n     */\r\n    Export.prototype.getDisposableCanvas = function () {\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.style.position = \"fixed\";\r\n        canvas.style.top = \"-10000px\";\r\n        document.body.appendChild(canvas);\r\n        return canvas;\r\n    };\r\n    /**\r\n     * Removes canvas.\r\n     *\r\n     * @param {HTMLCanvasElement}  canvas  Canvas element\r\n     */\r\n    Export.prototype.disposeCanvas = function (canvas) {\r\n        document.body.removeChild(canvas);\r\n    };\r\n    /**\r\n     * Returns pixel ratio for retina displays.\r\n     *\r\n     * @return {number} Pixel ratio\r\n     */\r\n    Export.prototype.getPixelRatio = function () {\r\n        return this.useRetina ? $utils.getPixelRatio() : 1;\r\n    };\r\n    /**\r\n     * Converts all `<image>` tags in SVG to use data uris instead of external\r\n     * URLs\r\n     *\r\n     * This is an asynchronous function. Check the description of `getImage()`\r\n     * for description and example usage.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {SVGSVGElement}        el       SVG node\r\n     * @param  {IExportImageOptions}  options  Options\r\n     * @return {Promise<void>}                 Promise\r\n     */\r\n    Export.prototype.imagesToDataURI = function (el, options) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var images, promises, count, i, image, href;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        images = el.querySelectorAll(\"image\");\r\n                        if (!images.length) return [3 /*break*/, 2];\r\n                        promises = [];\r\n                        // There are images, process each of them\r\n                        for (count = images.length, i = 0; i < count; i++) {\r\n                            image = images[i];\r\n                            href = image.getAttributeNS(Export.XLINK, \"href\");\r\n                            // no href?\r\n                            if (!href) {\r\n                                continue;\r\n                            }\r\n                            if (href.indexOf(\"data:image\") !== -1) {\r\n                                // Ignore image if it's already in Data URI format\r\n                            }\r\n                            else {\r\n                                // SVG or bitmap image?\r\n                                if (href.indexOf(\".svg\") !== -1) {\r\n                                    promises.push(this.svgToDataURI(image, options));\r\n                                }\r\n                                else {\r\n                                    promises.push(this.imageToDataURI(image, options));\r\n                                }\r\n                            }\r\n                        }\r\n                        return [4 /*yield*/, Promise.all(promises)];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/];\r\n                    case 2: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * `foreignObject` elements cannot be exported. This function hides them\r\n     * temprarily. In the future it might try to convert them to SVG to make them\r\n     * exportable.\r\n     *\r\n     * This is an asynchronous function. Check the description of `getImage()`\r\n     * for description and example usage.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {SVGSVGElement}        el       SVG node\r\n     * @param  {IExportImageOptions}  options  Options\r\n     * @return {Promise<void>}                 Promise\r\n     */\r\n    Export.prototype.prepForeignObjects = function (el, options) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var objects, count, i;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                objects = el.querySelectorAll(\"foreignObject\");\r\n                if (objects.length) {\r\n                    // There are foreign objects, process each of them\r\n                    for (count = objects.length, i = 0; i < count; i++) {\r\n                        this.temporarilyRemoveObject(objects[i]);\r\n                    }\r\n                }\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Converts an SVG `<image>` to use its data uri for `href` instead of\r\n     * external file.\r\n     *\r\n     * This is an asynchronous function. Check the description of `getImage()`\r\n     * for description and example usage.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {SVGImageElement}     el       SVG element\r\n     * @param {IExportImageOptions} options  Options\r\n     */\r\n    Export.prototype.imageToDataURI = function (el, options) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var img, canvas, uri, e_3;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        return [4 /*yield*/, this.loadNewImage(el.getAttributeNS(Export.XLINK, \"href\"), null, null, \"anonymous\")];\r\n                    case 1:\r\n                        // Create image\r\n                        img = _a.sent();\r\n                        canvas = document.createElement(\"canvas\");\r\n                        canvas.width = img.width;\r\n                        canvas.height = img.height;\r\n                        // Draw new image on it via `toDataURL`\r\n                        canvas.getContext(\"2d\").drawImage(img, 0, 0);\r\n                        // Replace image `href` with data uri\r\n                        // If we got to this point it means image has loaded, however we might\r\n                        // still get an error with `toDataURL()`\r\n                        try {\r\n                            uri = canvas.toDataURL();\r\n                            el.setAttribute(\"href\", uri);\r\n                            return [2 /*return*/, uri];\r\n                        }\r\n                        catch (e) {\r\n                            // Give up and temporarily remove the element href temporarily\r\n                            if (options.keepTainted !== false) {\r\n                                /*this._removedObjects.push({\r\n                                    \"element\": el,\r\n                                    \"originalHref\": el.getAttributeNS(Export.XLINK, \"href\")\r\n                                });\r\n                                el.setAttributeNS(Export.XLINK, \"href\", \"\");*/\r\n                                this.temporarilyRemoveObject(el);\r\n                            }\r\n                            return [2 /*return*/, undefined];\r\n                        }\r\n                        return [3 /*break*/, 3];\r\n                    case 2:\r\n                        e_3 = _a.sent();\r\n                        // Give up and temporarily remove the element's href\r\n                        if (!options || options.keepTainted !== false) {\r\n                            /*this._removedObjects.push({\r\n                                \"element\": el,\r\n                                \"originalHref\": el.getAttributeNS(Export.XLINK, \"href\")\r\n                            });\r\n                            el.setAttributeNS(Export.XLINK, \"href\", \"\");*/\r\n                            this.temporarilyRemoveObject(el);\r\n                        }\r\n                        return [2 /*return*/, undefined];\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Converts `<image>` with external SVG source to data uri. Loads external SVG\r\n     * file, then converts it to data uri and replaces the `xlink:href` parameter.\r\n     *\r\n     * This is an asynchronous function. Check the description of `getImage()`\r\n     * for description and example usage.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {SVGImageElement}     el        An SVG element\r\n     * @param {IExportImageOptions} options   Options\r\n     */\r\n    Export.prototype.svgToDataURI = function (el, options) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var href, data, charset, uri, e_4;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        href = el.getAttributeNS(Export.XLINK, \"href\");\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        return [4 /*yield*/, $net.load(href)];\r\n                    case 2:\r\n                        data = _a.sent();\r\n                        charset = this.adapter.apply(\"charset\", {\r\n                            charset: \"base64\",\r\n                            type: \"svg\",\r\n                            options: options\r\n                        }).charset;\r\n                        uri = this.adapter.apply(\"svgToDataURI\", {\r\n                            data: \"data:\" + this.getContentType(\"svg\") + \";\" + charset + \",\" + btoa(data.response),\r\n                            options: options\r\n                        }).data;\r\n                        el.setAttributeNS(Export.XLINK, \"href\", uri);\r\n                        return [2 /*return*/, uri];\r\n                    case 3:\r\n                        e_4 = _a.sent();\r\n                        // Disable temporarily\r\n                        if (!options || options.keepTainted !== false) {\r\n                            /*this._removedObjects.push({\r\n                                \"element\": el,\r\n                                \"originalHref\": href\r\n                            });\r\n                            el.setAttributeNS(Export.XLINK, \"href\", \"\");*/\r\n                            this.temporarilyRemoveObject(el);\r\n                        }\r\n                        return [2 /*return*/, undefined];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Temporarily removes element from DOM, and replaces it with a dummy\r\n     * placeholder, as well as stores it for later restoration.\r\n     *\r\n     * This is an asynchronous function. Check the description of `getImage()`\r\n     * for description and example usage.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Node} el Node\r\n     */\r\n    Export.prototype.temporarilyRemoveObject = function (el, placeholder) {\r\n        // Get parent\r\n        var parent = el.parentElement || el.parentNode;\r\n        // Create a placeholder group element if it has not been passed in\r\n        if (!placeholder) {\r\n            placeholder = this.sprite.paper.add(\"g\").node;\r\n        }\r\n        parent.insertBefore(placeholder, el);\r\n        // Check if we have a textContents we can replace with\r\n        // @todo Perhaps we should explore alternatives to creating text nodes\r\n        // i.e. creating a text version of the HTML-based Text, just for export\r\n        // purposes. Converting HTML into SVG is very complicated\r\n        if (el.textContent) {\r\n            /*let text = this.sprite.paper.add(\"text\").node;\r\n            text.textContent = el.textContent;\r\n            placeholder.appendChild(text);\r\n\r\n            // Copy properties from the removing element to the placeholder\r\n            $dom.copyAttributes(el, placeholder);*/\r\n        }\r\n        // Remove the old element\r\n        parent.removeChild(el);\r\n        // Log removed item\r\n        this._removedObjects.push({\r\n            \"element\": el,\r\n            \"placeholder\": placeholder\r\n        });\r\n    };\r\n    /**\r\n     * Restores all (possibly tainted or unsupported) objects that were\r\n     * temporarily removed when exporting.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Export.prototype.restoreRemovedObjects = function () {\r\n        var obj;\r\n        while (obj = this._removedObjects.pop()) {\r\n            //obj.element.setAttribute(\"href\", obj.originalHref);\r\n            var parent_1 = obj.placeholder.parentElement || obj.placeholder.parentNode;\r\n            parent_1.insertBefore(obj.element, obj.placeholder);\r\n            //parent.removeChild(obj.placeholder);\r\n        }\r\n    };\r\n    /**\r\n     * Checkes if simplified export can be used using `createObjectURL` and SVG\r\n     * document does not contain any external images.\r\n     *\r\n     * This is an asynchronous function. Check the description of `getImage()`\r\n     * for description and example usage.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {boolean} `true` if simplified export can be used\r\n     */\r\n    Export.prototype.simplifiedImageExport = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var cache, canvas, ctx, DOMURL, svg, url, img, e_5;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        cache = registry.getCache(\"simplifiedImageExport\");\r\n                        if (cache === false || cache === true) {\r\n                            return [2 /*return*/, cache];\r\n                        }\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        _a.trys.push([1, 3, , 4]);\r\n                        canvas = document.createElement(\"canvas\");\r\n                        canvas.width = 1;\r\n                        canvas.height = 1;\r\n                        ctx = canvas.getContext(\"2d\");\r\n                        DOMURL = this.getDOMURL();\r\n                        svg = new Blob([this.normalizeSVG(\"<g></g>\", {}, 1, 1)], { type: \"image/svg+xml\" });\r\n                        url = DOMURL.createObjectURL(svg);\r\n                        return [4 /*yield*/, this.loadNewImage(url, 1, 1)];\r\n                    case 2:\r\n                        img = _a.sent();\r\n                        ctx.drawImage(img, 0, 0);\r\n                        DOMURL.revokeObjectURL(url);\r\n                        try {\r\n                            //let uri = canvas.toDataURL(\"image/png\");\r\n                            registry.setCache(\"simplifiedImageExport\", true);\r\n                            return [2 /*return*/, true];\r\n                        }\r\n                        catch (e) {\r\n                            registry.setCache(\"simplifiedImageExport\", false);\r\n                            return [2 /*return*/, false];\r\n                        }\r\n                        return [3 /*break*/, 4];\r\n                    case 3:\r\n                        e_5 = _a.sent();\r\n                        registry.setCache(\"simplifiedImageExport\", false);\r\n                        return [2 /*return*/, false];\r\n                    case 4: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Returns a new `<image>` element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}                     url          URL of the image\r\n     * @param  {number}                     width        Width (px)\r\n     * @param  {number}                     height       Height (px)\r\n     * @param  {string}                     crossOrigin  Cross-Origin setting\r\n     * @return {Promise<HTMLImageElement>}               Promise\r\n     */\r\n    Export.prototype.loadNewImage = function (url, width, height, crossOrigin) {\r\n        return new Promise(function (success, error) {\r\n            // New image\r\n            var image;\r\n            if (width && height) {\r\n                image = new Image(width, height);\r\n            }\r\n            else {\r\n                image = new Image();\r\n            }\r\n            // Set crossorigin\r\n            if (crossOrigin) {\r\n                image.setAttribute(\"crossOrigin\", crossOrigin);\r\n            }\r\n            // Report success on load\r\n            image.onload = function () {\r\n                success(image);\r\n            };\r\n            function onerror() {\r\n                // Error occurred. Just in case it's the crossOrigin issue, let's try\r\n                // stripping off this attribute and trying again\r\n                if (crossOrigin) {\r\n                    // Retain old uri\r\n                    var currentHref = image.src;\r\n                    // Set up another `onerror` to handle situations where image is not\r\n                    // loadable at all (i.e. protected by CORS)\r\n                    image.onerror = function () {\r\n                        // Nope, no luck\r\n                        error(new Error(\"Loading image \\\"\" + url + \"\\\" failed\"));\r\n                    };\r\n                    // remove the `crossOrigin` attribute\r\n                    image.removeAttribute(\"crossorigin\");\r\n                    // retry\r\n                    image.src = \"\";\r\n                    image.src = currentHref;\r\n                }\r\n                else {\r\n                    error(new Error(\"Loading image \\\"\" + url + \"\\\" failed\"));\r\n                }\r\n            }\r\n            // Set image error handlers\r\n            image.onabort = onerror;\r\n            image.onerror = onerror;\r\n            // Trigger load\r\n            image.src = url;\r\n        });\r\n    };\r\n    /**\r\n     * Returns current DOM URL.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {any} URL\r\n     */\r\n    Export.prototype.getDOMURL = function () {\r\n        return self.URL || self.webkitURL || self;\r\n    };\r\n    /**\r\n     * Returns an SVG representation of the chart.\r\n     *\r\n     * This is an asynchronous function. Check the description of `getImage()`\r\n     * for description and example usage.\r\n     *\r\n     * @param {string}             type     Type of the export\r\n     * @param {IExportSVGOptions}  options  Options\r\n     * @return {Promise<string>}            Promise\r\n     */\r\n    Export.prototype.getSVG = function (type, options) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var width, height, font, fontSize, svg, charset, uri;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                width = this.sprite.pixelWidth, height = this.sprite.pixelHeight, font = this.findFont(this.sprite.dom), fontSize = this.findFontSize(this.sprite.dom);\r\n                svg = this.normalizeSVG(this.serializeElement(this.sprite.paper.defs) + this.serializeElement(this.sprite.dom), options, width, height, font, fontSize);\r\n                charset = this.adapter.apply(\"charset\", {\r\n                    charset: \"charset=utf-8\",\r\n                    type: \"svg\",\r\n                    options: options\r\n                }).charset;\r\n                uri = this.adapter.apply(\"getSVG\", {\r\n                    data: \"data:\" + this.getContentType(type) + \";\" + charset + \",\" + encodeURIComponent(svg),\r\n                    options: options\r\n                }).data;\r\n                return [2 /*return*/, uri];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Checks if SVG is fully formatted. Encloses in `<svg>...</svg>` if\r\n     * necessary.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}             svg       Input SVG\r\n     * @param  {IExportSVGOptions}  options   Options\r\n     * @param  {number}             width     Width of the SVG viewport\r\n     * @param  {number}             height    Height of the SVG viewport\r\n     * @param  {string}             font      Font family to use as a base\r\n     * @param  {string}             fontSize  Font size to use as a base\r\n     * @return {string}                       Output SVG\r\n     * @todo Add style params to existing <svg>\r\n     */\r\n    Export.prototype.normalizeSVG = function (svg, options, width, height, font, fontSize, background) {\r\n        // Construct width/height params\r\n        var dimParams = \"\";\r\n        if (width) {\r\n            dimParams += \"width=\\\"\" + width + \"px\\\" \";\r\n        }\r\n        if (height) {\r\n            dimParams += \"height=\\\"\" + height + \"px\\\" \";\r\n        }\r\n        // Apply font settings\r\n        var styleParams = \"\";\r\n        if (font) {\r\n            styleParams += \"font-family: \" + font.replace(/\"/g, \"\") + \";\";\r\n        }\r\n        if (fontSize) {\r\n            styleParams += \"font-size: \" + fontSize + \";\";\r\n        }\r\n        // Add missing <svg> enclosure\r\n        if (!svg.match(/<svg/)) {\r\n            svg = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><svg \" + dimParams + \" style=\\\"\" + styleParams + \"\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">\" + svg + \"</svg>\";\r\n        }\r\n        else {\r\n            if (dimParams !== \"\") {\r\n                // Clear current params\r\n                svg = svg.replace(/(<svg[^>]*)width=\"[^\"]*\"/, \"$1\");\r\n                svg = svg.replace(/(<svg[^>]*)height=\"[^\"]*\"/, \"$1\");\r\n                // Add new params\r\n                svg = svg.replace(/(<svg)/, \"$1\" + dimParams);\r\n            }\r\n            /*if (styleParams !== \"\") {\r\n                // Clear current params\r\n                svg = svg.replace(/(<svg[^>]*)stylewidth=\"[^\"]*\"/, \"$1\");\r\n                svg = svg.replace(/(<svg[^>]*)height=\"[^\"]*\"/, \"$1\");\r\n\r\n                // Add new params\r\n                svg = svg.replace(/(<svg)/, \"$1\" + dimParams);\r\n            }*/\r\n        }\r\n        if (background) {\r\n            svg = svg.replace(/(<svg[^>]*>)/, \"$1<rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"\" + background.rgba + \"\\\"/>\");\r\n            //svg = svg.replace(/<\\/svg>/, \"<rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"\" + background.rgba + \"\\\"/></svg>\");\r\n        }\r\n        svg = this.adapter.apply(\"normalizeSVG\", {\r\n            data: svg,\r\n            options: options\r\n        }).data;\r\n        return svg;\r\n    };\r\n    /**\r\n     * Serializes an element and returns its contents.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {HTMLElement | SVGSVGElement}  element  An element to serialize\r\n     * @return {string}                                A serialized XML\r\n     */\r\n    Export.prototype.serializeElement = function (element) {\r\n        return new XMLSerializer().serializeToString(element);\r\n    };\r\n    /**\r\n     * Returns a PDF containing chart image.\r\n     *\r\n     * This is an asynchronous function. Check the description of `getImage()`\r\n     * for description and example usage.\r\n     *\r\n     * @param {string}             type     Type of the export\r\n     * @param {IExportPDFOptions}  options  Options\r\n     * @return {Promise<string>}            Promise\r\n     * @async\r\n     * @todo Account for header when calculating vertical fit\r\n     */\r\n    Export.prototype.getPDF = function (type, options) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var image, pdfmake, defaultMargins, doc, title;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.getImage(options.imageFormat || \"png\", options)];\r\n                    case 1:\r\n                        image = _a.sent();\r\n                        return [4 /*yield*/, this.pdfmake];\r\n                    case 2:\r\n                        pdfmake = _a.sent();\r\n                        defaultMargins = [30, 30, 30, 30];\r\n                        doc = {\r\n                            pageSize: options.pageSize || \"A4\",\r\n                            pageOrientation: options.pageOrientation || \"portrait\",\r\n                            pageMargins: options.pageMargins || defaultMargins,\r\n                            //header: <any>[],\r\n                            content: []\r\n                        };\r\n                        title = this.adapter.apply(\"title\", {\r\n                            title: this.title,\r\n                            options: options\r\n                        }).title;\r\n                        if (title) {\r\n                            doc.content.push({\r\n                                text: title,\r\n                                fontSize: options.fontSize,\r\n                                bold: true,\r\n                                margin: [0, 0, 0, 15]\r\n                            });\r\n                        }\r\n                        // Add page URL?\r\n                        if (options.addURL) {\r\n                            doc.content.push({\r\n                                text: this.language.translate(\"Saved from\") + \": \" + document.location.href,\r\n                                fontSize: options.fontSize,\r\n                                margin: [0, 0, 0, 15]\r\n                            });\r\n                        }\r\n                        // Add image\r\n                        doc.content.push({\r\n                            image: image,\r\n                            fit: this.getPageSizeFit(doc.pageSize, doc.pageMargins)\r\n                        });\r\n                        // Apply adapters\r\n                        doc = this.adapter.apply(\"pdfmakeDocument\", {\r\n                            doc: doc,\r\n                            options: options\r\n                        }).doc;\r\n                        return [4 /*yield*/, new Promise(function (success, error) {\r\n                                pdfmake.createPdf(doc).getDataUrl(function (uri) {\r\n                                    success(uri);\r\n                                });\r\n                            })];\r\n                    case 3: \r\n                    // Create PDF\r\n                    return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Returns fit dimensions for available page sizes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {pageSizes} pageSize Page size\r\n     * @return {number[]}           `[width, height]` in pixels\r\n     */\r\n    Export.prototype.getPageSizeFit = function (pageSize, margins) {\r\n        // Check margins\r\n        var newMargins = [0, 0, 0, 0];\r\n        if (typeof margins == \"number\") {\r\n            newMargins = [margins, margins, margins, margins];\r\n        }\r\n        else if (margins.length == 2) {\r\n            newMargins = [margins[0], margins[1], margins[0], margins[1]];\r\n        }\r\n        else if (margins.length == 4) {\r\n            newMargins = margins;\r\n        }\r\n        // Define available page sizes\r\n        var sizes = {\r\n            \"4A0\": [4767.87, 6740.79],\r\n            \"2A0\": [3370.39, 4767.87],\r\n            A0: [2383.94, 3370.39],\r\n            A1: [1683.78, 2383.94],\r\n            A2: [1190.55, 1683.78],\r\n            A3: [841.89, 1190.55],\r\n            A4: [595.28, 841.89],\r\n            A5: [419.53, 595.28],\r\n            A6: [297.64, 419.53],\r\n            A7: [209.76, 297.64],\r\n            A8: [147.40, 209.76],\r\n            A9: [104.88, 147.40],\r\n            A10: [73.70, 104.88],\r\n            B0: [2834.65, 4008.19],\r\n            B1: [2004.09, 2834.65],\r\n            B2: [1417.32, 2004.09],\r\n            B3: [1000.63, 1417.32],\r\n            B4: [708.66, 1000.63],\r\n            B5: [498.90, 708.66],\r\n            B6: [354.33, 498.90],\r\n            B7: [249.45, 354.33],\r\n            B8: [175.75, 249.45],\r\n            B9: [124.72, 175.75],\r\n            B10: [87.87, 124.72],\r\n            C0: [2599.37, 3676.54],\r\n            C1: [1836.85, 2599.37],\r\n            C2: [1298.27, 1836.85],\r\n            C3: [918.43, 1298.27],\r\n            C4: [649.13, 918.43],\r\n            C5: [459.21, 649.13],\r\n            C6: [323.15, 459.21],\r\n            C7: [229.61, 323.15],\r\n            C8: [161.57, 229.61],\r\n            C9: [113.39, 161.57],\r\n            C10: [79.37, 113.39],\r\n            RA0: [2437.80, 3458.27],\r\n            RA1: [1729.13, 2437.80],\r\n            RA2: [1218.90, 1729.13],\r\n            RA3: [864.57, 1218.90],\r\n            RA4: [609.45, 864.57],\r\n            SRA0: [2551.18, 3628.35],\r\n            SRA1: [1814.17, 2551.18],\r\n            SRA2: [1275.59, 1814.17],\r\n            SRA3: [907.09, 1275.59],\r\n            SRA4: [637.80, 907.09],\r\n            EXECUTIVE: [521.86, 756.00],\r\n            FOLIO: [612.00, 936.00],\r\n            LEGAL: [612.00, 1008.00],\r\n            LETTER: [612.00, 792.00],\r\n            TABLOID: [792.00, 1224.00]\r\n        };\r\n        // Calculate size\r\n        var fitSize = sizes[pageSize];\r\n        fitSize[0] -= newMargins[0] + newMargins[2];\r\n        fitSize[1] -= newMargins[1] + newMargins[3];\r\n        return fitSize;\r\n    };\r\n    /**\r\n     * Returns an Excel file of chart's data.\r\n     *\r\n     * This is an asynchronous function. Check the description of `getImage()`\r\n     * for description and example usage.\r\n     *\r\n     * @param {string}               type     Type of the export\r\n     * @param {IExportExcelOptions}  options  Options\r\n     * @return {Promise<string>}              Promise\r\n     * @async\r\n     * @todo Handle dates\r\n     * @todo Support for multi-sheet\r\n     */\r\n    Export.prototype.getExcel = function (type, options) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var XLSX, wbOptions, sheetName, wb, data, dataFields, len, i, uri;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.xlsx];\r\n                    case 1:\r\n                        XLSX = _a.sent();\r\n                        wbOptions = this.adapter.apply(\"xlsxWorkbookOptions\", {\r\n                            options: {\r\n                                bookType: \"xlsx\",\r\n                                bookSST: false,\r\n                                type: \"base64\",\r\n                            }\r\n                        }).options;\r\n                        sheetName = this.normalizeExcelSheetName(this.adapter.apply(\"xlsxSheetName\", {\r\n                            name: this.title || this.language.translate(\"Data\")\r\n                        }).name);\r\n                        wb = {\r\n                            SheetNames: [sheetName],\r\n                            Sheets: {}\r\n                        };\r\n                        data = [];\r\n                        dataFields = this.dataFields;\r\n                        // Add column names?\r\n                        if (options.addColumnNames) {\r\n                            data.push(this.getExcelRow(dataFields, options));\r\n                        }\r\n                        // Add lines\r\n                        for (len = this.data.length, i = 0; i < len; i++) {\r\n                            data.push(this.getExcelRow(this.data[i], options, dataFields));\r\n                        }\r\n                        // Create sheet and add data\r\n                        wb.Sheets[sheetName] = XLSX.utils.aoa_to_sheet(data);\r\n                        uri = this.adapter.apply(\"getExcel\", {\r\n                            data: \"data:\" + this.getContentType(type) + \";base64,\" + XLSX.write(wb, wbOptions),\r\n                            options: options\r\n                        }).data;\r\n                        return [2 /*return*/, uri];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * This is needed to work around Excel limitations.\r\n     *\r\n     * @param  {string}  name  Source name\r\n     * @return {string}        Normalized name\r\n     */\r\n    Export.prototype.normalizeExcelSheetName = function (name) {\r\n        name = name.replace(/([:\\\\\\/?*\\[\\]]+)/g, \" \");\r\n        return $utils.truncateWithEllipsis(name, 31, \"...\", true);\r\n    };\r\n    /**\r\n     * Rertuns an array of values to be used as Excel row.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {any}                  row         Row data\r\n     * @param  {IExportExcelOptions}  options     Options\r\n     * @param  {any}                  dataFields  Data fields\r\n     * @return {any[]}                            Array of values\r\n     */\r\n    Export.prototype.getExcelRow = function (row, options, dataFields) {\r\n        var _this = this;\r\n        // Init\r\n        var items = [];\r\n        // Data fields\r\n        if (!dataFields) {\r\n            dataFields = row;\r\n        }\r\n        // Process each row item\r\n        $object.each(dataFields, function (key, name) {\r\n            // Get value\r\n            var value = _this.convertEmptyValue(key, row[key], options);\r\n            // Check if we need to skip\r\n            /*if ($type.hasValue(this.dataFields) && !$type.hasValue(this.dataFields[key])) {\r\n                return;\r\n            }*/\r\n            items.push(_this.convertToDateOrDuration(key, value, options, true));\r\n        });\r\n        return items;\r\n    };\r\n    /**\r\n     * Returns chart's data formatted as CSV.\r\n     *\r\n     * This is an asynchronous function. Check the description of `getImage()`\r\n     * for description and example usage.\r\n     *\r\n     * @param {string}             type     Type of the export\r\n     * @param {IExportCSVOptions}  options  Options\r\n     * @return {Promise<string>}            Promise\r\n     * @async\r\n     */\r\n    Export.prototype.getCSV = function (type, options) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var csv, dataFields, br, len, i, row, charset, uri;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                csv = \"\";\r\n                dataFields = this.dataFields;\r\n                br = \"\";\r\n                for (len = this.data.length, i = 0; i < len; i++) {\r\n                    row = this.getCSVRow(this.data[i], options, dataFields);\r\n                    if (options.reverse) {\r\n                        csv = row + br + csv;\r\n                    }\r\n                    else {\r\n                        csv += br + row;\r\n                    }\r\n                    br = \"\\n\";\r\n                }\r\n                // Add column names?\r\n                if (options.addColumnNames) {\r\n                    csv = this.getCSVRow(dataFields, options) + br + csv;\r\n                }\r\n                charset = this.adapter.apply(\"charset\", {\r\n                    charset: \"charset=utf-8\",\r\n                    type: type,\r\n                    options: options\r\n                }).charset;\r\n                uri = this.adapter.apply(\"getCSV\", {\r\n                    data: \"data:\" + this.getContentType(type) + \";\" + charset + \",\" + encodeURIComponent(csv),\r\n                    options: options\r\n                }).data;\r\n                return [2 /*return*/, uri];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Formats a row of CSV data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {any}                row         An object holding data for the row\r\n     * @param  {IExportCSVOptions}  options     Options\r\n     * @param  {any}                dataFields  Data fields\r\n     * @return {string}                         Formated CSV line\r\n     */\r\n    Export.prototype.getCSVRow = function (row, options, dataFields) {\r\n        var _this = this;\r\n        // Init\r\n        var separator = options.separator || \",\";\r\n        var items = [];\r\n        // Data fields\r\n        if (!dataFields) {\r\n            dataFields = row;\r\n        }\r\n        // Process each row item\r\n        $object.each(dataFields, function (key, name) {\r\n            // Get value\r\n            var value = _this.convertEmptyValue(key, row[key], options);\r\n            // Check if we need to skip\r\n            // This is no longer required because we are iterating via dataFields anyway\r\n            /*if ($type.hasValue(this.dataFields) && !$type.hasValue(this.dataFields[key])) {\r\n                return;\r\n            }*/\r\n            // Convert dates\r\n            var item = _this.convertToDateOrDuration(key, value, options);\r\n            // Cast and escape doublequotes\r\n            item = \"\" + item;\r\n            item = item.replace(/\"/g, '\"\"');\r\n            // Enclose into double quotes\r\n            if (options.forceQuotes || (item.search(new RegExp(\"\\\"|\\n|\" + separator, \"g\")) >= 0)) {\r\n                item = \"\\\"\" + item + \"\\\"\";\r\n            }\r\n            // Add to item\r\n            items.push(item);\r\n        });\r\n        return items.join(separator);\r\n    };\r\n    /**\r\n     * Returns chart's data in JSON format.\r\n     *\r\n     * This is an asynchronous function. Check the description of `getImage()`\r\n     * for description and example usage.\r\n     *\r\n     * @param {string}              type     Type of the export\r\n     * @param {IExportJSONOptions}  options  Options\r\n     * @return {Promise<string>}             Promise\r\n     * @async\r\n     */\r\n    Export.prototype.getJSON = function (type, options) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            var json, charset, uri;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                json = JSON.stringify(this.data, function (key, value) {\r\n                    if (typeof value == \"object\") {\r\n                        $object.each(value, function (field, item) {\r\n                            value[field] = _this.convertToDateOrDuration(field, item, options);\r\n                        });\r\n                    }\r\n                    return value;\r\n                }, options.indent);\r\n                charset = this.adapter.apply(\"charset\", {\r\n                    charset: \"charset=utf-8\",\r\n                    type: type,\r\n                    options: options\r\n                }).charset;\r\n                uri = this.adapter.apply(\"getJSON\", {\r\n                    data: \"data:\" + this.getContentType(type) + \";\" + charset + \",\" + encodeURIComponent(json),\r\n                    options: options\r\n                }).data;\r\n                return [2 /*return*/, uri];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Converts the value to proper date format.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}                                  field       Field name\r\n     * @param  {any}                                     value       Value\r\n     * @param  {IExportCSVOptions | IExportJSONOptions}  options     Options\r\n     * @param  {boolean}                                 keepAsDate  Will ignore formatting and will keep as Date object if set\r\n     * @return {any}                                                 Formatted date value or unmodified value\r\n     */\r\n    Export.prototype.convertToDateOrDuration = function (field, value, options, keepAsDate) {\r\n        // Is this a timestamp or duration?\r\n        if (typeof value == \"number\") {\r\n            if (this.isDateField(field)) {\r\n                value = new Date(value);\r\n            }\r\n            else if (this.isDurationField(field)) {\r\n                return this.durationFormatter.format(value, this.durationFormat);\r\n            }\r\n        }\r\n        if (value instanceof Date) {\r\n            if (options.useTimestamps) {\r\n                value = value.getTime();\r\n            }\r\n            else if (options.useLocale) {\r\n                if (!keepAsDate) {\r\n                    value = value.toLocaleString();\r\n                }\r\n            }\r\n            else {\r\n                value = this.dateFormatter.format(value, this.dateFormat);\r\n            }\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Converts empty value based on `emptyAs` option.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @type {string}\r\n     */\r\n    Export.prototype.convertEmptyValue = function (field, value, options) {\r\n        return $type.hasValue(value) ? value : options.emptyAs;\r\n    };\r\n    /**\r\n     * Triggers download of the file.\r\n     *\r\n     * This is an asynchronous function. Check the description of `getImage()`\r\n     * for description and example usage.\r\n     *\r\n     * @param  {string}            uri       Data URI with file content\r\n     * @param  {string}            fileName  File name\r\n     * @return {Promise<boolean>}            Promise\r\n     * @async\r\n     */\r\n    Export.prototype.download = function (uri, fileName) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var link, parts, contentType, decoded, chars, i, charCode, blob, parts, contentType, iframe, idoc;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                //if (window.navigator.msSaveOrOpenBlob === undefined) {\r\n                if (this.linkDownloadSupport() && !this.blobDownloadSupport()) {\r\n                    link = document.createElement(\"a\");\r\n                    link.download = fileName;\r\n                    //uri = uri.replace(/#/g, \"%23\");\r\n                    link.href = uri;\r\n                    document.body.appendChild(link);\r\n                    link.click();\r\n                    document.body.removeChild(link);\r\n                }\r\n                else if ($type.hasValue(window.navigator.msSaveBlob)) {\r\n                    parts = uri.split(\";\");\r\n                    contentType = parts.shift().replace(/data:/, \"\");\r\n                    uri = decodeURIComponent(parts.join(\";\").replace(/^[^,]*,/, \"\"));\r\n                    // Check if we need to Base64-decode\r\n                    if ([\"image/svg+xml\", \"application/json\", \"text/csv\"].indexOf(contentType) == -1) {\r\n                        try {\r\n                            decoded = atob(uri);\r\n                            uri = decoded;\r\n                        }\r\n                        catch (e) {\r\n                            // Error occurred, meaning string was not Base64-encoded. Do nothing.\r\n                            return [2 /*return*/, false];\r\n                        }\r\n                    }\r\n                    chars = new Array(uri.length);\r\n                    for (i = 0; i < uri.length; ++i) {\r\n                        charCode = uri.charCodeAt(i);\r\n                        chars[i] = charCode;\r\n                    }\r\n                    blob = new Blob([new Uint8Array(chars)], { type: contentType });\r\n                    window.navigator.msSaveBlob(blob, fileName);\r\n                }\r\n                else if (this.legacyIE()) {\r\n                    parts = uri.match(/^data:(.*);[ ]*([^,]*),(.*)$/);\r\n                    if (parts.length === 4) {\r\n                        // Base64-encoded or text-based stuff?\r\n                        if (parts[2] == \"base64\") {\r\n                            // Base64-encoded - probably an image\r\n                            if (parts[1].match(/^image\\//)) {\r\n                                // Yep, an image. Let's create a temporary image placeholder,\r\n                                // so that user can use do Save As.\r\n                                this.showModal(\"<img src=\\\"\" + uri + \"\\\" style=\\\"float: left; max-width: 50%; max-height: 80%; margin: 0 1em 0.5em 0; border: 1px solid #eee;\\\" />\" +\r\n                                    \"<p>\" + this.language.translate(\"To save the image, right-click thumbnail on the left and choose \\\"Save picture as...\\\"\") +\r\n                                    \"</p>\" +\r\n                                    \"<p style=\\\"text-align: center;\\\"><small>\" + this.language.translate(\"(Press ESC to close this message)\") + \"</small></p>\", this.language.translate(\"Image Export Complete\"));\r\n                            }\r\n                        }\r\n                        else {\r\n                            contentType = void 0;\r\n                            if (fileName.match(/\\.svg$/)) {\r\n                                contentType = \"image/svg+xml\";\r\n                            }\r\n                            else {\r\n                                contentType = \"text/plain\";\r\n                                fileName += \".txt\";\r\n                            }\r\n                            iframe = document.createElement(\"iframe\");\r\n                            iframe.width = \"1px\";\r\n                            iframe.height = \"1px\";\r\n                            iframe.style.display = \"none\";\r\n                            document.body.appendChild(iframe);\r\n                            idoc = iframe.contentDocument;\r\n                            idoc.open(contentType, \"replace\");\r\n                            // TODO test this with various encodings (e.g. UTF)\r\n                            //idoc.charset = parts[2].replace(/charset=/, \"\");\r\n                            idoc.write(decodeURIComponent(parts[3]));\r\n                            idoc.close();\r\n                            idoc.execCommand(\"SaveAs\", true, fileName);\r\n                            // Destroy the iframe\r\n                            document.body.removeChild(iframe);\r\n                        }\r\n                    }\r\n                }\r\n                return [2 /*return*/, true];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Returns `true` if browser has any supported methods to trigger download\r\n     * of a binary file.\r\n     *\r\n     * @return {boolean} Supports downloads?\r\n     */\r\n    Export.prototype.downloadSupport = function () {\r\n        return this.linkDownloadSupport() || this.blobDownloadSupport();\r\n    };\r\n    /**\r\n     * Checks if the browser supports \"download\" attribute on links.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {boolean} Browser supports triggering downloads?\r\n     */\r\n    Export.prototype.linkDownloadSupport = function () {\r\n        // Do we have this cached?\r\n        var cache = registry.getCache(\"linkDownloadSupport\");\r\n        if (cache === false || cache === true) {\r\n            return cache;\r\n        }\r\n        var a = document.createElement(\"a\");\r\n        var res = typeof a.download !== \"undefined\";\r\n        registry.setCache(\"linkDownloadSupport\", res);\r\n        return res;\r\n    };\r\n    /**\r\n     * Checks if the browser supports download via `msBlob`.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {boolean} Browser supports triggering downloads?\r\n     */\r\n    Export.prototype.blobDownloadSupport = function () {\r\n        return $type.hasValue(window.navigator.msSaveOrOpenBlob);\r\n    };\r\n    /**\r\n     * Checks if this is a legacy version of IE.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {boolean} IE9 or less?\r\n     */\r\n    Export.prototype.legacyIE = function () {\r\n        // Create a temporary <div> with conditional tags in it an an <i> tag.\r\n        // Count <i>s. If there are some, we have IE9 or late on our hands.\r\n        var div = document.createElement(\"div\");\r\n        div.innerHTML = \"<!--[if lt IE 10]><i></i><![endif]-->\";\r\n        return div.getElementsByTagName(\"i\").length == 1;\r\n    };\r\n    /**\r\n     * Initiates print of the chart.\r\n     *\r\n     * This is an asynchronous function. Check the description of `getImage()`\r\n     * for description and example usage.\r\n     *\r\n     * @param {string}               data     Data URI for the image\r\n     * @param {IExportPrintOptions}  options  Options\r\n     * @param {string}               title    Optional title to use (uses window's title by default)\r\n     * @return {Promise<boolean>}             Promise\r\n     * @async\r\n     */\r\n    Export.prototype.print = function (data, options, title) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            return tslib_1.__generator(this, function (_a) {\r\n                if (options.printMethod == \"css\") {\r\n                    return [2 /*return*/, this.printViaCSS(data, options, title)];\r\n                }\r\n                else {\r\n                    return [2 /*return*/, this.printViaIframe(data, options, title)];\r\n                }\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    Export.prototype.printViaCSS = function (data, options, title) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var scroll, rule, originalTitle, img, isIOS;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                scroll = document.documentElement.scrollTop || document.body.scrollTop;\r\n                rule = new StyleRule(\"body > *\", {\r\n                    \"display\": \"none\",\r\n                    \"position\": \"fixed\",\r\n                    \"visibility\": \"hidden\",\r\n                    \"opacity\": \"0\",\r\n                    \"clipPath\": \"polygon(0px 0px,0px 0px,0px 0px,0px 0px);\"\r\n                });\r\n                if (title && document && document.title) {\r\n                    originalTitle = document.title;\r\n                    document.title = title;\r\n                }\r\n                img = new Image();\r\n                img.src = data;\r\n                img.style.maxWidth = \"100%\";\r\n                img.style.display = \"block\";\r\n                img.style.position = \"relative\";\r\n                img.style.visibility = \"visible\";\r\n                img.style.opacity = \"1\";\r\n                img.style.clipPath = \"none\";\r\n                document.body.appendChild(img);\r\n                // Print\r\n                this.setTimeout(function () {\r\n                    window.print();\r\n                }, 50);\r\n                isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\r\n                if (isIOS && (options.delay < 1000)) {\r\n                    options.delay = 1000;\r\n                }\r\n                else if (options.delay < 100) {\r\n                    options.delay = 100;\r\n                }\r\n                // Delay function that resets back the document the way ot was before\r\n                this.setTimeout(function () {\r\n                    // Remove image\r\n                    document.body.removeChild(img);\r\n                    // Reset back all elements\r\n                    /*for (let len = items.length, i = 0; i < len; i++) {\r\n                        let item = <HTMLElement>items[i];\r\n                        if ($dom.isElement(item)) {\r\n                            item.style.display = states[i];\r\n                        }\r\n                    }*/\r\n                    rule.dispose();\r\n                    // Restore title\r\n                    if (originalTitle) {\r\n                        document.title = document.title;\r\n                    }\r\n                    // Scroll back the document the way it was before\r\n                    document.documentElement.scrollTop = document.body.scrollTop = scroll;\r\n                }, options.delay || 500);\r\n                return [2 /*return*/, true];\r\n            });\r\n        });\r\n    };\r\n    Export.prototype.printViaIframe = function (data, options, title) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var iframe, img, isIOS;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                iframe = document.createElement(\"iframe\");\r\n                iframe.style.visibility = \"hidden\";\r\n                document.body.appendChild(iframe);\r\n                // This is needed for FireFox\r\n                iframe.contentWindow.document.open();\r\n                iframe.contentWindow.document.close();\r\n                img = new Image();\r\n                img.src = data;\r\n                img.style.maxWidth = \"100%\";\r\n                if (title) {\r\n                    iframe.contentWindow.document.title = title;\r\n                }\r\n                iframe.contentWindow.document.body.appendChild(img);\r\n                iframe.load = function () {\r\n                    iframe.contentWindow.document.body.appendChild(img);\r\n                };\r\n                // Print\r\n                this.setTimeout(function () {\r\n                    try {\r\n                        if (!iframe.contentWindow.document.execCommand(\"print\", false, null)) {\r\n                            iframe.contentWindow.print();\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        iframe.contentWindow.print();\r\n                    }\r\n                }, options.delay || 50);\r\n                isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\r\n                if (isIOS && (options.delay < 1000)) {\r\n                    options.delay = 1000;\r\n                }\r\n                else if (options.delay < 100) {\r\n                    options.delay = 100;\r\n                }\r\n                // Delay function that resets back the document the way ot was before\r\n                this.setTimeout(function () {\r\n                    // Remove image\r\n                    document.body.removeChild(iframe);\r\n                }, options.delay + 50 || 100);\r\n                return [2 /*return*/, true];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Finds a background color for the element. If element is transparent it goes\r\n     * up the DOM hierarchy to find a parent element that does.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {Element}  element Element\r\n     * @return {Color}            Color code\r\n     */\r\n    Export.prototype.findBackgroundColor = function (element) {\r\n        // Check if element has styles set\r\n        var opacity = 1, currentColor = \"\";\r\n        if (element.currentStyle) {\r\n            currentColor = element.currentStyle[\"background-color\"];\r\n        }\r\n        else if (window.getComputedStyle) {\r\n            currentColor = document.defaultView.getComputedStyle(element, null).getPropertyValue(\"background-color\");\r\n        }\r\n        // Check opacity\r\n        if (currentColor.match(/[^,]*,[^,]*,[^,]*,[ ]?0/) || currentColor == \"transparent\") {\r\n            opacity = 0;\r\n        }\r\n        if (opacity == 0) {\r\n            var parent_2 = element.parentElement; // || <Element>element.parentNode;\r\n            // Completely transparent. Look for a parent\r\n            if (parent_2) {\r\n                return this.findBackgroundColor(parent_2);\r\n            }\r\n            else {\r\n                return color(\"#fff\");\r\n            }\r\n        }\r\n        else {\r\n            return color(currentColor, opacity);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a font fmaily name for the element (directly set or\r\n     * computed/inherited).\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {Element}  element  Element\r\n     * @return {string}            Font family\r\n     */\r\n    Export.prototype.findFont = function (element) {\r\n        // Check if element has styles set\r\n        var font = \"\";\r\n        if (element.currentStyle) {\r\n            font = element.currentStyle[\"font-family\"];\r\n        }\r\n        else if (window.getComputedStyle) {\r\n            font = document.defaultView.getComputedStyle(element, null).getPropertyValue(\"font-family\");\r\n        }\r\n        if (!font) {\r\n            // Completely transparent. Look for a parent\r\n            var parent_3 = element.parentElement || element.parentNode;\r\n            if (parent_3) {\r\n                return this.findFont(parent_3);\r\n            }\r\n            else {\r\n                return undefined;\r\n            }\r\n        }\r\n        else {\r\n            return font;\r\n        }\r\n    };\r\n    /**\r\n     * Returns a font fmaily name for the element (directly set or\r\n     * computed/inherited).\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {Element}  element  Element\r\n     * @return {string}            Font family\r\n     */\r\n    Export.prototype.findFontSize = function (element) {\r\n        // Check if element has styles set\r\n        var font = \"\";\r\n        if (element.currentStyle) {\r\n            font = element.currentStyle[\"font-size\"];\r\n        }\r\n        else if (window.getComputedStyle) {\r\n            font = document.defaultView.getComputedStyle(element, null).getPropertyValue(\"font-size\");\r\n        }\r\n        if (!font) {\r\n            // Completely transparent. Look for a parent\r\n            var parent_4 = element.parentElement || element.parentNode;\r\n            if (parent_4) {\r\n                return this.findFont(parent_4);\r\n            }\r\n            else {\r\n                return undefined;\r\n            }\r\n        }\r\n        else {\r\n            return font;\r\n        }\r\n    };\r\n    Object.defineProperty(Export.prototype, \"container\", {\r\n        /**\r\n         * @return {HTMLElement} Reference\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"container\", {\r\n                container: this._container\r\n            }).container;\r\n        },\r\n        /**\r\n         * A reference to a container to be used to place [[ExportMenu]] in.\r\n         *\r\n         * @param {HTMLElement} value Reference\r\n         */\r\n        set: function (value) {\r\n            this._container = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Export.prototype, \"sprite\", {\r\n        /**\r\n         * @return {Sprite} Sprite\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"sprite\", {\r\n                sprite: this._sprite\r\n            }).sprite;\r\n        },\r\n        /**\r\n         * A reference to [[Sprite]] to export. Can be any Sprite, including some\r\n         * internal elements.\r\n         *\r\n         * @param {Sprite} value Sprite\r\n         */\r\n        set: function (value) {\r\n            this._sprite = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Export.prototype, \"data\", {\r\n        /**\r\n         * @return {any} Data\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"data\", {\r\n                data: this._data\r\n            }).data;\r\n        },\r\n        /**\r\n         * Data to export.\r\n         *\r\n         * @param {any} value Data\r\n         */\r\n        set: function (value) {\r\n            this._data = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Export.prototype, \"dataFields\", {\r\n        /**\r\n         * @return {any} Field names `{ field: fieldName }`\r\n         */\r\n        get: function () {\r\n            if (!this._dataFields) {\r\n                this.generateDataFields();\r\n            }\r\n            return this.adapter.apply(\"dataFields\", {\r\n                dataFields: this._dataFields\r\n            }).dataFields;\r\n        },\r\n        /**\r\n         * Data fields in `{ field: fieldName }` format. Those are used for\r\n         * exporting in data formats to name the columns.\r\n         *\r\n         * @param {any} value Field names\r\n         */\r\n        set: function (value) {\r\n            this._dataFields = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Export.prototype, \"dateFormatter\", {\r\n        /**\r\n         * @return {any} A DateFormatter instance\r\n         */\r\n        get: function () {\r\n            if (!this._dateFormatter) {\r\n                this._dateFormatter = new DateFormatter();\r\n            }\r\n            return this.adapter.apply(\"dateFormatter\", {\r\n                dateFormatter: this._dateFormatter\r\n            }).dateFormatter;\r\n        },\r\n        /**\r\n         * A [[DateFormatter]] to use when formatting dates when exporting data.\r\n         *\r\n         * @param {any} value DateFormatter instance\r\n         */\r\n        set: function (value) {\r\n            this._dateFormatter = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Export.prototype, \"dateFormat\", {\r\n        /**\r\n         * @return {Optional<string>} Date format\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"dateFormat\", {\r\n                dateFormat: this._dateFormat\r\n            }).dateFormat;\r\n        },\r\n        /**\r\n         * A date format to use for exporting dates. Will use [[DateFormatter]]\r\n         * format if not set.\r\n         *\r\n         * @param {Optional<string>} value Date format\r\n         */\r\n        set: function (value) {\r\n            this._dateFormat = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Export.prototype, \"dateFields\", {\r\n        /**\r\n         * @return {List<string>} Date field list\r\n         */\r\n        get: function () {\r\n            if (!this._dateFields) {\r\n                this._dateFields = new List();\r\n            }\r\n            return this.adapter.apply(\"dateFields\", {\r\n                dateFields: this._dateFields\r\n            }).dateFields;\r\n        },\r\n        /**\r\n         * A list of fields that hold date values.\r\n         *\r\n         * @param {List<string>} value Date field list\r\n         */\r\n        set: function (value) {\r\n            this._dateFields = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Export.prototype, \"durationFormatter\", {\r\n        /**\r\n         * @return {any} A DurationFormatter instance\r\n         */\r\n        get: function () {\r\n            if (!this._durationFormatter) {\r\n                this._durationFormatter = new DurationFormatter();\r\n            }\r\n            return this.adapter.apply(\"durationFormatter\", {\r\n                durationFormatter: this._durationFormatter\r\n            }).durationFormatter;\r\n        },\r\n        /**\r\n         * A [[DurationFormatter]] to use when formatting duration values when\r\n         * exporting data.\r\n         *\r\n         * @param {any}  value  DurationFormatter instance\r\n         */\r\n        set: function (value) {\r\n            this._durationFormatter = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Export.prototype, \"durationFormat\", {\r\n        /**\r\n         * @return {Optional<string>} Duration format\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"durationFormat\", {\r\n                durationFormat: this._durationFormat\r\n            }).durationFormat;\r\n        },\r\n        /**\r\n         * A format to use when formatting values from `durationFields`.\r\n         * Will use [[DurationFormatter]] format if not set.\r\n         *\r\n         * @param {Optional<string>} value Duration format\r\n         */\r\n        set: function (value) {\r\n            this._durationFormat = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Export.prototype, \"durationFields\", {\r\n        /**\r\n         * @return {List<string>} Duration field list\r\n         */\r\n        get: function () {\r\n            if (!this._durationFields) {\r\n                this._durationFields = new List();\r\n            }\r\n            return this.adapter.apply(\"durationFields\", {\r\n                durationFields: this._durationFields\r\n            }).durationFields;\r\n        },\r\n        /**\r\n         * A list of fields that hold duration values.\r\n         *\r\n         * @param {List<string>} value Duration field list\r\n         */\r\n        set: function (value) {\r\n            this._durationFields = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Generates data fields out of the first row of data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Export.prototype.generateDataFields = function () {\r\n        var _this = this;\r\n        this._dataFields = {};\r\n        if (this.data.length) {\r\n            $array.each(this.data, function (row) {\r\n                $object.each(row, function (key, value) {\r\n                    if (!$type.hasValue(_this._dataFields[key])) {\r\n                        _this._dataFields[key] = _this.adapter.apply(\"dataFieldName\", {\r\n                            name: key,\r\n                            field: key\r\n                        }).name;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Cheks against `dateFields` property to determine if this field holds\r\n     * dates.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}        field   Field name\r\n     * @param  {IExportOptions} options Options\r\n     * @return {boolean}               `true` if it's a date field\r\n     */\r\n    Export.prototype.isDateField = function (field) {\r\n        return this.adapter.apply(\"isDateField\", {\r\n            isDateField: this.dateFields.contains(field),\r\n            field: field\r\n        }).isDateField;\r\n    };\r\n    /**\r\n     * Cheks against `dateFields` property to determine if this field holds\r\n     * dates.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}        field   Field name\r\n     * @param  {IExportOptions} options Options\r\n     * @return {boolean}               `true` if it's a date field\r\n     */\r\n    Export.prototype.isDurationField = function (field) {\r\n        return this.adapter.apply(\"isDurationField\", {\r\n            isDurationField: this.durationFields.contains(field),\r\n            field: field\r\n        }).isDurationField;\r\n    };\r\n    /**\r\n     * Returns proper content type for the export type.\r\n     *\r\n     * @param  {string}  type  Export format/type\r\n     * @return {string}        Proper content type, i.e. \"image/jpeg\"\r\n     */\r\n    Export.prototype.getContentType = function (type) {\r\n        var contentType = \"\";\r\n        switch (type) {\r\n            case \"png\":\r\n            case \"gif\":\r\n                contentType = \"image/\" + type;\r\n                break;\r\n            case \"jpg\":\r\n                contentType = \"image/jpeg\";\r\n                break;\r\n            case \"svg\":\r\n                contentType = \"image/svg+xml\";\r\n                break;\r\n            case \"csv\":\r\n                contentType = \"text/csv\";\r\n                break;\r\n            case \"json\":\r\n                contentType = \"application/json\";\r\n                break;\r\n            case \"pdf\":\r\n                contentType = \"application/pdf\";\r\n                break;\r\n            case \"xlsx\":\r\n                contentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\r\n                break;\r\n        }\r\n        return this.adapter.apply(\"contentType\", {\r\n            contentType: contentType,\r\n            type: type\r\n        }).contentType;\r\n    };\r\n    Object.defineProperty(Export.prototype, \"filePrefix\", {\r\n        /**\r\n         * @return {string} File prefix\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"filePrefix\", {\r\n                filePrefix: this._filePrefix\r\n            }).filePrefix;\r\n        },\r\n        /**\r\n         * A file prefix to be used for all exported formats.\r\n         *\r\n         * Export will apply format-related extension to it. E.g. if this is set to\r\n         * \"myExport\", the file name of the PNG exported image will be \"myExport.png\".\r\n         *\r\n         * @param {string} value File prefix\r\n         */\r\n        set: function (value) {\r\n            this._filePrefix = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Export.prototype, \"backgroundColor\", {\r\n        /**\r\n         * @return {Optional<Color>} Background color\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"backgroundColor\", {\r\n                backgroundColor: this._backgroundColor\r\n            }).backgroundColor;\r\n        },\r\n        /**\r\n         * A background color to be used for exported images. If set, this will\r\n         * override the automatically acquired background color.\r\n         *\r\n         * @param {Optional<Color>} value Color\r\n         */\r\n        set: function (value) {\r\n            this._backgroundColor = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Export.prototype, \"title\", {\r\n        /**\r\n         * @return {Optional<string>} Title\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"title\", {\r\n                title: this._title\r\n            }).title;\r\n        },\r\n        /**\r\n         * A title to be used when printing.\r\n         *\r\n         * @param {Optional<string>} value Title\r\n         */\r\n        set: function (value) {\r\n            this._title = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Displays a preloader/exporting indicator.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Add ability to change text\r\n     */\r\n    Export.prototype.showPreloader = function () {\r\n        var preloader = this.preloader;\r\n        if (preloader) {\r\n            preloader.progress = 0.5;\r\n            preloader.label.text = \"...\";\r\n        }\r\n    };\r\n    /**\r\n     * Hides preloader/exporting indicator\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Export.prototype.hidePreloader = function () {\r\n        var preloader = this.preloader;\r\n        if (preloader) {\r\n            preloader.progress = 1;\r\n        }\r\n    };\r\n    Object.defineProperty(Export.prototype, \"preloader\", {\r\n        /**\r\n         * Returns a an instance of [[Preloader]] associated with the Sprite being\r\n         * exported.\r\n         *\r\n         * @return {Preloader} Preloader\r\n         */\r\n        get: function () {\r\n            return this._sprite && this._sprite.parent && this._sprite.parent.preloader ?\r\n                this._sprite.parent.preloader :\r\n                undefined;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Displays a modal saying export is taking longer than expected.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Export.prototype.showTimeout = function () {\r\n        this.showModal(this.adapter.apply(\"timeoutMessage\", {\r\n            message: this.language.translate(\"Export operation took longer than expected. Something might have gone wrong.\")\r\n        }).message);\r\n    };\r\n    /**\r\n     * Hides preloader/exporting indicator.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Export.prototype.hideTimeout = function () {\r\n        if (this._timeoutTimeout) {\r\n            this.removeDispose(this._timeoutTimeout);\r\n            this._timeoutTimeout = null;\r\n        }\r\n        this.hideModal();\r\n    };\r\n    Object.defineProperty(Export.prototype, \"language\", {\r\n        /**\r\n         * @return {Language} A [[Language]] instance to be used\r\n         */\r\n        get: function () {\r\n            if (!this._language) {\r\n                this._language = new Language();\r\n            }\r\n            return this._language;\r\n        },\r\n        /**\r\n         * A [[Language]] instance to be used for translations.\r\n         *\r\n         * @param {Language} value An instance of [[Language]]\r\n         */\r\n        set: function (value) {\r\n            this._language = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Export.prototype, \"modal\", {\r\n        /**\r\n         * Returns (and creates) [[Modal]].\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {Modal} Modal instance\r\n         */\r\n        get: function () {\r\n            if (!this._modal) {\r\n                this._modal = new Modal();\r\n                // Prefix with Sprite's class name\r\n                this._modal.adapter.add(\"classPrefix\", function (value) {\r\n                    value = options.classNamePrefix + value;\r\n                    return value;\r\n                });\r\n            }\r\n            return this._modal;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Shows [[Modal]] with specific text.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {string} text Modal contents\r\n     */\r\n    Export.prototype.showModal = function (text, title) {\r\n        // Hide previous modal and preloader\r\n        this.hideModal();\r\n        this.hidePreloader();\r\n        // Create modal\r\n        var modal = this.modal;\r\n        modal.container = this.sprite.svgContainer.SVGContainer;\r\n        modal.content = text;\r\n        modal.readerTitle = title;\r\n        modal.open();\r\n    };\r\n    /**\r\n     * Hides modal window if one's currently open.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Export.prototype.hideModal = function () {\r\n        if (this._modal) {\r\n            this.modal.close();\r\n        }\r\n    };\r\n    /**\r\n     * Loads canvg dynamic module.\r\n     *\r\n     * This is an asynchronous function. Check the description of `getImage()`\r\n     * for description and example usage.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {Promise<any>} Instance of canvg\r\n     * @async\r\n     */\r\n    Export.prototype._canvg = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, import(/* webpackChunkName: \"canvg\" */ \"canvg\")];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Object.defineProperty(Export.prototype, \"canvg\", {\r\n        /**\r\n         * Returns canvg instance.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {Promise<any>} Instance of canvg\r\n         */\r\n        get: function () {\r\n            return this._canvg();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Loads pdfmake dynamic module\r\n     *\r\n     * This is an asynchronous function. Check the description of `getImage()`\r\n     * for description and example usage.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {Promise<any>} Instance of pdfmake\r\n     * @async\r\n     */\r\n    Export.prototype._pdfmake = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var a, pdfmake, vfs_fonts, global;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, Promise.all([\r\n                            import(/* webpackChunkName: \"pdfmake\" */ \"pdfmake/build/pdfmake.js\"),\r\n                            import(/* webpackChunkName: \"pdfmake\" */ \"../../pdfmake/vfs_fonts\")\r\n                        ])];\r\n                    case 1:\r\n                        a = _a.sent();\r\n                        pdfmake = a[0];\r\n                        vfs_fonts = a[1];\r\n                        global = window;\r\n                        global.pdfMake = global.pdfMake || {};\r\n                        global.pdfMake.vfs = vfs_fonts.default;\r\n                        pdfmake.vfs = vfs_fonts.default;\r\n                        return [2 /*return*/, pdfmake];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Object.defineProperty(Export.prototype, \"pdfmake\", {\r\n        /**\r\n         * Returns pdfmake instance.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {Promise<any>} Instance of pdfmake\r\n         */\r\n        get: function () {\r\n            return this._pdfmake();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Loads xlsx dynamic module.\r\n     *\r\n     * This is an asynchronous function. Check the description of `getImage()`\r\n     * for description and example usage.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {Promise<any>} Instance of pdfmake\r\n     * @async\r\n     */\r\n    Export.prototype._xlsx = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, import(/* webpackChunkName: \"xlsx\" */ \"xlsx\")];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Object.defineProperty(Export.prototype, \"xlsx\", {\r\n        /**\r\n         * Returns xlsx instance.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {Promise<any>} Instance of pdfmake\r\n         */\r\n        get: function () {\r\n            return this._xlsx();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets options for a format.\r\n     *\r\n     * @type {Key}\r\n     */\r\n    Export.prototype.setFormatOptions = function (type, options) {\r\n        this._formatOptions.setKey(type, options);\r\n    };\r\n    /**\r\n     * Returns current options for a format.\r\n     */\r\n    Export.prototype.getFormatOptions = function (type) {\r\n        return this._formatOptions.getKey(type);\r\n    };\r\n    /**\r\n     * Disables interactivity on parent chart.\r\n     */\r\n    Export.prototype._disablePointers = function () {\r\n        if (!$type.hasValue(this._spriteInteractionsEnabled)) {\r\n            this._spriteInteractionsEnabled = this.sprite.interactionsEnabled;\r\n        }\r\n        this.sprite.interactionsEnabled = false;\r\n    };\r\n    /**\r\n     * Releases temporarily disabled pointers on parent chart.\r\n     */\r\n    Export.prototype._releasePointers = function () {\r\n        if ($type.hasValue(this._spriteInteractionsEnabled)) {\r\n            this.sprite.interactionsEnabled = this._spriteInteractionsEnabled;\r\n        }\r\n    };\r\n    /**\r\n     * Hides all elements that should not be included in the exported image.\r\n     */\r\n    Export.prototype.hideNonExportableSprites = function () {\r\n        var _this = this;\r\n        var svgContainer = this.sprite.svgContainer;\r\n        if (svgContainer) {\r\n            $array.each(svgContainer.nonExportableSprites, function (item) {\r\n                if (!item.isHidden && !item.isHiding) {\r\n                    _this._hiddenObjects.push(item);\r\n                }\r\n                item.hide(0);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Respores elements that were hidden before export.\r\n     */\r\n    Export.prototype.restoreNonExportableSprites = function () {\r\n        $array.each(this._hiddenObjects, function (item) {\r\n            item.show(0);\r\n        });\r\n        this._hiddenObjects = [];\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {object}  config  Config\r\n     */\r\n    Export.prototype.processConfig = function (config) {\r\n        registry.registeredClasses[\"ExportMenu\"] = ExportMenu;\r\n        if (config) {\r\n            // Set up menu\r\n            if ($type.hasValue(config.menu) && !$type.hasValue(config.menu.type)) {\r\n                config.menu.type = \"ExportMenu\";\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    /**\r\n     * XLINK namespace definition.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @type {string}\r\n     */\r\n    Export.XLINK = \"http://www.w3.org/1999/xlink\";\r\n    return Export;\r\n}(Validatable));\r\nexport { Export };\r\n//# sourceMappingURL=Export.js.map","import { StyleRule } from \"../utils/DOM\";\r\nimport { InterfaceColorSet } from \"../utils/InterfaceColorSet\";\r\nimport { Dictionary } from \"../utils/Dictionary\";\r\nimport { MultiDisposer, CounterDisposer } from \"../utils/Disposer\";\r\nvar rules = new Dictionary();\r\n/**\r\n * A dynamically-loadable CSS module for Export menu.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {string}     prefix  Prefix to addtach to class names\r\n * @return {IDisposer}          A MultiDisposer with style rules\r\n */\r\nexport default function (prefix) {\r\n    var newPrefix = (prefix ? prefix : \"amexport\");\r\n    var colorSet = new InterfaceColorSet();\r\n    var counter = rules.insertKeyIfEmpty(newPrefix, function () {\r\n        var disposer = new MultiDisposer([\r\n            /*new StyleRule(`.${newPrefix}-menu`, {\r\n                \"opacity\": \"0.3\",\r\n                \"transition\": \"all 100ms ease-in-out\",\r\n            }),\r\n\r\n            new StyleRule(`div:hover .${newPrefix}-menu, .${newPrefix}-menu.active`, {\r\n                \"opacity\": \"0.9\",\r\n            }),*/\r\n            new StyleRule(\".\" + newPrefix + \"-menu-level-0\", {\r\n                \"position\": \"absolute\",\r\n                \"top\": \"5px\",\r\n                \"right\": \"5px\",\r\n            }),\r\n            new StyleRule(\".\" + newPrefix + \"-menu-level-0.\" + newPrefix + \"-left\", {\r\n                \"right\": \"auto\",\r\n                \"left\": \"5px\",\r\n            }),\r\n            new StyleRule(\".\" + newPrefix + \"-menu-level-0.\" + newPrefix + \"-right\", {\r\n                \"right\": \"5px\",\r\n                \"left\": \"auto\",\r\n            }),\r\n            new StyleRule(\".\" + newPrefix + \"-menu-level-0.\" + newPrefix + \"-top\", {\r\n                \"top\": \"5px\",\r\n                \"bottom\": \"auto\",\r\n            }),\r\n            new StyleRule(\".\" + newPrefix + \"-menu-level-0.\" + newPrefix + \"-bottom\", {\r\n                \"top\": \"auto\",\r\n                \"bottom\": \"5px\",\r\n            }),\r\n            new StyleRule(\".\" + newPrefix + \"-item.\" + newPrefix + \"-item-level-0\", {\r\n                \"opacity\": \"0.3\",\r\n                \"width\": \"30px\",\r\n                \"height\": \"30px\",\r\n                \"transition\": \"all 100ms ease-in-out\",\r\n            }),\r\n            new StyleRule(\"div:hover .\" + newPrefix + \"-item.\" + newPrefix + \"-item-level-0, .\" + newPrefix + \"-item.\" + newPrefix + \"-item-level-0.active\", {\r\n                \"opacity\": \"0.9\",\r\n            }),\r\n            new StyleRule(\".\" + newPrefix + \"-item.\" + newPrefix + \"-item-level-0 > a\", {\r\n                \"padding\": \"0\",\r\n                \"text-align\": \"center\"\r\n            }),\r\n            new StyleRule(\".\" + newPrefix + \"-item.\" + newPrefix + \"-item-level-0:before\", {\r\n                \"display\": \"block\"\r\n            }),\r\n            new StyleRule(\".\" + newPrefix + \"-item\", {\r\n                \"position\": \"relative\",\r\n                \"display\": \"block\",\r\n                \"opacity\": \"0\",\r\n                \"z-index\": \"1\",\r\n                \"border-radius\": \"3px\",\r\n                \"background-color\": colorSet.getFor(\"secondaryButton\").hex,\r\n                \"padding\": \"0\",\r\n                \"margin\": \"1px 1px 0 0\",\r\n                \"color\": colorSet.getFor(\"secondaryButton\").alternative.hex,\r\n                \"transition\": \"all 100ms ease-in-out, opacity 0.5s ease 0.5s\",\r\n            }),\r\n            new StyleRule(\".\" + newPrefix + \"-left .\" + newPrefix + \"-item\", {\r\n                \"margin\": \"1px 0 0 1px\",\r\n            }),\r\n            new StyleRule(\".\" + newPrefix + \"-item:hover, .\" + newPrefix + \"-item.active\", {\r\n                \"background\": colorSet.getFor(\"secondaryButtonHover\").hex,\r\n                \"color\": colorSet.getFor(\"secondaryButtonText\").hex,\r\n            }),\r\n            new StyleRule(\".\" + newPrefix + \"-item > .\" + newPrefix + \"-menu\", {\r\n                \"position\": \"absolute\",\r\n                \"top\": \"-1px\",\r\n                \"right\": \"0\",\r\n                \"margin-right\": \"100%\",\r\n            }),\r\n            new StyleRule(\".\" + newPrefix + \"-left .\" + newPrefix + \"-item > .\" + newPrefix + \"-menu\", {\r\n                \"left\": \"0\",\r\n                \"right\": \"auto\",\r\n                \"margin-left\": \"100%\",\r\n                \"margin-right\": \"auto\",\r\n            }),\r\n            new StyleRule(\".\" + newPrefix + \"-right .\" + newPrefix + \"-item > .\" + newPrefix + \"-menu\", {\r\n                \"left\": \"auto\",\r\n                \"right\": \"0\",\r\n                \"margin-left\": \"auto\",\r\n                \"margin-right\": \"100%\",\r\n            }),\r\n            new StyleRule(\".\" + newPrefix + \"-top .\" + newPrefix + \"-item > .\" + newPrefix + \"-menu\", {\r\n                \"top\": \"-1px\",\r\n                \"bottom\": \"auto\",\r\n            }),\r\n            new StyleRule(\".\" + newPrefix + \"-bottom .\" + newPrefix + \"-item > .\" + newPrefix + \"-menu\", {\r\n                \"top\": \"auto\",\r\n                \"bottom\": \"0\",\r\n            }),\r\n            new StyleRule(\".\" + newPrefix + \"-item > .\" + newPrefix + \"-menu\", {\r\n                \"display\": \"none\",\r\n            }),\r\n            new StyleRule(\".\" + newPrefix + \"-item:hover > .\" + newPrefix + \"-menu, .\" + newPrefix + \"-item.active > .\" + newPrefix + \"-menu\", {\r\n                \"display\": \"block\",\r\n            }),\r\n            new StyleRule(\".\" + newPrefix + \"-item:hover > .\" + newPrefix + \"-menu > .\" + newPrefix + \"-item, .\" + newPrefix + \"-item.active > .\" + newPrefix + \"-menu > .\" + newPrefix + \"-item\", {\r\n                \"opacity\": \"1\",\r\n            }),\r\n            new StyleRule(\".\" + newPrefix + \"-menu\", {\r\n                \"display\": \"block\",\r\n                \"list-style\": \"none\",\r\n                \"margin\": \"0\",\r\n                \"padding\": \"0\",\r\n            }),\r\n            new StyleRule(\".\" + newPrefix + \"-label\", {\r\n                \"display\": \"block\",\r\n                \"cursor\": \"default\",\r\n                \"padding\": \"0.5em 1em\",\r\n            }),\r\n            new StyleRule(\".\" + newPrefix + \"-clickable\", {\r\n                \"cursor\": \"pointer\",\r\n            }),\r\n        ]);\r\n        return new CounterDisposer(function () {\r\n            rules.removeKey(newPrefix);\r\n            disposer.dispose();\r\n        });\r\n    });\r\n    return counter.increment();\r\n}\r\n//# sourceMappingURL=ExportCSS.js.map","/**\r\n * ExportMenu provides functionality for building Export menu\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport exportCSS from \"./ExportCSS\";\r\nimport { Adapter } from \"../utils/Adapter\";\r\nimport { List } from \"../utils/List\";\r\nimport { getInteraction } from \"../interaction/Interaction\";\r\nimport { MutableValueDisposer } from \"../utils/Disposer\";\r\nimport { Language } from \"../utils/Language\";\r\nimport { Validatable } from \"../utils/Validatable\";\r\nimport { keyboard } from \"../utils/Keyboard\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $iter from \"../utils/Iterator\";\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a menu for Export operations.\r\n *\r\n * To add an export menu to a chart, set this to a new instance of\r\n * [[ExportMenu]].\r\n *\r\n * ```TypeScript\r\n * chart.exporting.menu = new am4core.ExportMenu();\r\n * ```\r\n * ```JavaScript\r\n * chart.exporting.menu = new am4core.ExportMenu();\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"exporting\": {\r\n *     \"menu\": {}\r\n *   }\r\n * }\r\n * ```\r\n * @important\r\n */\r\nvar ExportMenu = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ExportMenu, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ExportMenu() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * An [[Adapter]].\r\n         *\r\n         * @type {Adapter<ExportMenu, IExportMenuAdapters>}\r\n         */\r\n        _this.adapter = new Adapter(_this);\r\n        /**\r\n         * How many milliseconds to hold menu/sub-menu open after it loses focus or\r\n         * hover, before auto-closing it.\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this.closeDelay = 1000;\r\n        /**\r\n         * An instance of [[Language]].\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {MutableValueDisposer<Language>}\r\n         */\r\n        _this._language = new MutableValueDisposer();\r\n        /**\r\n         * What HTML tags to use to build menu.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {string}\r\n         */\r\n        _this._menuTag = \"ul\";\r\n        /**\r\n         * Which tag to use to enclose individual menu items.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {string}\r\n         */\r\n        _this._itemTag = \"li\";\r\n        /**\r\n         * Tag to wrap menu item labels in.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {string}\r\n         */\r\n        _this._labelTag = \"a\";\r\n        /**\r\n         * Prefix for class names applied to menu elements.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {string}\r\n         */\r\n        _this._classPrefix = \"amexport\";\r\n        /**\r\n         * If set to `true` [[ExportMenu]] will load it's own external CSS when\r\n         * instantiated.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {boolean}\r\n         */\r\n        _this._defaultStyles = true;\r\n        /**\r\n         * Horizontal positioning.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {Align}\r\n         */\r\n        _this._align = \"right\";\r\n        /**\r\n         * Vertical positioning.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {VerticalAlign}\r\n         */\r\n        _this._verticalAlign = \"top\";\r\n        /**\r\n         * A tabindex to apply to Export Menu.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {number}\r\n         */\r\n        _this._tabindex = 0;\r\n        /**\r\n         * Whether next menu close event should be ignored.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {boolean}\r\n         */\r\n        _this._ignoreNextClose = false;\r\n        /**\r\n         * Default menu items.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {Array<IExportMenuItem>}\r\n         */\r\n        _this._items = [\r\n            {\r\n                \"label\": \"...\",\r\n                \"menu\": [\r\n                    {\r\n                        \"label\": \"Image\",\r\n                        \"menu\": [\r\n                            { \"type\": \"png\", \"label\": \"PNG\" },\r\n                            { \"type\": \"jpg\", \"label\": \"JPG\" },\r\n                            { \"type\": \"gif\", \"label\": \"GIF\" },\r\n                            { \"type\": \"svg\", \"label\": \"SVG\" },\r\n                            { \"type\": \"pdf\", \"label\": \"PDF\" }\r\n                        ]\r\n                    }, {\r\n                        \"label\": \"Data\",\r\n                        \"menu\": [\r\n                            { \"type\": \"json\", \"label\": \"JSON\" },\r\n                            { \"type\": \"csv\", \"label\": \"CSV\" },\r\n                            { \"type\": \"xlsx\", \"label\": \"XLSX\" }\r\n                        ]\r\n                    }, {\r\n                        \"label\": \"Print\", \"type\": \"print\"\r\n                    }\r\n                ]\r\n            }\r\n        ];\r\n        _this.className = \"ExportMenu\";\r\n        _this._disposers.push(_this._language);\r\n        _this.invalidate();\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * (Re)draws the Export menu.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ExportMenu.prototype.validate = function () {\r\n        this.draw();\r\n        _super.prototype.validate.call(this);\r\n    };\r\n    /**\r\n     * Draws the menu based on current items.\r\n     *\r\n     * Normally, there's no need to call this explicitly. The chart, if it has\r\n     * export menu enabled, will automatically draw the menu.\r\n     */\r\n    ExportMenu.prototype.draw = function () {\r\n        var _this = this;\r\n        // Create top-level menu item, or clear it\r\n        if (!this._element) {\r\n            this._element = this.createMenuElement(0);\r\n        }\r\n        else {\r\n            this._element.innerHTML = \"\";\r\n            this._element.className = this.getMenuItemClass(0);\r\n        }\r\n        // See if we're loading external CSS\r\n        // Hide it until CSS is loaded\r\n        if (this.defaultStyles) {\r\n            this._element.style.display = \"none\";\r\n        }\r\n        // Append to container\r\n        $type.getValue(this._container).appendChild(this._element);\r\n        // Apply adapter to menu items before processing\r\n        this._items = this.adapter.apply(\"items\", {\r\n            items: this._items\r\n        }).items;\r\n        for (var len = this._items.length, i = 0; i < len; i++) {\r\n            this.drawBranch(this._element, this._items[i], 0);\r\n        }\r\n        // Apply adapter to finalized menu element\r\n        this._element = this.adapter.apply(\"menuElement\", {\r\n            menuElement: this._element\r\n        }).menuElement;\r\n        // Set up global \"down\" event\r\n        this._disposers.push(getInteraction().body.events.on(\"down\", function (ev) {\r\n            if (!ev.pointer.touch) {\r\n                _this._ignoreNextClose = false;\r\n            }\r\n            _this.close();\r\n        }));\r\n        // Set up global event on ESC press to close the menu\r\n        this._disposers.push(getInteraction().body.events.on(\"keyup\", function (ev) {\r\n            var key = keyboard.getEventKey(ev.event);\r\n            switch (key) {\r\n                case \"esc\":\r\n                    _this.close();\r\n                    break;\r\n                case \"up\":\r\n                case \"down\":\r\n                case \"left\":\r\n                case \"right\":\r\n                    _this.moveSelection(key);\r\n                    break;\r\n            }\r\n        }));\r\n        if (this.defaultStyles) {\r\n            this.loadDefaultCSS();\r\n        }\r\n    };\r\n    /**\r\n     * Creates a new branch in export menu. This function is recursive for\r\n     * building multi-level menus.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {HTMLElement}     container Container to put branch elements in\r\n     * @param {IExportMenuItem} branch    Menu item\r\n     * @param {number}          level     Current nesting level\r\n     */\r\n    ExportMenu.prototype.drawBranch = function (container, branch, level) {\r\n        var _this = this;\r\n        // Apply adapter\r\n        branch = this.adapter.apply(\"branch\", {\r\n            branch: branch,\r\n            level: level\r\n        }).branch;\r\n        // Unsupported?\r\n        // ExportMenu does not check or know for specific browser/system\r\n        // capabilities. It must happen in some other code and applied via Adapter.\r\n        // Export itself will check compatibility, but there might be other plugins\r\n        // that influence it or even add any specific export functionality.\r\n        if (branch.unsupported === true) {\r\n            return;\r\n        }\r\n        // Init ascendants\r\n        if (!branch.ascendants) {\r\n            branch.ascendants = new List();\r\n        }\r\n        // Get type\r\n        var type = branch.type;\r\n        // Create an item\r\n        var element = this.createItemElement(level, type);\r\n        // Create label\r\n        var label = this.createLabelElement(level, type);\r\n        label.innerHTML = (branch.label ? this.language.translate(branch.label) : \"\");\r\n        // Apply reader text to label\r\n        var readerLabel = this.getReaderLabel(branch, label.innerHTML);\r\n        label.setAttribute(\"aria-label\", readerLabel);\r\n        // Add Label\r\n        element.appendChild(label);\r\n        // Create interaction object\r\n        // TODO clean this up when it's disposed\r\n        branch.interactions = getInteraction().getInteraction(label);\r\n        // Create interaction manager we can set event listeners to\r\n        if (this.typeClickable(type)) {\r\n            //branch.interactions.clickable = true;\r\n            // TODO clean this up when it's disposed\r\n            branch.interactions.events.on(\"hit\", function (ev) {\r\n                if (_this.events.isEnabled(\"hit\")) {\r\n                    var event_1 = {\r\n                        \"type\": \"hit\",\r\n                        \"event\": ev.event,\r\n                        \"target\": _this,\r\n                        \"branch\": branch\r\n                    };\r\n                    _this.events.dispatchImmediately(\"hit\", event_1);\r\n                }\r\n            });\r\n            // TODO clean this up when it's disposed\r\n            branch.interactions.events.on(\"keyup\", function (ev) {\r\n                if (keyboard.isKey(ev.event, \"enter\")) {\r\n                    if (_this.events.isEnabled(\"enter\")) {\r\n                        var event_2 = {\r\n                            \"type\": \"enter\",\r\n                            \"event\": ev.event,\r\n                            \"target\": _this,\r\n                            \"branch\": branch\r\n                        };\r\n                        _this.events.dispatchImmediately(\"enter\", event_2);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        {\r\n            var submenu_1 = this.getSubMenu(branch);\r\n            // Add ENTER event to open sub-menus\r\n            if (submenu_1 != null) {\r\n                // TODO clean this up when it's disposed\r\n                branch.interactions.events.on(\"keyup\", function (ev) {\r\n                    if (keyboard.isKey(ev.event, \"enter\")) {\r\n                        // This is item has sub-menu, activate the first child on ENTER\r\n                        _this.selectBranch(submenu_1[0]);\r\n                        // Attempt to set focus\r\n                        _this.setFocus(submenu_1[0]);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        // Add events\r\n        // TODO clean this up when it's disposed\r\n        branch.interactions.events.on(\"over\", function (ev) {\r\n            if (ev.pointer.touch) {\r\n                // Cancel pending menu closure\r\n                _this._ignoreNextClose = true;\r\n            }\r\n            _this.selectBranch(branch);\r\n            if (_this.events.isEnabled(\"over\")) {\r\n                var event_3 = {\r\n                    \"type\": \"over\",\r\n                    \"event\": ev.event,\r\n                    \"target\": _this,\r\n                    \"branch\": branch\r\n                };\r\n                _this.events.dispatchImmediately(\"over\", event_3);\r\n            }\r\n        });\r\n        // TODO clean this up when it's disposed\r\n        branch.interactions.events.on(\"out\", function (ev) {\r\n            if (!ev.pointer.touch) {\r\n                _this.delayUnselectBranch(branch);\r\n            }\r\n            if (_this.events.isEnabled(\"out\")) {\r\n                var event_4 = {\r\n                    \"type\": \"out\",\r\n                    \"event\": ev.event,\r\n                    \"target\": _this,\r\n                    \"branch\": branch\r\n                };\r\n                _this.events.dispatchImmediately(\"out\", event_4);\r\n            }\r\n        });\r\n        // TODO clean this up when it's disposed\r\n        branch.interactions.events.on(\"focus\", function (ev) {\r\n            _this.selectBranch(branch);\r\n        });\r\n        // TODO clean this up when it's disposed\r\n        branch.interactions.events.on(\"blur\", function (ev) {\r\n            _this.delayUnselectBranch(branch);\r\n        });\r\n        // Increment level\r\n        var local_level = level + 1;\r\n        // Has sub-menu?\r\n        if (branch.menu) {\r\n            var submenu = this.createMenuElement(local_level);\r\n            for (var len = branch.menu.length, i = 0; i < len; i++) {\r\n                var ascendants = new List();\r\n                branch.menu[i].ascendants = ascendants;\r\n                if (branch.ascendants.length) {\r\n                    ascendants.copyFrom(branch.ascendants);\r\n                }\r\n                ascendants.push(branch);\r\n                this.drawBranch(submenu, branch.menu[i], local_level);\r\n            }\r\n            // Sub-menu is empty (all items are not supported)\r\n            // Do not draw this menu item at all\r\n            if (submenu.innerHTML == \"\") {\r\n                return;\r\n            }\r\n            element.appendChild(submenu);\r\n        }\r\n        // Append to container\r\n        container.appendChild(element);\r\n    };\r\n    /**\r\n     * Creates a menu element to hold its elements in. Usually it's an `<ul>`\r\n     * tag.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {number}       level  Current nesting level\r\n     * @return {HTMLElement}         HTML element reference\r\n     */\r\n    ExportMenu.prototype.createMenuElement = function (level) {\r\n        var element = document.createElement(this.menuTag);\r\n        element.className = this.getMenuItemClass(level);\r\n        // Accessibility\r\n        if (level === 0) {\r\n            element.setAttribute(\"role\", \"menu\");\r\n        }\r\n        return element;\r\n    };\r\n    /**\r\n     * Generates a class name for the menu element based on its nesting level.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {number}  level  Current nesting level\r\n     * @return {string}         Class name(s)\r\n     */\r\n    ExportMenu.prototype.getMenuItemClass = function (level) {\r\n        var className = this.classPrefix + \"-menu \" + this.classPrefix + \"-menu-level-\" + level;\r\n        if (level === 0) {\r\n            className += \" \" + this.classPrefix + \"-menu-root \" +\r\n                this.classPrefix + \"-\" + this.align + \" \" +\r\n                this.classPrefix + \"-\" + this.verticalAlign;\r\n        }\r\n        return this.adapter.apply(\"menuClass\", {\r\n            className: className,\r\n            level: level\r\n        }).className;\r\n    };\r\n    /**\r\n     * Creates menu item. Usually `<li>` tag. Its label and sub-elements will go\r\n     * into this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {number}       level  Current nesting level\r\n     * @param  {string}       type   Type of the menu item\r\n     * @return {HTMLElement}         HTML element reference\r\n     */\r\n    ExportMenu.prototype.createItemElement = function (level, type) {\r\n        var element = document.createElement(this.itemTag);\r\n        var className = this.classPrefix + \"-item \" + this.classPrefix\r\n            + \"-item-level-\" + level\r\n            + \" \" + this.classPrefix + \"-item-\" + (type || \"blank\");\r\n        element.className = this.adapter.apply(\"itemClass\", {\r\n            className: className,\r\n            level: level,\r\n            type: type\r\n        }).className;\r\n        return element;\r\n    };\r\n    /**\r\n     * Creates a \"label\" part of the menu item. It could be text or any HTML\r\n     * content.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {number}       level  Current nesting level\r\n     * @param  {string}       type   Type of the menu item\r\n     * @return {HTMLElement}         An HTML Element\r\n     */\r\n    ExportMenu.prototype.createLabelElement = function (level, type) {\r\n        var element = document.createElement(this.labelTag);\r\n        var className = this.classPrefix + \"-label \" + this.classPrefix\r\n            + \"-label-level-\" + level\r\n            + \" \" + this.classPrefix + \"-item-\" + (type || \"blank\");\r\n        if (this.typeClickable(type)) {\r\n            className += \" \" + this.classPrefix + \"-clickable\";\r\n        }\r\n        element.className = this.adapter.apply(\"labelClass\", {\r\n            className: className,\r\n            level: level,\r\n            type: type\r\n        }).className;\r\n        // Accessible navigation\r\n        element.setAttribute(\"tabindex\", this.tabindex.toString());\r\n        element.setAttribute(\"role\", \"menuitem\");\r\n        return element;\r\n    };\r\n    /**\r\n     * Destroys the menu and all its elements.\r\n     */\r\n    ExportMenu.prototype.dispose = function () {\r\n        if (!this._disposed) {\r\n            _super.prototype.dispose.call(this);\r\n            this._element\r\n                && this._element.parentNode\r\n                && this._element.parentNode.removeChild(this._element);\r\n        }\r\n    };\r\n    /**\r\n     * Checks whether menu item type is supposed to be clickable.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}   type  Menu item type\r\n     * @return {boolean}        Is clickable?\r\n     */\r\n    ExportMenu.prototype.typeClickable = function (type) {\r\n        return $type.hasValue(type);\r\n    };\r\n    /**\r\n     * Checks whether menu item has any sub-items.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {IExportMenuItem}  branch  A menu item\r\n     * @return {boolean}                  Has sub-items?\r\n     */\r\n    ExportMenu.prototype.hasSubMenu = function (branch) {\r\n        return (branch.menu && branch.menu.length) ? true : false;\r\n    };\r\n    /**\r\n     * Returns sub-items (if they exist).\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {IExportMenuItem}                   branch  A menu item\r\n     * @return {Optional<Array<IExportMenuItem>>}          Submenus\r\n     */\r\n    ExportMenu.prototype.getSubMenu = function (branch) {\r\n        if (branch.menu && branch.menu.length) {\r\n            return branch.menu;\r\n        }\r\n    };\r\n    /**\r\n     * Generates and returns an applicable label to be used for screen readers.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {IExportMenuItem}  item   A menu item instance\r\n     * @param  {string}           label  Current label\r\n     * @return {string}                  Reader text\r\n     */\r\n    ExportMenu.prototype.getReaderLabel = function (branch, label) {\r\n        // Strip any HTML from the label\r\n        label = $utils.stripTags(label);\r\n        // Add textual note if the branch is clickable\r\n        if (this.hasSubMenu(branch)) {\r\n            label += \" [\" + this.language.translate(\"Click, tap or press ENTER to open\") + \"]\";\r\n        }\r\n        else if (branch.type == \"print\") {\r\n            label = this.language.translate(\"Click, tap or press ENTER to print.\");\r\n        }\r\n        else if (this.typeClickable(branch.type)) {\r\n            label = this.language.translate(\"Click, tap or press ENTER to export as %1.\", undefined, label);\r\n        }\r\n        return this.adapter.apply(\"rederLabel\", {\r\n            label: label,\r\n            branch: branch\r\n        }).label;\r\n    };\r\n    Object.defineProperty(ExportMenu.prototype, \"container\", {\r\n        /**\r\n         * @return {HTMLElement} Container\r\n         */\r\n        get: function () {\r\n            return this._container;\r\n        },\r\n        /**\r\n         * Getters and setters\r\n         */\r\n        /**\r\n         * An HTML container to place the Menu in.\r\n         *\r\n         * A container must be an HTML element, because menu itself is HTML, and\r\n         * cannot be placed into SVG.\r\n         *\r\n         * @param {Optional<HTMLElement>} container Reference to container element\r\n         * @todo Check if menu is already build. If it is, just move it to a new container\r\n         */\r\n        set: function (container) {\r\n            this._container = container;\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ExportMenu.prototype, \"items\", {\r\n        /**\r\n         * @return {Array<IExportMenuItem>} Menu items\r\n         */\r\n        get: function () {\r\n            return this._items;\r\n        },\r\n        /**\r\n         * A list of menu items. Can be nested.\r\n         *\r\n         * @param {Array<IExportMenuItem>}  items  Menu items\r\n         */\r\n        set: function (items) {\r\n            this._items = items;\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ExportMenu.prototype, \"tag\", {\r\n        /**\r\n         * Sets main menu tag to place menu in.\r\n         *\r\n         * This also sets up how menu items are built.\r\n         *\r\n         * If you set this to \"ul\", menu items will be wrapped into `<li>` tags.\r\n         *\r\n         * If set to \"div\", menu items will be wrapped in `<div>` tags.\r\n         *\r\n         * @default \"ul\"\r\n         * @param {\"ul\" | \"div\"} tag Tag to use for menu\r\n         */\r\n        set: function (tag) {\r\n            this._menuTag = tag;\r\n            this._itemTag = tag == \"ul\" ? \"li\" : \"div\";\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ExportMenu.prototype, \"menuTag\", {\r\n        /**\r\n         * Returns current menu tag.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {string} Menu tag (item that contains sub-items)\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"menuTag\", {\r\n                tag: this._menuTag\r\n            }).tag;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ExportMenu.prototype, \"itemTag\", {\r\n        /**\r\n         * Returns tag to wrap items into.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {string} Item tag\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"itemTag\", {\r\n                tag: this._itemTag\r\n            }).tag;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ExportMenu.prototype, \"labelTag\", {\r\n        /**\r\n         * Returns menu label tag.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {string} Label tag\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"labelTag\", {\r\n                tag: this._labelTag\r\n            }).tag;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ExportMenu.prototype, \"align\", {\r\n        /**\r\n         * @return {Align} Horizontal alignment\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"align\", {\r\n                align: this._align\r\n            }).align;\r\n        },\r\n        /**\r\n         * A horizontal alignment for the menu placement.\r\n         *\r\n         * @param {Align} value Horizontal alignment\r\n         */\r\n        set: function (value) {\r\n            this._align = value;\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ExportMenu.prototype, \"verticalAlign\", {\r\n        /**\r\n         * @return {VerticalAlign} Vertical alignment\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"verticalAlign\", {\r\n                verticalAlign: this._verticalAlign\r\n            }).verticalAlign;\r\n        },\r\n        /**\r\n         * A vertical alignment for the menu placement.\r\n         *\r\n         * @param {VerticalAlign} value Vertical alignment\r\n         */\r\n        set: function (value) {\r\n            this._verticalAlign = value;\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ExportMenu.prototype, \"classPrefix\", {\r\n        /**\r\n         * @return {string} Class name prefix\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"classPrefix\", {\r\n                classPrefix: this._classPrefix\r\n            }).classPrefix;\r\n        },\r\n        /**\r\n         * Class name prefix.\r\n         *\r\n         * @default \"amexport\"\r\n         * @param {string} value Class name prefix\r\n         */\r\n        set: function (value) {\r\n            this._classPrefix = value;\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ExportMenu.prototype, \"defaultStyles\", {\r\n        /**\r\n         * @return {boolean} Should ExportMenu load its own CSS?\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"defaultStyles\", {\r\n                defaultStyles: this._defaultStyles\r\n            }).defaultStyles;\r\n        },\r\n        /**\r\n         * Indicates whether [[ExportMenu]] should load external CSS to style itself.\r\n         *\r\n         * If set to `false`, the menu will not be styled, and will rely on some\r\n         * external CSS.\r\n         *\r\n         * @default true\r\n         * @param {string} Should ExportMenu load its own CSS?\r\n         */\r\n        set: function (value) {\r\n            if (this._defaultStyles != value) {\r\n                this._defaultStyles = value;\r\n                if (value) {\r\n                    this.loadDefaultCSS();\r\n                }\r\n            }\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Loads the default CSS.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ExportMenu.prototype.loadDefaultCSS = function () {\r\n        this._disposers.push(exportCSS(this.classPrefix));\r\n        if (this._element) {\r\n            this._element.style.display = \"\";\r\n        }\r\n    };\r\n    Object.defineProperty(ExportMenu.prototype, \"tabindex\", {\r\n        /**\r\n         * @return {number} Tab index\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"tabindex\", {\r\n                tabindex: this._tabindex\r\n            }).tabindex;\r\n        },\r\n        /**\r\n         * A tab index for the menu.\r\n         *\r\n         * Tab index will influence the order in which elements on the chart and\r\n         * the whole page are selected when pressing TAB key.\r\n         *\r\n         * @param {number} value Tab index\r\n         */\r\n        set: function (value) {\r\n            this._tabindex = value;\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ExportMenu.prototype, \"language\", {\r\n        /**\r\n         * @return {Language} A [[Language]] instance to be used\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            var language = this._language.get();\r\n            if (language == null) {\r\n                language = new Language();\r\n                // TODO code duplication with `set language()`\r\n                this._language.set(language, language.events.on(\"localechanged\", function (ev) {\r\n                    _this.invalidate();\r\n                }));\r\n            }\r\n            return language;\r\n        },\r\n        /**\r\n         * A [[Language]] instance.\r\n         *\r\n         * @param {Language} value An instance of [[Language]]\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            this._language.set(value, value.events.on(\"localechanged\", function (ev) {\r\n                _this.invalidate();\r\n            }));\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Controlling the menu\r\n     */\r\n    /**\r\n     * Removes all active classes from menu items. Useful on touch devices and\r\n     * keyboard navigation where open menu can be closed instantly by clicking or\r\n     * tapping outside it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ExportMenu.prototype.close = function () {\r\n        if (this._ignoreNextClose) {\r\n            this._ignoreNextClose = false;\r\n            return;\r\n        }\r\n        if (this._currentSelection) {\r\n            this.setBlur(this._currentSelection);\r\n            this._currentSelection = undefined;\r\n        }\r\n        if (this._element) {\r\n            var items = this._element.getElementsByClassName(\"active\");\r\n            for (var len = items.length, i = len - 1; i >= 0; i--) {\r\n                if (items[i]) {\r\n                    $dom.removeClass(items[i], \"active\");\r\n                }\r\n            }\r\n        }\r\n        this.events.dispatchImmediately(\"closed\", {\r\n            type: \"closed\",\r\n            target: this\r\n        });\r\n    };\r\n    /**\r\n     * Selects a branch in the menu.\r\n     *\r\n     * Handles closing of currently open branch.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IExportMenuItem} branch Branch to select\r\n     */\r\n    ExportMenu.prototype.selectBranch = function (branch) {\r\n        var _this = this;\r\n        // Cancel previous closure\r\n        if (branch.closeTimeout) {\r\n            this.removeDispose(branch.closeTimeout);\r\n            branch.closeTimeout = undefined;\r\n        }\r\n        // Add active class\r\n        $dom.addClass(branch.interactions.element.parentElement, \"active\");\r\n        // Remove current selection\r\n        if (this._currentSelection && this._currentSelection !== branch && this._currentSelection.ascendants) {\r\n            $iter.each($iter.concat($iter.fromArray([this._currentSelection]), this._currentSelection.ascendants.iterator()), function (ascendant) {\r\n                if (!branch.ascendants.contains(ascendant) && branch !== ascendant) {\r\n                    _this.unselectBranch(ascendant, true);\r\n                }\r\n            });\r\n        }\r\n        // Select and/or cancel timeout for current ascendants\r\n        $iter.each(branch.ascendants.iterator(), function (ascendant) {\r\n            if (ascendant.closeTimeout) {\r\n                _this.removeDispose(ascendant.closeTimeout);\r\n                ascendant.closeTimeout = undefined;\r\n            }\r\n            $dom.addClass(ascendant.interactions.element.parentElement, \"active\");\r\n        });\r\n        // Log current selection\r\n        this._currentSelection = branch;\r\n        // Invoke event\r\n        if (this.events.isEnabled(\"branchselected\")) {\r\n            var event_5 = {\r\n                type: \"branchselected\",\r\n                target: this,\r\n                branch: branch\r\n            };\r\n            this.events.dispatchImmediately(\"branchselected\", event_5);\r\n        }\r\n    };\r\n    /**\r\n     * Unselects a branch. Also selects a branch one level up if necessary.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IExportMenuItem} branch Branch to unselect\r\n     * @param {boolean}         simple If `true`, only the branch will be unselected without selecting parent branch\r\n     */\r\n    ExportMenu.prototype.unselectBranch = function (branch, simple) {\r\n        // Remove active class\r\n        $dom.removeClass(branch.interactions.element.parentElement, \"active\");\r\n        // Remove current selection\r\n        if (this._currentSelection == branch) {\r\n            this._currentSelection = undefined;\r\n        }\r\n        // Invoke event\r\n        if (this.events.isEnabled(\"branchunselected\")) {\r\n            var event_6 = {\r\n                type: \"branchunselected\",\r\n                target: this,\r\n                branch: branch\r\n            };\r\n            this.events.dispatchImmediately(\"branchunselected\", event_6);\r\n        }\r\n    };\r\n    /**\r\n     * Delay unselection of a branch. This can still be cancelled in some other\r\n     * place if the branch or its children regain focus.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IExportMenuItem} branch Branch to unselect\r\n     * @param {boolean}         simple If `true`, only the branch will be unselected without selecting parent branch\r\n     */\r\n    ExportMenu.prototype.delayUnselectBranch = function (branch, simple) {\r\n        var _this = this;\r\n        // Schedule branch unselection\r\n        if (branch.closeTimeout) {\r\n            this.removeDispose(branch.closeTimeout);\r\n            branch.closeTimeout = undefined;\r\n        }\r\n        branch.closeTimeout = this.setTimeout(function () {\r\n            _this.unselectBranch(branch, simple);\r\n        }, this.closeDelay);\r\n        // Schedule unselection of all ascendants\r\n        // In case focus went away from the export menu altogether, this will ensure\r\n        // that all items will be closed.\r\n        // In case we're jumping to other menu item, those delayed unselections will\r\n        // be cancelled by `selectBranch`\r\n        if (simple !== true && branch.ascendants) {\r\n            $iter.each(branch.ascendants.iterator(), function (ascendant) {\r\n                _this.delayUnselectBranch(ascendant, true);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Navigates the menu based on which direction kayboard key was pressed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {KeyboardKeys} key A key that was pressed\r\n     */\r\n    ExportMenu.prototype.moveSelection = function (key) {\r\n        // Check if there's a current selection\r\n        if (!this._currentSelection) {\r\n            return;\r\n        }\r\n        var newSelection;\r\n        if (key == \"up\") {\r\n            // Try moving up in current menu list, or to the last item if already\r\n            // at the top\r\n            newSelection = this.getPrevSibling(this._currentSelection);\r\n        }\r\n        else if (key == \"down\") {\r\n            // Try moving down in current menu list, or to the top item if already\r\n            // at the bottom\r\n            newSelection = this.getNextSibling(this._currentSelection);\r\n        }\r\n        else if ((key == \"left\" && this.align == \"right\") || (key == \"right\" && this.align == \"left\")) {\r\n            var menu = this.getSubMenu(this._currentSelection);\r\n            // Go one level-deeper\r\n            if (menu != null) {\r\n                newSelection = menu[0];\r\n            }\r\n        }\r\n        else if ((key == \"right\" && this.align == \"right\") || (key == \"left\" && this.align == \"left\")) {\r\n            // Go one level-deeper\r\n            newSelection = this.getParentItem(this._currentSelection);\r\n        }\r\n        if (newSelection && newSelection !== this._currentSelection) {\r\n            this.selectBranch(newSelection);\r\n            this.setFocus(newSelection);\r\n            this._currentSelection = newSelection;\r\n        }\r\n    };\r\n    /**\r\n     * Returns all siblings of a menu item, including this same menu item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {IExportMenuItem}         branch  Menu item\r\n     * @return {Array<IExportMenuItem>}          List of sibling menu items\r\n     */\r\n    ExportMenu.prototype.getSiblings = function (branch) {\r\n        var parent = this.getParentItem(branch);\r\n        if (parent && parent.menu) {\r\n            return parent.menu;\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Returns menu items parent item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {IExportMenuItem}            branch  Menu item\r\n     * @return {Optional<IExportMenuItem>}          Parent menu item\r\n     */\r\n    ExportMenu.prototype.getParentItem = function (branch) {\r\n        if (branch.ascendants && branch.ascendants.length) {\r\n            return branch.ascendants.getIndex(branch.ascendants.length - 1);\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    };\r\n    /**\r\n     * Returns next sibling in the same menu branch. If there is no next sibling,\r\n     * the first one is returned. If there is just one item, that item is\r\n     * returned. Unsupported menu items are skipped.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {IExportMenuItem}  branch  Menu item to search siblings for\r\n     * @return {IExportMenuItem}          Menu item\r\n     */\r\n    ExportMenu.prototype.getNextSibling = function (branch) {\r\n        var siblings = this.getSiblings(branch);\r\n        if (siblings.length > 1) {\r\n            var next = siblings.indexOf(branch) + 1;\r\n            next = siblings.length == next ? 0 : next;\r\n            return siblings[next].unsupported ? this.getNextSibling(siblings[next]) : siblings[next];\r\n        }\r\n        else {\r\n            return branch;\r\n        }\r\n    };\r\n    /**\r\n     * Returns previous sibling in the same menu branch. If there is no next\r\n     * sibling, the first one is returned. If there is just one item, that item is\r\n     * returned. Unsupported menu items are skipped.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {IExportMenuItem}  branch  Menu item to search siblings for\r\n     * @return {IExportMenuItem}          Menu item\r\n     */\r\n    ExportMenu.prototype.getPrevSibling = function (branch) {\r\n        var siblings = this.getSiblings(branch);\r\n        if (siblings.length > 1) {\r\n            var prev = siblings.indexOf(branch) - 1;\r\n            prev = prev == -1 ? siblings.length - 1 : prev;\r\n            return siblings[prev].unsupported ? this.getPrevSibling(siblings[prev]) : siblings[prev];\r\n        }\r\n        else {\r\n            return branch;\r\n        }\r\n    };\r\n    /**\r\n     * Attempts to set focus on particular menu element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IExportMenuItem} branch Menu item\r\n     */\r\n    ExportMenu.prototype.setFocus = function (branch) {\r\n        if (branch.interactions) {\r\n            branch.interactions.element.focus();\r\n        }\r\n    };\r\n    /**\r\n     * Attempts to remove focus from the menu element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IExportMenuItem} branch Menu item\r\n     */\r\n    ExportMenu.prototype.setBlur = function (branch) {\r\n        if (branch.interactions) {\r\n            branch.interactions.element.blur();\r\n        }\r\n    };\r\n    return ExportMenu;\r\n}(Validatable));\r\nexport { ExportMenu };\r\n//# sourceMappingURL=ExportMenu.js.map","/**\r\n * Handles date and time formatting\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Language } from \"../utils/Language\";\r\nimport { BaseObject } from \"../Base\";\r\nimport { getTextFormatter } from \"../formatters/TextFormatter\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $strings from \"../utils/Strings\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * Handles date and time formatting.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/} Tutorial on date/time formatting\r\n * @todo Better type casting of passed in date?\r\n * @todo Quarter support?\r\n * @todo When parsing named months make the search case-insensitive\r\n * @todo Escape a.m./p.m. properly when used in RegEx\r\n */\r\nvar DateFormatter = /** @class */ (function (_super) {\r\n    tslib_1.__extends(DateFormatter, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DateFormatter() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Date format.\r\n         *\r\n         * @type {string}\r\n         */\r\n        _this._dateFormat = \"yyyy-MM-dd\";\r\n        /**\r\n         * Input date format.\r\n         *\r\n         * @type {string}\r\n         */\r\n        _this._inputDateFormat = \"yyyy-MM-dd\";\r\n        /**\r\n         * Assume UTC time zone.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this._utc = false;\r\n        /**\r\n         * First day of week.\r\n         *\r\n         * 0 - Sunday\r\n         * 1 - Monday\r\n         *\r\n         * Etc.\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this._firstDayOfWeek = 1;\r\n        /**\r\n         * A list of month names.\r\n         *\r\n         * @type {Array<MonthNames>}\r\n         */\r\n        _this._months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        /**\r\n         * A list of short month names.\r\n         *\r\n         * @param {Array<ShortMonthNames>}\r\n         */\r\n        _this._monthsShort = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May(short)\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n        /**\r\n         * A list of weekday names.\r\n         *\r\n         * @type {Array<Weekdays>}\r\n         */\r\n        _this._weekdays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n        /**\r\n         * A list of short weekday names.\r\n         *\r\n         * @type {Array<ShortWeekdays>}\r\n         */\r\n        _this._weekdaysShort = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n        /**\r\n         * Output format to produce. If the format calls for applying color to the\r\n         * formatted value, this setting will determine what markup to use: SVG or\r\n         * HTML.\r\n         *\r\n         * Available options: svg, html.\r\n         *\r\n         * @default \"svg\"\r\n         * @type {string}\r\n         */\r\n        _this._outputFormat = \"svg\";\r\n        /**\r\n         * Should the first letter of the formatted date be capitalized?\r\n         *\r\n         * @default true\r\n         * @type {boolean}\r\n         */\r\n        _this.capitalize = true;\r\n        _this.className = \"DateFormatter\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Formats the date value according to specified format.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/} Tutorial on date/time formatting\r\n     * @param  {any}     source  Date value\r\n     * @param  {string}  format  Format\r\n     * @return {string}          Formatted date string\r\n     */\r\n    DateFormatter.prototype.format = function (source, format) {\r\n        // No language?\r\n        if (!this.language) {\r\n            if (this.sprite) {\r\n                this.language = this.sprite.language;\r\n            }\r\n            else {\r\n                this.language = new Language;\r\n            }\r\n        }\r\n        // No format passed in or it's empty\r\n        if (typeof format === \"undefined\" || format === \"\") {\r\n            format = this._dateFormat;\r\n        }\r\n        // Clean format\r\n        format = $utils.cleanFormat(format);\r\n        // get format info (it will also deal with parser caching)\r\n        var info = this.parseFormat(format);\r\n        // Do any casting if required\r\n        // This will take care of timestamps as well as Date objects\r\n        var date = $utils.anyToDate(source);\r\n        // Check if it's a valid date\r\n        if (!$type.isNumber(date.getTime())) {\r\n            return this.language.translate(\"Invalid date\");\r\n        }\r\n        // Apply format\r\n        var formatted = this.applyFormat(date, info, this.language);\r\n        // Capitalize\r\n        if (this.capitalize) {\r\n            formatted = formatted.replace(/^.{1}/, formatted.substr(0, 1).toUpperCase());\r\n        }\r\n        // We're done\r\n        return formatted;\r\n    };\r\n    /**\r\n     * Parses format into structured infromation.\r\n     *\r\n     * @param {string} format Format template\r\n     */\r\n    DateFormatter.prototype.parseFormat = function (format) {\r\n        // Check cache\r\n        var cached = this.getCache(format);\r\n        if ($type.hasValue(cached)) {\r\n            return cached;\r\n        }\r\n        // Init format parse info holder\r\n        var info = {\r\n            \"template\": \"\",\r\n            \"parts\": []\r\n        };\r\n        // Let TextFormatter split into chunks\r\n        var chunks = getTextFormatter().chunk(format, true);\r\n        for (var i = 0; i < chunks.length; i++) {\r\n            var chunk = chunks[i];\r\n            if (chunk.type === \"value\") {\r\n                // Just \"Date\"?\r\n                if (chunk.text.match(/^date$/i)) {\r\n                    chunk.text = this._dateFormat;\r\n                }\r\n                // Find all possible parts\r\n                var matches = chunk.text.match(/G|yyyy|yyy|yy|y|YYYY|YYY|YY|Y|u|MMMMM|MMMM|MMM|MM|M|ww|w|W|dd|d|DDD|DD|D|F|g|EEEEE|EEEE|EEE|EE|E|eeeee|eeee|eee|ee|e|aaa|aa|a|hh|h|HH|H|KK|K|kk|k|mm|m|ss|s|SSS|SS|S|A|zzzz|zzz|zz|z|ZZ|Z|t|x|nnn|nn|n|i|I/g);\r\n                // Found?\r\n                if (matches) {\r\n                    // Populate template\r\n                    for (var x = 0; x < matches.length; x++) {\r\n                        info.parts.push(matches[x]);\r\n                        chunk.text = chunk.text.replace(matches[x], $strings.PLACEHOLDER);\r\n                    }\r\n                }\r\n            }\r\n            // Apply to template\r\n            info.template += chunk.text;\r\n        }\r\n        // Apply style formatting\r\n        //info.template = getTextFormatter().format(info.template, this.outputFormat);\r\n        // Save cache\r\n        this.setCache(format, info);\r\n        return info;\r\n    };\r\n    /**\r\n     * Applies format to Date.\r\n     *\r\n     * @param  {Date}            date      Date object\r\n     * @param  {DateFormatInfo}  info      Parsed format information\r\n     * @param  {Language}        language  Language\r\n     * @return {string}                    Formatted date string\r\n     */\r\n    DateFormatter.prototype.applyFormat = function (date, info, language) {\r\n        // Init return value\r\n        var res = info.template;\r\n        // Get values\r\n        var fullYear, month, weekday, day, hours, minutes, seconds, milliseconds, offset = date.getTimezoneOffset(), timestamp = date.getTime();\r\n        if (this.utc) {\r\n            fullYear = date.getUTCFullYear();\r\n            month = date.getUTCMonth();\r\n            weekday = date.getUTCDay();\r\n            day = date.getUTCDate();\r\n            hours = date.getUTCHours();\r\n            minutes = date.getUTCMinutes();\r\n            seconds = date.getUTCSeconds();\r\n            milliseconds = date.getUTCMilliseconds();\r\n        }\r\n        else {\r\n            fullYear = date.getFullYear();\r\n            month = date.getMonth();\r\n            weekday = date.getDay();\r\n            day = date.getDate();\r\n            hours = date.getHours();\r\n            minutes = date.getMinutes();\r\n            seconds = date.getSeconds();\r\n            milliseconds = date.getMilliseconds();\r\n        }\r\n        // Go through each part and format/replace it in template\r\n        for (var i = 0, len = info.parts.length; i < len; i++) {\r\n            var value = \"\";\r\n            switch (info.parts[i]) {\r\n                case \"G\":\r\n                    value = language.translate(fullYear < 0\r\n                        ? \"_era_bc\"\r\n                        : \"_era_ad\");\r\n                    break;\r\n                case \"yyyy\":\r\n                    value = Math.abs(fullYear).toString();\r\n                    if (fullYear < 0) {\r\n                        value += language.translate(\"_era_bc\");\r\n                    }\r\n                    break;\r\n                case \"yyy\":\r\n                case \"yy\":\r\n                case \"y\":\r\n                    value = Math.abs(fullYear).toString().substr(-info.parts[i].length);\r\n                    if (fullYear < 0) {\r\n                        value += language.translate(\"_era_bc\");\r\n                    }\r\n                    break;\r\n                case \"YYYY\":\r\n                case \"YYY\":\r\n                case \"YY\":\r\n                case \"Y\":\r\n                    var week = $utils.getWeek(date);\r\n                    var year = fullYear;\r\n                    if (week == 1 && (weekday > 1)) {\r\n                        year--;\r\n                    }\r\n                    if (info.parts[i] == \"YYYY\") {\r\n                        value = Math.abs(year).toString();\r\n                    }\r\n                    else {\r\n                        value = Math.abs(year).toString().substr(-info.parts[i].length);\r\n                    }\r\n                    if (year < 0) {\r\n                        value += language.translate(\"_era_bc\");\r\n                    }\r\n                    break;\r\n                case \"u\":\r\n                    // @todo\r\n                    break;\r\n                case \"MMMMM\":\r\n                    value = language.translate(this._months[month]).substr(0, 1);\r\n                    break;\r\n                case \"MMMM\":\r\n                    value = language.translate(this._months[month]);\r\n                    break;\r\n                case \"MMM\":\r\n                    value = language.translate(this._monthsShort[month]);\r\n                    break;\r\n                case \"MM\":\r\n                    value = $utils.padString(month + 1, 2, \"0\");\r\n                    break;\r\n                case \"M\":\r\n                    value = (month + 1).toString();\r\n                    break;\r\n                case \"ww\":\r\n                    value = $utils.padString($utils.getWeek(date, this.utc), 2, \"0\");\r\n                    break;\r\n                case \"w\":\r\n                    value = $utils.getWeek(date, this.utc).toString();\r\n                    break;\r\n                case \"W\":\r\n                    value = $utils.getMonthWeek(date, this.utc).toString();\r\n                    break;\r\n                case \"dd\":\r\n                    value = $utils.padString(day, 2, \"0\");\r\n                    break;\r\n                case \"d\":\r\n                    value = day.toString();\r\n                    break;\r\n                case \"DD\":\r\n                case \"DDD\":\r\n                    value = $utils.padString($utils.getYearDay(date, this.utc).toString(), info.parts[i].length, \"0\");\r\n                    break;\r\n                case \"D\":\r\n                    value = $utils.getYearDay(date, this.utc).toString();\r\n                    break;\r\n                case \"F\":\r\n                    // @todo\r\n                    break;\r\n                case \"g\":\r\n                    // @todo\r\n                    break;\r\n                case \"t\":\r\n                    value = language.translateFunc(\"_dateOrd\").call(this, day);\r\n                    break;\r\n                case \"E\":\r\n                    value = (weekday || 7).toString();\r\n                    break;\r\n                case \"EE\":\r\n                    value = $utils.padString((weekday || 7).toString(), 2, \"0\");\r\n                    break;\r\n                case \"EEE\":\r\n                case \"eee\":\r\n                    value = language.translate(this._weekdaysShort[weekday]);\r\n                    break;\r\n                case \"EEEE\":\r\n                case \"eeee\":\r\n                    value = language.translate(this._weekdays[weekday]);\r\n                    break;\r\n                case \"EEEEE\":\r\n                case \"eeeee\":\r\n                    value = language.translate(this._weekdays[weekday]).substr(0, 1);\r\n                    break;\r\n                case \"e\":\r\n                case \"ee\":\r\n                    value = (weekday - this.firstDayOfWeek + 1).toString();\r\n                    if (info.parts[i] == \"ee\") {\r\n                        value = $utils.padString(value, 2, \"0\");\r\n                    }\r\n                    break;\r\n                case \"a\":\r\n                    if (hours >= 12) {\r\n                        value = language.translate(\"PM\");\r\n                    }\r\n                    else {\r\n                        value = language.translate(\"AM\");\r\n                    }\r\n                    break;\r\n                case \"aa\":\r\n                    if (hours >= 12) {\r\n                        value = language.translate(\"P.M.\");\r\n                    }\r\n                    else {\r\n                        value = language.translate(\"A.M.\");\r\n                    }\r\n                    break;\r\n                case \"aaa\":\r\n                    if (hours >= 12) {\r\n                        value = language.translate(\"P\");\r\n                    }\r\n                    else {\r\n                        value = language.translate(\"A\");\r\n                    }\r\n                    break;\r\n                case \"h\":\r\n                    value = $utils.get12Hours(hours).toString();\r\n                    break;\r\n                case \"hh\":\r\n                    value = $utils.padString($utils.get12Hours(hours), 2, \"0\");\r\n                    break;\r\n                case \"H\":\r\n                    value = hours.toString();\r\n                    break;\r\n                case \"HH\":\r\n                    value = $utils.padString(hours, 2, \"0\");\r\n                    break;\r\n                case \"K\":\r\n                    value = $utils.get12Hours(hours, 0).toString();\r\n                    break;\r\n                case \"KK\":\r\n                    value = $utils.padString($utils.get12Hours(hours, 0), 2, \"0\");\r\n                    break;\r\n                case \"k\":\r\n                    value = (hours + 1).toString();\r\n                    break;\r\n                case \"kk\":\r\n                    value = $utils.padString(hours + 1, 2, \"0\");\r\n                    break;\r\n                case \"m\":\r\n                    value = minutes.toString();\r\n                    break;\r\n                case \"mm\":\r\n                    value = $utils.padString(minutes, 2, \"0\");\r\n                    break;\r\n                case \"s\":\r\n                    value = seconds.toString();\r\n                    break;\r\n                case \"ss\":\r\n                    value = $utils.padString(seconds, 2, \"0\");\r\n                    break;\r\n                case \"S\":\r\n                case \"SS\":\r\n                case \"SSS\":\r\n                    value = Math.round((milliseconds / 1000) * Math.pow(10, info.parts[i].length)).toString();\r\n                    break;\r\n                case \"x\":\r\n                    value = timestamp.toString();\r\n                    break;\r\n                case \"n\":\r\n                case \"nn\":\r\n                case \"nnn\":\r\n                    value = $utils.padString(milliseconds, info.parts[i].length, \"0\");\r\n                    break;\r\n                case \"z\":\r\n                    value = $utils.getTimeZone(date, false, false, this.utc);\r\n                    break;\r\n                case \"zz\":\r\n                    value = $utils.getTimeZone(date, true, false, this.utc);\r\n                    break;\r\n                case \"zzz\":\r\n                    value = $utils.getTimeZone(date, false, true, this.utc);\r\n                    break;\r\n                case \"zzzz\":\r\n                    value = $utils.getTimeZone(date, true, true, this.utc);\r\n                    break;\r\n                case \"Z\":\r\n                case \"ZZ\":\r\n                    var tz = Math.abs(offset) / 60;\r\n                    var tzh = Math.floor(tz);\r\n                    var tzm = tz * 60 - tzh * 60;\r\n                    if (info.parts[i] == \"Z\") {\r\n                        value = \"GMT\";\r\n                        value += offset > 0 ? \"-\" : \"+\";\r\n                        value += $utils.padString(tzh, 2) + \":\" + $utils.padString(tzm, 2);\r\n                    }\r\n                    else {\r\n                        value = offset > 0 ? \"-\" : \"+\";\r\n                        value += $utils.padString(tzh, 2) + $utils.padString(tzm, 2);\r\n                    }\r\n                    break;\r\n                case \"i\":\r\n                    value = date.toISOString();\r\n                    break;\r\n                case \"I\":\r\n                    value = date.toUTCString();\r\n                    break;\r\n            }\r\n            res = res.replace($strings.PLACEHOLDER, value);\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Parses any input value into Date object.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/#Parsing_Dates} Tutorial on date/time parsing\r\n     * @param  {any}     source  Source value\r\n     * @param  {string}  format  Source format\r\n     * @return {Date}            Date object\r\n     */\r\n    DateFormatter.prototype.parse = function (source, format) {\r\n        // Format set?\r\n        if (!$type.hasValue(format)) {\r\n            format = this.inputDateFormat;\r\n        }\r\n        // Is it already a Date\r\n        if (source instanceof Date) {\r\n            return source;\r\n        }\r\n        // Is it a numeric timestamp\r\n        if (typeof source === \"number\") {\r\n            return new Date(source);\r\n        }\r\n        // No? Let's check if it's string, and try converting to it if nec\r\n        if (typeof source !== \"string\") {\r\n            source = source.toString();\r\n        }\r\n        // no language?\r\n        if (!this.language) {\r\n            if (this.sprite) {\r\n                this.language = this.sprite.language;\r\n            }\r\n            else {\r\n                this.language = new Language;\r\n            }\r\n        }\r\n        // Init return value\r\n        var res = new Date(1970, 0, 1, 0, 0, 0);\r\n        // Init RegEx for parsing\r\n        var reg = \"\";\r\n        // Clean format\r\n        format = $utils.cleanFormat(format);\r\n        // Parse format\r\n        var info = this.parseFormat(format);\r\n        // Init parsed items holder\r\n        var parsedIndexes = {\r\n            \"year\": -1,\r\n            \"year3\": -1,\r\n            \"year2\": -1,\r\n            \"year1\": -1,\r\n            \"month\": -1,\r\n            \"monthShort\": -1,\r\n            \"monthLong\": -1,\r\n            \"weekdayShort\": -1,\r\n            \"weekdayLong\": -1,\r\n            \"day\": -1,\r\n            \"yearDay\": -1,\r\n            \"week\": -1,\r\n            \"hourBase0\": -1,\r\n            \"hour12Base0\": -1,\r\n            \"hourBase1\": -1,\r\n            \"hour12Base1\": -1,\r\n            \"minute\": -1,\r\n            \"second\": -1,\r\n            \"millisecond\": -1,\r\n            \"millisecondDigits\": -1,\r\n            \"am\": -1,\r\n            \"zone\": -1,\r\n            \"timestamp\": -1,\r\n            \"iso\": -1\r\n        };\r\n        // Index adjuster\r\n        var indexAdjust = 0, index = 0;\r\n        // Iterate through all of the parts\r\n        for (var i = 0; i < info.parts.length; i++) {\r\n            // Set current match index\r\n            index = i + indexAdjust + 1;\r\n            switch (info.parts[i]) {\r\n                case \"yyyy\":\r\n                case \"YYYY\":\r\n                    reg += \"([0-9]{4,})\";\r\n                    parsedIndexes.year = index;\r\n                    break;\r\n                case \"yyy\":\r\n                case \"YYY\":\r\n                    reg += \"([0-9]{3})\";\r\n                    parsedIndexes.year3 = index;\r\n                    break;\r\n                case \"yy\":\r\n                case \"YY\":\r\n                    reg += \"([0-9]{2})\";\r\n                    parsedIndexes.year2 = index;\r\n                    break;\r\n                case \"y\":\r\n                case \"Y\":\r\n                    reg += \"([0-9]{1})\";\r\n                    parsedIndexes.year1 = index;\r\n                    break;\r\n                case \"MMMM\":\r\n                    reg += \"(\" + this.getStringList(this._months).join(\"|\") + \")\";\r\n                    parsedIndexes.monthLong = index;\r\n                    break;\r\n                case \"MMM\":\r\n                    reg += \"(\" + this.getStringList(this._monthsShort).join(\"|\") + \")\";\r\n                    parsedIndexes.monthShort = index;\r\n                    break;\r\n                case \"MM\":\r\n                case \"M\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.month = index;\r\n                    break;\r\n                case \"ww\":\r\n                case \"w\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.week = index;\r\n                    break;\r\n                case \"dd\":\r\n                case \"d\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.day = index;\r\n                    break;\r\n                case \"DDD\":\r\n                case \"DD\":\r\n                case \"D\":\r\n                    reg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.yearDay = index;\r\n                    break;\r\n                case \"dddd\":\r\n                    reg += \"(\" + this.getStringList(this._weekdays).join(\"|\") + \")\";\r\n                    parsedIndexes.weekdayLong = index;\r\n                    break;\r\n                case \"ddd\":\r\n                    reg += \"(\" + this.getStringList(this._weekdaysShort).join(\"|\") + \")\";\r\n                    parsedIndexes.weekdayShort = index;\r\n                    break;\r\n                case \"aaa\":\r\n                case \"aa\":\r\n                case \"a\":\r\n                    // TODO: fix (escape regex)\r\n                    reg += \"(\" + this.getStringList([\"AM\", \"PM\", \"A\\.M\\.\", \"P\\.M\\.\", \"A\", \"P\"]).join(\"|\") + \")\";\r\n                    parsedIndexes.am = index;\r\n                    break;\r\n                case \"hh\":\r\n                case \"h\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.hour12Base1 = index;\r\n                    break;\r\n                case \"HH\":\r\n                case \"H\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.hourBase0 = index;\r\n                    break;\r\n                case \"KK\":\r\n                case \"K\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.hour12Base0 = index;\r\n                    break;\r\n                case \"kk\":\r\n                case \"k\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.hourBase1 = index;\r\n                    break;\r\n                case \"mm\":\r\n                case \"m\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.minute = index;\r\n                    break;\r\n                case \"ss\":\r\n                case \"s\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.second = index;\r\n                    break;\r\n                case \"SSS\":\r\n                case \"SS\":\r\n                case \"S\":\r\n                    reg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.millisecond = index;\r\n                    parsedIndexes.millisecondDigits = info.parts[i].length;\r\n                    break;\r\n                case \"nnn\":\r\n                case \"nn\":\r\n                case \"n\":\r\n                    reg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.millisecond = index;\r\n                    break;\r\n                case \"x\":\r\n                    reg += \"([0-9]{1,})\";\r\n                    parsedIndexes.timestamp = index;\r\n                    break;\r\n                case \"Z\":\r\n                    reg += \"GMT([-+]+[0-9]{2}:[0-9]{2})\";\r\n                    parsedIndexes.zone = index;\r\n                    break;\r\n                case \"ZZ\":\r\n                    reg += \"([\\\\-+]+[0-9]{2}[0-9]{2})\";\r\n                    parsedIndexes.zone = index;\r\n                    break;\r\n                case \"i\":\r\n                    reg += \"([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})\\.([0-9]{3})([Zz]?)\";\r\n                    parsedIndexes.iso = index;\r\n                    indexAdjust += 7;\r\n                    break;\r\n                case \"G\":\r\n                case \"YYYY\":\r\n                case \"YYY\":\r\n                case \"YY\":\r\n                case \"Y\":\r\n                case \"MMMMM\":\r\n                case \"W\":\r\n                case \"EEEEE\":\r\n                case \"EEEE\":\r\n                case \"EEE\":\r\n                case \"EE\":\r\n                case \"E\":\r\n                case \"eeeee\":\r\n                case \"eeee\":\r\n                case \"eee\":\r\n                case \"ee\":\r\n                case \"e\":\r\n                case \"zzzz\":\r\n                case \"zzz\":\r\n                case \"zz\":\r\n                case \"z\":\r\n                case \"t\":\r\n                    // Ignore\r\n                    indexAdjust--;\r\n                    break;\r\n            }\r\n            reg += \"[^0-9]*\";\r\n        }\r\n        // Try matching\r\n        var regex = new RegExp(reg);\r\n        var matches;\r\n        if (matches = source.match(regex)) {\r\n            // Populate the date object\r\n            // Full year\r\n            if (parsedIndexes.year > -1) {\r\n                var val = parseInt(matches[parsedIndexes.year]);\r\n                if (this.utc) {\r\n                    res.setUTCFullYear(val);\r\n                }\r\n                else {\r\n                    res.setFullYear(val);\r\n                }\r\n            }\r\n            // 3-digit year\r\n            if (parsedIndexes.year3 > -1) {\r\n                var val = parseInt(matches[parsedIndexes.year3]);\r\n                val += 1000;\r\n                if (this.utc) {\r\n                    res.setUTCFullYear(val);\r\n                }\r\n                else {\r\n                    res.setFullYear(val);\r\n                }\r\n            }\r\n            // 2-digit year\r\n            if (parsedIndexes.year2 > -1) {\r\n                var val = parseInt(matches[parsedIndexes.year2]);\r\n                if (val > 50) {\r\n                    val += 1000;\r\n                }\r\n                else {\r\n                    val += 2000;\r\n                }\r\n                if (this.utc) {\r\n                    res.setUTCFullYear(val);\r\n                }\r\n                else {\r\n                    res.setFullYear(val);\r\n                }\r\n            }\r\n            // 1-digit year\r\n            if (parsedIndexes.year1 > -1) {\r\n                var val = parseInt(matches[parsedIndexes.year1]);\r\n                val = Math.floor((new Date().getFullYear()) / 10) * 10 + val;\r\n                if (this.utc) {\r\n                    res.setUTCFullYear(val);\r\n                }\r\n                else {\r\n                    res.setFullYear(val);\r\n                }\r\n            }\r\n            // Full month\r\n            if (parsedIndexes.monthLong > -1) {\r\n                var val = this.resolveMonth(matches[parsedIndexes.monthLong]);\r\n                if (this.utc) {\r\n                    res.setUTCMonth(val);\r\n                }\r\n                else {\r\n                    res.setMonth(val);\r\n                }\r\n            }\r\n            // Short month\r\n            if (parsedIndexes.monthShort > -1) {\r\n                var val = this.resolveShortMonth(matches[parsedIndexes.monthShort]);\r\n                if (this.utc) {\r\n                    res.setUTCMonth(val);\r\n                }\r\n                else {\r\n                    res.setMonth(val);\r\n                }\r\n            }\r\n            // Numeric month\r\n            if (parsedIndexes.month > -1) {\r\n                var val = parseInt(matches[parsedIndexes.month]) - 1;\r\n                if (this.utc) {\r\n                    res.setUTCMonth(val);\r\n                }\r\n                else {\r\n                    res.setMonth(val);\r\n                }\r\n            }\r\n            // Weekday\r\n            // @todo\r\n            // Week\r\n            if ((parsedIndexes.week > -1) && (parsedIndexes.day === -1)) {\r\n                // We parse weeks ONLY if day is not explicitly set\r\n                // TODO: this needs work\r\n                // (but maybe later - I can hardly imagine anyone passing their dates in weeks)\r\n                var val = $utils.getDayFromWeek(parseInt(matches[parsedIndexes.week]), this.utc ? res.getUTCFullYear() : res.getFullYear(), 1, this.utc);\r\n                if (this.utc) {\r\n                    res.setUTCMonth(0);\r\n                    res.setUTCDate(val);\r\n                }\r\n                else {\r\n                    res.setMonth(0);\r\n                    res.setDate(val);\r\n                }\r\n            }\r\n            // Day\r\n            if (parsedIndexes.day > -1) {\r\n                var val = parseInt(matches[parsedIndexes.day]);\r\n                if (this.utc) {\r\n                    res.setUTCDate(val);\r\n                }\r\n                else {\r\n                    res.setDate(val);\r\n                }\r\n            }\r\n            // Year day\r\n            if (parsedIndexes.yearDay > -1) {\r\n                var val = parseInt(matches[parsedIndexes.yearDay]);\r\n                if (this.utc) {\r\n                    res.setUTCMonth(0);\r\n                    res.setUTCDate(val);\r\n                }\r\n                else {\r\n                    res.setMonth(0);\r\n                    res.setDate(val);\r\n                }\r\n            }\r\n            // 24 Hour (0-23)\r\n            if (parsedIndexes.hourBase0 > -1) {\r\n                var val = parseInt(matches[parsedIndexes.hourBase0]);\r\n                if (this.utc) {\r\n                    res.setUTCHours(val);\r\n                }\r\n                else {\r\n                    res.setHours(val);\r\n                }\r\n            }\r\n            // 24 Hour (1-24)\r\n            if (parsedIndexes.hourBase1 > -1) {\r\n                var val = parseInt(matches[parsedIndexes.hourBase1]) - 1;\r\n                if (this.utc) {\r\n                    res.setUTCHours(val);\r\n                }\r\n                else {\r\n                    res.setHours(val);\r\n                }\r\n            }\r\n            // 12 Hour (0-11)\r\n            if (parsedIndexes.hour12Base0 > -1) {\r\n                var val = parseInt(matches[parsedIndexes.hour12Base0]);\r\n                if (val == 11) {\r\n                    val = 0;\r\n                }\r\n                if ((parsedIndexes.am > -1) && !this.isAm(matches[parsedIndexes.am])) {\r\n                    val += 12;\r\n                }\r\n                if (this.utc) {\r\n                    res.setUTCHours(val);\r\n                }\r\n                else {\r\n                    res.setHours(val);\r\n                }\r\n            }\r\n            // 12 Hour (1-12)\r\n            if (parsedIndexes.hour12Base1 > -1) {\r\n                var val = parseInt(matches[parsedIndexes.hour12Base1]);\r\n                if (val == 12) {\r\n                    val = 0;\r\n                }\r\n                if ((parsedIndexes.am > -1) && !this.isAm(matches[parsedIndexes.am])) {\r\n                    val += 12;\r\n                }\r\n                if (this.utc) {\r\n                    res.setUTCHours(val);\r\n                }\r\n                else {\r\n                    res.setHours(val);\r\n                }\r\n            }\r\n            // Minute\r\n            if (parsedIndexes.minute > -1) {\r\n                var val = parseInt(matches[parsedIndexes.minute]);\r\n                if (this.utc) {\r\n                    res.setUTCMinutes(val);\r\n                }\r\n                else {\r\n                    res.setMinutes(val);\r\n                }\r\n            }\r\n            // Second\r\n            if (parsedIndexes.second > -1) {\r\n                var val = parseInt(matches[parsedIndexes.second]);\r\n                if (this.utc) {\r\n                    res.setUTCSeconds(val);\r\n                }\r\n                else {\r\n                    res.setSeconds(val);\r\n                }\r\n            }\r\n            // Millisecond\r\n            if (parsedIndexes.millisecond > -1) {\r\n                var val = parseInt(matches[parsedIndexes.millisecond]);\r\n                if (parsedIndexes.millisecondDigits == 2) {\r\n                    val *= 10;\r\n                }\r\n                else if (parsedIndexes.millisecondDigits == 1) {\r\n                    val *= 100;\r\n                }\r\n                if (this.utc) {\r\n                    res.setUTCMilliseconds(val);\r\n                }\r\n                else {\r\n                    res.setMilliseconds(val);\r\n                }\r\n            }\r\n            // Timestamp\r\n            if (parsedIndexes.timestamp > -1) {\r\n                res.setTime(parseInt(matches[parsedIndexes.timestamp]));\r\n            }\r\n            // Adjust time zone\r\n            if (parsedIndexes.zone > -1) {\r\n                var zone = matches[parsedIndexes.zone].replace(/:/, \"\");\r\n                var match = $type.getValue(zone.match(/([+\\-]?)([0-9]{2})([0-9]{2})/));\r\n                var dir = match[1];\r\n                var hour = match[2];\r\n                var minute = match[3];\r\n                var offset = parseInt(hour) * 60 + parseInt(minute);\r\n                // Adjust offset\r\n                // Making it negative does not seem to make sense, but it's right\r\n                // because of how JavaScript calculates GTM offsets\r\n                if (dir == \"+\") {\r\n                    offset *= -1;\r\n                }\r\n                // Check the difference in offset\r\n                var originalOffset = res.getTimezoneOffset();\r\n                var diff = offset - originalOffset;\r\n                if (diff != 0) {\r\n                    res.setMinutes(res.getMinutes() + diff);\r\n                }\r\n            }\r\n            // ISO\r\n            if (parsedIndexes.iso > -1) {\r\n                if (matches[parsedIndexes.iso + 7] == \"Z\" || matches[parsedIndexes.iso + 7] == \"z\") {\r\n                    res = new Date();\r\n                    res.setUTCFullYear($type.toNumber(matches[parsedIndexes.iso + 0]));\r\n                    res.setUTCMonth($type.toNumber(matches[parsedIndexes.iso + 1]) - 1);\r\n                    res.setUTCDate($type.toNumber(matches[parsedIndexes.iso + 2]));\r\n                    res.setUTCHours($type.toNumber(matches[parsedIndexes.iso + 3]));\r\n                    res.setUTCMinutes($type.toNumber(matches[parsedIndexes.iso + 4]));\r\n                    res.setUTCSeconds($type.toNumber(matches[parsedIndexes.iso + 5]));\r\n                    res.setUTCMilliseconds($type.toNumber(matches[parsedIndexes.iso + 6]));\r\n                }\r\n                else {\r\n                    res = new Date($type.toNumber(matches[parsedIndexes.iso + 0]), $type.toNumber(matches[parsedIndexes.iso + 1]) - 1, $type.toNumber(matches[parsedIndexes.iso + 2]), $type.toNumber(matches[parsedIndexes.iso + 3]), $type.toNumber(matches[parsedIndexes.iso + 4]), $type.toNumber(matches[parsedIndexes.iso + 5]), $type.toNumber(matches[parsedIndexes.iso + 6]));\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // Didn't match anything\r\n            // Let's try dropping it into Date constructor and hope for the best\r\n            res = new Date(source);\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Resolves month name (i.e. \"December\") into a month number (11).\r\n     *\r\n     * @param  {MonthNames}  value  Month name\r\n     * @return {number}             Month number\r\n     */\r\n    DateFormatter.prototype.resolveMonth = function (value) {\r\n        // Let's try English first\r\n        var month = this._months.indexOf(value);\r\n        if (month > -1) {\r\n            return month;\r\n        }\r\n        // Try the translation\r\n        if (this.language && !this.language.isDefault()) {\r\n            month = this.language.translateAll(this._months).indexOf(value);\r\n            if (month > -1) {\r\n                return month;\r\n            }\r\n        }\r\n        return 0;\r\n    };\r\n    /**\r\n     * Resolves short month name (i.e. \"Dec\") into a month number.\r\n     *\r\n     * @param  {ShortMonthNames}  value  Short month name\r\n     * @return {number}                  Month number\r\n     */\r\n    DateFormatter.prototype.resolveShortMonth = function (value) {\r\n        // Let's try English first\r\n        var month = this._monthsShort.indexOf(value);\r\n        if (month > -1) {\r\n            return month;\r\n        }\r\n        // Try the translation\r\n        if (this.language && !this.language.isDefault()) {\r\n            month = this.language.translateAll(this._monthsShort).indexOf(value);\r\n            if (month > -1) {\r\n                return month;\r\n            }\r\n        }\r\n        return 0;\r\n    };\r\n    /**\r\n     * Checks if passed in string represents AM/PM notation in many of its\r\n     * versions.\r\n     *\r\n     * @param  {string}   value  Source string\r\n     * @return {boolean}         Is it AM/PM?\r\n     */\r\n    DateFormatter.prototype.isAm = function (value) {\r\n        var list = this.getStringList([\"AM\", \"A.M.\", \"A\"]);\r\n        return list.indexOf(value.toUpperCase()) > -1;\r\n    };\r\n    /**\r\n     * Invalidates related [[Sprite]] causing it to redraw.\r\n     */\r\n    DateFormatter.prototype.invalidateSprite = function () {\r\n        if (this.sprite) {\r\n            this.sprite.invalidate();\r\n        }\r\n    };\r\n    /**\r\n     * Translates list of strings.\r\n     *\r\n     * @param  {Array<keyof ILocaleProperties>}  list  Source strings\r\n     * @return {Array<string>}                         Translated strings\r\n     */\r\n    DateFormatter.prototype.getStringList = function (list) {\r\n        var res = [];\r\n        for (var i = 0; i < list.length; i++) {\r\n            res.push($utils.escapeForRgex(list[i]));\r\n            // translate?\r\n            if (this.language && !this.language.isDefault()) {\r\n                res.push($utils.escapeForRgex(this.language.translate(list[i])));\r\n            }\r\n        }\r\n        return res;\r\n    };\r\n    Object.defineProperty(DateFormatter.prototype, \"dateFormat\", {\r\n        /**\r\n         * @return {string} Date format\r\n         */\r\n        get: function () {\r\n            return this._dateFormat;\r\n        },\r\n        /**\r\n         * Date format to use.\r\n         *\r\n         * If format is not supplied in-line in the string, this setting will be\r\n         * used.\r\n         *\r\n         * @default \"yyyy-MM-dd\"\r\n         * @param {string} value Date format\r\n         */\r\n        set: function (value) {\r\n            this._dateFormat = value;\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateFormatter.prototype, \"inputDateFormat\", {\r\n        /**\r\n         * @return {string} Date format\r\n         */\r\n        get: function () {\r\n            return this._inputDateFormat;\r\n        },\r\n        /**\r\n         * Date format to use when parsing dates.\r\n         *\r\n         * @default \"yyyy-MM-dd\"\r\n         * @param {string} value Date format\r\n         */\r\n        set: function (value) {\r\n            this._inputDateFormat = value;\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateFormatter.prototype, \"utc\", {\r\n        /**\r\n         * @return {boolean} Use UTC?\r\n         */\r\n        get: function () {\r\n            return this._utc;\r\n        },\r\n        /**\r\n         * Should formatter use UTC functions?\r\n         *\r\n         * If UTC is used, all date/time values will be independent on client's\r\n         * time zone.\r\n         *\r\n         * @param {boolean} value Use UTC?\r\n         */\r\n        set: function (value) {\r\n            this._utc = value;\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateFormatter.prototype, \"firstDayOfWeek\", {\r\n        /**\r\n         * @return {number} First day of week\r\n         */\r\n        get: function () {\r\n            return this._firstDayOfWeek;\r\n        },\r\n        /**\r\n         * Dirst day of the week:\r\n         *\r\n         * * 0 - Sunday\r\n         * * 1 - Monday\r\n         * * 2 - Tuesday\r\n         *\r\n         * Etc.\r\n         *\r\n         * @param {number} value First day of week\r\n         */\r\n        set: function (value) {\r\n            this._firstDayOfWeek = value;\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateFormatter.prototype, \"outputFormat\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {string} Format\r\n         */\r\n        get: function () {\r\n            return this._outputFormat;\r\n        },\r\n        /**\r\n         * Output format for the formatted date.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {string}  value  Format\r\n         */\r\n        set: function (value) {\r\n            this._outputFormat = value.toLowerCase();\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DateFormatter;\r\n}(BaseObject));\r\nexport { DateFormatter };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateFormatter\"] = DateFormatter;\r\n//# sourceMappingURL=DateFormatter.js.map","/**\r\n * Duration formatting functionality.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Language } from \"../utils/Language\";\r\nimport { BaseObject } from \"../Base\";\r\nimport { getTextFormatter } from \"../formatters/TextFormatter\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $strings from \"../utils/Strings\";\r\nimport * as $object from \"../utils/Object\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $math from \"../utils/Math\";\r\n/**\r\n * DurationFormatter class. Formats numbers as durations.\r\n *\r\n * `1000` as `16:40`\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting\r\n */\r\nvar DurationFormatter = /** @class */ (function (_super) {\r\n    tslib_1.__extends(DurationFormatter, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DurationFormatter() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * A base value for negative numbers. Will treat all numbers below this value\r\n         * as negative numbers.\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this._negativeBase = 0;\r\n        /**\r\n         * A base unit to consider values are in.\r\n         *\r\n         * @default \"s\"\r\n         * @type {TimeUnit}\r\n         */\r\n        _this._baseUnit = \"second\";\r\n        /**\r\n         * Output format to produce. If the format calls for applying color to the\r\n         * formatted value, this setting will determine what markup to use: SVG or\r\n         * HTML.\r\n         *\r\n         * Available options: svg, html.\r\n         *\r\n         * @default \"svg\"\r\n         * @type {string}\r\n         */\r\n        _this._outputFormat = \"svg\";\r\n        /**\r\n         * How many milliseconds each unit represents.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        _this._unitValues = {\r\n            \"millisecond\": 1,\r\n            \"second\": 1000,\r\n            \"minute\": 60000,\r\n            \"hour\": 3600000,\r\n            \"day\": 86400000,\r\n            \"week\": 604800000,\r\n            \"month\": 2592000000,\r\n            \"year\": 31536000000,\r\n        };\r\n        /**\r\n         * Collection of aliases for units.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        _this._unitAliases = {\r\n            \"Y\": \"y\",\r\n            \"D\": \"d\",\r\n            \"H\": \"h\",\r\n            \"K\": \"h\",\r\n            \"k\": \"h\",\r\n            \"n\": \"S\"\r\n        };\r\n        _this.className = \"DurationFormatter\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Formats the number according as duration.\r\n     *\r\n     * For example `1000` (base unit seconds) would be converted to `16:40` as in\r\n     * 16 minutes and 40 seconds.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting\r\n     * @param  {number | string}  value   Value to format\r\n     * @param  {string}           format  Format to apply\r\n     * @param  {TimeUnit}         base    Override base unit\r\n     * @return {string}                   Formatted number\r\n     */\r\n    DurationFormatter.prototype.format = function (value, format, base) {\r\n        // no language?\r\n        if (!this.language) {\r\n            if (this.sprite) {\r\n                this.language = this.sprite.language;\r\n            }\r\n            else {\r\n                this.language = new Language;\r\n            }\r\n        }\r\n        // no base unit?\r\n        var baseUnit = base || this._baseUnit;\r\n        // no format passed in or empty\r\n        if (typeof format === \"undefined\" || format === \"\") {\r\n            if ($type.hasValue(this.durationFormat)) {\r\n                format = this.durationFormat;\r\n            }\r\n            else {\r\n                format = this.getFormat($type.toNumber(value), null, baseUnit);\r\n            }\r\n        }\r\n        // Clean format\r\n        format = $utils.cleanFormat(format);\r\n        // get format info (it will also deal with parser caching)\r\n        var info = this.parseFormat(format, baseUnit);\r\n        // cast to number just in case\r\n        // TODO: maybe use better casting\r\n        var source = Number(value);\r\n        // format and replace the number\r\n        var details;\r\n        if (source > this._negativeBase) {\r\n            details = info.positive;\r\n        }\r\n        else if (source < this._negativeBase) {\r\n            details = info.negative;\r\n        }\r\n        else {\r\n            details = info.zero;\r\n        }\r\n        // Format\r\n        var formatted = this.applyFormat(source, details);\r\n        // Apply color?\r\n        if (details.color !== \"\") {\r\n            if (this._outputFormat === \"svg\") {\r\n                formatted = \"<tspan fill='\" + details.color + \"'>\" + formatted + \"</tspan>\";\r\n            }\r\n            else if (this._outputFormat === \"html\") {\r\n                formatted = \"<span style='color: \" + details.color + \";'>\" + formatted + \"</span>\";\r\n            }\r\n        }\r\n        return formatted;\r\n    };\r\n    /**\r\n     * Parses supplied format into structured object which can be used to format\r\n     * the number.\r\n     *\r\n     * @param  {string}    format  Format string, i.e. \"#,###.00\"\r\n     * @param  {TimeUnit}  base    Override base unit\r\n     * @return {any}               Parsed information\r\n     */\r\n    DurationFormatter.prototype.parseFormat = function (format, base) {\r\n        var _this = this;\r\n        // Check cache\r\n        var cached = this.getCache(format);\r\n        if ($type.hasValue(cached)) {\r\n            return cached;\r\n        }\r\n        // no base unit?\r\n        var baseUnit = base || this._baseUnit;\r\n        // Initialize duration parsing info\r\n        var info = {\r\n            \"positive\": {\r\n                \"color\": \"\",\r\n                \"template\": \"\",\r\n                \"parts\": [],\r\n                \"source\": \"\",\r\n                \"baseUnit\": baseUnit,\r\n                \"parsed\": false,\r\n                \"absolute\": false\r\n            },\r\n            \"negative\": {\r\n                \"color\": \"\",\r\n                \"template\": \"\",\r\n                \"parts\": [],\r\n                \"source\": \"\",\r\n                \"baseUnit\": baseUnit,\r\n                \"parsed\": false,\r\n                \"absolute\": false\r\n            },\r\n            \"zero\": {\r\n                \"color\": \"\",\r\n                \"template\": \"\",\r\n                \"parts\": [],\r\n                \"source\": \"\",\r\n                \"baseUnit\": baseUnit,\r\n                \"parsed\": false,\r\n                \"absolute\": false\r\n            }\r\n        };\r\n        // Escape double vertical bars (that mean display one vertical bar)\r\n        format = format.replace(\"||\", $strings.PLACEHOLDER2);\r\n        // Split it up and deal with different formats\r\n        var parts = format.split(\"|\");\r\n        info.positive.source = parts[0];\r\n        if (typeof parts[2] === \"undefined\") {\r\n            info.zero = info.positive;\r\n        }\r\n        else {\r\n            info.zero.source = parts[2];\r\n        }\r\n        if (typeof parts[1] === \"undefined\") {\r\n            info.negative = info.positive;\r\n        }\r\n        else {\r\n            info.negative.source = parts[1];\r\n        }\r\n        // Parse each\r\n        $object.each(info, function (part, item) {\r\n            // Already parsed\r\n            if (item.parsed) {\r\n                return;\r\n            }\r\n            // Check cached\r\n            if (typeof _this.getCache(item.source) !== \"undefined\") {\r\n                info[part] = _this.getCache(item.source);\r\n                return;\r\n            }\r\n            // Begin parsing\r\n            var partFormat = item.source;\r\n            // Check for [] directives\r\n            var dirs = [];\r\n            dirs = item.source.match(/^\\[([^\\]]*)\\]/);\r\n            if (dirs && dirs.length && dirs[0] !== \"\") {\r\n                partFormat = item.source.substr(dirs[0].length);\r\n                item.color = dirs[1];\r\n            }\r\n            // Let TextFormatter split into chunks\r\n            var chunks = getTextFormatter().chunk(partFormat, true);\r\n            for (var i = 0; i < chunks.length; i++) {\r\n                var chunk = chunks[i];\r\n                // replace back double vertical bar\r\n                chunk.text = chunk.text.replace($strings.PLACEHOLDER2, \"|\");\r\n                if (chunk.type === \"value\") {\r\n                    // Just \"Duration\"?\r\n                    // if (chunk.text.toLowerCase() === \"duration\") {\r\n                    // \tchunk.text = durationFormat;\r\n                    // }\r\n                    // Check for \"a\" (absolute) modifier\r\n                    if (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {\r\n                        item.absolute = true;\r\n                        chunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, \"$1\");\r\n                    }\r\n                    // Find all possible parts\r\n                    var matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);\r\n                    if (matches) {\r\n                        // Populate template\r\n                        for (var x = 0; x < matches.length; x++) {\r\n                            // Is it an alias?\r\n                            if (!$type.hasValue(matches[x])) {\r\n                                matches[x] = _this._unitAliases[matches[x]];\r\n                            }\r\n                            item.parts.push(matches[x]);\r\n                            chunk.text = chunk.text.replace(matches[x], $strings.PLACEHOLDER);\r\n                        }\r\n                    }\r\n                }\r\n                // Apply to template\r\n                item.template += chunk.text;\r\n            }\r\n            // Apply style formatting\r\n            //item.template = getTextFormatter().format(item.template, this.outputFormat);\r\n            // Save cache\r\n            _this.setCache(item.source, item);\r\n            // Mark this as parsed\r\n            item.parsed = true;\r\n        });\r\n        // Save cache (the whole thing)\r\n        this.setCache(format, info);\r\n        return info;\r\n    };\r\n    /**\r\n     * Applies parsed format to a numeric value.\r\n     *\r\n     * @param  {number}  value    Value\r\n     * @param  {any}     details  Parsed format as returned by {parseFormat}\r\n     * @return {string}           Formatted duration\r\n     */\r\n    DurationFormatter.prototype.applyFormat = function (value, details) {\r\n        // Use absolute values\r\n        var negative = !details.absolute && (value < this._negativeBase);\r\n        value = Math.abs(value);\r\n        // Recalculate to milliseconds\r\n        var tstamp = this.toTimeStamp(value, details.baseUnit);\r\n        // Init return value\r\n        var res = details.template;\r\n        // Iterate through duration parts\r\n        for (var i = 0, len = details.parts.length; i < len; i++) {\r\n            // Gather the part\r\n            var part = details.parts[i];\r\n            var unit = this.toTimeUnit(part.substr(0, 1));\r\n            var digits = part.length;\r\n            // Calculate current unit value\r\n            var ints = Math.floor(tstamp / this._unitValues[unit]);\r\n            res = res.replace($strings.PLACEHOLDER, $utils.padString(ints, digits, \"0\"));\r\n            // Reduce timestamp\r\n            tstamp -= ints * this._unitValues[unit];\r\n        }\r\n        // Reapply negative sign\r\n        if (negative) {\r\n            res = \"-\" + res;\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Converts numeric value to timestamp in milliseconds.\r\n     *\r\n     * @param  {number}    value     A source value\r\n     * @param  {TimeUnit}  baseUnit  Base unit the source value is in: \"q\", \"s\", \"i\", \"h\", \"d\", \"w\", \"m\", \"y\"\r\n     * @return {number}              Value representation as a timestamp in milliseconds\r\n     */\r\n    DurationFormatter.prototype.toTimeStamp = function (value, baseUnit) {\r\n        return value * this._unitValues[baseUnit];\r\n    };\r\n    DurationFormatter.prototype.toTimeUnit = function (code) {\r\n        switch (code) {\r\n            case \"S\":\r\n                return \"millisecond\";\r\n            case \"s\":\r\n                return \"second\";\r\n            case \"m\":\r\n                return \"minute\";\r\n            case \"h\":\r\n                return \"hour\";\r\n            case \"d\":\r\n                return \"day\";\r\n            case \"w\":\r\n                return \"week\";\r\n            case \"M\":\r\n                return \"month\";\r\n            case \"y\":\r\n                return \"year\";\r\n        }\r\n        ;\r\n    };\r\n    /**\r\n     * Invalidates the parent [[Sprite]] object.\r\n     */\r\n    DurationFormatter.prototype.invalidateSprite = function () {\r\n        if (this.sprite) {\r\n            this.sprite.invalidate();\r\n        }\r\n    };\r\n    Object.defineProperty(DurationFormatter.prototype, \"baseUnit\", {\r\n        /**\r\n         * @return {string} Base unit\r\n         */\r\n        get: function () {\r\n            return this._baseUnit;\r\n        },\r\n        /**\r\n         * Base unit the values are in.\r\n         *\r\n         * A base unit will be used to recalculate the numeric value to millisecond\r\n         * timestamps.\r\n         *\r\n         * Available options:\r\n         *\r\n         * * \"millisecond\"\r\n         * * \"second\"\r\n         * * \"minute\"\r\n         * * \"hour\"\r\n         * * \"day\"\r\n         * * \"week\"\r\n         * * \"month\"\r\n         * * \"year\"\r\n         *\r\n         * @default \"s\"\r\n         * @param {TimeUnit}  baseUnit  A base unit\r\n         */\r\n        set: function (baseUnit) {\r\n            this._baseUnit = baseUnit;\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DurationFormatter.prototype, \"outputFormat\", {\r\n        /**\r\n         * Getter for output format.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {string} Output format\r\n         */\r\n        get: function () {\r\n            return this._outputFormat;\r\n        },\r\n        /**\r\n         * Setter for output format: \"svg\" or \"html.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {string}  value  Output format\r\n         */\r\n        set: function (outputFormat) {\r\n            this._outputFormat = outputFormat.toLowerCase();\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns appropriate default format for the value.\r\n     *\r\n     * If `maxValue` is sepcified, it will use that value to determine the time\r\n     * unit for the format.\r\n     *\r\n     * For example if your `baseUnit` is `\"second\"` and you pass in `10`, you\r\n     * will get `\"10\"`.\r\n     *\r\n     * However, you might want it to be formatted in the context of bigger scale,\r\n     * say 10 minutes (600 seconds). If you pass in `600` as `maxValue`, all\r\n     * values, including small ones will use format with minutes, e.g.:\r\n     * `00:10`, `00:50`, `12: 30`, etc.\r\n     *\r\n     * @param  {number}    value     Value to format\r\n     * @param  {number}    maxValue  Maximum value to be used to determine format\r\n     * @param  {TimeUnit}  baseUnit  Base unit of the value\r\n     * @return {string}              Format\r\n     */\r\n    DurationFormatter.prototype.getFormat = function (value, maxValue, baseUnit) {\r\n        // Is format override set?\r\n        if ($type.hasValue(this.durationFormat)) {\r\n            return this.durationFormat;\r\n        }\r\n        // Get base unit\r\n        if (!baseUnit) {\r\n            baseUnit = this.baseUnit;\r\n        }\r\n        if ($type.hasValue(maxValue) && value != maxValue) {\r\n            value = Math.abs(value);\r\n            maxValue = Math.abs(maxValue);\r\n            var maxUnit = this.getValueUnit($math.max(value, maxValue), baseUnit);\r\n            //let diffUnit = this.getValueUnit(Math.abs(maxValue - value), baseUnit);\r\n            //console.log(maxUnit, diffUnit);\r\n            return this.durationFormats[baseUnit][maxUnit];\r\n        }\r\n        else {\r\n            var unit = this.getValueUnit(value, baseUnit);\r\n            return this.durationFormats[baseUnit][unit];\r\n        }\r\n    };\r\n    /**\r\n     * Returns value's closest denominator time unit, e.g 100 seconds is\r\n     * `\"minute\"`, while 59 seconds would still be `second`.\r\n     *\r\n     * @param  {number}    value     Source duration value\r\n     * @param  {TimeUnit}  baseUnit  Base unit\r\n     * @return {TimeUnit}            Denominator\r\n     */\r\n    DurationFormatter.prototype.getValueUnit = function (value, baseUnit) {\r\n        // Get base unit\r\n        if (!baseUnit) {\r\n            baseUnit = this.baseUnit;\r\n        }\r\n        // Convert to milliseconds\r\n        var currentUnit;\r\n        var ms = this.getMilliseconds(value, baseUnit);\r\n        $object.eachContinue(this._unitValues, function (key, val) {\r\n            if (key == baseUnit || currentUnit) {\r\n                var num = ms / val;\r\n                if (num <= 1) {\r\n                    if (!currentUnit) {\r\n                        currentUnit = key;\r\n                    }\r\n                    return false;\r\n                }\r\n                currentUnit = key;\r\n            }\r\n            return true;\r\n        });\r\n        return currentUnit;\r\n    };\r\n    /**\r\n     * Converts value to milliseconds according to `baseUnit`.\r\n     *\r\n     * @param  {number}    value     Source duration value\r\n     * @param  {TimeUnit}  baseUnit  Base unit\r\n     * @return {number}              Value in milliseconds\r\n     */\r\n    DurationFormatter.prototype.getMilliseconds = function (value, baseUnit) {\r\n        // Get base unit\r\n        if (!baseUnit) {\r\n            baseUnit = this.baseUnit;\r\n        }\r\n        return value * this._unitValues[baseUnit];\r\n    };\r\n    Object.defineProperty(DurationFormatter.prototype, \"durationFormat\", {\r\n        /**\r\n         * @return {Optional<string>} Format\r\n         */\r\n        get: function () {\r\n            return this._durationFormat;\r\n        },\r\n        /**\r\n         * If set, this format will be used instead of the one determined dynamically\r\n         * based on the basedUnit and range of values.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Available fomatting codes\r\n         * @param {string}  value  Format\r\n         */\r\n        set: function (value) {\r\n            if (this._durationFormat != value) {\r\n                this._durationFormat = value;\r\n                this.invalidateSprite();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DurationFormatter.prototype, \"durationFormats\", {\r\n        /**\r\n         * @return {Partial} Formats\r\n         */\r\n        get: function () {\r\n            if (!this._durationFormats) {\r\n                this._durationFormats = {\r\n                    \"millisecond\": {\r\n                        \"millisecond\": this.language.translate(\"_duration_millisecond\"),\r\n                        \"second\": this.language.translate(\"_duration_millisecond_second\"),\r\n                        \"minute\": this.language.translate(\"_duration_millisecond_minute\"),\r\n                        \"hour\": this.language.translate(\"_duration_millisecond_hour\"),\r\n                        \"day\": this.language.translate(\"_duration_millisecond_day\"),\r\n                        \"week\": this.language.translate(\"_duration_millisecond_week\"),\r\n                        \"month\": this.language.translate(\"_duration_millisecond_month\"),\r\n                        \"year\": this.language.translate(\"_duration_millisecond_year\")\r\n                    },\r\n                    \"second\": {\r\n                        \"second\": this.language.translate(\"_duration_second\"),\r\n                        \"minute\": this.language.translate(\"_duration_second_minute\"),\r\n                        \"hour\": this.language.translate(\"_duration_second_hour\"),\r\n                        \"day\": this.language.translate(\"_duration_second_day\"),\r\n                        \"week\": this.language.translate(\"_duration_second_week\"),\r\n                        \"month\": this.language.translate(\"_duration_second_month\"),\r\n                        \"year\": this.language.translate(\"_duration_second_year\")\r\n                    },\r\n                    \"minute\": {\r\n                        \"minute\": this.language.translate(\"_duration_minute\"),\r\n                        \"hour\": this.language.translate(\"_duration_minute_hour\"),\r\n                        \"day\": this.language.translate(\"_duration_minute_day\"),\r\n                        \"week\": this.language.translate(\"_duration_minute_week\"),\r\n                        \"month\": this.language.translate(\"_duration_minute_month\"),\r\n                        \"year\": this.language.translate(\"_duration_minute_year\")\r\n                    },\r\n                    \"hour\": {\r\n                        \"hour\": this.language.translate(\"_duration_hour\"),\r\n                        \"day\": this.language.translate(\"_duration_hour_day\"),\r\n                        \"week\": this.language.translate(\"_duration_hour_week\"),\r\n                        \"month\": this.language.translate(\"_duration_hour_month\"),\r\n                        \"year\": this.language.translate(\"_duration_hour_year\")\r\n                    },\r\n                    \"day\": {\r\n                        \"day\": this.language.translate(\"_duration_day\"),\r\n                        \"week\": this.language.translate(\"_duration_day_week\"),\r\n                        \"month\": this.language.translate(\"_duration_day_month\"),\r\n                        \"year\": this.language.translate(\"_duration_day_year\")\r\n                    },\r\n                    \"week\": {\r\n                        \"week\": this.language.translate(\"_duration_week\"),\r\n                        \"month\": this.language.translate(\"_duration_week_month\"),\r\n                        \"year\": this.language.translate(\"_duration_week_year\")\r\n                    },\r\n                    \"month\": {\r\n                        \"month\": this.language.translate(\"_duration_month\"),\r\n                        \"year\": this.language.translate(\"_duration_month_year\")\r\n                    },\r\n                    \"year\": {\r\n                        \"year\": this.language.translate(\"_duration_year\")\r\n                    }\r\n                };\r\n            }\r\n            return this._durationFormats;\r\n        },\r\n        /**\r\n         * Duration formats for various combination of base units.\r\n         *\r\n         * @param {Partial<Record<TimeUnit, Partial<Record<TimeUnit, string>>>>}  value  Formats\r\n         */\r\n        set: function (value) {\r\n            this._durationFormats = value;\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DurationFormatter;\r\n}(BaseObject));\r\nexport { DurationFormatter };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationFormatter\"] = DurationFormatter;\r\n//# sourceMappingURL=DurationFormatter.js.map","/**\r\n * Number formatting-related functionality.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Language } from \"../utils/Language\";\r\nimport { BaseObject } from \"../Base\";\r\nimport { getTextFormatter } from \"../formatters/TextFormatter\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $strings from \"../utils/Strings\";\r\nimport * as $object from \"../utils/Object\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * NumberFormatter class. Formats numbers according to specified formats.\r\n *\r\n * @todo Apply translations to suffixes/prefixes\r\n */\r\nvar NumberFormatter = /** @class */ (function (_super) {\r\n    tslib_1.__extends(NumberFormatter, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function NumberFormatter() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * A base value for negative numbers. Will treat all numbers below this value\r\n         * as negative numbers.\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this._negativeBase = 0;\r\n        /**\r\n         * Holds number format.\r\n         *\r\n         * @type {string}\r\n         * @default #,###.#####\r\n         */\r\n        _this._numberFormat = \"#,###.#####\";\r\n        /**\r\n         * Output format to produce. If the format calls for applying color to the\r\n         * formatted value, this setting will determine what markup to use: SVG or\r\n         * HTML.\r\n         *\r\n         * Available options: svg, html.\r\n         *\r\n         * @default \"svg\"\r\n         * @type {string}\r\n         */\r\n        _this._outputFormat = \"svg\";\r\n        _this.className = \"NumberFormatter\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    NumberFormatter.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        if (this.language) {\r\n            this.language.dispose();\r\n        }\r\n    };\r\n    Object.defineProperty(NumberFormatter.prototype, \"language\", {\r\n        /**\r\n         * @return {Language} Language\r\n         */\r\n        get: function () {\r\n            if (!this._language) {\r\n                if (this.sprite) {\r\n                    this._language = this.sprite.language;\r\n                }\r\n                else {\r\n                    this._language = new Language;\r\n                }\r\n            }\r\n            return this._language;\r\n        },\r\n        /**\r\n         * A reference to [[Language]] instance.\r\n         *\r\n         * Formatter will use language to translate various items, like number\r\n         * suffixes, etc.\r\n         *\r\n         * @param {Language}  value  Language\r\n         */\r\n        set: function (value) {\r\n            this._language = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Formats the number according to specific format.\r\n     *\r\n     * @param  {number | string}  value   Value to format\r\n     * @param  {string}           format  Format to apply\r\n     * @return {string}                   Formatted number\r\n     */\r\n    NumberFormatter.prototype.format = function (value, format) {\r\n        // no format passed in or \"Number\"\r\n        if (typeof format === \"undefined\" || format.toLowerCase() === \"number\") {\r\n            format = this._numberFormat;\r\n        }\r\n        // Clean format\r\n        format = $utils.cleanFormat(format);\r\n        // Get format info (it will also deal with parser caching)\r\n        var info = this.parseFormat(format, this.language);\r\n        // cast to number just in case\r\n        // TODO: maybe use better casting\r\n        var source = Number(value);\r\n        // format and replace the number\r\n        var details;\r\n        if (source > this._negativeBase) {\r\n            details = info.positive;\r\n        }\r\n        else if (source < this._negativeBase) {\r\n            details = info.negative;\r\n        }\r\n        else {\r\n            details = info.zero;\r\n        }\r\n        // Format\r\n        var formatted = details.template.split($strings.PLACEHOLDER).join(this.applyFormat(source, details));\r\n        return formatted;\r\n    };\r\n    /**\r\n     * Parses supplied format into structured object which can be used to format\r\n     * the number.\r\n     *\r\n     * @param {string} format Format string, i.e. \"#,###.00\"\r\n     * @param {Language} language Language\r\n     */\r\n    NumberFormatter.prototype.parseFormat = function (format, language) {\r\n        var _this = this;\r\n        // Check cache\r\n        var cached = this.getCache(format);\r\n        if ($type.hasValue(cached)) {\r\n            return cached;\r\n        }\r\n        // init format parse info holder\r\n        var info = {\r\n            \"positive\": {\r\n                \"thousands\": {\r\n                    \"active\": -1,\r\n                    \"passive\": -1,\r\n                    \"interval\": -1,\r\n                    \"separator\": language.translateEmpty(\"_thousandSeparator\")\r\n                },\r\n                \"decimals\": {\r\n                    \"active\": -1,\r\n                    \"passive\": -1,\r\n                    \"separator\": language.translateEmpty(\"_decimalSeparator\")\r\n                },\r\n                \"template\": \"\",\r\n                \"source\": \"\",\r\n                \"parsed\": false\r\n            },\r\n            \"negative\": {\r\n                \"thousands\": {\r\n                    \"active\": -1,\r\n                    \"passive\": -1,\r\n                    \"interval\": -1,\r\n                    \"separator\": language.translateEmpty(\"_thousandSeparator\")\r\n                },\r\n                \"decimals\": {\r\n                    \"active\": -1,\r\n                    \"passive\": -1,\r\n                    \"separator\": language.translateEmpty(\"_decimalSeparator\")\r\n                },\r\n                \"template\": \"\",\r\n                \"source\": \"\",\r\n                \"parsed\": false\r\n            },\r\n            \"zero\": {\r\n                \"thousands\": {\r\n                    \"active\": -1,\r\n                    \"passive\": -1,\r\n                    \"interval\": -1,\r\n                    \"separator\": language.translateEmpty(\"_thousandSeparator\")\r\n                },\r\n                \"decimals\": {\r\n                    \"active\": -1,\r\n                    \"passive\": -1,\r\n                    \"separator\": language.translateEmpty(\"_decimalSeparator\")\r\n                },\r\n                \"template\": \"\",\r\n                \"source\": \"\",\r\n                \"parsed\": false\r\n            }\r\n        };\r\n        // Escape double vertical bars (that mean display one vertical bar)\r\n        format = format.replace(\"||\", $strings.PLACEHOLDER2);\r\n        // Split it up and deal with different formats\r\n        var parts = format.split(\"|\");\r\n        info.positive.source = parts[0];\r\n        if (typeof parts[2] === \"undefined\") {\r\n            info.zero = info.positive;\r\n        }\r\n        else {\r\n            info.zero.source = parts[2];\r\n        }\r\n        if (typeof parts[1] === \"undefined\") {\r\n            info.negative = info.positive;\r\n        }\r\n        else {\r\n            info.negative.source = parts[1];\r\n        }\r\n        // Parse each\r\n        $object.each(info, function (part, item) {\r\n            // Already parsed\r\n            if (item.parsed) {\r\n                return;\r\n            }\r\n            // Check cached\r\n            if (typeof _this.getCache(item.source) !== \"undefined\") {\r\n                info[part] = _this.getCache(item.source);\r\n                return;\r\n            }\r\n            // Begin parsing\r\n            var partFormat = item.source;\r\n            // Just \"Number\"?\r\n            if (partFormat.toLowerCase() === \"number\") {\r\n                partFormat = _this._numberFormat;\r\n            }\r\n            // Let TextFormatter split into chunks\r\n            var chunks = getTextFormatter().chunk(partFormat, true);\r\n            for (var i = 0; i < chunks.length; i++) {\r\n                var chunk = chunks[i];\r\n                // replace back double vertical bar\r\n                chunk.text = chunk.text.replace($strings.PLACEHOLDER2, \"|\");\r\n                if (chunk.type === \"value\") {\r\n                    // Parse format\r\n                    // Look for codes\r\n                    var matches = [];\r\n                    if (matches = chunk.text.match(/[#0.,]+[ ]?[abesABES%]?[abesABES‰]?/)) {\r\n                        if (matches === null || matches[0] === \"\") {\r\n                            // no codes here - assume string\r\n                            // nothing to do here\r\n                            item.template += chunk.text;\r\n                        }\r\n                        else {\r\n                            // look for the format modifiers at the end\r\n                            var mods = [];\r\n                            if (mods = matches[0].match(/[abesABES%‰]{2}|[abesABES%‰]{1}$/)) {\r\n                                item.mod = mods[0].toLowerCase();\r\n                                item.modSpacing = matches[0].match(/[ ]{1}[abesABES%‰]{1}$/) ? true : false;\r\n                            }\r\n                            // break the format up\r\n                            var a = matches[0].split(\".\");\r\n                            // Deal with thousands\r\n                            if (a[0] === \"\") {\r\n                                // No directives for thousands\r\n                                // Leave default settings (no formatting)\r\n                            }\r\n                            else {\r\n                                // Counts\r\n                                item.thousands.active = (a[0].match(/0/g) || []).length;\r\n                                item.thousands.passive = (a[0].match(/\\#/g) || []).length + item.thousands.active;\r\n                                // Separator interval\r\n                                var b = a[0].split(\",\");\r\n                                if (b.length === 1) {\r\n                                    // No thousands separators\r\n                                    // Do nothing\r\n                                }\r\n                                else {\r\n                                    // Use length fo the last chunk as thousands length\r\n                                    item.thousands.interval = $type.getValue(b.pop()).length;\r\n                                    if (item.thousands.interval === 0)\r\n                                        item.thousands.interval = -1;\r\n                                }\r\n                            }\r\n                            // Deal with decimals\r\n                            if (typeof (a[1]) === \"undefined\") {\r\n                                // No directives for decimals\r\n                                // Leave at defaults (no formatting)\r\n                            }\r\n                            else {\r\n                                // Counts\r\n                                item.decimals.active = (a[1].match(/0/g) || []).length;\r\n                                item.decimals.passive = (a[1].match(/\\#/g) || []).length + item.decimals.active;\r\n                            }\r\n                            // Add special code to template\r\n                            item.template += chunk.text.split(matches[0]).join($strings.PLACEHOLDER);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    // Quoted string - take it as it is\r\n                    item.template += chunk.text;\r\n                }\r\n            }\r\n            // Apply style formatting\r\n            //item.template = getTextFormatter().format(item.template, this.outputFormat);\r\n            // Save cache\r\n            _this.setCache(item.source, item);\r\n            // Mark this as parsed\r\n            item.parsed = true;\r\n        });\r\n        // Save cache (the whole thing)\r\n        this.setCache(format, info);\r\n        return info;\r\n    };\r\n    /**\r\n     * Applies parsed format to a numeric value.\r\n     *\r\n     * @param  {number}  value    Value\r\n     * @param  {any}     details  Parsed format as returned by {parseFormat}\r\n     * @return {string}          Formatted number\r\n     */\r\n    NumberFormatter.prototype.applyFormat = function (value, details) {\r\n        // Use absolute values\r\n        var negative = value < 0;\r\n        value = Math.abs(value);\r\n        // Recalculate according to modifier\r\n        var prefix = \"\", suffix = \"\";\r\n        var mods = details.mod ? details.mod.split(\"\") : [];\r\n        if (mods.indexOf(\"b\") !== -1) {\r\n            var a_1 = this.applyPrefix(value, this.bytePrefixes);\r\n            value = a_1[0];\r\n            prefix = a_1[1];\r\n            suffix = a_1[2];\r\n            if (details.modSpacing) {\r\n                suffix = \" \" + suffix;\r\n            }\r\n        }\r\n        else if (mods.indexOf(\"a\") !== -1) {\r\n            var a_2 = this.applyPrefix(value, value < 1.00 ? this.smallNumberPrefixes : this.bigNumberPrefixes);\r\n            value = a_2[0];\r\n            prefix = a_2[1];\r\n            suffix = a_2[2];\r\n            if (details.modSpacing) {\r\n                suffix = \" \" + suffix;\r\n            }\r\n        }\r\n        else if (mods.indexOf(\"%\") !== -1) {\r\n            value *= 100;\r\n            suffix = \"%\";\r\n        }\r\n        else if (mods.indexOf(\"‰\") !== -1) {\r\n            value *= 1000;\r\n            suffix = \"‰\";\r\n        }\r\n        // Round to passive\r\n        if (mods.indexOf(\"e\") !== -1) {\r\n            // convert the value to exponential\r\n            var exp = void 0;\r\n            if (details.decimals.passive >= 0) {\r\n                exp = value.toExponential(details.decimals.passive).split(\"e\");\r\n            }\r\n            else {\r\n                exp = value.toExponential().split(\"e\");\r\n            }\r\n            value = Number(exp[0]);\r\n            suffix = \"e\" + exp[1];\r\n            if (details.modSpacing) {\r\n                suffix = \" \" + suffix;\r\n            }\r\n        }\r\n        else if (details.decimals.passive === 0) {\r\n            value = Math.round(value);\r\n        }\r\n        else if (details.decimals.passive > 0) {\r\n            var d = Math.pow(10, details.decimals.passive);\r\n            value = Math.round(value * d) / d;\r\n        }\r\n        // Init return value\r\n        var res = \"\";\r\n        // Calc integer and decimal parts\r\n        var a = $utils.numberToString(value).split(\".\");\r\n        // Format integers\r\n        var ints = a[0];\r\n        // Pad integers to active length\r\n        if (ints.length < details.thousands.active) {\r\n            ints = Array(details.thousands.active - ints.length + 1).join(\"0\") + ints;\r\n        }\r\n        // Insert thousands separators\r\n        if (details.thousands.interval > 0) {\r\n            var ip = [];\r\n            var intsr = ints.split(\"\").reverse().join(\"\");\r\n            for (var i = 0, len = ints.length; i <= len; i += details.thousands.interval) {\r\n                var c = intsr.substr(i, details.thousands.interval).split(\"\").reverse().join(\"\");\r\n                if (c !== \"\") {\r\n                    ip.unshift(c);\r\n                }\r\n            }\r\n            ints = ip.join(details.thousands.separator);\r\n        }\r\n        // Add integers\r\n        res += ints;\r\n        // Add decimals\r\n        if (a.length === 1) {\r\n            a.push(\"\");\r\n        }\r\n        var decs = a[1];\r\n        // Fill zeros?\r\n        if (decs.length < details.decimals.active) {\r\n            decs += Array(details.decimals.active - decs.length + 1).join(\"0\");\r\n        }\r\n        if (decs !== \"\") {\r\n            res += details.decimals.separator + decs;\r\n        }\r\n        // Can't have empty return value\r\n        if (res === \"\") {\r\n            res = \"0\";\r\n        }\r\n        // Add minus sign back\r\n        if (value !== 0 && negative && (mods.indexOf(\"s\") === -1)) {\r\n            res = \"-\" + res;\r\n        }\r\n        // Add suffixes/prefixes\r\n        if (prefix) {\r\n            res = prefix + res;\r\n        }\r\n        if (suffix) {\r\n            res += suffix;\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Chooses appropriate prefix and suffix based on the passed in rules.\r\n     *\r\n     * @param  {number}  value     Value\r\n     * @param  {any[]}   prefixes  Prefix array\r\n     * @return {any}               Result\r\n     */\r\n    NumberFormatter.prototype.applyPrefix = function (value, prefixes) {\r\n        var newvalue = value, prefix = \"\", suffix = \"\";\r\n        for (var i = 0, len = prefixes.length; i < len; i++) {\r\n            if (prefixes[i].number <= value) {\r\n                if (prefixes[i].number === 0) {\r\n                    newvalue = 0;\r\n                }\r\n                else {\r\n                    newvalue = value / prefixes[i].number;\r\n                }\r\n                prefix = prefixes[i].prefix;\r\n                suffix = prefixes[i].suffix;\r\n            }\r\n        }\r\n        return [newvalue, prefix, suffix];\r\n    };\r\n    /**\r\n     * Invalidates the parent [[Sprite]] object.\r\n     */\r\n    NumberFormatter.prototype.invalidateSprite = function () {\r\n        if (this.sprite) {\r\n            this.sprite.invalidate();\r\n        }\r\n    };\r\n    Object.defineProperty(NumberFormatter.prototype, \"numberFormat\", {\r\n        /**\r\n         * @return {string} A format to use for number formatting\r\n         */\r\n        get: function () {\r\n            return this._numberFormat;\r\n        },\r\n        /**\r\n         * Number format.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting\r\n         * @param {string}  format  A format to use for number formatting\r\n         */\r\n        set: function (format) {\r\n            this._numberFormat = format;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NumberFormatter.prototype, \"bigNumberPrefixes\", {\r\n        /**\r\n         * @return {INumberSuffix[]} Prefixes for big numbers\r\n         */\r\n        get: function () {\r\n            if (!$type.hasValue(this._bigNumberPrefixes)) {\r\n                this._bigNumberPrefixes = [\r\n                    { \"number\": 1e+3, \"suffix\": this.language.translate(\"_big_number_suffix_3\") },\r\n                    { \"number\": 1e+6, \"suffix\": this.language.translate(\"_big_number_suffix_6\") },\r\n                    { \"number\": 1e+9, \"suffix\": this.language.translate(\"_big_number_suffix_9\") },\r\n                    { \"number\": 1e+12, \"suffix\": this.language.translate(\"_big_number_suffix_12\") },\r\n                    { \"number\": 1e+15, \"suffix\": this.language.translate(\"_big_number_suffix_15\") },\r\n                    { \"number\": 1e+18, \"suffix\": this.language.translate(\"_big_number_suffix_18\") },\r\n                    { \"number\": 1e+21, \"suffix\": this.language.translate(\"_big_number_suffix_21\") },\r\n                    { \"number\": 1e+24, \"suffix\": this.language.translate(\"_big_number_suffix_24\") }\r\n                ];\r\n            }\r\n            return this._bigNumberPrefixes;\r\n        },\r\n        /**\r\n         * Prefixes for big numbers.\r\n         *\r\n         * It's an array of objects of number/prefix pairs.\r\n         *\r\n         * ```JSON\r\n         * [\r\n         *   { \"number\": 1e+3, \"suffix\": \"K\" },\r\n         *   { \"number\": 1e+6, \"suffix\": \"M\" },\r\n         *   { \"number\": 1e+9, \"suffix\": \"G\" },\r\n         *   { \"number\": 1e+12, \"suffix\": \"T\" },\r\n         *   { \"number\": 1e+15, \"suffix\": \"P\" },\r\n         *   { \"number\": 1e+18, \"suffix\": \"E\" },\r\n         *   { \"number\": 1e+21, \"suffix\": \"Z\" },\r\n         *   { \"number\": 1e+24, \"suffix\": \"Y\" }\r\n         * ]\r\n         * ```\r\n         *\r\n         * If the number is bigger than the `number` ir will be converted to the\r\n         * appropriate bigger number with prefix.\r\n         *\r\n         * E.g. as per above `1500` will be converted to `1.5K`.\r\n         *\r\n         * Please note that for this transformation to be enabled, you need to\r\n         * enable it specific modifier in your format setting.\r\n         *\r\n         * The modifier for big/small number modification is \"a\":\r\n         *\r\n         * ```Text\r\n         * {myfield.formatNumber(\"#,###.00a\")}\r\n         * ```\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting\r\n         * @param {INumberSuffix[]}  prefixes  Prefixes for big numbers\r\n         */\r\n        set: function (prefixes) {\r\n            this._bigNumberPrefixes = prefixes;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NumberFormatter.prototype, \"smallNumberPrefixes\", {\r\n        /**\r\n         * @return {INumberSuffix[]} Prefixes for small numbers\r\n         */\r\n        get: function () {\r\n            if (!$type.hasValue(this._smallNumberPrefixes)) {\r\n                this._smallNumberPrefixes = [\r\n                    { \"number\": 1e-24, \"suffix\": this.language.translate(\"_small_number_suffix_24\") },\r\n                    { \"number\": 1e-21, \"suffix\": this.language.translate(\"_small_number_suffix_21\") },\r\n                    { \"number\": 1e-18, \"suffix\": this.language.translate(\"_small_number_suffix_18\") },\r\n                    { \"number\": 1e-15, \"suffix\": this.language.translate(\"_small_number_suffix_15\") },\r\n                    { \"number\": 1e-12, \"suffix\": this.language.translate(\"_small_number_suffix_12\") },\r\n                    { \"number\": 1e-9, \"suffix\": this.language.translate(\"_small_number_suffix_9\") },\r\n                    { \"number\": 1e-6, \"suffix\": this.language.translate(\"_small_number_suffix_6\") },\r\n                    { \"number\": 1e-3, \"suffix\": this.language.translate(\"_small_number_suffix_3\") }\r\n                ];\r\n            }\r\n            return this._smallNumberPrefixes;\r\n        },\r\n        /**\r\n         * Prefixes for big numbers.\r\n         *\r\n         * It's an array of objects of number/prefix pairs.\r\n         *\r\n         * ```JSON\r\n         * [\r\n         *   { \"number\": 1e-24, \"suffix\": \"y\" },\r\n         *   { \"number\": 1e-21, \"suffix\": \"z\" },\r\n         *   { \"number\": 1e-18, \"suffix\": \"a\" },\r\n         *   { \"number\": 1e-15, \"suffix\": \"f\" },\r\n         *   { \"number\": 1e-12, \"suffix\": \"p\" },\r\n         *   { \"number\": 1e-9, \"suffix\": \"n\" },\r\n         *   { \"number\": 1e-6, \"suffix\": \"μ\" },\r\n         *   { \"number\": 1e-3, \"suffix\": \"m\" }\r\n         * ]\r\n         * ```\r\n         *\r\n         * If the number is smaller than the `number` ir will be converted to the\r\n         * appropriate smaller number with prefix.\r\n         *\r\n         * E.g. as per above `0.0015` will be converted to `1.5m`.\r\n         *\r\n         * Please note that for this transformation to be enabled, you need to\r\n         * enable it specific modifier in your format setting.\r\n         *\r\n         * The modifier for big/small number modification is \"a\":\r\n         *\r\n         * ```Text\r\n         * {myfield.formatNumber(\"#,###.00a\")}\r\n         * ```\r\n         *\r\n         * IMPORTANT: The order of the suffixes is important. The list must start\r\n         * from the smallest number and work towards bigger ones.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting\r\n         * @param {INumberSuffix[]}  prefixes  Prefixes for small numbers\r\n         */\r\n        set: function (prefixes) {\r\n            this._smallNumberPrefixes = prefixes;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NumberFormatter.prototype, \"bytePrefixes\", {\r\n        /**\r\n         * @return {INumberSuffix[]} Prefixes for byte-size formatting\r\n         */\r\n        get: function () {\r\n            if (!$type.hasValue(this._bytePrefixes)) {\r\n                this._bytePrefixes = [\r\n                    { \"number\": 0, suffix: this.language.translate(\"_byte_suffix_B\") },\r\n                    { \"number\": 1024, suffix: this.language.translate(\"_byte_suffix_KB\") },\r\n                    { \"number\": 1048576, suffix: this.language.translate(\"_byte_suffix_MB\") },\r\n                    { \"number\": 1073741824, suffix: this.language.translate(\"_byte_suffix_GB\") },\r\n                    { \"number\": 1099511627776, suffix: this.language.translate(\"_byte_suffix_TB\") },\r\n                    { \"number\": 1125899906842624, suffix: this.language.translate(\"_byte_suffix_PB\") }\r\n                ];\r\n            }\r\n            return this._bytePrefixes;\r\n        },\r\n        /**\r\n         * Basically the same as `bigNumberPrefixes`, except base for calculation\r\n         * is not thousand but byte (1024).\r\n         *\r\n         * The modifier is \"b\".\r\n         *\r\n         *  ```Text\r\n         * {myfield.formatNumber(\"#,###.00b\")}\r\n         * ```\r\n         *\r\n         * The above `2048` will change to `2K`.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting\r\n         * @param {INumberSuffix[]}  prefixes  Prefixes for byte-size formatting\r\n         */\r\n        set: function (prefixes) {\r\n            this._bytePrefixes = prefixes;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NumberFormatter.prototype, \"outputFormat\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {string} Output format\r\n         */\r\n        get: function () {\r\n            return this._outputFormat;\r\n        },\r\n        /**\r\n         * Ooutput format: \"svg\" or \"html\".\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {string}  value  Output format\r\n         */\r\n        set: function (outputFormat) {\r\n            this._outputFormat = outputFormat.toLowerCase();\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Replaces brackets with temporary placeholders.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}  text  Input text\r\n     * @return {string}        Escaped text\r\n     */\r\n    NumberFormatter.prototype.escape = function (text) {\r\n        return text.replace(\"||\", $strings.PLACEHOLDER2);\r\n    };\r\n    /**\r\n     * Replaces placeholders back to brackets.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}  text  Escaped text\r\n     * @return {string}        Unescaped text\r\n     */\r\n    NumberFormatter.prototype.unescape = function (text) {\r\n        return text.replace($strings.PLACEHOLDER2, \"|\");\r\n    };\r\n    return NumberFormatter;\r\n}(BaseObject));\r\nexport { NumberFormatter };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NumberFormatter\"] = NumberFormatter;\r\n//# sourceMappingURL=NumberFormatter.js.map","/**\r\n * Handles formatting of pseudo-markup in text.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { AMElement } from \"../rendering/AMElement\";\r\nimport { Adapter } from \"../utils/Adapter\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $strings from \"../utils/Strings\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * Handles formatting of pseudo-markdown in text.\r\n *\r\n * @todo Encode < > in output\r\n * @todo Add more adapters\r\n * @important\r\n */\r\nvar TextFormatter = /** @class */ (function (_super) {\r\n    tslib_1.__extends(TextFormatter, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function TextFormatter() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Adapter.\r\n         *\r\n         * @type {Adapter<TextFormatter, ITextFormatterAdapters>}\r\n         */\r\n        _this.adapter = new Adapter(_this);\r\n        _this.className = \"TextFormatter\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    TextFormatter.prototype.debug = function () { };\r\n    /**\r\n     * Formats the text according to specifications passed in.\r\n     *\r\n     * @param  {string}  text    Text to format\r\n     * @param  {string}  output  Output format (svg, html)\r\n     * @return {string}          Formatted text\r\n     */\r\n    TextFormatter.prototype.format = function (text, output) {\r\n        // Apply default\r\n        if (!$type.hasValue(output)) {\r\n            output = \"svg\";\r\n        }\r\n        // Init return value\r\n        var formatted = \"\";\r\n        // Replace double (escaped) square spaces with remporary codes\r\n        text = this.escape(text);\r\n        // Divvy up the string by style tags\r\n        var styles = text.match(/\\[([^\\]]*?)\\]/gm);\r\n        if (!styles) {\r\n            // Nothing to do here - no formatting elements\r\n            return this.wrap(text, \"\", output);\r\n        }\r\n        // Get pure text - no style tags\r\n        var texts = text.split(/\\[[^\\[\\]]*\\]/);\r\n        // Go through each of the texts and wrap it in style tags\r\n        for (var i = 0, len = texts.length; i < len; i++) {\r\n            // Get text bit\r\n            var t = texts[i];\r\n            // Check if string is empty\r\n            if (t === \"\") {\r\n                continue;\r\n            }\r\n            // Run through an adapter\r\n            t = this.adapter.apply(\"chunk\", t);\r\n            // Get related style\r\n            var s = \"\";\r\n            if (i > 0) {\r\n                s = styles[i - 1].replace('[', '').replace(']', '');\r\n            }\r\n            // Wrap text in tag\r\n            formatted += this.wrap(t, s, output);\r\n        }\r\n        // Replace placeholders back\r\n        formatted = this.unescape(formatted);\r\n        // Return result\r\n        return this.cleanUp(formatted);\r\n    };\r\n    /**\r\n     * Replaces brackets with temporary placeholders.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}  text  Input text\r\n     * @return {string}        Escaped text\r\n     */\r\n    TextFormatter.prototype.escape = function (text) {\r\n        return text.\r\n            replace(/\\[\\[/g, registry.getPlaceholder(\"1\")).\r\n            replace(/([^\\/]{1})\\]\\]/g, \"$1\" + registry.getPlaceholder(\"2\")).\r\n            replace(/\\{\\{/g, registry.getPlaceholder(\"3\")).\r\n            replace(/\\}\\}/g, registry.getPlaceholder(\"4\")).\r\n            replace(/\\'\\'/g, registry.getPlaceholder(\"5\"));\r\n    };\r\n    /**\r\n     * Replaces placeholders back to brackets.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}  text  Escaped text\r\n     * @return {string}        Unescaped text\r\n     */\r\n    TextFormatter.prototype.unescape = function (text) {\r\n        return text.\r\n            replace(new RegExp(registry.getPlaceholder(\"1\"), \"g\"), \"[[\").\r\n            replace(new RegExp(registry.getPlaceholder(\"2\"), \"g\"), \"]]\").\r\n            replace(new RegExp(registry.getPlaceholder(\"3\"), \"g\"), \"{{\").\r\n            replace(new RegExp(registry.getPlaceholder(\"4\"), \"g\"), \"}}\").\r\n            replace(new RegExp(registry.getPlaceholder(\"5\"), \"g\"), \"'\");\r\n    };\r\n    /**\r\n     * Cleans up the text text for leftover double square brackets.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}  text  Input text\r\n     * @return {string}        Cleaned up text\r\n     */\r\n    TextFormatter.prototype.cleanUp = function (text) {\r\n        return text.\r\n            replace(/\\[\\[/g, \"[\").\r\n            replace(/\\]\\]/g, \"]\").\r\n            replace(/\\{\\{/g, \"{\").\r\n            replace(/\\}\\}/g, \"}\").\r\n            replace(/\\'\\'/g, \"'\");\r\n    };\r\n    /**\r\n     * Wraps text into corresponding tags.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}  text   Text to wrap\r\n     * @param  {string}  style  Styles\r\n     * @param  {string}  output  Format to output in (svg, html)\r\n     * @return {string}          Formatted string\r\n     */\r\n    TextFormatter.prototype.wrap = function (text, style, output) {\r\n        if (style === \"\" || style === \"/\") {\r\n            //return text;\r\n            style = \"\";\r\n        }\r\n        switch (output) {\r\n            case \"html\":\r\n                return this.wrapHtml(text, this.translateStyleShortcuts(style));\r\n            default:\r\n                return this.wrapSvg(text, this.translateStyleShortcuts(style));\r\n        }\r\n    };\r\n    /**\r\n     * Wraps text in styled SVG tag.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}  text   Text to wrap\r\n     * @param  {string}  style  Style property\r\n     * @return {string}         Formatted tag\r\n     */\r\n    TextFormatter.prototype.wrapSvg = function (text, style) {\r\n        if (style === \"\") {\r\n            return \"<tspan>\" + text + \"</tspan>\";\r\n        }\r\n        else {\r\n            return \"<tspan style='\" + style + \"'>\" + text + \"</tspan>\";\r\n        }\r\n    };\r\n    /**\r\n     * Returns an SVG `<tspan>` element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}     text   Text\r\n     * @param  {string}     style  Style\r\n     * @return {AMElement}         Element\r\n     */\r\n    TextFormatter.prototype.getSvgElement = function (text, style) {\r\n        var element = new AMElement(\"tspan\");\r\n        element.textContent = text;\r\n        if (style) {\r\n            element.node.setAttribute(\"style\", style);\r\n        }\r\n        return element;\r\n    };\r\n    /**\r\n     * Wraps text in HTML <span> tag.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}  text   Text to wrap\r\n     * @param  {string}  style  Style property\r\n     * @return {string}         Formatted tag\r\n     * @todo Translate SVG styles into HTML ones\r\n     */\r\n    TextFormatter.prototype.wrapHtml = function (text, style) {\r\n        if (style === \"\") {\r\n            return \"<span>\" + text + \"</span>\";\r\n        }\r\n        else {\r\n            return \"<span style='\" + this.styleSvgToHtml(style) + \"'>\" + text + \"</span>\";\r\n        }\r\n    };\r\n    /**\r\n     * Returns an HTML `<span>` element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}       text   Text/HTML\r\n     * @param  {string}       style  Style definition\r\n     * @return {HTMLElement}         HTML element\r\n     */\r\n    TextFormatter.prototype.getHtmlElement = function (text, style) {\r\n        var element = document.createElement(\"span\");\r\n        element.innerHTML = text;\r\n        if (style) {\r\n            element.setAttribute(\"style\", style);\r\n        }\r\n        return element;\r\n    };\r\n    /**\r\n     * Trabslates SVG CSS into HTML CSS.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}  style  SVG CSS\r\n     * @return {string}         HTML CSS\r\n     * @todo Implement actual translation\r\n     */\r\n    TextFormatter.prototype.styleSvgToHtml = function (style) {\r\n        style = style.replace(/fill:/, \"color:\");\r\n        return style;\r\n    };\r\n    /**\r\n     * Translates style shortcuts into full styles, i.e.:\r\n     * \"bold\" => \"font-weight: bold\"\r\n     * \"#f00\" => \"fill: #f00\"\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}  style  Untranslated style\r\n     * @return {string}         Translated style\r\n     * @todo Implement actual translation\r\n     */\r\n    TextFormatter.prototype.translateStyleShortcuts = function (style) {\r\n        if (style == \"\" || style == \"[ ]\") {\r\n            return \"\";\r\n        }\r\n        var cached = registry.getCache(\"translateStyleShortcuts_\" + style);\r\n        if (cached) {\r\n            return cached;\r\n        }\r\n        // Get style parts\r\n        var b = style.match(/([\\w\\-]*:[\\s]?[^;\\s\\]]*)|(\\#[\\w]{1,6})|([\\w]+)|(\\/)/gi);\r\n        // Empty?\r\n        if (!b) {\r\n            return style;\r\n        }\r\n        // Check each part\r\n        for (var i = 0; i < b.length; i++) {\r\n            if (b[i].match(/^bold$/i)) {\r\n                // Bold\r\n                b[i] = \"font-weight:\" + b[i];\r\n            }\r\n            else if (b[i] == \"/\") {\r\n                // Just closing tag\r\n                // Do nothing\r\n                b[i] = \"\";\r\n            }\r\n            else if (!b[i].match(/:/)) {\r\n                // Color\r\n                b[i] = \"fill:\" + b[i];\r\n            }\r\n        }\r\n        var res = b.join(';');\r\n        registry.setCache(\"translateStyleShortcuts_\" + style, res);\r\n        return res;\r\n    };\r\n    /**\r\n     * Splits string into chunks. (style blocks, quoted blocks, regular blocks)\r\n     *\r\n     * If the second parameter `quotedBlocks` is set to `true` this method will\r\n     * also single out text blocks enclosed within single quotes that no\r\n     * formatting should be applied to, and they should be displayed as is.\r\n     *\r\n     * Default for the above is `false`, so that you can use single quote in text\r\n     * without escaping it.\r\n     *\r\n     * If enabled, single quotes can be escaped by doubling it - adding two\r\n     * single quotes, which will be replaced by a one single quote in the final\r\n     * output.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}    text          Text to chunk\r\n     * @param  {boolean}   quotedBlocks  Use quoted blocks\r\n     * @param  {boolean}   noFormatting  Formatting blocks will be treated as regular text\r\n     * @return {string[]}                Array of string chunks\r\n     */\r\n    TextFormatter.prototype.chunk = function (text, quotedBlocks, noFormatting) {\r\n        if (quotedBlocks === void 0) { quotedBlocks = false; }\r\n        if (noFormatting === void 0) { noFormatting = false; }\r\n        // Init result\r\n        var res = [];\r\n        // Replace double (escaped) square spaces and quotes with temporary codes\r\n        text = this.escape(text);\r\n        // Deal with style blocks\r\n        var chunks = quotedBlocks ? text.split(\"'\") : [text];\r\n        for (var i = 0; i < chunks.length; i++) {\r\n            var chunk = chunks[i];\r\n            // Empty?\r\n            if (chunk === \"\") {\r\n                continue;\r\n            }\r\n            if ((i % 2) === 0) {\r\n                // Text outside quotes\r\n                // Parse for style blocks which are \"text\" chunks, the rest chunks are\r\n                // \"value\"\r\n                chunk = chunk.replace(/\\]\\[/g, \"]\" + $strings.PLACEHOLDER + \"[\");\r\n                chunk = chunk.replace(/\\[\\]/g, \"[ ]\");\r\n                var chunks2 = chunk.split(/[\\[\\]]+/);\r\n                for (var i2 = 0; i2 < chunks2.length; i2++) {\r\n                    var chunk2 = this.cleanUp(this.unescape(chunks2[i2]));\r\n                    // Placeholder?\r\n                    if (chunk2 === $strings.PLACEHOLDER) {\r\n                        continue;\r\n                    }\r\n                    // Empty?\r\n                    if (chunk2 === \"\") {\r\n                        continue;\r\n                    }\r\n                    // Block or value\r\n                    if ((i2 % 2) === 0) {\r\n                        res.push({\r\n                            \"type\": \"value\",\r\n                            \"text\": this.adapter.apply(\"chunk\", chunk2)\r\n                        });\r\n                    }\r\n                    else {\r\n                        res.push({\r\n                            \"type\": noFormatting ? \"value\" : \"format\",\r\n                            \"text\": \"[\" + chunk2 + \"]\"\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // A text within doublequotes\r\n                // All chunks are \"text\"\r\n                var chunks2 = chunk.split(/[\\[\\]]+/);\r\n                for (var i2 = 0; i2 < chunks2.length; i2++) {\r\n                    var chunk2 = this.cleanUp(this.unescape(chunks2[i2]));\r\n                    // Empty?\r\n                    if (chunk2 === \"\") {\r\n                        continue;\r\n                    }\r\n                    // Block or text\r\n                    if ((i2 % 2) === 0) {\r\n                        res.push({\r\n                            \"type\": \"text\",\r\n                            \"text\": chunk2\r\n                        });\r\n                    }\r\n                    else if (this.isImage(chunk2)) {\r\n                        res.push({\r\n                            \"type\": \"image\",\r\n                            \"text\": \"[\" + chunk2 + \"]\"\r\n                        });\r\n                    }\r\n                    else {\r\n                        res.push({\r\n                            \"type\": \"format\",\r\n                            \"text\": \"[\" + chunk2 + \"]\"\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Checks if supplied format contains image information and should be\r\n     * formatted as such.\r\n     * I.e.: `[img: myImage.png]`\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {string}   text  Format\r\n     * @return {boolean}        `true` if it is an image\r\n     */\r\n    TextFormatter.prototype.isImage = function (text) {\r\n        return text.match(/img[ ]?:/) ? true : false;\r\n    };\r\n    return TextFormatter;\r\n}(BaseObject));\r\nexport { TextFormatter };\r\nvar formatter;\r\n/**\r\n * Returns the global instance of [[TextFormatter]].\r\n *\r\n * All classes and instances should reuse this universal text formatter,\r\n * rather than create their own instance of it.\r\n *\r\n * @type {TextFormatter}\r\n */\r\nexport function getTextFormatter() {\r\n    if (formatter == null) {\r\n        formatter = new TextFormatter();\r\n    }\r\n    return formatter;\r\n}\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TextFormatter\"] = TextFormatter;\r\n//# sourceMappingURL=TextFormatter.js.map","/**\r\n * Functionality related to inertia\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { getInteraction } from \"./Interaction\";\r\nimport { AnimationDisposer } from \"../utils/Animation\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * A point of inertia is to simulate gradually drecreasing motion even after\r\n * actual interaction by user, that caused it, has already ended.\r\n *\r\n * [[Inertia]] object will continue triggering the same [[Sprite]] handlers\r\n * as if the interaction was still happening, gradually reducing\r\n * shift/angle/scale values until full stop.\r\n *\r\n * Basically, from the target element's point of view, while inertia is\r\n * playing, it is still being interacted with by user, albeit with a\r\n * decreasing speed.\r\n */\r\nvar Inertia = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Inertia, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Inertia(interaction, type, point, startPoint) {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * List of animations currently playing.\r\n         *\r\n         * @type {List<Animation>}\r\n         */\r\n        _this.animations = [];\r\n        _this.className = \"Inertia\";\r\n        _this.interaction = interaction;\r\n        _this.type = type;\r\n        _this.point = point;\r\n        _this.startPoint = startPoint;\r\n        // Make animations disposable\r\n        _this._disposers.push(new AnimationDisposer(_this.animations));\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Inertia.prototype, \"x\", {\r\n        /**\r\n         * Returns current X coordinate.\r\n         *\r\n         * @return {number} X\r\n         */\r\n        get: function () {\r\n            return this.point.x;\r\n        },\r\n        /**\r\n         * Sets current X coordinate.\r\n         *\r\n         * Will trigger \"drag\" event for the target element.\r\n         *\r\n         * @param {number} value X\r\n         */\r\n        set: function (value) {\r\n            if ($type.isNumber(value)) {\r\n                this.point.x = value;\r\n                this.handleMove();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Inertia.prototype, \"y\", {\r\n        /**\r\n         * Returns current Y coordinate.\r\n         *\r\n         * @return {number} Y\r\n         */\r\n        get: function () {\r\n            return this.point.y;\r\n        },\r\n        /**\r\n         * Sets current Y coordinate.\r\n         *\r\n         * Will trigger \"drag\" event for the target element.\r\n         *\r\n         * @param {number} value Y\r\n         */\r\n        set: function (value) {\r\n            if ($type.isNumber(value)) {\r\n                this.point.y = value;\r\n                this.handleMove();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Simulates dragging of element.\r\n     */\r\n    Inertia.prototype.handleMove = function () {\r\n        // Prepare {InteractionEvent} object\r\n        if (this.interaction.events.isEnabled(\"drag\")) {\r\n            var imev = {\r\n                type: \"drag\",\r\n                target: this.interaction,\r\n                shift: {\r\n                    x: this.x - this.startPoint.x,\r\n                    y: this.y - this.startPoint.y\r\n                },\r\n                startPoint: this.startPoint,\r\n                point: {\r\n                    x: this.x,\r\n                    y: this.y\r\n                }\r\n            };\r\n            // Call handler\r\n            this.interaction.events.dispatchImmediately(\"drag\", imev);\r\n        }\r\n    };\r\n    /**\r\n     * Finishes up the inertia animation. (removes reference to this animation\r\n     * object)\r\n     */\r\n    Inertia.prototype.done = function () {\r\n        // Remove inertia animation from the object\r\n        this.interaction.inertias.removeKey(this.type);\r\n        // Move ended\r\n        if (this.type === \"move\") {\r\n            getInteraction().processDragStop(this.interaction);\r\n        }\r\n        // Destroy\r\n        this.dispose();\r\n    };\r\n    return Inertia;\r\n}(BaseObject));\r\nexport { Inertia };\r\n//# sourceMappingURL=Inertia.js.map","/**\r\n * Interaction manages all aspects of user interaction - mouse move,\r\n * click, hover, drag events, touch gestures.\r\n *\r\n * [[InteractionObject]] elements that want to use certain events, must attach event\r\n * listeners to Interaction instance.\r\n *\r\n * Interaction itself will not modify [[InteractionObject]] elements, it will be up to\r\n * those elements to handle interaction information received via event triggers.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObjectEvents } from \"../Base\";\r\nimport { List } from \"../utils/List\";\r\nimport { Animation } from \"../utils/Animation\";\r\nimport { MultiDisposer } from \"../utils/Disposer\";\r\nimport { InteractionObject } from \"./InteractionObject\";\r\nimport { InteractionKeyboardObject } from \"./InteractionKeyboardObject\";\r\nimport { Dictionary } from \"../utils/Dictionary\";\r\nimport { Inertia } from \"./Inertia\";\r\nimport { addEventListener } from \"../utils/DOM\";\r\nimport { keyboard } from \"../utils/Keyboard\";\r\nimport { system } from \"./../System\";\r\nimport * as $ease from \"../utils/Ease\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $iter from \"../utils/Iterator\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $time from \"../utils/Time\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n* Interaction manages all aspects of user interaction - mouse move,\r\n* click, hover, drag events, touch gestures.\r\n*\r\n* [[InteractionObject]] elements that want to use certain events, must attach event\r\n* listeners to Interaction instance.\r\n*\r\n* Interaction itself will not modify [[InteractionObject]] elements, it will be up to\r\n* those elements to handle interaction information received via event triggers.\r\n*\r\n* @see {@link IInteractionEvents} for a list of available events\r\n*/\r\nvar Interaction = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Interaction, _super);\r\n    /**\r\n     * Constructor. Sets up universal document-wide move events to handle stuff\r\n     * outside particular chart container.\r\n     */\r\n    function Interaction() {\r\n        var _this = \r\n        // Call super\r\n        _super.call(this) || this;\r\n        /**\r\n         * An indicator of global events were already initialized.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this._globalEventsAdded = false;\r\n        /**\r\n         * Holds which mouse event listeners to use.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        _this._pointerEvents = {\r\n            \"pointerdown\": \"mousedown\",\r\n            \"pointerup\": \"mouseup\",\r\n            \"pointermove\": \"mousemove\",\r\n            \"pointercancel\": \"mouseup\",\r\n            \"pointerover\": \"mouseover\",\r\n            \"pointerout\": \"mouseout\",\r\n            \"wheel\": \"wheel\"\r\n        };\r\n        /**\r\n         * Indicates if Interaction should use only \"pointer\" type events, like\r\n         * \"pointermove\", available in all modern browsers, ignoring \"legacy\"\r\n         * events, like \"touchmove\".\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this._usePointerEventsOnly = false;\r\n        /**\r\n         * Use only touch events (for touch only devices such as tablets and phones)\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this._useTouchEventsOnly = false;\r\n        /**\r\n         * Indicates if passive mode options is supported by this browser.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this._passiveSupported = false;\r\n        /**\r\n         * Holds list of delayed events\r\n         *\r\n         * @type {IDelayedEvent[]}\r\n         */\r\n        _this._delayedEvents = { out: [] };\r\n        /**\r\n         * List of objects that current have a pointer hovered over them.\r\n         *\r\n         * @type {List<InteractionObject>}\r\n         */\r\n        _this.overObjects = new List();\r\n        /**\r\n         * List of objects that currently has a pressed pointer.\r\n         *\r\n         * @type {List<InteractionObject>}\r\n         */\r\n        _this.downObjects = new List();\r\n        /**\r\n         * List of objects that need mouse position to be reported to them.\r\n         *\r\n         * @type {List<InteractionObject>}\r\n         */\r\n        _this.trackedObjects = new List();\r\n        /**\r\n         * List of objects that are currently being dragged.\r\n         *\r\n         * @type {List<InteractionObject>}\r\n         */\r\n        _this.transformedObjects = new List();\r\n        /**\r\n         * Holds all known pointers.\r\n         *\r\n         * @type {Dictionary<string, IPointer>}\r\n         */\r\n        _this.pointers = new Dictionary();\r\n        /**\r\n         * Inertia options that need to be applied to after element drag, if it's\r\n         * `inert = true`.\r\n         *\r\n         * This is just a default, which can and probably will be overridden by\r\n         * actual elements.\r\n         *\r\n         * @type {Dictionary}\r\n         */\r\n        _this.inertiaOptions = new Dictionary();\r\n        /**\r\n         * Default options for click events. These can be overridden in\r\n         * [[InteractionObject]].\r\n         *\r\n         * @type {IHitOptions}\r\n         */\r\n        _this.hitOptions = {\r\n            //\"holdTime\": 1000,\r\n            \"doubleHitTime\": 300,\r\n            //\"delayFirstHit\": false,\r\n            \"hitTolerance\": 10,\r\n            \"noFocus\": true\r\n        };\r\n        /**\r\n         * Default options for hover events. These can be overridden in\r\n         * [[InteractionObject]].\r\n         *\r\n         * @type {IHoverOptions}\r\n         */\r\n        _this.hoverOptions = {\r\n            \"touchOutBehavior\": \"leave\",\r\n            \"touchOutDelay\": 1000\r\n        };\r\n        /**\r\n         * Default options for detecting a swipe gesture. These can be overridden in\r\n         * [[InteractionObject]].\r\n         *\r\n         * @type {ISwipeOptions}\r\n         */\r\n        _this.swipeOptions = {\r\n            \"time\": 500,\r\n            \"verticalThreshold\": 75,\r\n            \"horizontalThreshold\": 30\r\n        };\r\n        /**\r\n         * Default options for keyboard operations. These can be overridden in\r\n         * [[InteractionObject]].\r\n         *\r\n         * @type {IKeyboarOptions}\r\n         */\r\n        _this.keyboardOptions = {\r\n            \"speed\": 0.1,\r\n            \"accelleration\": 1.2,\r\n            \"accellerationDelay\": 2000\r\n        };\r\n        // Set class name\r\n        _this.className = \"Interaction\";\r\n        // Create InteractionObject for <body>\r\n        _this.body = _this.getInteraction(document.body);\r\n        _this._disposers.push(_this.body);\r\n        // Detect browser capabilities and determine what event listeners to use\r\n        if (window.hasOwnProperty(\"PointerEvent\")) {\r\n            // IE10+/Edge without touch controls enabled\r\n            _this._pointerEvents.pointerdown = \"pointerdown\";\r\n            _this._pointerEvents.pointerup = \"pointerup\";\r\n            _this._pointerEvents.pointermove = \"pointermove\";\r\n            _this._pointerEvents.pointercancel = \"pointercancel\";\r\n            _this._pointerEvents.pointerover = \"pointerover\";\r\n            _this._pointerEvents.pointerout = \"pointerout\";\r\n            //this._usePointerEventsOnly = true;\r\n        }\r\n        else if (window.hasOwnProperty(\"MSPointerEvent\")) {\r\n            // IE9\r\n            _this._pointerEvents.pointerdown = \"MSPointerDown\";\r\n            _this._pointerEvents.pointerup = \"MSPointerUp\";\r\n            _this._pointerEvents.pointermove = \"MSPointerMove\";\r\n            _this._pointerEvents.pointercancel = \"MSPointerUp\";\r\n            _this._pointerEvents.pointerover = \"MSPointerOver\";\r\n            _this._pointerEvents.pointerout = \"MSPointerOut\";\r\n            //this._usePointerEventsOnly = true;\r\n        }\r\n        else if ((typeof matchMedia !== \"undefined\") && matchMedia('(pointer:fine)')) {\r\n            // This is only for Safari as it does not support PointerEvent\r\n            // Do nothing and let it use regular `mouse*` events\r\n            // Hi Apple ;)\r\n        }\r\n        else {\r\n            // Uses defaults for normal browsers\r\n            // We also assume that this must be a touch device that does not have\r\n            // any pointer events\r\n            _this._useTouchEventsOnly = true;\r\n        }\r\n        // Detect if device has a mouse\r\n        // This is turning out to be not reliable\r\n        // @todo remove\r\n        /*if (!window.navigator.msPointerEnabled && (typeof matchMedia !== \"undefined\") && !matchMedia('(pointer:fine)').matches && !this.fullFF()) {\r\n            this._useTouchEventsOnly = true;\r\n        }*/\r\n        // Detect proper mouse wheel events\r\n        if (\"onwheel\" in document.createElement(\"div\")) {\r\n            // Modern browsers\r\n            _this._pointerEvents.wheel = \"wheel\";\r\n        }\r\n        else if ($type.hasValue(document.onmousewheel)) {\r\n            // Webkit and IE support at least \"mousewheel\"\r\n            _this._pointerEvents.wheel = \"mousewheel\";\r\n        }\r\n        // Set up default inertia options\r\n        _this.inertiaOptions.setKey(\"move\", {\r\n            \"time\": 100,\r\n            \"duration\": 500,\r\n            \"factor\": 1,\r\n            \"easing\": $ease.polyOut3\r\n        });\r\n        _this.inertiaOptions.setKey(\"resize\", {\r\n            \"time\": 100,\r\n            \"duration\": 500,\r\n            \"factor\": 1,\r\n            \"easing\": $ease.polyOut3\r\n        });\r\n        // Check for passive mode support\r\n        try {\r\n            var target_1 = _this;\r\n            var options = Object.defineProperty({}, \"passive\", {\r\n                get: function () {\r\n                    target_1._passiveSupported = true;\r\n                }\r\n            });\r\n            window.addEventListener(\"test\", options, options);\r\n            window.removeEventListener(\"test\", options, options);\r\n        }\r\n        catch (err) {\r\n            _this._passiveSupported = false;\r\n        }\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * This is a nasty detection for Firefox. The reason why we have is that\r\n     * Firefox ESR version does not support matchMedia correctly.\r\n     *\r\n     * On iOS, Firefox uses different userAgent, so we don't have to detect iOS.\r\n     *\r\n     * @return {boolean} Full Firefox?\r\n     */\r\n    Interaction.prototype.fullFF = function () {\r\n        return (window.navigator.userAgent.match(/Firefox/)) && !(window.navigator.userAgent.match(/Android/));\r\n    };\r\n    Interaction.prototype.debug = function () { };\r\n    /**\r\n     * ==========================================================================\r\n     * Processing\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Sets up global events.\r\n     *\r\n     * We need this so that we can track drag movement beyond chart's container.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Interaction.prototype.addGlobalEvents = function () {\r\n        var _this = this;\r\n        if (!this._globalEventsAdded) {\r\n            if (!this._useTouchEventsOnly) {\r\n                this._disposers.push(addEventListener(document, this._pointerEvents.pointerdown, function (ev) { _this.handleGlobalPointerDown(ev); }));\r\n                this._disposers.push(addEventListener(document, this._pointerEvents.pointermove, function (ev) { _this.handleGlobalPointerMove(ev); }));\r\n                this._disposers.push(addEventListener(document, this._pointerEvents.pointerup, function (ev) { _this.handleGlobalPointerUp(ev); }));\r\n                this._disposers.push(addEventListener(document, this._pointerEvents.pointercancel, function (ev) { _this.handleGlobalPointerUp(ev, true); }));\r\n            }\r\n            // No need to duplicate events for hubrid systems that support both\r\n            // pointer events and touch events. Touch events are need only for\r\n            // some touch-only systems, like Mobile Safari.\r\n            if (!this._usePointerEventsOnly) {\r\n                this._disposers.push(addEventListener(document, \"touchstart\", function (ev) { _this.handleGlobalTouchStart(ev); }));\r\n                this._disposers.push(addEventListener(document, \"touchmove\", function (ev) { _this.handleGlobalTouchMove(ev); }));\r\n                this._disposers.push(addEventListener(document, \"touchend\", function (ev) { _this.handleGlobalTouchEnd(ev); }));\r\n            }\r\n            this._disposers.push(addEventListener(document, \"keydown\", function (ev) { _this.handleGlobalKeyDown(ev); }));\r\n            this._disposers.push(addEventListener(document, \"keyup\", function (ev) { _this.handleGlobalKeyUp(ev); }));\r\n            this._globalEventsAdded = true;\r\n        }\r\n    };\r\n    /**\r\n     * Sets if [[InteractionObject]] is clickable.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject} io [[InteractionObject]] instance\r\n     */\r\n    Interaction.prototype.processClickable = function (io) {\r\n        // Add or remove touch events\r\n        this.processTouchable(io);\r\n    };\r\n    /**\r\n     * Sets if [[InteractionObject]] is hoverable.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject} io [[InteractionObject]] instance\r\n     */\r\n    Interaction.prototype.processHoverable = function (io) {\r\n        var _this = this;\r\n        if (io.hoverable || io.trackable) {\r\n            // Add global events\r\n            this.addGlobalEvents();\r\n            // Add hover styles\r\n            this.applyCursorOverStyle(io);\r\n            // Add local events\r\n            if (!io.eventDisposers.hasKey(\"hoverable\")) {\r\n                io.eventDisposers.setKey(\"hoverable\", new MultiDisposer([\r\n                    addEventListener(io.element, this._pointerEvents.pointerout, function (e) { return _this.handlePointerOut(io, e); }),\r\n                    addEventListener(io.element, this._pointerEvents.pointerover, function (e) { return _this.handlePointerOver(io, e); })\r\n                ]));\r\n            }\r\n            if (io.trackable) {\r\n                //sprite.addEventListener(\"touchmove\", this.handleTouchMove, false, this);\r\n            }\r\n        }\r\n        else {\r\n            var disposer = io.eventDisposers.getKey(\"hoverable\");\r\n            if (disposer != null) {\r\n                disposer.dispose();\r\n                io.eventDisposers.removeKey(\"hoverable\");\r\n            }\r\n        }\r\n        // Add or remove touch events\r\n        this.processTouchable(io);\r\n    };\r\n    /**\r\n     * Sets up [[InteractionObject]] as movable. Movable can be any\r\n     * transformation, e.g. drag, swipe, resize, track.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}  io  Element\r\n     */\r\n    Interaction.prototype.processMovable = function (io) {\r\n        // Add unified events\r\n        if (io.draggable || io.swipeable || io.trackable || io.resizable) {\r\n            // Prep the element\r\n            if (!this.isGlobalElement(io)) {\r\n                this.prepElement(io);\r\n            }\r\n            // Add hover styles\r\n            this.applyCursorOverStyle(io);\r\n        }\r\n        // Add or remove touch events\r\n        this.processTouchable(io);\r\n    };\r\n    /**\r\n     * Checks if [[InteractionObject]] is trackable and sets relative events.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}  io  Element\r\n     */\r\n    Interaction.prototype.processTrackable = function (io) {\r\n        this.processHoverable(io);\r\n        this.processMovable(io);\r\n        if (io.trackable) {\r\n            this.trackedObjects.moveValue(io);\r\n        }\r\n        else {\r\n            this.trackedObjects.removeValue(io);\r\n        }\r\n    };\r\n    /**\r\n     * Checks if [[InteractionObject]] is draggable.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}  io  Element\r\n     */\r\n    Interaction.prototype.processDraggable = function (io) {\r\n        this.processMovable(io);\r\n    };\r\n    /**\r\n     * Checks if [[InteractionObject]] is swipeable and sets relative events.\r\n     *\r\n     * A swipe event is triggered when a horizontal drag of 75px or more (and\r\n     * less than 30px vertically) occurs within 700 milliseconds. This can be\r\n     * overridden in sprites [[swipeOptions]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}  io  Element\r\n     */\r\n    Interaction.prototype.processSwipeable = function (io) {\r\n        this.processMovable(io);\r\n    };\r\n    /**\r\n     * Checks if [[InteractionObject]] is resizable and attaches required events\r\n     * to it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}  io  Element\r\n     */\r\n    Interaction.prototype.processResizable = function (io) {\r\n        this.processMovable(io);\r\n    };\r\n    /**\r\n     * Checks if [[InteractionObject]] is supposed to capture mouse wheel events\r\n     * and prepares it to catch those events.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}  io  Element\r\n     */\r\n    Interaction.prototype.processWheelable = function (io) {\r\n        var _this = this;\r\n        if (io.wheelable) {\r\n            //io.hoverable = true;\r\n            if (!io.eventDisposers.hasKey(\"wheelable\")) {\r\n                io.eventDisposers.setKey(\"wheelable\", new MultiDisposer([\r\n                    addEventListener(io.element, this._pointerEvents.wheel, function (e) { return _this.handleMouseWheel(io, e); }, this._passiveSupported ? { passive: false } : false),\r\n                    io.events.on(\"out\", function (e) {\r\n                        if (io.wheelable) {\r\n                            _this.unlockWheel();\r\n                        }\r\n                    }),\r\n                    io.events.on(\"over\", function (e) {\r\n                        if (io.wheelable) {\r\n                            _this.lockWheel();\r\n                        }\r\n                    })\r\n                ]));\r\n            }\r\n        }\r\n        else {\r\n            var disposer = io.eventDisposers.getKey(\"wheelable\");\r\n            if (disposer != null) {\r\n                disposer.dispose();\r\n                io.eventDisposers.removeKey(\"wheelable\");\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Checks if [[InteractionObject]] is focusable. A focusable element is an\r\n     * element that will be highlighted when users presses TAB key. If the\r\n     * element is focusable, this function will attach relative focus/blur\r\n     * events to it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}  io  Element\r\n     */\r\n    Interaction.prototype.processFocusable = function (io) {\r\n        var _this = this;\r\n        if (io.focusable === true && (io.tabindex > -1) && !this._useTouchEventsOnly) {\r\n            if (!io.eventDisposers.hasKey(\"focusable\")) {\r\n                io.eventDisposers.setKey(\"focusable\", new MultiDisposer([\r\n                    addEventListener(io.element, \"focus\", function (e) { return _this.handleFocus(io, e); }),\r\n                    addEventListener(io.element, \"blur\", function (e) { return _this.handleBlur(io, e); }),\r\n                    addEventListener(io.element, this._pointerEvents.pointerdown, function (e) { return _this.handleFocusBlur(io, e); }),\r\n                    addEventListener(io.element, \"touchstart\", function (e) { return _this.handleFocusBlur(io, e); }, this._passiveSupported ? { passive: false } : false)\r\n                ]));\r\n            }\r\n        }\r\n        else {\r\n            var disposer = io.eventDisposers.getKey(\"focusable\");\r\n            if (disposer != null) {\r\n                disposer.dispose();\r\n                io.eventDisposers.removeKey(\"focusable\");\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Checks if [[InteractionObject]] is \"touchable\". It means any interaction\r\n     * whatsoever: mouse click, touch screen tap, swipe, drag, resize, etc.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}  io  Element\r\n     */\r\n    Interaction.prototype.processTouchable = function (io) {\r\n        var _this = this;\r\n        // Add unified events\r\n        if (io.clickable || io.hoverable || io.trackable || io.draggable || io.swipeable || io.resizable) {\r\n            // Add global events\r\n            this.addGlobalEvents();\r\n            // Add local events\r\n            if (!io.eventDisposers.hasKey(\"touchable\")) {\r\n                if (!this._useTouchEventsOnly && !this._usePointerEventsOnly) {\r\n                    io.eventDisposers.setKey(\"touchable\", new MultiDisposer([\r\n                        addEventListener(io.element, this._pointerEvents.pointerdown, function (e) { return _this.handlePointerDown(io, e); }),\r\n                        addEventListener(io.element, \"touchstart\", function (e) { return _this.handleTouchDown(io, e); }, this._passiveSupported ? { passive: false } : false)\r\n                    ]));\r\n                }\r\n                else if (!this._useTouchEventsOnly) {\r\n                    io.eventDisposers.setKey(\"touchable\", addEventListener(io.element, this._pointerEvents.pointerdown, function (e) { return _this.handlePointerDown(io, e); }));\r\n                }\r\n                else if (!this._usePointerEventsOnly) {\r\n                    io.eventDisposers.setKey(\"touchable\", addEventListener(io.element, \"touchstart\", function (e) { return _this.handleTouchDown(io, e); }, this._passiveSupported ? { passive: false } : false));\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var disposer = io.eventDisposers.getKey(\"touchable\");\r\n            if (disposer != null) {\r\n                disposer.dispose();\r\n                io.eventDisposers.removeKey(\"touchable\");\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * Non-pointer events\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Dispatches \"focus\" event when element gains focus.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}  io  Element\r\n     * @param {FocusEvent}         ev  Original event\r\n     */\r\n    Interaction.prototype.handleFocus = function (io, ev) {\r\n        if (!io.focusable) {\r\n            ev.preventDefault();\r\n            return;\r\n        }\r\n        io.isFocused = true;\r\n        if (io.events.isEnabled(\"focus\") && !system.isPaused) {\r\n            var imev = {\r\n                type: \"focus\",\r\n                target: io,\r\n                event: ev\r\n            };\r\n            io.events.dispatchImmediately(\"focus\", imev);\r\n        }\r\n    };\r\n    /**\r\n     * Used by regular click events to prevent focus if \"noFocus\" is set.\r\n     *\r\n     * This should not be called by \"focus\" handlers.\r\n     *\r\n     * @param {InteractionObject}  io  Element\r\n     * @param {MouseEvent | TouchEvent}         ev  Original event\r\n     */\r\n    Interaction.prototype.handleFocusBlur = function (io, ev) {\r\n        if (io.focusable !== false && this.getHitOption(io, \"noFocus\")) {\r\n            /*if (ev.cancelable) {\r\n                ev.preventDefault();\r\n            }*/\r\n            //this.setTimeout($dom.blur, 1);\r\n            io.events.once(\"focus\", $dom.blur);\r\n        }\r\n    };\r\n    /**\r\n     * Dispatches \"blur\" event when element loses focus.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}  io  Element\r\n     * @param {FocusEvent}         ev  Original event\r\n     */\r\n    Interaction.prototype.handleBlur = function (io, ev) {\r\n        if (!io.focusable) {\r\n            ev.preventDefault();\r\n            return;\r\n        }\r\n        io.isFocused = false;\r\n        if (io.events.isEnabled(\"blur\") && !system.isPaused) {\r\n            var imev = {\r\n                type: \"blur\",\r\n                target: io,\r\n                event: ev\r\n            };\r\n            io.events.dispatchImmediately(\"blur\", imev);\r\n        }\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * Global keyboard-related even handlers\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Checks if there is an item that has currently focus and that they key is\r\n     * one of the directional keys. If both of the conditions are true, it\r\n     * creates an object to simulate movement of dragable element with keyboard.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {KeyboardEvent} ev An original keyboard event\r\n     */\r\n    Interaction.prototype.handleGlobalKeyDown = function (ev) {\r\n        if (this.focusedObject) {\r\n            if (keyboard.isKey(ev, \"esc\")) {\r\n                // ESC removes focus\r\n                $dom.blur();\r\n            }\r\n            else if (this.focusedObject.draggable && keyboard.isKey(ev, [\"up\", \"down\", \"left\", \"right\"])) {\r\n                // Prevent scrolling of the document\r\n                ev.preventDefault();\r\n                // Get focused object\r\n                var io = this.focusedObject;\r\n                // Get particular key\r\n                var disposerKey = \"interactionKeyboardObject\";\r\n                // If such disposer already exists we know the event is going on so we\r\n                // just move on\r\n                if (io.eventDisposers.hasKey(disposerKey)) {\r\n                    return;\r\n                }\r\n                // Create a keyboard mover\r\n                var ko = new InteractionKeyboardObject(io, ev);\r\n                io.eventDisposers.setKey(disposerKey, ko);\r\n                switch (keyboard.getEventKey(ev)) {\r\n                    case \"up\":\r\n                        ko.directionY = -1;\r\n                        break;\r\n                    case \"down\":\r\n                        ko.directionY = 1;\r\n                        break;\r\n                    case \"left\":\r\n                        ko.directionX = -1;\r\n                        break;\r\n                    case \"right\":\r\n                        ko.directionX = 1;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Dispatches related events when the keyboard key is realeasd.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {KeyboardEvent} ev An original keyboard event\r\n     */\r\n    Interaction.prototype.handleGlobalKeyUp = function (ev) {\r\n        var disposerKey = \"interactionKeyboardObject\";\r\n        if (this.focusedObject) {\r\n            var disposer = this.focusedObject.eventDisposers.getKey(disposerKey);\r\n            if (disposer != null) {\r\n                // Prevent scrolling of the document\r\n                ev.preventDefault();\r\n                // Dispose stuff\r\n                disposer.dispose();\r\n                this.focusedObject.eventDisposers.removeKey(disposerKey);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * Global pointer-related even handlers\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Handler for a global \"pointermove\" event.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {MouseEvent} ev Event object\r\n     */\r\n    Interaction.prototype.handleGlobalPointerMove = function (ev) {\r\n        // Get pointer\r\n        var pointer = this.getPointer(ev);\r\n        // Update current point position\r\n        pointer.point = this.getPointerPoint(ev);\r\n        // Prepare and fire global event\r\n        if (this.events.isEnabled(\"track\") && !system.isPaused) {\r\n            var imev = {\r\n                type: \"track\",\r\n                target: this,\r\n                event: ev,\r\n                pointer: pointer\r\n            };\r\n            this.events.dispatchImmediately(\"track\", imev);\r\n        }\r\n        // Track\r\n        this.addBreadCrumb(pointer, pointer.point);\r\n        // Process further\r\n        this.handleGlobalMove(pointer, ev);\r\n    };\r\n    /**\r\n     * Handler for a global \"pointerdown\" event.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {MouseEvent} ev Event object\r\n     */\r\n    Interaction.prototype.handleGlobalPointerDown = function (ev) {\r\n        // Remove delayed hovers\r\n        this.processDelayed();\r\n        // Get pointer\r\n        var pointer = this.getPointer(ev);\r\n        // Prepare and fire global event\r\n        if (this.events.isEnabled(\"down\") && !system.isPaused) {\r\n            var imev = {\r\n                type: \"down\",\r\n                target: this,\r\n                event: ev,\r\n                pointer: pointer\r\n            };\r\n            this.events.dispatchImmediately(\"down\", imev);\r\n        }\r\n    };\r\n    /**\r\n     * Prevents touch action from firing.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {MouseEvent} ev Event\r\n     */\r\n    Interaction.prototype.preventTouchAction = function (ev) {\r\n        if (!ev.defaultPrevented) {\r\n            ev.preventDefault();\r\n        }\r\n    };\r\n    /**\r\n     * Handler for a global \"pointerup\" event.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {MouseEvent} ev Event object\r\n     */\r\n    Interaction.prototype.handleGlobalPointerUp = function (ev, cancelled) {\r\n        if (cancelled === void 0) { cancelled = false; }\r\n        // Get pointer\r\n        var pointer = this.getPointer(ev);\r\n        // Prepare and fire global event\r\n        if (this.events.isEnabled(\"up\") && !system.isPaused) {\r\n            var imev = {\r\n                type: \"up\",\r\n                target: this,\r\n                event: ev,\r\n                pointer: pointer\r\n            };\r\n            this.events.dispatchImmediately(\"up\", imev);\r\n        }\r\n        // Process further\r\n        this.handleGlobalUp(pointer, ev, cancelled);\r\n    };\r\n    /**\r\n * ==========================================================================\r\n * Global touch-related even handlers\r\n * ==========================================================================\r\n */\r\n    /**\r\n     * Handler for a global \"touchmove\" event.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {TouchEvent} ev Event object\r\n     */\r\n    Interaction.prototype.handleGlobalTouchMove = function (ev) {\r\n        // Process each changed touch point\r\n        for (var i = 0; i < ev.changedTouches.length; i++) {\r\n            // Get pointer\r\n            var pointer = this.getPointer(ev.changedTouches[i]);\r\n            // Update current point position\r\n            pointer.point = this.getPointerPoint(ev.changedTouches[i]);\r\n            // Prepare and fire global event\r\n            if (this.events.isEnabled(\"track\") && !system.isPaused) {\r\n                var imev = {\r\n                    type: \"track\",\r\n                    target: this,\r\n                    event: ev,\r\n                    pointer: pointer\r\n                };\r\n                this.events.dispatchImmediately(\"track\", imev);\r\n            }\r\n            // Track\r\n            this.addBreadCrumb(pointer, pointer.point);\r\n            // Process further\r\n            this.handleGlobalMove(pointer, ev);\r\n        }\r\n    };\r\n    /**\r\n     * Handler for a global \"touchstart\" event.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {TouchEvent} ev Event object\r\n     */\r\n    Interaction.prototype.handleGlobalTouchStart = function (ev) {\r\n        // Remove delayed hovers\r\n        this.processDelayed();\r\n        // Process each changed touch point\r\n        for (var i = 0; i < ev.changedTouches.length; i++) {\r\n            // Get pointer\r\n            var pointer = this.getPointer(ev.changedTouches[i]);\r\n            // Prepare and fire global event\r\n            if (!this._usePointerEventsOnly && this.events.isEnabled(\"down\") && !system.isPaused) {\r\n                var imev = {\r\n                    type: \"down\",\r\n                    target: this,\r\n                    event: ev,\r\n                    pointer: pointer\r\n                };\r\n                this.events.dispatchImmediately(\"down\", imev);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Handler for a global \"touchend\" event.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {TouchEvent} ev Event object\r\n     */\r\n    Interaction.prototype.handleGlobalTouchEnd = function (ev) {\r\n        // Process each changed touch point\r\n        for (var i = 0; i < ev.changedTouches.length; i++) {\r\n            // Get pointer\r\n            var pointer = this.getPointer(ev.changedTouches[i]);\r\n            // Prepare and fire global event\r\n            if (this.events.isEnabled(\"up\") && !system.isPaused) {\r\n                var imev = {\r\n                    type: \"up\",\r\n                    target: this,\r\n                    event: ev,\r\n                    pointer: pointer\r\n                };\r\n                this.events.dispatchImmediately(\"up\", imev);\r\n            }\r\n            // Handle element-related events\r\n            this.handleGlobalUp(pointer, ev);\r\n        }\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * Element-specific pointer-related even handlers\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Handles event when pointer is over [[InteractionObject]] and button is\r\n     * pressed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}          io  Element\r\n     * @param {MouseEvent | PointerEvent}  ev  Original event\r\n     */\r\n    Interaction.prototype.handlePointerDown = function (io, ev) {\r\n        // Stop further propagation so we don't get multiple triggers on hybrid\r\n        // devices (both mouse and touch capabilities)\r\n        //ev.preventDefault();\r\n        //ev.stopPropagation();\r\n        //if (ev.defaultPrevented) {\r\n        //}\r\n        // Get pointer\r\n        var pointer = this.getPointer(ev);\r\n        // Ignore if it's anything but mouse's primary button\r\n        if (!pointer.touch && (ev.which > 1)) {\r\n            return;\r\n        }\r\n        // Set mouse button\r\n        pointer.button = ev.which;\r\n        // Reset pointer\r\n        this.resetPointer(pointer, ev);\r\n        // Process down\r\n        this.handleDown(io, pointer, ev);\r\n    };\r\n    /**\r\n     * Handles event when [[InteractionObject]] is hovered by a mouse pointer.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}  io  Element\r\n     * @param {MouseEvent}         ev  Original event\r\n     */\r\n    Interaction.prototype.handlePointerOver = function (io, ev) {\r\n        // Get pointer\r\n        var pointer = this.getPointer(ev);\r\n        // Process down\r\n        this.handleOver(io, pointer, ev);\r\n    };\r\n    /**\r\n     * Handles event when [[InteractionObject]] loses hover from a mouse pointer.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}  io  Element\r\n     * @param {MouseEvent}         ev  Original event\r\n     */\r\n    Interaction.prototype.handlePointerOut = function (io, ev) {\r\n        // Get pointer\r\n        var pointer = this.getPointer(ev);\r\n        // Process down\r\n        this.handleOut(io, pointer, ev);\r\n    };\r\n    /**\r\n     * Handles event when mouse wheel is crolled over the [[InteractionObject]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}  io  Element\r\n     * @param {WheelEvent}         ev  Original event\r\n     * @todo Investigate more-cross browser stuff https://developer.mozilla.org/en-US/docs/Web/Events/wheel\r\n     */\r\n    Interaction.prototype.handleMouseWheel = function (io, ev) {\r\n        // Get pointer\r\n        var pointer = this.getPointer(ev);\r\n        // Update current point position\r\n        pointer.point = this.getPointerPoint(ev);\r\n        // Init delta values\r\n        var deltaX = 0, deltaY = 0;\r\n        // Set up modifier\r\n        // This is needed because FireFox reports wheel deltas in \"lines\" instead\r\n        // of pixels so we have to approximate pixel value\r\n        var mod = 1;\r\n        if (ev.deltaMode == 1) {\r\n            mod = 50;\r\n        }\r\n        // Calculate deltas\r\n        if (ev instanceof WheelEvent) {\r\n            deltaX = Math.round((-1 * ev.wheelDeltaX) || ev.deltaX) * mod;\r\n            deltaY = Math.round((-1 * ev.wheelDeltaY) || ev.deltaY) * mod;\r\n        }\r\n        else {\r\n            throw new Error(\"Invalid event type\");\r\n        }\r\n        // Handle the event\r\n        this.handleWheel(io, pointer, deltaX, deltaY, ev);\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * Element-specific touch-related even handlers\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n      * Handles an event when an [[InteractionObject]] is touched on a touch\r\n      * device.\r\n      *\r\n      * @ignore Exclude from docs\r\n      * @param {InteractionObject}  io  Element\r\n      * @param {TouchEvent}         ev  Original event\r\n      */\r\n    Interaction.prototype.handleTouchDown = function (io, ev) {\r\n        // Stop further propagation so we don't get multiple triggers on hybrid\r\n        // devices (both mouse and touch capabilities)\r\n        this.maybePreventDefault(io, ev);\r\n        //return;\r\n        // Process each changed touch point\r\n        for (var i = 0; i < ev.changedTouches.length; i++) {\r\n            // Get pointer\r\n            var pointer = this.getPointer(ev.changedTouches[i]);\r\n            // Reset pointer\r\n            this.resetPointer(pointer, ev.changedTouches[i]);\r\n            // Process down\r\n            this.handleDown(io, pointer, ev);\r\n        }\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * Universal handlers\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Handles click/tap. Checks for doublehit.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}        io       Interaction object\r\n     * @param {IPointer}                 pointer  Pointer\r\n     * @param {MouseEvent | TouchEvent}  ev       Original event\r\n     */\r\n    Interaction.prototype.handleHit = function (io, pointer, ev) {\r\n        // Check if this is a double-hit\r\n        var now = $time.getTime();\r\n        if (io.lastHit && (io.lastHit >= (now - this.getHitOption(io, \"doubleHitTime\")))) {\r\n            // Yup - it's a double-hit\r\n            // Cancel the hit\r\n            //clearTimeout(io.lastHitPointer.hitTimeout);\r\n            // If it happened too fast it probably means that hybrid device just\r\n            // generated two events for the same tap\r\n            if ((now - io.lastHit) < 100) {\r\n                // Ignore\r\n                return;\r\n            }\r\n            // Clear last hit\r\n            io.lastHit = undefined;\r\n            io.lastHitPointer = undefined;\r\n            // Dispatch event\r\n            if (io.events.isEnabled(\"doublehit\") && !system.isPaused) {\r\n                var imev = {\r\n                    type: \"doublehit\",\r\n                    target: io,\r\n                    point: pointer.point,\r\n                    event: ev\r\n                };\r\n                io.events.dispatchImmediately(\"doublehit\", imev);\r\n            }\r\n        }\r\n        else {\r\n            // Log last hit\r\n            io.lastHit = now;\r\n            io.lastHitPointer = pointer;\r\n            if (pointer.button === 3) {\r\n                // Execute HIT now\r\n                if (io.events.isEnabled(\"rightclick\") && !system.isPaused) {\r\n                    var imev = {\r\n                        type: \"rightclick\",\r\n                        target: io,\r\n                        event: ev\r\n                    };\r\n                    io.events.dispatchImmediately(\"rightclick\", imev);\r\n                }\r\n            }\r\n            else {\r\n                if (io.events.isEnabled(\"hit\") && !system.isPaused) {\r\n                    var imev = {\r\n                        type: \"hit\",\r\n                        target: io,\r\n                        event: ev,\r\n                        point: pointer.point\r\n                    };\r\n                    io.events.dispatchImmediately(\"hit\", imev);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Handles pointer hovering over [[InteractionObject]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}        io       Interaction object\r\n     * @param {IPointer}                 pointer  Pointer\r\n     * @param {MouseEvent | TouchEvent}  ev       Original event\r\n     * @param {boolean}                  soft     Invoked by helper function\r\n     */\r\n    Interaction.prototype.handleOver = function (io, pointer, ev, soft) {\r\n        if (soft === void 0) { soft = false; }\r\n        if (!io.hoverable) {\r\n            return;\r\n        }\r\n        // Remove any delayed outs\r\n        this.processDelayed();\r\n        // Add pointer\r\n        io.overPointers.moveValue(pointer);\r\n        // Check if object is not yet hovered\r\n        if (!io.isHover) {\r\n            // Set element as hovered\r\n            io.isHover = true;\r\n            this.overObjects.moveValue(io);\r\n            // Generate body track event. This is needed so that if element loads\r\n            // under unmoved mouse cursor, we still need all the actions that are\r\n            // required to happen to kick in.\r\n            this.handleTrack(this.body, pointer, ev, true);\r\n            // Event\r\n            if (io.events.isEnabled(\"over\") && !system.isPaused) {\r\n                var imev = {\r\n                    type: \"over\",\r\n                    target: io,\r\n                    event: ev,\r\n                    pointer: pointer\r\n                };\r\n                io.events.dispatchImmediately(\"over\", imev);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Handles when [[InteractionObject]] is no longer hovered.\r\n     *\r\n     * If `soft = true`, this means that method is being invoked by some other\r\n     * code, not hard \"out\" function, like `handleUp` which implies we need to\r\n     * run additional checks before unhovering the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}        io       Interaction object\r\n     * @param {IPointer}                 pointer  Pointer\r\n     * @param {MouseEvent | TouchEvent}  ev       Original event\r\n     * @param {boolean}                  soft     Invoked by helper function\r\n     * @param {boolean}                  force    Force imediate out\r\n     */\r\n    Interaction.prototype.handleOut = function (io, pointer, ev, soft, force) {\r\n        var _this = this;\r\n        if (soft === void 0) { soft = false; }\r\n        if (force === void 0) { force = false; }\r\n        if (!io.hoverable) {\r\n            return;\r\n        }\r\n        // Remove pointer\r\n        io.overPointers.removeValue(pointer);\r\n        // Check if element is still hovered\r\n        if (io.isHover && (!io.hasDelayedOut || force)) {\r\n            // Should we run additional checks?\r\n            if (soft && io.overPointers.length) {\r\n                // There are still pointers hovering - don't do anything else and\r\n                // wait until either no over pointers are there or we get a hard out\r\n                // event.\r\n                return;\r\n            }\r\n            // Should we delay \"out\" if this is happening on a touch device?\r\n            if (pointer.touch && !force && !this.old(pointer)) {\r\n                // This is a touch pointer, and it hasn't moved, let's pretend\r\n                // the object is still hovered, and act as per \"behavior\" setting\r\n                var behavior = this.getHoverOption(io, \"touchOutBehavior\");\r\n                if (behavior == \"leave\") {\r\n                    // Set to \"leave\", so we do not execute any \"out\" event.\r\n                    // It will be handled by any other interaction that happens\r\n                    // afterwards.\r\n                    this._delayedEvents.out.push({\r\n                        type: \"out\",\r\n                        io: io,\r\n                        pointer: pointer,\r\n                        event: ev,\r\n                        keepUntil: $time.getTime() + 500\r\n                    });\r\n                    io.hasDelayedOut = true;\r\n                    return;\r\n                }\r\n                else if (behavior == \"delay\" && this.getHoverOption(io, \"touchOutDelay\")) {\r\n                    this._delayedEvents.out.push({\r\n                        type: \"out\",\r\n                        io: io,\r\n                        pointer: pointer,\r\n                        event: ev,\r\n                        keepUntil: $time.getTime() + 500,\r\n                        timeout: this.setTimeout(function () {\r\n                            _this.handleOut(io, pointer, ev, true);\r\n                        }, this.getHoverOption(io, \"touchOutDelay\"))\r\n                    });\r\n                    return;\r\n                }\r\n                else {\r\n                    // Nothing for \"remove\" - that's how it works \"out-of-the-box\"\r\n                }\r\n            }\r\n            // Set element as not hovered\r\n            io.isHover = false;\r\n            this.overObjects.removeValue(io);\r\n            // Invoke event\r\n            if (io.events.isEnabled(\"out\") && !system.isPaused) {\r\n                var imev = {\r\n                    type: \"out\",\r\n                    target: io,\r\n                    event: ev,\r\n                    pointer: pointer\r\n                };\r\n                io.events.dispatchImmediately(\"out\", imev);\r\n            }\r\n            // Reset object from lefover delayed outs, pointers\r\n            io.overPointers.clear();\r\n            io.hasDelayedOut = false;\r\n            // @todo (clean delayed)\r\n        }\r\n    };\r\n    /**\r\n     * Processes dalyed events, such as \"out\" event that was initiated for\r\n     * elements by touch.\r\n     */\r\n    Interaction.prototype.processDelayed = function () {\r\n        var delayedEvent;\r\n        while (delayedEvent = this._delayedEvents.out.pop()) {\r\n            if (delayedEvent.timeout) {\r\n                delayedEvent.timeout.dispose();\r\n            }\r\n            this.handleOut(delayedEvent.io, delayedEvent.pointer, delayedEvent.event, false, true);\r\n        }\r\n    };\r\n    /**\r\n     * Performs tasks on pointer down.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}        io       Element\r\n     * @param {IPointer}                 pointer  Pointer\r\n     * @param {MouseEvent | TouchEvent}  ev       Original event\r\n     */\r\n    Interaction.prototype.handleDown = function (io, pointer, ev) {\r\n        // Need to prevent default event from happening on transformable objects\r\n        this.maybePreventDefault(io, ev);\r\n        // Stop inertia animations if they're currently being played out\r\n        if (io.inert) {\r\n            this.stopInertia(io);\r\n        }\r\n        // Trigger hover because some touch devices won't trigger over events\r\n        // on their own\r\n        this.handleOver(io, pointer, ev, true);\r\n        // Add pointer to list\r\n        io.downPointers.moveValue(pointer);\r\n        // Apply styles if necessary\r\n        this.applyCursorDownStyle(io, pointer);\r\n        // Check if object is already down\r\n        if (!io.isDown) {\r\n            // Lose focus if needed\r\n            if (io.focusable !== false && this.getHitOption(io, \"noFocus\") && this.focusedObject) {\r\n                $dom.blur();\r\n            }\r\n            // Set object as hovered\r\n            io.isDown = true;\r\n            this.downObjects.moveValue(io);\r\n            // Prep object for dragging and/or resizing\r\n            if (io.draggable) {\r\n                this.processDragStart(io, pointer, ev);\r\n            }\r\n            if (io.resizable) {\r\n                this.processResizeStart(io, pointer, ev);\r\n            }\r\n        }\r\n        // Dispatch \"down\" event\r\n        if (io.events.isEnabled(\"down\") && !system.isPaused) {\r\n            var imev = {\r\n                type: \"down\",\r\n                target: io,\r\n                event: ev,\r\n                pointer: pointer\r\n            };\r\n            io.events.dispatchImmediately(\"down\", imev);\r\n        }\r\n    };\r\n    /**\r\n     * Performs tasks on pointer up.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IPointer}                 pointer  Pointer\r\n     * @param {MouseEvent | TouchEvent}  ev       Original event\r\n     */\r\n    Interaction.prototype.handleGlobalUp = function (pointer, ev, cancelled) {\r\n        var _this = this;\r\n        if (cancelled === void 0) { cancelled = false; }\r\n        // Process all down objects\r\n        $iter.each(this.downObjects.backwards().iterator(), function (io) {\r\n            // Check if this particular pointer is pressing down\r\n            // on object\r\n            if (io.downPointers.contains(pointer)) {\r\n                _this.handleUp(io, pointer, ev, cancelled);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Handles when [[InteractionObject]] is no longer hovered.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}        io       Interaction object\r\n     * @param {IPointer}                 pointer  Pointer\r\n     * @param {MouseEvent | TouchEvent}  ev       Original event\r\n     */\r\n    Interaction.prototype.handleUp = function (io, pointer, ev, cancelled) {\r\n        if (cancelled === void 0) { cancelled = false; }\r\n        // Restore cursor style\r\n        this.restoreCursorDownStyle(io, pointer);\r\n        // Remove pointer from the list\r\n        io.downPointers.removeValue(pointer);\r\n        // Trigger out because some touch devices won't trigger out events\r\n        // on their own\r\n        if (pointer.touch || this._useTouchEventsOnly) {\r\n            this.handleOut(io, pointer, ev, true);\r\n        }\r\n        // Check if object still down\r\n        if (io.isDown) {\r\n            // Check if there are no other pointers hovering this element\r\n            if (io.downPointers.length == 0) {\r\n                // Set element as no longer down\r\n                io.isDown = false;\r\n                this.downObjects.removeValue(io);\r\n            }\r\n            // Dispatch \"up\" event\r\n            if (io.events.isEnabled(\"up\") && !system.isPaused) {\r\n                var imev = {\r\n                    type: \"up\",\r\n                    target: io,\r\n                    event: ev,\r\n                    pointer: pointer\r\n                };\r\n                io.events.dispatchImmediately(\"up\", imev);\r\n            }\r\n            // Check if this was not a cancelled event.\r\n            // If event was canelled (which might happen if gesture resulted in\r\n            // navigation or page scroll) there's no point in triggering hit and\r\n            // other actions.\r\n            if (!cancelled) {\r\n                // Handle swiping-related stuff\r\n                if (io.swipeable && this.swiped(io, pointer)) {\r\n                    // Swiped - nothing else should happen\r\n                    this.handleSwipe(io, pointer, ev);\r\n                }\r\n                else {\r\n                    // Check if it maybe a click\r\n                    if (io.clickable && !this.moved(pointer, this.getHitOption(io, \"hitTolerance\"))) {\r\n                        this.handleHit(io, pointer, ev);\r\n                    }\r\n                    // Handle inertia\r\n                    if (io.inert && this.moved(pointer, this.getHitOption(io, \"hitTolerance\"))) {\r\n                        this.handleInertia(io, pointer);\r\n                    }\r\n                    else if (io.draggable) {\r\n                        this.processDragStop(io, pointer, ev);\r\n                    }\r\n                    if (io.resizable) {\r\n                        this.processResizeStop(io, pointer, ev);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Checks if event needs to be prevented on draggable and such items, so that\r\n     * touch gestures like navigation and scroll do not kick in.\r\n     *\r\n     * @param {InteractionObject}        io  Object\r\n     * @param {MouseEvent | TouchEvent}  ev  Event\r\n     */\r\n    Interaction.prototype.maybePreventDefault = function (io, ev) {\r\n        if ($type.hasValue(ev) && (io.draggable || io.swipeable || io.trackable || io.resizable) && !this.isGlobalElement(io)) {\r\n            ev.preventDefault();\r\n        }\r\n    };\r\n    /**\r\n     * Handles pointer move.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IPointer}                 pointer  Pointer\r\n     * @param {MouseEvent | TouchEvent}  ev       Original event\r\n     */\r\n    Interaction.prototype.handleGlobalMove = function (pointer, ev) {\r\n        var _this = this;\r\n        // Process hovered elements\r\n        // We check if the element became unhovered without reporting the mouseout\r\n        // event. (it happens in some cases)\r\n        if (!pointer.touch) {\r\n            $iter.each(this.overObjects.backwards().iterator(), function (io) {\r\n                // Is this pointer relevant to element?\r\n                if (io.overPointers.contains(pointer) && io.hoverable) {\r\n                    // Check if the element is still hovered\r\n                    var reset = false;\r\n                    if (io.element && pointer.lastEvent) {\r\n                        if (!$dom.contains(io.element, pointer.lastEvent.target)) {\r\n                            reset = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        reset = true;\r\n                    }\r\n                    if (reset) {\r\n                        _this.handleOut(io, pointer, ev, true);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        // Process down elements\r\n        $iter.each(this.transformedObjects.backwards().iterator(), function (io) {\r\n            // Is this pointer relevant to element?\r\n            if (io.downPointers.contains(pointer) &&\r\n                // Swipe still happening?\r\n                !(io.swipeable && _this.swiping(io, pointer)) &&\r\n                (io.draggable || io.resizable)) {\r\n                _this.handleTransform(io, ev);\r\n            }\r\n        });\r\n        // Process tracked elements\r\n        $iter.each(this.trackedObjects.backwards().iterator(), function (io) {\r\n            // Is this pointer relevant to element?\r\n            if (!io.overPointers.contains(pointer)) {\r\n                _this.handleTrack(io, pointer, ev);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Handles reporting of pointer movement.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}        io        Element\r\n     * @param {IPointer}                 pointer    Pointer\r\n     * @param {MouseEvent | TouchEvent}  ev         Original event\r\n     * @param {boolean}                  skipCheck  Sould we skip check if cursor actually moved\r\n     */\r\n    Interaction.prototype.handleTrack = function (io, pointer, ev, skipCheck) {\r\n        if (skipCheck === void 0) { skipCheck = false; }\r\n        // Do nothing if the cursor did not actually move\r\n        if (!skipCheck && !this.moved(pointer, 0)) {\r\n            return;\r\n        }\r\n        // Initiate TRACK event\r\n        if (io.events.isEnabled(\"track\") && !system.isPaused) {\r\n            var imev = {\r\n                type: \"track\",\r\n                target: io,\r\n                event: ev,\r\n                point: pointer.point,\r\n                pointer: pointer\r\n            };\r\n            io.events.dispatchImmediately(\"track\", imev);\r\n        }\r\n    };\r\n    /**\r\n     * Handles swipe action.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}        io       Element\r\n     * @param {IPointer}                 pointer  Pointer\r\n     * @param {MouseEvent | TouchEvent}  ev       Original event\r\n     */\r\n    Interaction.prototype.handleSwipe = function (io, pointer, ev) {\r\n        // We pass in InteractionEvent with shift in mouse coordinates\r\n        // between when the drag started and ended\r\n        if (io.events.isEnabled(\"swipe\") && !system.isPaused) {\r\n            var imev = {\r\n                type: \"swipe\",\r\n                target: io,\r\n                event: ev\r\n            };\r\n            io.events.dispatchImmediately(\"swipe\", imev);\r\n        }\r\n        if (pointer.startPoint.x < pointer.point.x) {\r\n            if (io.events.isEnabled(\"swiperight\") && !system.isPaused) {\r\n                var imev = {\r\n                    type: \"swiperight\",\r\n                    target: io,\r\n                    event: ev\r\n                };\r\n                io.events.dispatchImmediately(\"swiperight\", imev);\r\n            }\r\n        }\r\n        else {\r\n            if (io.events.isEnabled(\"swipeleft\") && !system.isPaused) {\r\n                var imev = {\r\n                    type: \"swipeleft\",\r\n                    target: io,\r\n                    event: ev\r\n                };\r\n                io.events.dispatchImmediately(\"swipeleft\", imev);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Handles event triggering for wheel rotation.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}  io       Element\r\n     * @param {IPointer}           pointer  Pointer\r\n     * @param {number}             deltaX   Horizontal shift\r\n     * @param {number}             deltaY   Vertical shift\r\n     * @param {WheelEvent}         ev       Original event\r\n     */\r\n    Interaction.prototype.handleWheel = function (io, pointer, deltaX, deltaY, ev) {\r\n        var shift = {\r\n            x: deltaX,\r\n            y: deltaY\r\n        };\r\n        // Trigger generic WHEEL event\r\n        if (io.events.isEnabled(\"wheel\") && !system.isPaused) {\r\n            io.events.dispatchImmediately(\"wheel\", {\r\n                type: \"wheel\",\r\n                target: io,\r\n                event: ev,\r\n                point: pointer.point,\r\n                shift: shift\r\n            });\r\n        }\r\n        // Trigger direction-specific events\r\n        // Horizontal\r\n        if (deltaX < 0) {\r\n            if (io.events.isEnabled(\"wheelleft\") && !system.isPaused) {\r\n                io.events.dispatchImmediately(\"wheelleft\", {\r\n                    type: \"wheelleft\",\r\n                    target: io,\r\n                    event: ev,\r\n                    point: pointer.point,\r\n                    shift: shift\r\n                });\r\n            }\r\n        }\r\n        else if (deltaX > 0) {\r\n            if (io.events.isEnabled(\"swiperight\") && !system.isPaused) {\r\n                io.events.dispatchImmediately(\"wheelright\", {\r\n                    type: \"wheelright\",\r\n                    target: io,\r\n                    event: ev,\r\n                    point: pointer.point,\r\n                    shift: shift\r\n                });\r\n            }\r\n            // Vertical\r\n        }\r\n        else if (deltaY < 0) {\r\n            if (io.events.isEnabled(\"wheelup\") && !system.isPaused) {\r\n                io.events.dispatchImmediately(\"wheelup\", {\r\n                    type: \"wheelup\",\r\n                    target: io,\r\n                    event: ev,\r\n                    point: pointer.point,\r\n                    shift: shift\r\n                });\r\n            }\r\n        }\r\n        else if (deltaY > 0) {\r\n            if (io.events.isEnabled(\"wheeldown\") && !system.isPaused) {\r\n                io.events.dispatchImmediately(\"wheeldown\", {\r\n                    type: \"wheeldown\",\r\n                    target: io,\r\n                    event: ev,\r\n                    point: pointer.point,\r\n                    shift: shift\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Initiates inertia checking sub-routines for different movement types:\r\n     * drag, resize.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}   sprite\r\n     * @param {IPointer}            pointer\r\n     */\r\n    Interaction.prototype.handleInertia = function (io, pointer) {\r\n        if (io.draggable && io.downPointers.length === 0) {\r\n            this.handleMoveInertia(io, pointer);\r\n        }\r\n        if (io.resizable && io.downPointers.length > 1) {\r\n            this.handleResizeInertia(io, pointer);\r\n        }\r\n    };\r\n    /**\r\n     * Continues moving the element to simulate the effect of inertia. Happens\r\n     * when `inert` and `draggable` object is dragged and then released.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}  io       Element\r\n     * @param {IPointer}           pointer  Pointer\r\n     */\r\n    Interaction.prototype.handleMoveInertia = function (io, pointer) {\r\n        var interaction = io;\r\n        var type = \"move\";\r\n        var point = {\r\n            \"x\": pointer.point.x,\r\n            \"y\": pointer.point.y\r\n        };\r\n        var startPoint = {\r\n            \"x\": pointer.startPoint.x,\r\n            \"y\": pointer.startPoint.y\r\n        };\r\n        // Init inertia object\r\n        var inertia = new Inertia(interaction, type, point, startPoint);\r\n        // Get inertia data\r\n        var ref = this.getTrailPoint(pointer, $time.getTime() - this.getInertiaOption(io, \"move\", \"time\"));\r\n        if (typeof ref === \"undefined\") {\r\n            this.processDragStop(io, pointer, pointer.lastUpEvent);\r\n            return;\r\n        }\r\n        // Init animation options\r\n        var factor = this.getInertiaOption(io, \"move\", \"factor\");\r\n        var animationOptions = [{\r\n                \"to\": pointer.point.x + (pointer.point.x - ref.point.x) * factor,\r\n                \"property\": \"x\"\r\n            }, {\r\n                \"to\": pointer.point.y + (pointer.point.y - ref.point.y) * factor,\r\n                \"property\": \"y\"\r\n            }];\r\n        // Start animation\r\n        var animation = new Animation(inertia, animationOptions, this.getInertiaOption(io, \"move\", \"duration\"), this.getInertiaOption(io, \"move\", \"easing\")).start();\r\n        this._disposers.push(animation.events.on(\"animationended\", function (ev) {\r\n            inertia.done();\r\n        }));\r\n        // Add inertia object\r\n        io.inertias.setKey(\"move\", inertia);\r\n    };\r\n    /**\r\n     * Continues resizing of a `resizable` element after it is resized and\r\n     * released.\r\n     *\r\n     * **NOTE:** this is is just a placeholder function. No actual fucntionality\r\n     * is implemented, yet.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}  io       Element\r\n     * @param {IPointer}           pointer  Pointer\r\n     */\r\n    Interaction.prototype.handleResizeInertia = function (io, pointer) {\r\n        // Some day, folks. Some day...\r\n    };\r\n    /**\r\n     * Recalculates element's position and size based on position of\r\n     * all its related pointers.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}        io  Element\r\n     * @param {MouseEvent | TouchEvent}  ev  Original event\r\n     */\r\n    Interaction.prototype.handleTransform = function (io, ev) {\r\n        // Get primary pointer and its respective points\r\n        var pointer1 = io.downPointers.getIndex(0);\r\n        var point1 = null;\r\n        var startPoint1 = null;\r\n        if (pointer1) {\r\n            point1 = pointer1.point;\r\n            startPoint1 = pointer1.startPoint;\r\n        }\r\n        // Init secondary pointer\r\n        var pointer2;\r\n        var point2;\r\n        var startPoint2;\r\n        // Use center of the sprite to simulate \"second\" point of touch\r\n        point2 = {\r\n            \"x\": io.originalPosition.x,\r\n            \"y\": io.originalPosition.y\r\n        };\r\n        startPoint2 = point2;\r\n        // Determine if it's a sinngle pointer or multi\r\n        var singlePoint = true;\r\n        for (var i = 1; i < io.downPointers.length; i++) {\r\n            // Get pointer\r\n            var nextPointer = io.downPointers.getIndex(i);\r\n            // Doublecheck if it's not the same pointer by comparing original position\r\n            if (startPoint1.x != nextPointer.startPoint.x || startPoint1.y != nextPointer.startPoint.y) {\r\n                // Several pointers down\r\n                singlePoint = false;\r\n                // Get second pointer\r\n                pointer2 = nextPointer;\r\n                point2 = pointer2.point;\r\n                startPoint2 = pointer2.startPoint;\r\n                // Stop looking\r\n                break;\r\n            }\r\n        }\r\n        // Primary touch point moved?\r\n        var pointer1Moved = pointer1 && this.moved(pointer1, 0);\r\n        // Report DRAG_START if necessary\r\n        if (io.draggable && pointer1 && pointer1.dragStartEvents && pointer1.dragStartEvents.length && pointer1Moved) {\r\n            if (io.events.isEnabled(\"dragstart\") && !system.isPaused) {\r\n                io.events.dispatchImmediately(\"dragstart\", pointer1.dragStartEvents.shift());\r\n            }\r\n            //delete pointer1.dragStartEvents;\r\n        }\r\n        // Determine what we do in order of superiority\r\n        if (singlePoint && io.draggable) {\r\n            // We have only one pointer and the Sprite is draggable\r\n            // There's nothing else to be done - just move it\r\n            this.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved);\r\n        }\r\n        else {\r\n            // Check if second touch point moved\r\n            var pointer2Moved = pointer2 && this.moved(pointer2, 0);\r\n            if (io.draggable && io.resizable) {\r\n                //this.handleTransformAll(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved);\r\n                this.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved && pointer2Moved);\r\n                this.handleTransformResize(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved);\r\n            }\r\n            else {\r\n                if (io.draggable) {\r\n                    this.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved);\r\n                }\r\n                if (io.resizable) {\r\n                    this.handleTransformResize(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Handles movement of the dragged element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}                        io            Element\r\n     * @param {IPoint}                                   point         Current point of the pointer\r\n     * @param {IPoint}                                   startPoint    Starting point of the pointer\r\n     * @param {MouseEvent | TouchEvent | KeyboardEvent}  ev            Original event\r\n     * @param {boolean}                                  pointerMoved  Did pointer move?\r\n     */\r\n    Interaction.prototype.handleTransformMove = function (io, point, startPoint, ev, pointerMoved) {\r\n        if (pointerMoved) {\r\n            if (io.events.isEnabled(\"drag\") && !system.isPaused) {\r\n                var imev = {\r\n                    type: \"drag\",\r\n                    target: io,\r\n                    event: ev,\r\n                    shift: {\r\n                        \"x\": point.x - startPoint.x,\r\n                        \"y\": point.y - startPoint.y\r\n                    },\r\n                    startPoint: startPoint,\r\n                    point: point\r\n                };\r\n                io.events.dispatchImmediately(\"drag\", imev);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Handles resizing of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}        io            Element\r\n     * @param {IPoint}                   point1        Current position of reference point #1\r\n     * @param {IPoint}                   startPoint1   Original position of reference point #1\r\n     * @param {IPoint}                   point2        Current position of reference point #2\r\n     * @param {IPoint}                   startPoint2   Original position of reference point #2\r\n     * @param {MouseEvent | TouchEvent}  ev            Original event\r\n     * @param {boolean}                  pointerMoved  Did pointer move?\r\n     */\r\n    Interaction.prototype.handleTransformResize = function (io, point1, startPoint1, point2, startPoint2, ev, pointerMoved) {\r\n        if (io.events.isEnabled(\"resize\") && !system.isPaused) {\r\n            var imev = {\r\n                type: \"resize\",\r\n                target: io,\r\n                event: ev,\r\n                scale: $math.getScale(point1, startPoint1, point2, startPoint2),\r\n                startPoint1: startPoint1,\r\n                point1: point1,\r\n                startPoint2: startPoint2,\r\n                point2: point2\r\n            };\r\n            io.events.dispatchImmediately(\"resize\", imev);\r\n        }\r\n    };\r\n    /**\r\n     * Handles all the preparations of the element when it starts to be dragged.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}        io       Element\r\n     * @param {IPointer}                 pointer  Pointer\r\n     * @param {MouseEvent | TouchEvent}  ev       Original event\r\n     */\r\n    Interaction.prototype.processDragStart = function (io, pointer, ev) {\r\n        // Add to draggedObjects\r\n        this.transformedObjects.moveValue(io);\r\n        // Report \"dragstart\"\r\n        var imev = {\r\n            type: \"dragstart\",\r\n            target: io,\r\n            event: ev\r\n        };\r\n        // Log object that we are starting to drag, so we can check against and\r\n        // avoid hovers on other objects that might be in the path of movement.\r\n        if (pointer) {\r\n            pointer.dragTarget = io;\r\n            //pointer.startPoint = pointer.point;\r\n        }\r\n        /**\r\n         * If pointer is set we will not fire the event until the pointer has\r\n         * actually moved. If it's not set we don't have to wait for anything, so we\r\n         * just fire off the event right away.\r\n         */\r\n        if (pointer && pointer.dragStartEvents) {\r\n            pointer.dragStartEvents.push(imev);\r\n        }\r\n        else {\r\n            if (!system.isPaused) {\r\n                io.dispatchImmediately(\"dragstart\", imev);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Finishes up element drag operation.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}        io       Element\r\n     * @param {IPointer}                 pointer  Pointer\r\n     * @param {MouseEvent | TouchEvent}  ev       Original event\r\n     */\r\n    Interaction.prototype.processDragStop = function (io, pointer, ev) {\r\n        // Pointer set?\r\n        if (!pointer) {\r\n            pointer = this.getDragPointer(io);\r\n        }\r\n        // Unset drag object\r\n        if (pointer) {\r\n            pointer.dragTarget = undefined;\r\n        }\r\n        // Removed from transformedObjects\r\n        this.transformedObjects.removeValue(io);\r\n        // Unlock document\r\n        //this.unlockDocument();\r\n        // Report dragstop\r\n        if (!pointer || this.moved(pointer, 0)) {\r\n            if (io.events.isEnabled(\"dragstop\") && !system.isPaused) {\r\n                var imev = {\r\n                    type: \"dragstop\",\r\n                    target: io\r\n                };\r\n                io.events.dispatchImmediately(\"dragstop\", imev);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Handles all the preparations of the element when it starts to be resized.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}        io       Element\r\n     * @param {IPointer}                 pointer  Pointer\r\n     * @param {MouseEvent | TouchEvent}  ev       Original event\r\n     */\r\n    Interaction.prototype.processResizeStart = function (io, pointer, ev) {\r\n        // Add to draggedObjects\r\n        this.transformedObjects.moveValue(io);\r\n    };\r\n    /**\r\n     * Finishes up element drag operation.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}        io       Element\r\n     * @param {IPointer}                 pointer  Pointer\r\n     * @param {MouseEvent | TouchEvent}  ev       Original event\r\n     */\r\n    Interaction.prototype.processResizeStop = function (io, pointer, ev) {\r\n        // Removed from transformedObjects\r\n        this.transformedObjects.removeValue(io);\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * Controls for InteractionObjects initiating directly\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Manually triggers drag start on the element. Could be useful in cases\r\n     * where tracking or dragging one element can also influence dragging another\r\n     * element.\r\n     *\r\n     * Passing in `pointer` reference is advisable. If not passed in it will try\r\n     * to determine which pointer to attach to. However, it's better to specify\r\n     * it explicitly.\r\n     *\r\n     * @param {InteractionObject}  io       Element\r\n     * @param {IPointer}           pointer  Pointer\r\n     */\r\n    Interaction.prototype.dragStart = function (io, pointer) {\r\n        if (pointer || (pointer = this.getDragPointer(io))) {\r\n            this.handleDown(io, pointer, pointer.lastDownEvent);\r\n        }\r\n    };\r\n    /**\r\n     * Manually ends drag on the element.\r\n     *\r\n     * @param {InteractionObject}  io       Element\r\n     * @param {IPointer}           pointer  Pointer\r\n     */\r\n    Interaction.prototype.dragStop = function (io, pointer) {\r\n        if (pointer || (pointer = this.getDragPointer(io))) {\r\n            this.handleGlobalUp(pointer, pointer.lastUpEvent);\r\n        }\r\n    };\r\n    /**\r\n     * This method uses a fuzzy logic to find the pointer to be used for dragging.\r\n     * Beware that this is not a rock-solid solution. If there are a few objects\r\n     * being dragged at the same time, you may get unexepected results.\r\n     *\r\n     * @param  {InteractionObject}   io  InteractionObject to get pointers from\r\n     * @return {Optional<IPointer>}      Pointer currently being used for dragging\r\n     */\r\n    Interaction.prototype.getDragPointer = function (io) {\r\n        if (io) {\r\n            // InteractionObject is supplied\r\n            // Use it's first down pointer\r\n            return io.downPointers.getIndex(0);\r\n        }\r\n        else if (this.transformedObjects.length) {\r\n            // Use first dragged object\r\n            return this.getDragPointer(this.transformedObjects.getIndex(0));\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * Utils\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Returns pointer id for the given event object.\r\n     *\r\n     * @param  {any}     ev  Event\r\n     * @return {string}      Pointer ID\r\n     */\r\n    Interaction.prototype.getPointerId = function (ev) {\r\n        var id = \"\";\r\n        if ($type.hasValue(ev.identifier)) {\r\n            id = \"\" + ev.identifier;\r\n        }\r\n        else if ($type.hasValue(ev.pointerId)) {\r\n            id = \"\" + ev.pointerId;\r\n        }\r\n        else {\r\n            id = \"m\";\r\n        }\r\n        return id.replace(\"-\", \"\");\r\n    };\r\n    /**\r\n     * Returns a cursor position of the event.\r\n     *\r\n     * @param  {MouseEvent | Touch}  ev  Original event\r\n     * @return {IPoint}                  Event point\r\n     */\r\n    Interaction.prototype.getPointerPoint = function (ev) {\r\n        return {\r\n            \"x\": ev.clientX,\r\n            \"y\": ev.clientY\r\n        };\r\n    };\r\n    /**\r\n     * Returns [[Pointer]] object that is associated with the Event.\r\n     *\r\n     * If no such [[Pointer]] object exists, it is created.\r\n     *\r\n     * @param  {MouseEvent | Touch}  ev  Event\r\n     * @return {IPointer}                Pointer\r\n     */\r\n    Interaction.prototype.getPointer = function (ev) {\r\n        // Get pointer id\r\n        var id = this.getPointerId(ev);\r\n        // Get current coordinates\r\n        var point = this.getPointerPoint(ev);\r\n        // Look for the pointer in the Dictionary if it maybe already exists\r\n        var pointer;\r\n        if (this.pointers.hasKey(id)) {\r\n            // We already have such pointer\r\n            pointer = this.pointers.getKey(id);\r\n            // We need this, because Edge reuses pointer ids across touch and mouse\r\n            pointer.touch = this.isPointerTouch(ev);\r\n            // Reset pointer\r\n            //pointer.point = point;\r\n        }\r\n        else {\r\n            // Init pointer\r\n            pointer = {\r\n                \"id\": id,\r\n                //\"touch\": !(ev instanceof MouseEvent) || ((<any>ev).pointerType && (<any>ev).pointerType != \"pointer\"),\r\n                //\"touch\": !(ev instanceof MouseEvent) || ((<any>ev).pointerType && (<any>ev).pointerType != \"mouse\"),\r\n                \"touch\": this.isPointerTouch(ev),\r\n                \"startPoint\": point,\r\n                \"startTime\": $time.getTime(),\r\n                \"point\": point,\r\n                \"track\": [],\r\n                \"swipeCanceled\": false,\r\n                \"dragStartEvents\": []\r\n            };\r\n            // Add first breadcrumb\r\n            this.addBreadCrumb(pointer, point);\r\n            // Add for re-use later\r\n            this.pointers.setKey(id, pointer);\r\n        }\r\n        // Log last event\r\n        pointer.lastEvent = ev;\r\n        return pointer;\r\n    };\r\n    /**\r\n     * Determines if pointer event originated from a touch pointer or mouse.\r\n     *\r\n     * @param  {MouseEvent | Touch}  ev  Original event\r\n     * @return {boolean}                 Touch pointer?\r\n     */\r\n    Interaction.prototype.isPointerTouch = function (ev) {\r\n        if (typeof Touch !== \"undefined\" && ev instanceof Touch) {\r\n            return true;\r\n        }\r\n        else if (typeof PointerEvent !== \"undefined\" && ev instanceof PointerEvent && $type.hasValue(ev.pointerType)) {\r\n            switch (ev.pointerType) {\r\n                case \"touch\":\r\n                case \"pen\":\r\n                case 2:\r\n                    return true;\r\n                case \"mouse\":\r\n                case 4:\r\n                    return false;\r\n                default:\r\n                    return !(ev instanceof MouseEvent);\r\n            }\r\n        }\r\n        else if ($type.hasValue(ev.type)) {\r\n            if (ev.type.match(/^mouse/)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Resets the poiner to original state, i.e. cleans movement information,\r\n     * starting point, etc.\r\n     *\r\n     * @param {IPointer} pointer Pointer\r\n     */\r\n    Interaction.prototype.resetPointer = function (pointer, ev) {\r\n        // Get current coordinates\r\n        var point = this.getPointerPoint(ev);\r\n        ;\r\n        pointer.startTime = $time.getTime();\r\n        pointer.startPoint = { x: point.x, y: point.y };\r\n        pointer.point = { x: point.x, y: point.y };\r\n        pointer.track = [];\r\n        pointer.swipeCanceled = false;\r\n        //clearTimeout(pointer.swipeTimeout);\r\n        //clearTimeout(pointer.holdTimeout);\r\n    };\r\n    /**\r\n     * Adds a \"breadcrumb\" point to the [[Pointer]] to log its movement path.\r\n     *\r\n     * @param {IPointer}  pointer  Pointer\r\n     * @param {IPoint}    point    Point coordinates\r\n     */\r\n    Interaction.prototype.addBreadCrumb = function (pointer, point) {\r\n        pointer.track.push({\r\n            \"timestamp\": $time.getTime(),\r\n            \"point\": point\r\n        });\r\n    };\r\n    /**\r\n     * Prepares the document for various touch-related operations.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Interaction.prototype.lockDocument = function () {\r\n        this.prepElement(this.body);\r\n    };\r\n    /**\r\n     * Restores document functionality.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Interaction.prototype.unlockDocument = function () {\r\n        if (this.transformedObjects.length == 0) {\r\n            this.restoreAllStyles(this.body);\r\n        }\r\n    };\r\n    /**\r\n     * Lock element (disable all touch)\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Interaction.prototype.lockElement = function (io) {\r\n        this.prepElement(io);\r\n    };\r\n    /**\r\n     * Restores element's functionality.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Interaction.prototype.unlockElement = function (io) {\r\n        this.restoreAllStyles(io);\r\n    };\r\n    /**\r\n     * Locks document's wheel scroll.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Interaction.prototype.lockWheel = function () {\r\n        window.addEventListener(this._pointerEvents.wheel, this.wheelLockEvent, this._passiveSupported ? { passive: false } : false);\r\n    };\r\n    /**\r\n     * Unlocks document's wheel scroll.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Interaction.prototype.unlockWheel = function () {\r\n        window.removeEventListener(this._pointerEvents.wheel, this.wheelLockEvent);\r\n    };\r\n    /**\r\n     * Checks if top element at pointer's position belongs to the SVG.\r\n     *\r\n     * @ignore Exlude from docs\r\n     * @param  {IPointer}       pointer  Pointer\r\n     * @param  {SVGSVGElement}  svg      The <svg> element\r\n     * @param  {id}             id       A unique identifier of the object that is checking for locality\r\n     * @return {boolean}                 Belongs to SVG\r\n     */\r\n    Interaction.prototype.isLocalElement = function (pointer, svg, id) {\r\n        var cached = this.getCache(\"local_pointer_\" + pointer.id);\r\n        if ($type.hasValue(cached)) {\r\n            return cached;\r\n        }\r\n        var target = document.elementFromPoint(pointer.point.x, pointer.point.y);\r\n        var local = target && (svg === target || $dom.contains(svg, target));\r\n        this.setCache(\"local_pointer_\" + pointer.id + \"_\" + id, local, 100);\r\n        return local;\r\n    };\r\n    /**\r\n     * A function that cancels mouse wheel scroll.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {Event}  ev  Event object\r\n     * @return {boolean}         Returns `false` to cancel\r\n     */\r\n    Interaction.prototype.wheelLockEvent = function (ev) {\r\n        ev.preventDefault();\r\n        return false;\r\n    };\r\n    /**\r\n     * Applies a set of styles to an element. Stores the original styles so they\r\n     * can be restored later.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}           io      Element\r\n     * @param {Dictionary<string, string>}  styles  A Dictionary of style property and values\r\n     */\r\n    Interaction.prototype.prepElement = function (io, permanent) {\r\n        var el = io.element;\r\n        if (el) {\r\n            // Define possible props\r\n            var props = [\r\n                \"touchAction\", \"webkitTouchAction\", \"MozTouchAction\", \"MSTouchAction\", \"msTouchAction\", \"oTouchAction\",\r\n                \"userSelect\", \"webkitUserSelect\", \"MozUserSelect\", \"MSUserSelect\", \"msUserSelect\", \"oUserSelect\",\r\n                \"touchSelect\", \"webkitTouchSelect\", \"MozTouchSelect\", \"MSTouchSelect\", \"msTouchSelect\", \"oTouchSelect\",\r\n                \"touchCallout\", \"webkitTouchCallout\", \"MozTouchCallout\", \"MSTouchCallout\", \"msTouchCallout\", \"oTouchCallout\",\r\n                \"contentZooming\", \"webkitContentZooming\", \"MozContentZooming\", \"MSContentZooming\", \"msContentZooming\", \"oContentZooming\",\r\n                \"userDrag\", \"webkitUserDrag\", \"MozUserDrag\", \"MSUserDrag\", \"msUserDrag\", \"oUserDrag\"\r\n            ];\r\n            for (var i = 0; i < props.length; i++) {\r\n                if (props[i] in el.style) {\r\n                    this.setTemporaryStyle(io, props[i], \"none\");\r\n                }\r\n            }\r\n            // Remove iOS-specific selection;\r\n            this.setTemporaryStyle(io, \"tapHighlightColor\", \"rgba(0, 0, 0, 0)\");\r\n            //this.setTemporaryStyle(io, \"webkitOverflowScrolling\", \"none\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns an option associated with hit events.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {InteractionObject}  io      Element\r\n     * @param  {string}             option  Option key\r\n     * @return {any}                        Option value\r\n     */\r\n    Interaction.prototype.getHitOption = function (io, option) {\r\n        var res = io.hitOptions[option];\r\n        if (typeof res === \"undefined\") {\r\n            res = this.hitOptions[option];\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Returns an option associated with hover events.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {InteractionObject}  io      Element\r\n     * @param  {string}             option  Option key\r\n     * @return {any}                        Option value\r\n     */\r\n    Interaction.prototype.getHoverOption = function (io, option) {\r\n        var res = io.hoverOptions[option];\r\n        if (typeof res === \"undefined\") {\r\n            res = this.hoverOptions[option];\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Returns an option associated with swipe events.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {InteractionObject}  io      Element\r\n     * @param  {string}             option  Option key\r\n     * @return {any}                        Option value\r\n     */\r\n    Interaction.prototype.getSwipeOption = function (io, option) {\r\n        var res = io.swipeOptions[option];\r\n        if (typeof res === \"undefined\") {\r\n            res = this.swipeOptions[option];\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Returns an option for keyboard.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {InteractionObject}  io      Element\r\n     * @param  {string}             option  Option key\r\n     * @return {any}                        Option value\r\n     */\r\n    Interaction.prototype.getKeyboardOption = function (io, option) {\r\n        var res = io.keyboardOptions[option];\r\n        if (typeof res === \"undefined\") {\r\n            res = this.keyboardOptions[option];\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Returns an option associated with inertia.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {InteractionObject}  io      Element\r\n     * @param  {InertiaTypes}       type    Inertia type\r\n     * @param  {string}             option  Option key\r\n     * @return {any}                        Option value\r\n     */\r\n    Interaction.prototype.getInertiaOption = function (io, type, option) {\r\n        var options = io.inertiaOptions.getKey(type);\r\n        var res;\r\n        if (options && $type.hasValue(options[type])) {\r\n            res = options[type];\r\n        }\r\n        else {\r\n            res = this.inertiaOptions.getKey(type)[option];\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Stops currently going on inertia. Useful if inertia is currently being\r\n     * animated and the object is being interacted with.\r\n     *\r\n     * @param {InteractionObject} io Element\r\n     */\r\n    Interaction.prototype.stopInertia = function (io) {\r\n        var x;\r\n        var inertias = [\"move\", \"resize\"];\r\n        for (var i = 0; i < inertias.length; i++) {\r\n            x = inertias[i];\r\n            if (io.inertias.hasKey(x)) {\r\n                var inertia = io.inertias.getKey(x);\r\n                if (inertia) {\r\n                    inertia.dispose();\r\n                    //io.inertiaAnimations.removeKey(x);\r\n                    //this.processDragStop(io);\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Check if swiping is currently being performed on an object.\r\n     *\r\n     * @param  {InteractionObject}  io       Element\r\n     * @param  {IPointer}           pointer  Pointer to check\r\n     * @return {boolean}                     `true` if swiping\r\n     */\r\n    Interaction.prototype.swiping = function (io, pointer) {\r\n        var now = $time.getTime();\r\n        if (pointer.swipeCanceled || !io.swipeable) {\r\n            return false;\r\n        }\r\n        else if ((Math.abs(pointer.startPoint.y - pointer.point.y) < this.getSwipeOption(io, \"verticalThreshold\")) &&\r\n            (pointer.startTime > (now - this.getSwipeOption(io, \"time\")))) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Returns `true` if a successfull swipe action was performed on an element.\r\n     *\r\n     * @param  {InteractionObject}  io       Element\r\n     * @param  {IPointer}           pointer  Pointer\r\n     * @return {boolean}                     Swiped?\r\n     */\r\n    Interaction.prototype.swiped = function (io, pointer) {\r\n        var now = $time.getTime();\r\n        if (pointer.swipeCanceled) {\r\n            return false;\r\n        }\r\n        else if ((Math.abs(pointer.startPoint.x - pointer.point.x) > this.getSwipeOption(io, \"horizontalThreshold\")) &&\r\n            (Math.abs(pointer.startPoint.y - pointer.point.y) < this.getSwipeOption(io, \"verticalThreshold\")) &&\r\n            (pointer.startTime > (now - this.getSwipeOption(io, \"time\")))) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Applies style to mouse cursor based on its stage in relation to\r\n     * [[InteractionObject]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}   Element\r\n     */\r\n    Interaction.prototype.applyCursorOverStyle = function (io) {\r\n        // Get sprite's cursor ooptions\r\n        var options = io.cursorOptions;\r\n        if (!$type.hasValue(options.overStyle)) {\r\n            return;\r\n        }\r\n        // Apply cursor down styles\r\n        for (var i = 0; i < options.overStyle.length; i++) {\r\n            $dom.setStyle(io.element, options.overStyle[i].property, options.overStyle[i].value);\r\n        }\r\n    };\r\n    /**\r\n     * Applies style to mouse cursor based on its stage in relation to\r\n     * [[InteractionObject]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}  io       Element\r\n     * @param {IPointer}           pointer  Pointer\r\n     */\r\n    Interaction.prototype.applyCursorDownStyle = function (io, pointer) {\r\n        // Not applicable for touch pointers since they don't display a cursor\r\n        if (pointer.touch) {\r\n            return;\r\n        }\r\n        var downStyle = io.cursorOptions.downStyle;\r\n        // Is down?\r\n        if (io.downPointers.contains(pointer) && $type.hasValue(downStyle)) {\r\n            // Apply cursor down styles\r\n            for (var i = 0; i < downStyle.length; i++) {\r\n                this.setTemporaryStyle(this.body, downStyle[i].property, downStyle[i].value);\r\n                this.setTemporaryStyle(io, downStyle[i].property, downStyle[i].value);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Restores original cursor style for the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {InteractionObject}  io       Element\r\n     * @param {IPointer}           pointer  Pointer\r\n     */\r\n    Interaction.prototype.restoreCursorDownStyle = function (io, pointer) {\r\n        // Not applicable for touch pointers since they don't display a cursor\r\n        if (pointer.touch) {\r\n            return;\r\n        }\r\n        var downStyle = io.cursorOptions.downStyle;\r\n        // Is down?\r\n        if (io.downPointers.contains(pointer) && $type.hasValue(downStyle)) {\r\n            // Apply cursor down styles\r\n            for (var i = 0; i < downStyle.length; i++) {\r\n                this.restoreStyle(this.body, downStyle[i].property);\r\n                this.restoreStyle(io, downStyle[i].property);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets style on the body of the document.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Array<IStyleProperty> | IStyleProperty}  style  Style definitions\r\n     */\r\n    Interaction.prototype.setGlobalStyle = function (style) {\r\n        var body = getInteraction().body;\r\n        var styles = ($type.isArray(style) ? style : [style]);\r\n        for (var i = 0; i < styles.length; i++) {\r\n            this.setTemporaryStyle(body, styles[i].property, styles[i].value);\r\n        }\r\n    };\r\n    /**\r\n     * Restores style on the body of the document.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Array<IStyleProperty> | IStyleProperty}  style  Style definitions\r\n     */\r\n    Interaction.prototype.restoreGlobalStyle = function (style) {\r\n        var body = getInteraction().body;\r\n        var styles = ($type.isArray(style) ? style : [style]);\r\n        for (var i = 0; i < styles.length; i++) {\r\n            this.restoreStyle(body, styles[i].property);\r\n        }\r\n    };\r\n    /**\r\n     * Checks if element is a non-cahrt element.\r\n     *\r\n     * @param  {InteractionObject}  io  InteractionObject\r\n     * @return {boolean}                Global element?\r\n     */\r\n    Interaction.prototype.isGlobalElement = function (io) {\r\n        return document.body === io.element;\r\n    };\r\n    /**\r\n     * Checks if pointer has moved since it was created.\r\n     *\r\n     * @param  {IPointer}  pointer    Pointer\r\n     * @param  {number}    tolerance  Tolerance in pixels\r\n     * @param  {number}    minTime    Minimum time required for the pointer to be down to be considered moved\r\n     * @return {boolean}              `true` if the pointer has moved\r\n     */\r\n    Interaction.prototype.moved = function (pointer, tolerance, minTime) {\r\n        /*// If there was more time, we don't care if cursor actually moved\r\n        let duration = $time.getTime() - pointer.startTime;\r\n        if ($type.hasValue(minTime) && (minTime > duration)) {\r\n            return false;\r\n        }*/\r\n        if (minTime === void 0) { minTime = 300; }\r\n        // That was quick measure shift\r\n        var shift = this.getShift(pointer);\r\n        return (Math.abs(shift.x) > tolerance) || (Math.abs(shift.y) > tolerance);\r\n    };\r\n    /**\r\n     * Returns if pointer is \"old\", meaning it has been pressing for more than\r\n     * X milliseconds.\r\n     *\r\n     * @ignore\r\n     * @param  {IPointer}  pointer  Pointer\r\n     * @param  {number}    minTime  Minimum time to consider pointer old\r\n     * @return {boolean}\r\n     */\r\n    Interaction.prototype.old = function (pointer, minTime) {\r\n        if (minTime === void 0) { minTime = 300; }\r\n        return $time.getTime() - pointer.startTime > minTime;\r\n    };\r\n    /**\r\n     * Returns total a shift in pointers coordinates between its original\r\n     * position and now.\r\n     *\r\n     * @param  {IPointer}  pointer  Pointer\r\n     * @return {IPoint}             Shift in coordinates (x/y)\r\n     */\r\n    Interaction.prototype.getShift = function (pointer) {\r\n        return {\r\n            \"x\": pointer.startPoint.x - pointer.point.x,\r\n            \"y\": pointer.startPoint.y - pointer.point.y\r\n        };\r\n    };\r\n    /**\r\n     * Returns a point from [[Pointer]]'s move history at a certain timetamp.\r\n     *\r\n     * @param  {IPointer}               pointer    Pointer\r\n     * @param  {number}                 timestamp  Timestamp\r\n     * @return {Optional<IBreadcrumb>}             Point\r\n     */\r\n    Interaction.prototype.getTrailPoint = function (pointer, timestamp) {\r\n        var res;\r\n        for (var i = 0; i < pointer.track.length; i++) {\r\n            if (pointer.track[i].timestamp >= timestamp) {\r\n                res = pointer.track[i];\r\n                break;\r\n            }\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Checks if same pointer already exists in the list.\r\n     *\r\n     * @param  {List<IPointer>}  list     List to check agains\r\n     * @param  {IPointer}        pointer  Pointer\r\n     * @return {boolean}                  Exists?\r\n     */\r\n    Interaction.prototype.pointerExists = function (list, pointer) {\r\n        var exists = false;\r\n        list.each(function (item) {\r\n            if (item == pointer) {\r\n                return;\r\n            }\r\n            exists = item.point.x == pointer.point.x && item.point.y == pointer.point.y;\r\n        });\r\n        return exists;\r\n    };\r\n    /**\r\n     * Returns an [[InteractionObject]] representation of a DOM element.\r\n     *\r\n     * You can use this on any HTML or SVG element, to add interactive features\r\n     * to it.\r\n     *\r\n     * @param  {HTMLElement | SVGSVGElement}  element  Element\r\n     * @return {InteractionObject}                     InteractionObject\r\n     */\r\n    Interaction.prototype.getInteraction = function (element) {\r\n        return new InteractionObject(element);\r\n    };\r\n    /**\r\n     * Sets a style property on an element. Stores original value to be restored\r\n     * later with [[restoreStyle]].\r\n     *\r\n     * @see {@link restoreStyle}\r\n     * @param {InteractionObject}  io        Element\r\n     * @param {string}             property  Property\r\n     * @param {string}             value     Value\r\n     */\r\n    Interaction.prototype.setTemporaryStyle = function (io, property, value) {\r\n        // Get element\r\n        //let el = io.element.tagName == \"g\" ? <SVGSVGElement>io.element.parentNode : io.element;\r\n        var el = io.element;\r\n        // Save original property if it is set and hasn't been saved before already\r\n        if ($type.hasValue(el.style[property]) && !io.replacedStyles.hasKey(property)) {\r\n            io.replacedStyles.setKey(property, el.style[property]);\r\n        }\r\n        // Replace with the new one\r\n        $dom.setStyle(el, property, value);\r\n    };\r\n    /**\r\n     * Restores specific style on an element.\r\n     *\r\n     * @param {InteractionObject}  io        Element\r\n     * @param {string}             property  Style property\r\n     */\r\n    Interaction.prototype.restoreStyle = function (io, property) {\r\n        // Reset style\r\n        if (io.replacedStyles.hasKey(property)) {\r\n            io.element.style[property] = io.replacedStyles.getKey(property);\r\n            io.replacedStyles.removeKey(property);\r\n        }\r\n        else {\r\n            delete io.element.style[property];\r\n        }\r\n    };\r\n    /**\r\n     * Restore temporarily reset styles on an element.\r\n     *\r\n     * @param {InteractionObject} io Element\r\n     */\r\n    Interaction.prototype.restoreAllStyles = function (io) {\r\n        $iter.each(io.replacedStyles.iterator(), function (a) {\r\n            var key = a[0];\r\n            var value = a[1];\r\n            io.element.style[key] = value;\r\n            io.replacedStyles.removeKey(key);\r\n        });\r\n    };\r\n    /**\r\n     * Disposes this object and cleans up after itself.\r\n     */\r\n    Interaction.prototype.dispose = function () {\r\n        if (!this.isDisposed) {\r\n            _super.prototype.dispose.call(this);\r\n            this.restoreAllStyles(this.body);\r\n            this.unlockWheel();\r\n        }\r\n    };\r\n    Interaction.prototype.log = function (text, ev, io) {\r\n        var show = true;\r\n        if (show) {\r\n            // Touchlist?\r\n            if (ev.changedTouches) {\r\n                for (var i = 0; i < ev.changedTouches.length; i++) {\r\n                    this.logTouch(text, ev.type, ev.changedTouches[i]);\r\n                }\r\n                return;\r\n            }\r\n            // Get type\r\n            var type = \"\";\r\n            if (ev.pointerType) {\r\n                switch (ev.pointerType) {\r\n                    case 2:\r\n                        type = \"touch\";\r\n                        break;\r\n                    case 4:\r\n                        type = \"mouse\";\r\n                        break;\r\n                    default:\r\n                        type = ev.pointerType;\r\n                        break;\r\n                }\r\n            }\r\n            else if (typeof TouchEvent != \"undefined\" && ev instanceof TouchEvent) {\r\n                type = \"touch\";\r\n            }\r\n            else if (ev.type.match(/^mouse/)) {\r\n                type = \"mouse\";\r\n            }\r\n            else {\r\n                type = \"???\";\r\n            }\r\n            // Get ID\r\n            var id = \"\";\r\n            if ($type.hasValue(ev.identifier)) {\r\n                id = ev.identifier;\r\n            }\r\n            else if ($type.hasValue(ev.pointerId)) {\r\n                id = ev.pointerId;\r\n            }\r\n            else {\r\n                id = \"???\";\r\n            }\r\n            if (io) {\r\n                console.log(text + \" (\" + io.uid + \")  \" + ev.type + \"  \" + type + \"  \" + id);\r\n            }\r\n            else {\r\n                console.log(text + \"  \" + ev.type + \"  \" + type + \"  \" + id);\r\n            }\r\n        }\r\n    };\r\n    Interaction.prototype.logTouch = function (text, type, ev) {\r\n        console.log(text + \"  \" + type + \"  \" + \"touch\" + \"  \" + ev.identifier);\r\n    };\r\n    return Interaction;\r\n}(BaseObjectEvents));\r\nexport { Interaction };\r\nvar interaction = null;\r\n/**\r\n * Returns a single unified global instance of [[Interaction]].\r\n *\r\n * All code should use this function, rather than create their own instances\r\n * of [[Interaction]].\r\n */\r\nexport function getInteraction() {\r\n    if (interaction == null) {\r\n        interaction = new Interaction();\r\n    }\r\n    return interaction;\r\n}\r\n//# sourceMappingURL=Interaction.js.map","/**\r\n * Functionality related simulating of dragging of elements using keyboard.\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { getInteraction } from \"./Interaction\";\r\nimport { animations } from \"../utils/Animation\";\r\nimport * as $array from \"../utils/Array\";\r\n/**\r\n * [[InteractionKeyboardObject]] is used to simulate dragging of the `draggable`\r\n * element using keyboard arrows.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nvar InteractionKeyboardObject = /** @class */ (function () {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {InteractionObject} io An InteractionObject\r\n     */\r\n    function InteractionKeyboardObject(io, ev) {\r\n        /**\r\n         * Indicates if this object has already been deleted. Any\r\n         * destruction/disposal code should take this into account when deciding\r\n         * wheter to run potentially costly disposal operations if they already have\r\n         * been run.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        this._disposed = false;\r\n        /**\r\n         * Indicates direction of current horizontal movement.\r\n         *\r\n         * 0 - not moving horizontally\r\n         * 1 - moving right\r\n         * -1 - moving left\r\n         * @type {number}\r\n         */\r\n        this.directionX = 0;\r\n        /**\r\n         * Indicates direction of current vertical movement.\r\n         *\r\n         * 0 - not moving vertically\r\n         * 1 - moving down\r\n         * -1 - moving up\r\n         * @type {number}\r\n         */\r\n        this.directionY = 0;\r\n        this.interaction = io;\r\n        this.keyboardEvent = ev;\r\n        this._startedOn = new Date().getTime();\r\n        getInteraction().processDragStart(io);\r\n        animations.push(this);\r\n        this.update();\r\n    }\r\n    /**\r\n     * It's an update method which is called by the system if\r\n     * [[InteractionObject]] is used as animation.\r\n     *\r\n     * This will update coordinates of the element based on the movement\r\n     * directions.\r\n     */\r\n    InteractionKeyboardObject.prototype.update = function () {\r\n        // Init and get settings\r\n        var io = this.interaction;\r\n        var speed = getInteraction().getKeyboardOption(io, \"speed\"), accelleration = getInteraction().getKeyboardOption(io, \"accelleration\"), accellerationDelay = getInteraction().getKeyboardOption(io, \"accellerationDelay\"), shift = {\r\n            x: 0,\r\n            y: 0\r\n        };\r\n        // If SHIFT key is pressed we slash speed by half and disable accelleration\r\n        if (this.keyboardEvent.shiftKey) {\r\n            speed *= 0.5;\r\n            accelleration = 1;\r\n        }\r\n        // If CTRL is pressed we increase speed by x2\r\n        else if (this.keyboardEvent.ctrlKey) {\r\n            speed *= 2;\r\n        }\r\n        // Get elapsed time\r\n        var ms = new Date().getTime() - this._startedOn;\r\n        var accelleratedMs = ms - accellerationDelay;\r\n        // Add accellerated movement\r\n        if ((accelleration > 0) && (accelleratedMs > 0)) {\r\n            var accellerationFactor = ms / accellerationDelay;\r\n            ms = accellerationDelay;\r\n            shift.x += this.directionX * (speed * accelleration * accellerationFactor * accelleratedMs);\r\n            shift.y += this.directionY * (speed * accelleration * accellerationFactor * accelleratedMs);\r\n        }\r\n        // Calculate position\r\n        shift.x += this.directionX * (speed * ms);\r\n        shift.y += this.directionY * (speed * ms);\r\n        // Simulate move on Interaction\r\n        getInteraction().handleTransformMove(io, shift, { x: 0, y: 0 }, this.keyboardEvent, true);\r\n    };\r\n    /**\r\n     * Returns if this object has been already been disposed.\r\n     *\r\n     * @return {boolean} Is disposed?\r\n     */\r\n    InteractionKeyboardObject.prototype.isDisposed = function () {\r\n        return this._disposed;\r\n    };\r\n    /**\r\n     * Disposes this object. Removes from system animations.\r\n     */\r\n    InteractionKeyboardObject.prototype.dispose = function () {\r\n        if (!this._disposed) {\r\n            getInteraction().processDragStop(this.interaction);\r\n            $array.remove(animations, this);\r\n        }\r\n    };\r\n    return InteractionKeyboardObject;\r\n}());\r\nexport { InteractionKeyboardObject };\r\n//# sourceMappingURL=InteractionKeyboardObject.js.map","/**\r\n * Interaction Object module\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { InteractionObjectEventDispatcher } from \"./InteractionObjectEvents\";\r\nimport { BaseObjectEvents } from \"../Base\";\r\nimport { List } from \"../utils/List\";\r\nimport { Dictionary, DictionaryDisposer } from \"../utils/Dictionary\";\r\nimport { getInteraction } from \"./Interaction\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * Re-exports\r\n */\r\nexport { InteractionObjectEventDispatcher };\r\n/**\r\n * Interaction object represents an object that is subject for any kind of\r\n * interaction with it with any input devices: mouse, touch or keyboard.\r\n *\r\n * Any DOM element can be wrapped into an Internaction object which in turn\r\n * enables attaching various interaction events to it, such as: hit, drag,\r\n * swipe, etc.\r\n *\r\n * To create an [[InteractionObject]] out of a [[Sprite]], use:\r\n * `interaction.getInteractionFromSprite(sprite: Sprite)`\r\n *\r\n * To create an [[InteractionObject]] out of a a regular element:\r\n * `interaction.getInteraction(element: HTMLElement)`\r\n */\r\nvar InteractionObject = /** @class */ (function (_super) {\r\n    tslib_1.__extends(InteractionObject, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function InteractionObject(element) {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * An [[EventDispatcher]] instance which holds events for this object\r\n         */\r\n        _this.events = new InteractionObjectEventDispatcher(_this);\r\n        /**\r\n         * Collection of Disposers for various events. (so that those get disposed\r\n         * when the whole InteractionObject is disposed)\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {Dictionary<string, IDisposer>}\r\n         */\r\n        _this.eventDisposers = new Dictionary();\r\n        /**\r\n         * A [[Dictionary]] that holds temporarily replaced original style values for\r\n         * HTML element, so that they can be restored when the functionality that\r\n         * replaced them is done.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {Dictionary<string, string>}\r\n         */\r\n        _this.replacedStyles = new Dictionary();\r\n        _this._clickable = false;\r\n        _this._hoverable = false;\r\n        _this._trackable = false;\r\n        _this._draggable = false;\r\n        _this._swipeable = false;\r\n        _this._resizable = false;\r\n        _this._wheelable = false;\r\n        _this._inert = false;\r\n        /**\r\n         * Is element currently hovered?\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this._isHover = false;\r\n        /**\r\n         * Is the element hovered by touch pointer?\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this._isHoverByTouch = false;\r\n        /**\r\n         * Has element got any pointers currently pressing down on it?\r\n         * @type {boolean}\r\n         */\r\n        _this._isDown = false;\r\n        /**\r\n         * Does element have focus?\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this._isFocused = false;\r\n        /**\r\n         * Options used for inertia functionality.\r\n         *\r\n         * @type {Dictionary<InertiaTypes, IInertiaOptions>}\r\n         */\r\n        _this._inertiaOptions = new Dictionary();\r\n        /**\r\n         * A collection of different inertia types, currently playing out.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @type {Dictionary<InertiaTypes, Inertia>}\r\n         */\r\n        _this.inertias = new Dictionary();\r\n        /**\r\n         * Click/tap options.\r\n         *\r\n         * @type {IHitOptions}\r\n         */\r\n        _this._hitOptions = {};\r\n        /**\r\n         * Hover options.\r\n         *\r\n         * @type {IHoverOptions}\r\n         */\r\n        _this._hoverOptions = {};\r\n        /**\r\n         * Swipe gesture options.\r\n         *\r\n         * @type {ISwipeOptions}\r\n         */\r\n        _this._swipeOptions = {};\r\n        /**\r\n         * Keyboard options.\r\n         *\r\n         * @type {IKeyboarOptions}\r\n         */\r\n        _this._keyboardOptions = {};\r\n        /**\r\n         * Cursor options.\r\n         *\r\n         * @type {ICursorOptions}\r\n         */\r\n        _this._cursorOptions = {\r\n            \"defaultStyle\": [{\r\n                    \"property\": \"cursor\",\r\n                    \"value\": \"default\"\r\n                }]\r\n        };\r\n        _this._element = element;\r\n        _this.className = \"InteractionObject\";\r\n        _this._disposers.push(new DictionaryDisposer(_this.inertias));\r\n        _this._disposers.push(new DictionaryDisposer(_this.eventDisposers));\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(InteractionObject.prototype, \"isHover\", {\r\n        /**\r\n         * Returns if this element is currently hovered.\r\n         *\r\n         * @return {boolean} Hovered?\r\n         */\r\n        get: function () {\r\n            return this._isHover;\r\n        },\r\n        /**\r\n         * Sets if this element is currently hovered.\r\n         *\r\n         * @param {boolean} value Hovered?\r\n         */\r\n        set: function (value) {\r\n            if (this.isHover != value) {\r\n                this._isHover = value;\r\n                if (value) {\r\n                    getInteraction().overObjects.moveValue(this);\r\n                }\r\n                else {\r\n                    getInteraction().overObjects.removeValue(this);\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"isHoverByTouch\", {\r\n        /**\r\n         * Returns if this element is currently hovered.\r\n         *\r\n         * @return {boolean} Hovered?\r\n         */\r\n        get: function () {\r\n            return this._isHoverByTouch;\r\n        },\r\n        /**\r\n         * Sets if this element is currently hovered.\r\n         *\r\n         * @param {boolean} value Hovered?\r\n         */\r\n        set: function (value) {\r\n            if (this.isHoverByTouch != value) {\r\n                this._isHoverByTouch = value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"overPointers\", {\r\n        /**\r\n         * Returns a list of pointers currently over the element.\r\n         *\r\n         * @see {@link Pointer}\r\n         * @return {List<IPointer>} List if pointers currently hovering the element\r\n         */\r\n        get: function () {\r\n            if (!this._overPointers) {\r\n                this._overPointers = new List();\r\n            }\r\n            return this._overPointers;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"isDown\", {\r\n        /**\r\n         * Returns if this element has currently any pointers pressing on it.\r\n         *\r\n         * @return {boolean} Has down pointers?\r\n         */\r\n        get: function () {\r\n            return this._isDown;\r\n        },\r\n        /**\r\n         * Sets if this element has currently any pointers pressing on it.\r\n         *\r\n         * @param {boolean} value Has down pointers?\r\n         */\r\n        set: function (value) {\r\n            if (this.isDown != value) {\r\n                this._isDown = value;\r\n                if (value) {\r\n                    getInteraction().downObjects.moveValue(this);\r\n                }\r\n                else {\r\n                    getInteraction().downObjects.removeValue(this);\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"downPointers\", {\r\n        /**\r\n         * Returns a list of pointers currently pressing down on this element.\r\n         *\r\n         * @see {@link Pointer}\r\n         * @return {List<IPointer>} List of down pointers\r\n         */\r\n        get: function () {\r\n            if (!this._downPointers) {\r\n                this._downPointers = new List();\r\n            }\r\n            return this._downPointers;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"isFocused\", {\r\n        /**\r\n         * Returns if this element is currently focused.\r\n         *\r\n         * @return {boolean} Focused?\r\n         */\r\n        get: function () {\r\n            return this._isFocused;\r\n        },\r\n        /**\r\n         * Sets if this element is currently focused.\r\n         *\r\n         * @param {boolean} value Focused?\r\n         */\r\n        set: function (value) {\r\n            if (this.isFocused != value) {\r\n                this._isFocused = value;\r\n                if (value) {\r\n                    getInteraction().focusedObject = this;\r\n                }\r\n                else {\r\n                    getInteraction().focusedObject = undefined;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"clickable\", {\r\n        /**\r\n         * Returns if element is currently set as clickable.\r\n         *\r\n         * @return {boolean} Clickable?\r\n         */\r\n        get: function () {\r\n            return this._clickable;\r\n        },\r\n        /**\r\n         * Is element clickable? Clickable elements will generate \"hit\" events when\r\n         * clicked or tapped.\r\n         *\r\n         * @param {boolean} value Clickable?\r\n         */\r\n        set: function (value) {\r\n            if (this._clickable !== value) {\r\n                this._clickable = value;\r\n                getInteraction().processClickable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"hoverable\", {\r\n        /**\r\n         * Returns if element is currently set to generate hover events.\r\n         *\r\n         * @return {boolean} Hoverable?\r\n         */\r\n        get: function () {\r\n            return this._hoverable;\r\n        },\r\n        /**\r\n         * Sets if element should generate hover events.\r\n         *\r\n         * @param {boolean} value Hoverable?\r\n         */\r\n        set: function (value) {\r\n            if (this._hoverable !== value) {\r\n                this._hoverable = value;\r\n                getInteraction().processHoverable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"trackable\", {\r\n        /**\r\n         * Returns if element is set to track pointer movement over it.\r\n         *\r\n         * @return {boolean} Track pointer?\r\n         */\r\n        get: function () {\r\n            return this._trackable;\r\n        },\r\n        /**\r\n         * Sets if pointer movement over element should be tracked.\r\n         *\r\n         * @param {boolean} value Track pointer?\r\n         */\r\n        set: function (value) {\r\n            if (this._trackable !== value) {\r\n                this._trackable = value;\r\n                getInteraction().processTrackable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"draggable\", {\r\n        /**\r\n         * Returns if element is currently set as draggable.\r\n         *\r\n         * @return {boolean} Draggable?\r\n         */\r\n        get: function () {\r\n            return this._draggable;\r\n        },\r\n        /**\r\n         * Sets if element can be dragged. (moved)\r\n         *\r\n         * @param {boolean} value Draggable?\r\n         */\r\n        set: function (value) {\r\n            if (this._draggable !== value) {\r\n                this._draggable = value;\r\n                getInteraction().processDraggable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"swipeable\", {\r\n        /**\r\n         * Returns if element is currently set to track swipe gesture.\r\n         *\r\n         * @return {boolean} Track swipe?\r\n         */\r\n        get: function () {\r\n            return this._swipeable;\r\n        },\r\n        /**\r\n         * Sets whether element should react to swipe gesture.\r\n         *\r\n         * @param {boolean} value Track swipe?\r\n         */\r\n        set: function (value) {\r\n            if (this._swipeable !== value) {\r\n                this._swipeable = value;\r\n                getInteraction().processSwipeable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"resizable\", {\r\n        /**\r\n         * Returns if element is currently set as resizeable.\r\n         *\r\n         * @return {boolean} Resizeble?\r\n         */\r\n        get: function () {\r\n            return this._resizable;\r\n        },\r\n        /**\r\n         * Sets if element can be resized.\r\n         *\r\n         * @param {boolean} value Resizeable?\r\n         */\r\n        set: function (value) {\r\n            if (this._resizable !== value) {\r\n                this._resizable = value;\r\n                getInteraction().processResizable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"wheelable\", {\r\n        /**\r\n         * @return {boolean} Track wheel?\r\n         */\r\n        get: function () {\r\n            return this._wheelable;\r\n        },\r\n        /**\r\n         * Indicates whether track moouse wheel rotation over element.\r\n         *\r\n         * @param {boolean} value Track wheel?\r\n         */\r\n        set: function (value) {\r\n            if (this._wheelable !== value) {\r\n                this._wheelable = value;\r\n                getInteraction().processWheelable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"inert\", {\r\n        /**\r\n         * Returns if element is currently set as inert.\r\n         *\r\n         * @return {boolean} Inert?\r\n         */\r\n        get: function () {\r\n            return this._inert;\r\n        },\r\n        /**\r\n         * Sets if element is inert, i.e. if it should carry movement momentum after\r\n         * it is dragged and released.\r\n         *\r\n         * @param {boolean} value Inert?\r\n         */\r\n        set: function (value) {\r\n            if (this._inert !== value) {\r\n                this._inert = value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"focusable\", {\r\n        /**\r\n         * Returns if element is currently set as focusable.\r\n         *\r\n         * @return {Optional<boolean>} Focusable?\r\n         */\r\n        get: function () {\r\n            return this._focusable;\r\n        },\r\n        /**\r\n         * Sets if element can gain focus.\r\n         *\r\n         * @param {Optional<boolean>} value Focusable?\r\n         */\r\n        set: function (value) {\r\n            if (this._focusable !== value) {\r\n                this._focusable = value;\r\n                if (this._focusable && this.tabindex == -1) {\r\n                    this._tabindex = 1;\r\n                }\r\n                getInteraction().processFocusable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"tabindex\", {\r\n        /**\r\n         * Returns element's current tab index.\r\n         *\r\n         * @return {number} Tab index\r\n         */\r\n        get: function () {\r\n            return $type.getValueDefault(this._tabindex, -1);\r\n        },\r\n        /**\r\n         * Sets element's tab index.\r\n         *\r\n         * @param {number} value Tab index\r\n         */\r\n        set: function (value) {\r\n            if (this._tabindex !== value) {\r\n                this._tabindex = value;\r\n                if (value > -1) {\r\n                    this.focusable = true;\r\n                }\r\n                getInteraction().processFocusable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"element\", {\r\n        /**\r\n         * Returns DOM element associated with this element\r\n         * @return {HTMLElement | SVGSVGElement} Element\r\n         */\r\n        get: function () {\r\n            return this._element;\r\n        },\r\n        /**\r\n         * Sets DOM element associated with this element\r\n         * @param {HTMLElement | SVGSVGElement} element Element\r\n         */\r\n        set: function (element) {\r\n            this._element = element;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"originalPosition\", {\r\n        /**\r\n         * Returns element's original position.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {Optional<IPoint>} Position.\r\n         */\r\n        get: function () {\r\n            return this._originalPosition || { x: 0, y: 0 };\r\n        },\r\n        /**\r\n         * Sets element's original position.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {Optional<IPoint>} value Position\r\n         */\r\n        set: function (value) {\r\n            this._originalPosition = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"originalScale\", {\r\n        /**\r\n         * Returns element's original scale.\r\n         *\r\n         * @return {number} Scale\r\n         */\r\n        get: function () {\r\n            return $type.getValueDefault(this._originalScale, 1);\r\n        },\r\n        /**\r\n         * Sets element's original scale.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {number} value Scale\r\n         */\r\n        set: function (value) {\r\n            if (this._originalScale !== value) {\r\n                this._originalScale = value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"originalAngle\", {\r\n        /**\r\n         * Returns element's original angle.\r\n         *\r\n         * @return {number} Angle\r\n         */\r\n        get: function () {\r\n            return $type.getValueDefault(this._originalAngle, 0);\r\n        },\r\n        /**\r\n         * Sets element's original angle.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {number} value Angle\r\n         */\r\n        set: function (value) {\r\n            if (this._originalAngle !== value) {\r\n                this._originalAngle = value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"inertiaOptions\", {\r\n        /**\r\n         * @return {Dictionary<InertiaTypes, IInertiaOptions>} Options\r\n         */\r\n        get: function () {\r\n            if (this.sprite) {\r\n                return this.sprite.adapter.apply(\"inertiaOptions\", this._inertiaOptions);\r\n            }\r\n            else {\r\n                return this._inertiaOptions;\r\n            }\r\n        },\r\n        /**\r\n         * Inertia options.\r\n         *\r\n         * @param {Dictionary<InertiaTypes, IInertiaOptions>}  value  Options\r\n         */\r\n        set: function (value) {\r\n            this._inertiaOptions = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"hitOptions\", {\r\n        /**\r\n         * @return {IHitOptions} Options\r\n         */\r\n        get: function () {\r\n            if (this.sprite) {\r\n                return this.sprite.adapter.apply(\"hitOptions\", this._hitOptions);\r\n            }\r\n            else {\r\n                return this._hitOptions;\r\n            }\r\n        },\r\n        /**\r\n         * Hit options.\r\n         *\r\n         * @param {IHitOptions}  value  Options\r\n         */\r\n        set: function (value) {\r\n            this._hitOptions = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"hoverOptions\", {\r\n        /**\r\n         * @return {IHoverOptions} Options\r\n         */\r\n        get: function () {\r\n            if (this.sprite) {\r\n                return this.sprite.adapter.apply(\"hoverOptions\", this._hoverOptions);\r\n            }\r\n            else {\r\n                return this._hoverOptions;\r\n            }\r\n        },\r\n        /**\r\n         * Hover options.\r\n         *\r\n         * @param {IHoverOptions}  value  Options\r\n         */\r\n        set: function (value) {\r\n            this._hoverOptions = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"swipeOptions\", {\r\n        /**\r\n         * @return {ISwipeOptions} Options\r\n         */\r\n        get: function () {\r\n            if (this.sprite) {\r\n                return this.sprite.adapter.apply(\"swipeOptions\", this._swipeOptions);\r\n            }\r\n            else {\r\n                return this._swipeOptions;\r\n            }\r\n        },\r\n        /**\r\n         * Swipe options.\r\n         *\r\n         * @param {ISwipeOptions}  value  Options\r\n         */\r\n        set: function (value) {\r\n            this._swipeOptions = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"keyboardOptions\", {\r\n        /**\r\n         * @return {IKeyboardOptions} Options\r\n         */\r\n        get: function () {\r\n            if (this.sprite) {\r\n                return this.sprite.adapter.apply(\"keyboardOptions\", this._keyboardOptions);\r\n            }\r\n            else {\r\n                return this._keyboardOptions;\r\n            }\r\n        },\r\n        /**\r\n         * Keyboard options.\r\n         *\r\n         * @param {IKeyboardOptions}  value  Options\r\n         */\r\n        set: function (value) {\r\n            this._keyboardOptions = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"cursorOptions\", {\r\n        /**\r\n         * @return {ICursorOptions} Options\r\n         */\r\n        get: function () {\r\n            if (this.sprite) {\r\n                return this.sprite.adapter.apply(\"cursorOptions\", this._cursorOptions);\r\n            }\r\n            else {\r\n                return this._cursorOptions;\r\n            }\r\n        },\r\n        /**\r\n         * Cursor options.\r\n         *\r\n         * @param {ICursorOptions}  value  Options\r\n         */\r\n        set: function (value) {\r\n            this._cursorOptions = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all properties and related assets from another object of the same\r\n     * type.\r\n     *\r\n     * @param {this} source Source object\r\n     */\r\n    InteractionObject.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.inertiaOptions = source.inertiaOptions;\r\n        this.hitOptions = source.hitOptions;\r\n        this.hoverOptions = source.hoverOptions;\r\n        this.swipeOptions = source.swipeOptions;\r\n        this.keyboardOptions = source.keyboardOptions;\r\n        this.cursorOptions = source.cursorOptions;\r\n        getInteraction().applyCursorOverStyle(this);\r\n    };\r\n    /**\r\n     * @ignore Exclude from docs\r\n     */\r\n    InteractionObject.prototype.setEventDisposer = function (key, value, f) {\r\n        var disposer = this.eventDisposers.getKey(key);\r\n        if (value) {\r\n            if (disposer == null) {\r\n                this.eventDisposers.setKey(key, f());\r\n            }\r\n        }\r\n        else {\r\n            if (disposer != null) {\r\n                disposer.dispose();\r\n                this.eventDisposers.removeKey(key);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Disposes object.\r\n     */\r\n    InteractionObject.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        // Remove from all interaction registries\r\n        var interaction = getInteraction();\r\n        interaction.overObjects.removeValue(this);\r\n        interaction.downObjects.removeValue(this);\r\n        interaction.trackedObjects.removeValue(this);\r\n        interaction.transformedObjects.removeValue(this);\r\n        if (interaction.focusedObject === this) {\r\n            interaction.focusedObject = undefined;\r\n        }\r\n    };\r\n    return InteractionObject;\r\n}(BaseObjectEvents));\r\nexport { InteractionObject };\r\n//# sourceMappingURL=InteractionObject.js.map","import * as tslib_1 from \"tslib\";\r\nimport { TargetedEventDispatcher } from \"../utils/EventDispatcher\";\r\nimport { MultiDisposer, CounterDisposer } from \"../utils/Disposer\";\r\n/**\r\n * Represents an Event Dispatcher for [[InteractionObject]].\r\n *\r\n * Besides regular [[EventDispatcher]] functionality it adds new events with\r\n * direct application to DOM nodes. Primarily used to handle keyboard events,\r\n * but can turn into something else moving forward.\r\n */\r\nvar InteractionObjectEventDispatcher = /** @class */ (function (_super) {\r\n    tslib_1.__extends(InteractionObjectEventDispatcher, _super);\r\n    function InteractionObjectEventDispatcher() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /**\r\n         * Holds a list of Disposers for DOM events added.\r\n         */\r\n        _this._domEvents = {};\r\n        return _this;\r\n    }\r\n    /**\r\n     * Adds a DOM event and returns Disposer.\r\n     *\r\n     * @return {IDisposer} Disposer\r\n     */\r\n    InteractionObjectEventDispatcher.prototype._addDOMEvent = function (type, key, listener, context) {\r\n        var _this = this;\r\n        if (!this._domEvents[type]) {\r\n            var callback_1 = function (e) {\r\n                listener.call(context, key, e);\r\n            };\r\n            this.target.element.addEventListener(type, callback_1, false);\r\n            this._domEvents[type] = new CounterDisposer(function () {\r\n                delete _this._domEvents[type];\r\n                _this.target.element.removeEventListener(type, callback_1, false);\r\n            });\r\n        }\r\n        return this._domEvents[type].increment();\r\n    };\r\n    InteractionObjectEventDispatcher.prototype._dispatchKeyboardEvent = function (key, ev) {\r\n        // TODO use this.dispatchImmediately ?\r\n        if (this.target.events.isEnabled(key)) {\r\n            this.target.events.dispatchImmediately(key, {\r\n                type: key,\r\n                target: this.target,\r\n                event: ev\r\n            });\r\n        }\r\n    };\r\n    InteractionObjectEventDispatcher.prototype._on = function (once, type, callback, context, shouldClone, dispatch) {\r\n        var info = _super.prototype._on.call(this, once, type, callback, context, shouldClone, dispatch);\r\n        var disposers = [info.disposer];\r\n        switch (type) {\r\n            case \"hit\":\r\n            case \"doublehit\":\r\n            case \"rightclick\":\r\n            case \"down\":\r\n            case \"up\":\r\n                this.target.clickable = true;\r\n                break;\r\n            case \"drag\":\r\n            case \"dragstart\":\r\n            case \"dragstop\":\r\n                this.target.draggable = true;\r\n                break;\r\n            case \"track\":\r\n                this.target.trackable = true;\r\n                break;\r\n            case \"resize\":\r\n                this.target.resizable = true;\r\n                break;\r\n            case \"swipe\":\r\n            case \"swipeleft\":\r\n            case \"swiperight\":\r\n                this.target.swipeable = true;\r\n                break;\r\n            case \"wheel\":\r\n            case \"wheelup\":\r\n            case \"wheeldown\":\r\n            case \"wheelleft\":\r\n            case \"wheelright\":\r\n                this.target.wheelable = true;\r\n                break;\r\n            case \"over\":\r\n            case \"out\":\r\n                this.target.hoverable = true;\r\n                break;\r\n            case \"focus\":\r\n            case \"blur\":\r\n            case \"focusin\":\r\n            case \"focusout\":\r\n                this.target.focusable = true;\r\n                break;\r\n            case \"keydown\":\r\n                disposers.push(this._addDOMEvent(type, type, this._dispatchKeyboardEvent, this));\r\n                break;\r\n            case \"keyup\":\r\n                disposers.push(this._addDOMEvent(type, type, this._dispatchKeyboardEvent, this));\r\n                break;\r\n            case \"keypress\":\r\n                disposers.push(this._addDOMEvent(type, type, this._dispatchKeyboardEvent, this));\r\n                break;\r\n            case \"input\":\r\n                disposers.push(this._addDOMEvent(type, type, this._dispatchKeyboardEvent, this));\r\n                break;\r\n        }\r\n        info.disposer = new MultiDisposer(disposers);\r\n        return info;\r\n    };\r\n    return InteractionObjectEventDispatcher;\r\n}(TargetedEventDispatcher));\r\nexport { InteractionObjectEventDispatcher };\r\n//# sourceMappingURL=InteractionObjectEvents.js.map","/**\r\n * Mouse-related functionality\r\n */\r\n/**\r\n * Defines static methods that hold style list for various mouse cursor styles,\r\n * maintaining browser compatibility.\r\n */\r\nvar MouseCursorStyle = /** @class */ (function () {\r\n    function MouseCursorStyle() {\r\n    }\r\n    /**\r\n     * Styles for \"grab\" mouse cursor.\r\n     *\r\n     * @type {Array<IStyleProperty>}\r\n     */\r\n    MouseCursorStyle.grab = [{\r\n            \"property\": \"cursor\",\r\n            \"value\": \"move\"\r\n        }, {\r\n            \"property\": \"cursor\",\r\n            \"value\": \"grab\"\r\n        }, {\r\n            \"property\": \"cursor\",\r\n            \"value\": \"-moz-grab\"\r\n        }, {\r\n            \"property\": \"cursor\",\r\n            \"value\": \"-webkit-grab\"\r\n        }];\r\n    /**\r\n     * Styles for \"grabbing\" mouse cursor.\r\n     *\r\n     * @type {Array<IStyleProperty>}\r\n     */\r\n    MouseCursorStyle.grabbing = [{\r\n            \"property\": \"cursor\",\r\n            \"value\": \"move\"\r\n        }, {\r\n            \"property\": \"cursor\",\r\n            \"value\": \"grabbing\"\r\n        }, {\r\n            \"property\": \"cursor\",\r\n            \"value\": \"-moz-grabbing\"\r\n        }, {\r\n            \"property\": \"cursor\",\r\n            \"value\": \"-webkit-grabbing\"\r\n        }];\r\n    /**\r\n     * Styles for \"pointer\" mouse cursor. (usually used for links)\r\n     *\r\n     * @type {Array<IStyleProperty>}\r\n     */\r\n    MouseCursorStyle.pointer = [{\r\n            \"property\": \"cursor\",\r\n            \"value\": \"pointer\"\r\n        }];\r\n    /**\r\n     * Styles for default mouse cursor. (browser determines style)\r\n     *\r\n     * @type {Array<IStyleProperty>}\r\n     */\r\n    MouseCursorStyle.default = [{\r\n            \"property\": \"cursor\",\r\n            \"value\": \"default\"\r\n        }];\r\n    /**\r\n     * Styles for horizontal bi-directional resize mouse cursor.\r\n     *\r\n     * @type {Array<IStyleProperty>}\r\n     */\r\n    MouseCursorStyle.horizontalResize = [{\r\n            \"property\": \"cursor\",\r\n            \"value\": \"ew-resize\"\r\n        }];\r\n    /**\r\n     * Styles for vertical bi-directional mouse cursor.\r\n     *\r\n     * @type {Array<IStyleProperty>}\r\n     */\r\n    MouseCursorStyle.verticalResize = [{\r\n            \"property\": \"cursor\",\r\n            \"value\": \"ns-resize\"\r\n        }];\r\n    return MouseCursorStyle;\r\n}());\r\nexport { MouseCursorStyle };\r\n//# sourceMappingURL=Mouse.js.map","/**\r\n * [[AMElement]] represents any SVG element and related functionality.\r\n */\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $object from \"../utils/Object\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A base class for all SVG elements. Provides low-level DOM functionality.\r\n *\r\n * All visual elements extend this class.\r\n */\r\nvar AMElement = /** @class */ (function () {\r\n    /**\r\n     * Constructor creates a new element or uses the one that was passed in.\r\n     *\r\n     * @param {string | SVGSVGElement} element Element reference node type\r\n     */\r\n    function AMElement(element) {\r\n        /**\r\n         * Indicates if the element was already disposed.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        this._isDisposed = false;\r\n        /**\r\n         * Current X coordinate.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this._x = 0;\r\n        /**\r\n         * Current Y coordinate.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this._y = 0;\r\n        /**\r\n         * Current rotation.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this._rotation = 0;\r\n        /**\r\n         * Current scale.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this._scale = 1;\r\n        if (typeof element === \"string\") {\r\n            this.node = document.createElementNS($dom.SVGNS, element);\r\n        }\r\n        else {\r\n            this.node = element;\r\n        }\r\n    }\r\n    /**\r\n     * Removes element's node from DOM.\r\n     */\r\n    AMElement.prototype.removeNode = function () {\r\n        if (this.node) {\r\n            if (this.node.parentNode) {\r\n                this.node.parentNode.removeChild(this.node);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(AMElement.prototype, \"transformString\", {\r\n        /**\r\n         * Returns `transform` attribute of the element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {Optional<string>} Transform attribute value\r\n         */\r\n        get: function () {\r\n            if (this.node) {\r\n                return this._transformString;\r\n                /*\r\n                const value = this.node.getAttribute(\"transform\");\r\n    \r\n                if (value !== null) {\r\n                    return value;\r\n                }*/\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Appply position, rotation and scale properties via elemen's `transform`\r\n     * property\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AMElement.prototype.transform = function () {\r\n        var transfromString = \"translate(\" + this._x + \",\" + this._y + \")\";\r\n        if (this._scale != 1) {\r\n            transfromString += ((transfromString ? \" \" : \"\") + \"scale(\" + this._scale + \")\");\r\n        }\r\n        if (this._rotation != 0) {\r\n            transfromString += ((transfromString ? \" \" : \"\") + \"rotate(\" + this._rotation + \")\");\r\n        }\r\n        this._transformString = transfromString;\r\n        this.node.setAttribute(\"transform\", transfromString);\r\n    };\r\n    /**\r\n     * Returns bounding box of the element.\r\n     *\r\n     * ATTENTION: Bounding box calculations are extremely costly so should be\r\n     * used sparingly and cached whenever possible.\r\n     *\r\n     * @return {IRectangle} Bounding rectangle\r\n     */\r\n    AMElement.prototype.getBBox = function () {\r\n        var bbox = {\r\n            width: 0,\r\n            height: 0,\r\n            x: 0,\r\n            y: 0\r\n        };\r\n        if (this.node) {\r\n            // FF would fail if getBBox() is called without node added to parent\r\n            if (this.node.parentNode) {\r\n                try { // again for ff. TODO: check if this doesn't slow down\r\n                    var svgbbox = this.node.getBBox();\r\n                    bbox.x = svgbbox.x;\r\n                    bbox.y = svgbbox.y;\r\n                    bbox.width = svgbbox.width;\r\n                    bbox.height = svgbbox.height;\r\n                }\r\n                catch (err) {\r\n                }\r\n            }\r\n        }\r\n        return bbox;\r\n    };\r\n    /**\r\n     * Moves the element to new coordinates.\r\n     *\r\n     * @param {number}  x  Target X\r\n     * @param {number}  y  Target Y\r\n     */\r\n    AMElement.prototype.moveTo = function (point) {\r\n        if (point) {\r\n            var x = point.x;\r\n            var y = point.y;\r\n            if (this._x != x || this._y != y) {\r\n                this._x = x;\r\n                this._y = y;\r\n                this.transform();\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(AMElement.prototype, \"content\", {\r\n        /**\r\n         * Returns element's contents as SVG markup.\r\n         *\r\n         * @return {string} Contents\r\n         */\r\n        get: function () {\r\n            // @todo Do not use `innerHTML` as this is not reliable and will not work on all browsers\r\n            return this.node.innerHTML || \"\";\r\n        },\r\n        /**\r\n         * Element's SVG contents.\r\n         *\r\n         * @param {string} value Contents\r\n         */\r\n        set: function (value) {\r\n            // @todo Do not use `innerHTML` as this is not reliable and will not work on all browsers\r\n            this.node.innerHTML = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AMElement.prototype, \"textContent\", {\r\n        /**\r\n         * @return {string} Text contents\r\n         */\r\n        get: function () {\r\n            return this.node.textContent || \"\";\r\n        },\r\n        /**\r\n         * Text contents of the SVG element.\r\n         *\r\n         * @param {string} value Text contents\r\n         */\r\n        set: function (value) {\r\n            this.node.textContent = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AMElement.prototype, \"x\", {\r\n        /**\r\n         * @return {number} X coordinate (px)\r\n         */\r\n        get: function () {\r\n            return this._x;\r\n        },\r\n        /**\r\n         * Element's X position in pixels.\r\n         *\r\n         * @param {number}  value  X coordinate (px)\r\n         */\r\n        set: function (value) {\r\n            if (this._x != value) {\r\n                this._x = value;\r\n                this.transform();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AMElement.prototype, \"y\", {\r\n        /**\r\n         * @return {number} Y coordinate (px)\r\n         */\r\n        get: function () {\r\n            return this._y;\r\n        },\r\n        /**\r\n         * Element's Y position in pixels.\r\n         *\r\n         * @param {number} value Y coordinate (px)\r\n         */\r\n        set: function (value) {\r\n            if (this._y != value) {\r\n                this._y = value;\r\n                this.transform();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AMElement.prototype, \"rotation\", {\r\n        /**\r\n         * @return {number} Rotation\r\n         */\r\n        get: function () {\r\n            return this._rotation;\r\n        },\r\n        /**\r\n         * Element's rotation in degrees.\r\n         *\r\n         * @param {number} value Rotation\r\n         */\r\n        set: function (angle) {\r\n            if (this._rotation != angle) {\r\n                this._rotation = angle;\r\n                this.transform();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AMElement.prototype, \"scale\", {\r\n        /**\r\n         * @return {number} Scale\r\n         */\r\n        get: function () {\r\n            return this._scale;\r\n        },\r\n        /**\r\n         * Element's scale where 1 is original size.\r\n         *\r\n         * Setting to 0.5 will reduce element's size by 50%, 2 will make element\r\n         * twice as large, etc.\r\n         *\r\n         * @param {number} value Scale\r\n         */\r\n        set: function (value) {\r\n            if (this._scale != value) {\r\n                this._scale = value;\r\n                this.transform();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Removes an attribute from element.\r\n     *\r\n     * @param {string}  attribute  Attribute to remove\r\n     */\r\n    AMElement.prototype.removeAttr = function (attribute) {\r\n        this.node.removeAttribute(attribute);\r\n    };\r\n    /**\r\n     * Sets a set of attributes on a element.\r\n     *\r\n     * @param  {ISVGAttribute}  attributes  An object with attribute names (key) and values\r\n     * @return {AMElement}                  The same element\r\n     */\r\n    AMElement.prototype.attr = function (attributes) {\r\n        var _this = this;\r\n        $object.each(attributes, function (attributeName, attributeValue) {\r\n            if (!$type.hasValue(attributeValue)) {\r\n                _this.node.removeAttribute(attributeName);\r\n            }\r\n            else {\r\n                // this is for performance testing\r\n                //if(attributeValue == this.node.getAttribute(attributeName)){\r\n                //\tconsole.log(attributeName, attributeValue)\r\n                //}\r\n                _this.node.setAttribute(attributeName, attributeValue);\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns a value of a node attribute.\r\n     *\r\n     * @param  {string}         attribute  Attribute name\r\n     * @return {string | null}             Attribute value\r\n     */\r\n    AMElement.prototype.getAttr = function (attribute) {\r\n        return this.node.getAttribute(attribute);\r\n    };\r\n    /**\r\n     * Sets a single attribute of the element's node using namesspace.\r\n     *\r\n     * @param  {string}     ns         Namespace\r\n     * @param  {string}     attribute  Attribute\r\n     * @param  {string}     value      Value\r\n     * @return {AMElement}             The same element\r\n     */\r\n    AMElement.prototype.attrNS = function (ns, attribute, value) {\r\n        this.node.setAttributeNS(ns, attribute, value);\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns a namespaced attribute value from node.\r\n     *\r\n     * @param  {string}  ns         Namespace\r\n     * @param  {string}  attribute  Attribute\r\n     * @return {string}             Attribute value\r\n     */\r\n    AMElement.prototype.getAttrNS = function (ns, attribute) {\r\n        return this.node.getAttributeNS(ns, attribute);\r\n    };\r\n    /**\r\n     * Removes `style` attribute from node.\r\n     *\r\n     * @param {string}  attribute  Attribute to remove\r\n     */\r\n    AMElement.prototype.removeStyle = function (attribute) {\r\n        // @todo Review because it's a bit messy and maybe not needed (pratically not used)\r\n        delete this.node.style[attribute];\r\n    };\r\n    /**\r\n     * Returns style attribute value.\r\n     *\r\n     * @param  {string}  attribute  Style attribute value\r\n     * @return {string}             Attribute value\r\n     */\r\n    AMElement.prototype.getStyle = function (attribute) {\r\n        // @todo Review because it's a bit messy and maybe not needed (pratically not used)\r\n        return this.node.style[attribute];\r\n    };\r\n    /**\r\n     * Adds style attributes to element's node.\r\n     *\r\n     * @param  {Object}     attributes  Object containing attribute: value pairs\r\n     * @return {AMElement}              The same element\r\n     */\r\n    AMElement.prototype.addStyle = function (attributes) {\r\n        var _this = this;\r\n        // @todo Review because it's a bit messy and maybe not needed (pratically not used)\r\n        $object.each(attributes, function (attributeName, attributeValue) {\r\n            if (!$type.hasValue(attributeValue)) {\r\n                _this.removeStyle(attributeName);\r\n            }\r\n            else {\r\n                _this.node.style[attributeName] = attributeValue;\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * Adds a class to element.\r\n     *\r\n     * @param {string}  name  Class name\r\n     */\r\n    AMElement.prototype.addClass = function (name) {\r\n        $dom.addClass(this.node, name);\r\n    };\r\n    /**\r\n     * Removes a class from element.\r\n     *\r\n     * @param {string} name Class name\r\n     */\r\n    AMElement.prototype.removeClass = function (name) {\r\n        $dom.removeClass(this.node, name);\r\n    };\r\n    /**\r\n     * Sets a class name on element.\r\n     *\r\n     * @param {string}  name  Class name\r\n     */\r\n    AMElement.prototype.setClass = function (name) {\r\n        this.node.setAttribute(\"class\", name);\r\n    };\r\n    /**\r\n     * Removes all element's child nodes, basically leaving it empty.\r\n     */\r\n    AMElement.prototype.removeChildNodes = function () {\r\n        // remove all children\r\n        while (this.node.childNodes.length > 0) {\r\n            this.node.removeChild(this.node.firstChild);\r\n        }\r\n    };\r\n    /**\r\n     * Was this element already been disposed?\r\n     *\r\n     * @return {boolean} Disposed?\r\n     */\r\n    AMElement.prototype.isDisposed = function () {\r\n        return this._isDisposed;\r\n    };\r\n    /**\r\n     * Disposes element.\r\n     */\r\n    AMElement.prototype.dispose = function () {\r\n        this.removeNode();\r\n    };\r\n    return AMElement;\r\n}());\r\nexport { AMElement };\r\n//# sourceMappingURL=AMElement.js.map","import * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AMElement } from \"./AMElement\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates an SVG `<g>` element.\r\n *\r\n * SVG groups are used for elements that need more elements just one.\r\n *\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g} About `<g>` element\r\n */\r\nvar Group = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Group, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {string} elementName Element type (should be \"g\")\r\n     */\r\n    function Group(elementName) {\r\n        return _super.call(this, elementName) || this;\r\n    }\r\n    /**\r\n     * Adds an element to group.\r\n     *\r\n     * This will manipulate DOM. `element` will be physically moved into group.\r\n     *\r\n     * @param {AMElement}  element  Element\r\n     */\r\n    Group.prototype.add = function (element) {\r\n        if (element) {\r\n            this.node.appendChild(element.node);\r\n        }\r\n    };\r\n    /**\r\n     * Adds an element to group.\r\n     *\r\n     * This will manipulate DOM. `element` will be physically moved into group.\r\n     *\r\n     * @param {AMElement}  element  Element\r\n     */\r\n    Group.prototype.addToBack = function (element) {\r\n        if (element) {\r\n            var first = this.node.childNodes[0];\r\n            if (first) {\r\n                if (first != element.node) {\r\n                    this.node.insertBefore(element.node, first);\r\n                }\r\n            }\r\n            else {\r\n                this.node.appendChild(element.node);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Removes the `element` from group.\r\n     *\r\n     * Please note that this will not dispose the element itself, it will just\r\n     * remove it from the group.\r\n     *\r\n     * @param {AMElement}  element  Element\r\n     */\r\n    Group.prototype.removeElement = function (element) {\r\n        // todo: not sure about the speed, need to investigate, maybe it's faster to check if node is a child\r\n        if (element) {\r\n            try {\r\n                if (element.node && element.node.parentNode == this.node) {\r\n                    this.node.removeChild(element.node);\r\n                }\r\n            }\r\n            catch (err) {\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Checks if this group already has the child element added\r\n     *\r\n     * @param {AMElement}  element\r\n     * @return {boolean}\r\n     */\r\n    Group.prototype.hasChild = function (element) {\r\n        for (var i = 0; i < this.node.childNodes.length; i++) {\r\n            if (this.node.childNodes[i] == element.node) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    Object.defineProperty(Group.prototype, \"content\", {\r\n        /**\r\n         * @return {string} SVG markup\r\n         */\r\n        get: function () {\r\n            return this.node.innerHTML;\r\n        },\r\n        /**\r\n         * Content of the group element.\r\n         *\r\n         * Can be used to add a lot of proprietary SVG markup into group.\r\n         *\r\n         * @param {string}  value  SVG markup\r\n         */\r\n        set: function (value) {\r\n            this.node.innerHTML = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Removes all children from the group.\r\n     */\r\n    Group.prototype.removeChildren = function () {\r\n        if (this.node.childNodes) {\r\n            while (this.node.childNodes.length > 0) {\r\n                var childNode = this.node.firstChild;\r\n                if (childNode && childNode.parentNode) {\r\n                    childNode.parentNode.removeChild(childNode);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return Group;\r\n}(AMElement));\r\nexport { Group };\r\n//# sourceMappingURL=Group.js.map","/**\r\n * Paper class just like the white sheet of pressed fiber it draws its name\r\n * inspiration from is used as a starting point to start a drawing.\r\n *\r\n * Before we can start adding elements (drawing) we need to take out a new sheet\r\n * of paper, or in this instance create a blank SVG element.\r\n *\r\n * This class creates such element, as well as implements methods needed to\r\n * start adding elements to it.\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AMElement } from \"./AMElement\";\r\nimport { Group } from \"./Group\";\r\nimport { SVGContainer } from \"./SVGContainer\";\r\nimport * as $dom from \"../utils/DOM\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Paper class which when instantiated will create an SVG element as well as\r\n * some of the sub-elements like `<desc>`, `<defs>`.\r\n *\r\n * Use its methods like `addGroup` and `append` to add elements to the paper.\r\n */\r\nvar Paper = /** @class */ (function () {\r\n    /**\r\n     * Creates main `<svg>` container and related elements.\r\n     *\r\n     * @param {HTMLElement} container A reference to HTML element to create `<svg>` in\r\n     */\r\n    function Paper(container, id) {\r\n        // Store container reference\r\n        this.container = container;\r\n        this.id = id;\r\n        // Create SVG element\r\n        var svg = document.createElementNS($dom.SVGNS, \"svg\");\r\n        svg.setAttribute(\"version\", \"1.1\");\r\n        svg.setAttributeNS($dom.XMLNS, \"xmlns\", $dom.SVGNS);\r\n        svg.setAttributeNS($dom.XMLNS, \"xmlns:xlink\", $dom.XLINK);\r\n        svg.setAttribute(\"role\", \"group\");\r\n        this.container.appendChild(svg);\r\n        // Add description\r\n        var desc = document.createElementNS($dom.SVGNS, \"desc\");\r\n        desc.appendChild(document.createTextNode(\"JavaScript chart by amCharts\"));\r\n        svg.appendChild(desc);\r\n        // Add defs\r\n        this.defs = document.createElementNS($dom.SVGNS, \"defs\");\r\n        svg.appendChild(this.defs);\r\n        // Set width and height to fit container\r\n        svg.style.width = \"100%\";\r\n        svg.style.height = \"100%\";\r\n        svg.style.overflow = \"visible\";\r\n        // Store variable\r\n        this.svg = svg;\r\n    }\r\n    /**\r\n     * Creates and returns a new element. Does not attach it to Paper yet.\r\n     *\r\n     * @param  {SVGElementNames}  elementName  Element name\r\n     * @return {AMElement}                     New element\r\n     */\r\n    Paper.prototype.add = function (elementName) {\r\n        return new AMElement(elementName);\r\n    };\r\n    /**\r\n     * Creates and returns a new Group element. Does not attach it to Paper.\r\n     *\r\n     * @param  {SVGElementNames}  groupName  Element name\r\n     * @return {Group}                       New Group\r\n     */\r\n    Paper.prototype.addGroup = function (groupName) {\r\n        return new Group(groupName);\r\n    };\r\n    /**\r\n     * Appends an element to Paper.\r\n     *\r\n     * @param {AMElement} element Element to append\r\n     */\r\n    Paper.prototype.append = function (element) {\r\n        if (element) {\r\n            this.svg.appendChild(element.node);\r\n        }\r\n    };\r\n    /**\r\n     * Appends an element to `<defs>` block of the Paper.\r\n     *\r\n     * @param {AMElement}  element  Element\r\n     */\r\n    Paper.prototype.appendDef = function (element) {\r\n        if (element) {\r\n            this.defs.appendChild(element.node);\r\n        }\r\n    };\r\n    /**\r\n     * Creates and returns new `<foreignObject>` element. Does not append it to\r\n     * Paper.\r\n     *\r\n     * @return {AMElement} A foreignObject element\r\n     */\r\n    Paper.prototype.foreignObject = function () {\r\n        var element = new AMElement(\"foreignObject\");\r\n        //this.append(element);\r\n        return element;\r\n    };\r\n    /**\r\n     * Checks if browser supports `<foreignObject>` elements.\r\n     *\r\n     * @return {boolean} Supports `foreignObject`?\r\n     */\r\n    Paper.prototype.supportsForeignObject = function () {\r\n        return document.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#Extensibility\", \"1.1\");\r\n    };\r\n    return Paper;\r\n}());\r\nexport { Paper };\r\nvar ghostPaper = null;\r\n/**\r\n * A [[Paper]] instance to create elements, that are not yet ready to be\r\n * placed in visible DOM.\r\n *\r\n * @ignore Exclude from docs\r\n * @type {Paper}\r\n */\r\nexport function getGhostPaper() {\r\n    if (ghostPaper === null) {\r\n        // ghost is used to draw elements while real paper is not yet created or Sprite doesn't know parent yet\r\n        var ghostDiv = document.createElement(\"div\");\r\n        ghostDiv.hidden = true;\r\n        document.body.appendChild(ghostDiv);\r\n        var ghostSvgContainer = new SVGContainer(ghostDiv);\r\n        ghostPaper = new Paper(ghostSvgContainer.SVGContainer, \"ghost\");\r\n    }\r\n    return ghostPaper;\r\n}\r\n//# sourceMappingURL=Paper.js.map","/**\r\n * A collection of functions that deals with path calculations.\r\n */\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\nimport { getGhostPaper } from \"../rendering/Paper\";\r\n/**\r\n * ============================================================================\r\n * PATH FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Returns an SVG path from a number of points.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IPoint[]}  points  An array of line elbow points\r\n * @return {string}            SVG path\r\n */\r\nexport function polyline(points) {\r\n    var path = lineTo(points[0]);\r\n    var prevPoint = { x: 0, y: 0 };\r\n    for (var i = 0, len = points.length; i < len; i++) {\r\n        var point = points[i];\r\n        if ($math.getDistance(point, prevPoint) > 0.5) {\r\n            path += lineTo(point);\r\n            prevPoint = point;\r\n        }\r\n    }\r\n    return path;\r\n}\r\n/**\r\n * Returns a starting point of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IPoint}  point  Starting point\r\n * @return {string}         SVG path\r\n */\r\nexport function moveTo(point) {\r\n    return \" M\" + $math.round(point.x, 4) + \",\" + $math.round(point.y, 4) + \" \";\r\n}\r\n/**\r\n * Returns a line part of SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IPoint}  point  SVG path\r\n * @return {string}         SVG path\r\n */\r\nexport function lineTo(point) {\r\n    return \" L\" + $math.round(point.x, 4) + \",\" + $math.round(point.y, 4) + \" \";\r\n}\r\n/**\r\n * Returns a quadratic curve part of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IPoint}  point         End point of the curve\r\n * @param  {IPoint}  controlPoint  Control point\r\n * @return {string}                SVG path\r\n */\r\nexport function quadraticCurveTo(point, controlPoint) {\r\n    return \" Q\" + $math.round(controlPoint.x, 4)\r\n        + \",\" + $math.round(controlPoint.y, 4) + \" \" + $math.round(point.x, 4)\r\n        + \",\" + $math.round(point.y, 4);\r\n}\r\n/**\r\n * Returns a cubic curve part of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IPoint}  point          End point of the curve\r\n * @param  {IPoint}  controlPointA  Control point A\r\n * @param  {IPoint}  controlPointB  Control point B\r\n * @return {string}                 SVG path\r\n */\r\nexport function cubicCurveTo(point, controlPointA, controlPointB) {\r\n    return \" C\" + $math.round(controlPointA.x, 4)\r\n        + \",\" + $math.round(controlPointA.y, 4) + \" \" + $math.round(controlPointB.x, 4)\r\n        + \",\" + $math.round(controlPointB.y, 4) + \" \" + $math.round(point.x, 4)\r\n        + \",\" + $math.round(point.y, 4);\r\n}\r\n/**\r\n * Returns a terminator for an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @return {string} SVG path\r\n */\r\nexport function closePath() {\r\n    return \" Z\";\r\n}\r\n/**\r\n * Returns an arc part of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Better parameter descriptions\r\n * @param  {number}  startAngle  Starting angle\r\n * @param  {number}  arc         Arc\r\n * @param  {number}  radius      Radius\r\n * @param  {number}  radiusY     Vertical radius\r\n * @return {string}              SVG path\r\n */\r\nexport function arcTo(startAngle, arc, radius, radiusY) {\r\n    if (arc == 0) {\r\n        return \"\";\r\n    }\r\n    if (!$type.isNumber(radiusY)) {\r\n        radiusY = radius;\r\n    }\r\n    var path = \"\";\r\n    var c = \",\";\r\n    var segments = Math.ceil(Math.abs(arc) / 180);\r\n    var l = 1;\r\n    if (arc < 0) {\r\n        l = 0;\r\n    }\r\n    // previous, as we use a not A\r\n    var pax = 0;\r\n    var pay = 0;\r\n    // center\r\n    var cx = -$math.cos(startAngle) * radius;\r\n    var cy = -$math.sin(startAngle) * radiusY;\r\n    // foir very short angles and big radius, solves artefacts\r\n    if (arc < 0.5 && radius > 3000) {\r\n        var endAngle = startAngle + arc;\r\n        var ax = $math.round($math.cos(endAngle) * radius, 4);\r\n        var ay = $math.round($math.sin(endAngle) * radiusY, 4);\r\n        return lineTo({ x: ax, y: ay });\r\n    }\r\n    for (var i = 0; i < segments; i++) {\r\n        var endAngle = startAngle + arc / segments * (i + 1);\r\n        var ax = $math.round($math.cos(endAngle) * radius + cx - pax, 4);\r\n        var ay = $math.round($math.sin(endAngle) * radiusY + cy - pay, 4);\r\n        path += \" a\" + radius + c + radiusY + c + 0 + c + 0 + c + l + c + ax + c + ay;\r\n        pax = ax;\r\n        pay = ay;\r\n    }\r\n    return path;\r\n}\r\n/**\r\n * Creates an arc path.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {number}  startAngle         [description]\r\n * @param  {number}  arc                [description]\r\n * @param  {number}  radius             [description]\r\n * @param  {number}  innerRadius        [description]\r\n * @param  {number}  radiusY            [description]\r\n * @param  {number}  cornerRadius       [description]\r\n * @param  {number}  innerCornerRadius  [description]\r\n * @return {string}                     SVG path\r\n */\r\nexport function arc(startAngle, arc, radius, innerRadius, radiusY, cornerRadius, innerCornerRadius) {\r\n    if (arc == 0) {\r\n        return \"\";\r\n    }\r\n    if (!$type.isNumber(innerRadius)) {\r\n        innerRadius = 0;\r\n    }\r\n    if (radius == 0 && innerRadius <= 0) {\r\n        return \"\";\r\n    }\r\n    if (radius < innerRadius) {\r\n        var temp = radius;\r\n        radius = innerRadius;\r\n        innerRadius = temp;\r\n        if ($type.isNumber(radiusY)) {\r\n            radiusY = radiusY / innerRadius * radius;\r\n        }\r\n    }\r\n    arc = $math.min(arc, 360);\r\n    if (arc == 360) {\r\n        cornerRadius = 0;\r\n        innerCornerRadius = 0;\r\n    }\r\n    var endAngle = startAngle + arc;\r\n    var crSin = $math.sin($math.min(arc, 45) / 2);\r\n    radiusY = $type.isNumber(radiusY) ? radiusY : radius;\r\n    cornerRadius = cornerRadius || 0;\r\n    innerCornerRadius = $type.isNumber(innerCornerRadius) ? innerCornerRadius : cornerRadius;\r\n    var innerRadiusY = (radiusY / radius) * innerRadius;\r\n    var cornerRadiusY = (radiusY / radius) * cornerRadius;\r\n    var innerCornerRadiusY = (radiusY / radius) * innerCornerRadius;\r\n    cornerRadius = $math.fitToRange(cornerRadius, 0, (radius - innerRadius) / 2);\r\n    cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\r\n    innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, (radius - innerRadius) / 2);\r\n    innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\r\n    cornerRadius = $math.round($math.fitToRange(cornerRadius, 0, radius * crSin), 4);\r\n    cornerRadiusY = $math.round($math.fitToRange(cornerRadiusY, 0, radiusY * crSin), 4);\r\n    innerCornerRadius = $math.round($math.fitToRange(innerCornerRadius, 0, innerRadius * crSin), 4);\r\n    innerCornerRadiusY = $math.round($math.fitToRange(innerCornerRadiusY, 0, innerRadiusY * crSin), 4);\r\n    var crAngle = Math.asin(cornerRadius / radius / 2) * $math.DEGREES * 2;\r\n    var crAngleY = Math.asin(cornerRadiusY / radiusY / 2) * $math.DEGREES * 2;\r\n    if (innerRadius < innerCornerRadius) {\r\n        innerRadius = innerCornerRadius;\r\n    }\r\n    if (innerRadiusY < innerCornerRadiusY) {\r\n        innerRadiusY = innerCornerRadiusY;\r\n    }\r\n    var crInnerAngle = Math.asin(innerCornerRadius / innerRadius / 2) * $math.DEGREES * 2;\r\n    var crInnerAngleY = Math.asin(innerCornerRadiusY / innerRadiusY / 2) * $math.DEGREES * 2;\r\n    if (!$type.isNumber(crInnerAngle)) {\r\n        crInnerAngle = 0;\r\n    }\r\n    if (!$type.isNumber(crInnerAngleY)) {\r\n        crInnerAngleY = 0;\r\n    }\r\n    var middleAngle = startAngle + arc / 2;\r\n    var mPoint = { x: $math.round($math.cos(middleAngle) * innerRadius, 4), y: $math.sin(middleAngle) * innerRadiusY };\r\n    var a0 = { x: $math.cos(startAngle) * (innerRadius + innerCornerRadius), y: $math.sin(startAngle) * (innerRadiusY + innerCornerRadiusY) };\r\n    var b0 = { x: $math.cos(startAngle) * (radius - cornerRadius), y: $math.sin(startAngle) * (radiusY - cornerRadiusY) };\r\n    var c0 = { x: $math.cos(endAngle) * (radius - cornerRadius), y: $math.sin(endAngle) * (radiusY - cornerRadiusY) };\r\n    var d0 = { x: $math.cos(endAngle) * (innerRadius + innerCornerRadius), y: $math.sin(endAngle) * (innerRadiusY + innerCornerRadiusY) };\r\n    var b1 = { x: $math.cos(startAngle + crAngle) * radius, y: $math.sin(startAngle + crAngleY) * radiusY };\r\n    var d1 = { x: $math.cos(endAngle - crInnerAngle) * innerRadius, y: $math.sin(endAngle - crInnerAngleY) * innerRadiusY };\r\n    // some magic math\r\n    innerCornerRadius += innerCornerRadius * $math.sin(crInnerAngle / 2);\r\n    innerCornerRadiusY += innerCornerRadiusY * $math.sin(crInnerAngleY / 2);\r\n    if (crInnerAngle > (endAngle - startAngle) / 2) {\r\n        d1 = mPoint;\r\n    }\r\n    var path = \"\";\r\n    // start from b if this is full circle\r\n    if (arc == 360) {\r\n        path = moveTo(b0);\r\n    }\r\n    // otherwise start from a\r\n    else {\r\n        path = moveTo(a0);\r\n        path += lineTo(b0);\r\n        path += arcToPoint(b1, cornerRadius, cornerRadiusY, true);\r\n    }\r\n    // draw arc\r\n    path += arcTo(startAngle + crAngle, arc - 2 * crAngle, radius, radiusY);\r\n    // draw inner arc\r\n    if ($type.isNumber(innerRadius) && innerRadius != 0) {\r\n        // move to B if this is full circle\r\n        if (arc == 360 && cornerRadius == 0) {\r\n            path += moveTo(d0);\r\n        }\r\n        // draw line otherwise\r\n        else {\r\n            path += arcToPoint(c0, cornerRadius, cornerRadiusY, true);\r\n            path += lineTo(d0);\r\n            path += arcToPoint(d1, innerCornerRadius, innerCornerRadiusY, true);\r\n        }\r\n        path += arcTo(endAngle - crInnerAngle, -(arc - 2 * crInnerAngle), innerRadius, innerRadiusY);\r\n        if (arc < 360 || cornerRadius > 0) {\r\n            path += arcToPoint(a0, innerCornerRadius, innerCornerRadiusY, true);\r\n        }\r\n        path += lineTo(a0);\r\n    }\r\n    else {\r\n        path += arcToPoint(c0, cornerRadius, cornerRadiusY, true);\r\n        if (arc < 360) {\r\n            path += lineTo(a0);\r\n        }\r\n    }\r\n    return path;\r\n}\r\n/**\r\n * Creates a path for an arc to specific coordinate.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {IPoint}  point         Reference point\r\n * @param  {number}  radius        Radius\r\n * @param  {number}  radiusY       Vertical radius (for skewed arcs)\r\n * @param  {boolean} sweepFlag     [description]\r\n * @param  {boolean} largeArcFlag  [description]\r\n * @param  {number}  xAxisRotation [description]\r\n * @return {string}                Arc path\r\n */\r\nexport function arcToPoint(point, radius, radiusY, sweepFlag, largeArcFlag, xAxisRotation) {\r\n    if (radius == 0) {\r\n        return \"\";\r\n    }\r\n    xAxisRotation = xAxisRotation || 0;\r\n    largeArcFlag = Boolean(largeArcFlag);\r\n    sweepFlag = Boolean(sweepFlag);\r\n    var c = \",\";\r\n    var sweepFlagValue = +sweepFlag; // converts to 1 or 0\r\n    var largeArcFlagValue = +largeArcFlag; // converts to 1 or 0\r\n    return \" A\" + radius + c + radiusY + c + xAxisRotation + c + largeArcFlagValue + c + sweepFlagValue + c + $math.round(point.x, 4) + c + $math.round(point.y, 4);\r\n}\r\n/**\r\n * Creates a new rectangle.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {number}  width   Width (px)\r\n * @param  {number}  height  Height (px)\r\n * @param  {number}  x       X position\r\n * @param  {number}  y       Y position\r\n * @return {string}          Rectangle\r\n */\r\nexport function rectangle(width, height, x, y) {\r\n    if (!$type.isNumber(x)) {\r\n        x = 0;\r\n    }\r\n    if (!$type.isNumber(y)) {\r\n        y = 0;\r\n    }\r\n    return moveTo({ x: x, y: y }) + lineTo({ x: x + width, y: y }) + lineTo({ x: x + width, y: y + height }) + lineTo({ x: x, y: y + height }) + closePath();\r\n}\r\n/**\r\n * Converts a rectangle to an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IRectangle}  rect  Rectangle\r\n * @param  {boolean}     ccw   Counter-clockwise?\r\n * @return {string}            SVG path\r\n */\r\nexport function rectToPath(rect, ccw) {\r\n    var c = \",\";\r\n    var L = \" L\";\r\n    if (ccw) {\r\n        return \"M\" + rect.x\r\n            + c + rect.y + L + rect.x\r\n            + c + (rect.y + rect.height) + L + (rect.x + rect.width)\r\n            + c + (rect.y + rect.height) + L + (rect.x + rect.width)\r\n            + c + rect.y + L + rect.x\r\n            + c + rect.y;\r\n    }\r\n    else {\r\n        return \"M\" + rect.x\r\n            + c + rect.y + L + (rect.x + rect.width)\r\n            + c + rect.y + L + (rect.x + rect.width)\r\n            + c + (rect.y + rect.height) + L + rect.x\r\n            + c + (rect.y + rect.height) + L + rect.x\r\n            + c + rect.y;\r\n    }\r\n}\r\n/**\r\n * Converts SVG path to array of points.\r\n *\r\n * Note, this is experimental feature based on method which is deprecated\r\n * on some browsers and some browsers do not support it at all.\r\n *\r\n * You can save the output of this function, but not rely on it completely.\r\n */\r\nexport function pathToPoints(path, pointCount) {\r\n    var paper = getGhostPaper();\r\n    var svgPath = paper.add(\"path\").node;\r\n    svgPath.setAttribute(\"d\", path);\r\n    if (svgPath.getPointAtLength && svgPath.getTotalLength) {\r\n        var length_1 = svgPath.getTotalLength();\r\n        var toPoints = [];\r\n        for (var i = 0; i < pointCount; i++) {\r\n            var point = svgPath.getPointAtLength(i / pointCount * length_1);\r\n            toPoints.push({ x: point.x, y: point.y });\r\n        }\r\n        return toPoints;\r\n    }\r\n    svgPath.remove();\r\n}\r\n//# sourceMappingURL=Path.js.map","/**\r\n * This functionality is related to the HTML wrapper that houses `<svg>` tag.\r\n */\r\nimport { Disposer } from \"../utils/Disposer\";\r\nimport { Popup } from \"../elements/Popup\";\r\nimport { Modal } from \"../elements/Modal\";\r\nimport { ListTemplate, ListDisposer } from \"../utils/List\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $array from \"../utils/Array\";\r\nimport * as $type from \"../utils/Type\";\r\nimport ResizeSensor from \"css-element-queries/src/ResizeSensor\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A array of all SVG Containers (one SVG container per chart instance).\r\n *\r\n * @ignore Exclude from docs\r\n * @type {Array<SVGContainer>}\r\n */\r\nexport var svgContainers = [];\r\n/**\r\n * A class used to create an HTML wrapper for the SVG contents.\r\n */\r\nvar SVGContainer = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     *\r\n     * * Creates an HTML wrapper for SVG\r\n     */\r\n    function SVGContainer(htmlElement) {\r\n        var _this = this;\r\n        /**\r\n         * Indicates if this object has already been deleted. Any\r\n         * destruction/disposal code should take this into account when deciding\r\n         * wheter to run potentially costly disposal operations if they already have\r\n         * been run.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        this._disposed = false;\r\n        /**\r\n         * If this component is in a separate HTML container, `autoResize` means the\r\n         * module will constantly measure container's size and adopt contents to it.\r\n         *\r\n         * @type {Boolean}\r\n         */\r\n        this.autoResize = true;\r\n        /**\r\n         * Holds list of references to [[Sprite]] objects that should not be exported\r\n         * when exporting chart to an image.\r\n         *\r\n         * @ignore\r\n         * @type {Sprite[]}\r\n         */\r\n        this.nonExportableSprites = [];\r\n        /**\r\n         * List of objects that need to be disposed when this one is disposed.\r\n         *\r\n         * @type {Disposer[]}\r\n         */\r\n        this._disposers = [];\r\n        this.cssScale = 1;\r\n        // Log parent HTML element\r\n        this.htmlElement = htmlElement;\r\n        var callback = function () { _this.measure(); };\r\n        this.resizeSensor = new ResizeSensor(htmlElement, callback);\r\n        this._disposers.push(new Disposer(function () {\r\n            _this.resizeSensor.detach(callback);\r\n        }));\r\n        // Adds to containers array\r\n        svgContainers.push(this);\r\n        /**\r\n         * Create child div for the container - it will have svg node\r\n         * It might seem that this container is not necessay, however having it solves\r\n         * a problems with mouse position detection and some other.\r\n         */\r\n        var svgContainer = document.createElement(\"div\");\r\n        var style = svgContainer.style;\r\n        style.width = \"100%\";\r\n        style.height = \"100%\";\r\n        style.position = \"relative\";\r\n        htmlElement.appendChild(svgContainer);\r\n        this.SVGContainer = svgContainer;\r\n    }\r\n    /**\r\n     * Measures size of parent HTML element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    SVGContainer.prototype.measure = function () {\r\n        var width = $utils.width(this.htmlElement);\r\n        var height = $utils.height(this.htmlElement);\r\n        var container = this.container;\r\n        if (container) {\r\n            if (this.width != width || this.height != height) {\r\n                this.width = width;\r\n                this.height = height;\r\n                if (width > 0) {\r\n                    container.maxWidth = width;\r\n                }\r\n                if (height > 0) {\r\n                    container.maxHeight = height;\r\n                }\r\n                $dom.fixPixelPerfect(this.SVGContainer);\r\n            }\r\n            if (!container.maxWidth) {\r\n                container.maxWidth = 0;\r\n            }\r\n            if (!container.maxHeight) {\r\n                container.maxHeight = 0;\r\n            }\r\n            this.cssScale = 1;\r\n            this.checkTransform(this.htmlElement);\r\n        }\r\n    };\r\n    Object.defineProperty(SVGContainer.prototype, \"container\", {\r\n        /**\r\n         * @return {Optional<Container>} Container\r\n         */\r\n        get: function () {\r\n            return this._container;\r\n        },\r\n        /**\r\n         * A [[Container]] element which is placed into container.\r\n         *\r\n         * @param {Optional<Container>}  container  Container\r\n         */\r\n        set: function (container) {\r\n            this._container = container;\r\n            this.measure();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns if this object has been already been disposed.\r\n     *\r\n     * @return {boolean} Is disposed?\r\n     */\r\n    SVGContainer.prototype.isDisposed = function () {\r\n        return this._disposed;\r\n    };\r\n    /**\r\n     * Removes this container from SVG container list in system, which\r\n     * effectively disables size change monitoring for it.\r\n     */\r\n    SVGContainer.prototype.dispose = function () {\r\n        if (!this._disposed) {\r\n            $array.remove(svgContainers, this);\r\n        }\r\n        $array.each(this._disposers, function (item) {\r\n            item.dispose();\r\n        });\r\n    };\r\n    Object.defineProperty(SVGContainer.prototype, \"hideOverflow\", {\r\n        /**\r\n         * Indicates if chart container should have its style set\r\n         * to `overflow: hidden`.\r\n         *\r\n         * Normally, we don't want that, so that certain elements, such as tooltips,\r\n         * would be able to go outside chart area.\r\n         *\r\n         * There is one issue though. Some browsers ignore SVG masks and would\r\n         * display scrollbars if chart elements, that go outside chart area extend\r\n         * outside window.\r\n         *\r\n         * This is especially true for [[MapChart]], which can have its elements\r\n         * extend very widely when zoomed in. Even if those parts are not visible\r\n         * because of SVG masks, some browsers might still display window scrollbars.\r\n         *\r\n         * This is why we set this setting to `true` in [[MapChart]].\r\n         *\r\n         * Other charts use default of `false`.\r\n         */\r\n        set: function (value) {\r\n            if (value) {\r\n                this.SVGContainer.style.overflow = \"hidden\";\r\n            }\r\n            else {\r\n                this.SVGContainer.style.overflow = \"\";\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SVGContainer.prototype, \"modal\", {\r\n        /**\r\n         * ==========================================================================\r\n         * MODAL/POPUP RELATED STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns a [[Modal]] instance, associated with this chart.\r\n         * (elements top parent)\r\n         *\r\n         * Accessing modal does not make it appear. To make a modal appear, use\r\n         * `showModal()` method.\r\n         *\r\n         * @see {@link Modal} for more information about using Modal windows\r\n         * @return {Modal} Modal instance\r\n         */\r\n        get: function () {\r\n            if (!$type.hasValue(this._modal)) {\r\n                // Create new modal\r\n                this._modal = new Modal();\r\n                this._modal.container = this.SVGContainer;\r\n                // Add to disposers\r\n                this._disposers.push(this._modal);\r\n            }\r\n            return this._modal;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Opens a modal window with specific content (`text` parameter) and,\r\n     * optionally, `title`.\r\n     *\r\n     * The `text` parameter can contain HTML content.\r\n     *\r\n     * @see {@link Modal} for more information about using Modal windows\r\n     * @param {string}  text   Modal contents\r\n     * @param {string}  title  Title for the modal window\r\n     */\r\n    SVGContainer.prototype.openModal = function (text, title) {\r\n        // Hide previous modal\r\n        this.closeModal();\r\n        // Create modal\r\n        var modal = this.modal;\r\n        modal.content = text;\r\n        modal.readerTitle = title;\r\n        modal.open();\r\n        return modal;\r\n    };\r\n    /**\r\n     * Hides modal window if there is one currently open.\r\n     */\r\n    SVGContainer.prototype.closeModal = function () {\r\n        if (this._modal) {\r\n            this.modal.close();\r\n        }\r\n    };\r\n    Object.defineProperty(SVGContainer.prototype, \"popups\", {\r\n        /**\r\n         * A list of popups for this chart.\r\n         *\r\n         * @return {ListTemplate<Popup>} Popups\r\n         */\r\n        get: function () {\r\n            if (!$type.hasValue(this._popups)) {\r\n                // Create popup template\r\n                var popupTemplate = new Popup();\r\n                popupTemplate.container = this.SVGContainer;\r\n                // Create the list\r\n                this._popups = new ListTemplate(popupTemplate);\r\n                // Add to disposers\r\n                this._disposers.push(new ListDisposer(this._popups));\r\n                this._disposers.push(this._popups.template);\r\n            }\r\n            return this._popups;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates, opens, and returns a new [[Popup]] window.\r\n     *\r\n     * `text` can be any valid HTML.\r\n     *\r\n     * `title` is currently not supported.\r\n     *\r\n     * @param  {string}  text   Popup contents\r\n     * @param  {string}  title  Popup title\r\n     * @return {Popup}          Popup instance\r\n     */\r\n    SVGContainer.prototype.openPopup = function (text, title) {\r\n        var popup = this.popups.create();\r\n        popup.content = text;\r\n        if ($type.hasValue(title)) {\r\n            popup.title = title;\r\n        }\r\n        popup.open();\r\n        return popup;\r\n    };\r\n    /**\r\n     * Closes all currently open popup windows\r\n     */\r\n    SVGContainer.prototype.closeAllPopups = function () {\r\n        this.popups.each(function (popup) {\r\n            popup.close();\r\n        });\r\n    };\r\n    SVGContainer.prototype.checkTransform = function (div) {\r\n        if (window.getComputedStyle) {\r\n            if (div && div.style) {\r\n                var style = window.getComputedStyle(div, null);\r\n                if (style) {\r\n                    var matrix = style.getPropertyValue(\"-webkit-transform\") ||\r\n                        style.getPropertyValue(\"-moz-transform\") ||\r\n                        style.getPropertyValue(\"-ms-transform\") ||\r\n                        style.getPropertyValue(\"-o-transform\") ||\r\n                        style.getPropertyValue(\"transform\");\r\n                    if (matrix && matrix !== \"none\") {\r\n                        var values = matrix.split('(')[1].split(')')[0].split(',');\r\n                        var a = Number(values[0]);\r\n                        var b = Number(values[1]);\r\n                        var scale = Math.sqrt(a * a + b * b);\r\n                        if (!isNaN(scale)) {\r\n                            this.cssScale *= scale;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (div.parentNode && div.parentNode instanceof HTMLElement) {\r\n                this.checkTransform(div.parentNode);\r\n            }\r\n        }\r\n    };\r\n    return SVGContainer;\r\n}());\r\nexport { SVGContainer };\r\n//# sourceMappingURL=SVGContainer.js.map","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"./Path\";\r\nimport * as $array from \"../utils/Array\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $math from \"../utils/Math\";\r\n/**\r\n * [sign description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @todo Move this someplace else\r\n * @param {number} x [description]\r\n */\r\nfunction sign(x) {\r\n    return x < 0 ? -1 : 1;\r\n}\r\n/**\r\n * [slope2 description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {number} x0 [description]\r\n * @param  {number} x1 [description]\r\n * @param  {number} y0 [description]\r\n * @param  {number} y1 [description]\r\n * @param  {number} t  [description]\r\n * @return {number}    [description]\r\n */\r\nfunction slope2(x0, x1, y0, y1, t) {\r\n    var h = x1 - x0;\r\n    return h ? (3 * (y1 - y0) / h - t) / 2 : t;\r\n}\r\n/**\r\n * [slope3 description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {number} x0 [description]\r\n * @param  {number} x1 [description]\r\n * @param  {number} y0 [description]\r\n * @param  {number} y1 [description]\r\n * @param  {number} x2 [description]\r\n * @param  {number} y2 [description]\r\n * @return {number}    [description]\r\n */\r\nfunction slope3(x0, x1, y0, y1, x2, y2) {\r\n    var h0 = x1 - x0;\r\n    var h1 = x2 - x1;\r\n    var s0 = (y1 - y0) / (h0 || h1 < 0 && -0);\r\n    var s1 = (y2 - y1) / (h1 || h0 < 0 && -0);\r\n    var p = (s0 * h1 + s1 * h0) / (h0 + h1);\r\n    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\r\n}\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nvar Tension = /** @class */ (function () {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {number} tensionX [description]\r\n     * @param {number} tensionY [description]\r\n     */\r\n    function Tension(tensionX, tensionY) {\r\n        this._tensionX = tensionX;\r\n        this._tensionY = tensionY;\r\n    }\r\n    /**\r\n     * [smooth description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param  {Array<IPoint>}  points  [description]\r\n     * @return {string}                 [description]\r\n     */\r\n    Tension.prototype.smooth = function (points) {\r\n        var tensionX = this._tensionX;\r\n        var tensionY = this._tensionY;\r\n        if (points.length < 3 || (tensionX >= 1 && tensionY >= 1)) {\r\n            return $path.polyline(points);\r\n        }\r\n        var first = points[0];\r\n        var last = points[points.length - 1];\r\n        var closed = false;\r\n        if ($math.round(first.x, 3) == $math.round(last.x) && $math.round(first.y) == $math.round(last.y)) {\r\n            closed = true;\r\n        }\r\n        // Can't moveTo here, as it wont be possible to have fill then.\r\n        var path = \"\";\r\n        for (var i = 0, len = points.length - 1; i < len; i++) {\r\n            var p0 = points[i - 1];\r\n            var p1 = points[i];\r\n            var p2 = points[i + 1];\r\n            var p3 = points[i + 2];\r\n            if (i === 0) {\r\n                if (closed) {\r\n                    p0 = points[points.length - 2];\r\n                }\r\n                else {\r\n                    p0 = points[i];\r\n                }\r\n            }\r\n            else if (i == points.length - 2) {\r\n                if (closed) {\r\n                    p3 = points[1];\r\n                }\r\n                else {\r\n                    p3 = points[i + 1];\r\n                }\r\n            }\r\n            var controlPointA = $math.getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY);\r\n            var controlPointB = $math.getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY);\r\n            path += $path.cubicCurveTo(p2, controlPointA, controlPointB);\r\n        }\r\n        return path;\r\n    };\r\n    return Tension;\r\n}());\r\nexport { Tension };\r\n/**\r\n * Returns a waved line SVG path between two points.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {IPoint}   point1            Starting point\r\n * @param  {IPoint}   point2            Ending point\r\n * @param  {number}   waveLength        Wave length\r\n * @param  {number}   waveHeight        Wave height\r\n * @param  {boolean}  adjustWaveLength  Adjust wave length based on the actual line length\r\n * @return {string}                     SVG path\r\n */\r\nexport function wavedLine(point1, point2, waveLength, waveHeight, tension, adjustWaveLength) {\r\n    var x1 = point1.x;\r\n    var y1 = point1.y;\r\n    var x2 = point2.x;\r\n    var y2 = point2.y;\r\n    var distance = $math.getDistance(point1, point2);\r\n    if (adjustWaveLength) {\r\n        waveLength = distance / Math.round(distance / waveLength);\r\n    }\r\n    var d = registry.getCache($utils.stringify([\"wavedLine\", point1.x, point2.x, point1.y, point2.y, waveLength, waveHeight]));\r\n    if (!d) {\r\n        if (distance > 0) {\r\n            var angle = Math.atan2(y2 - y1, x2 - x1);\r\n            var cos = Math.cos(angle);\r\n            var sin = Math.sin(angle);\r\n            var waveLengthX = waveLength * cos;\r\n            var waveLengthY = waveLength * sin;\r\n            if (waveLength <= 1 || waveHeight <= 1) {\r\n                d = $path.lineTo(point2);\r\n            }\r\n            else {\r\n                var halfWaveCount = Math.round(2 * distance / waveLength);\r\n                var points = [];\r\n                var sign_1 = 1;\r\n                if (x2 < x1) {\r\n                    sign_1 *= -1;\r\n                }\r\n                if (y2 < y1) {\r\n                    sign_1 *= -1;\r\n                }\r\n                for (var i = 0; i <= halfWaveCount; i++) {\r\n                    sign_1 *= -1;\r\n                    var x = x1 + i * waveLengthX / 2 + sign_1 * waveHeight / 2 * sin;\r\n                    var y = y1 + i * waveLengthY / 2 - sign_1 * waveHeight / 2 * cos;\r\n                    points.push({ x: x, y: y });\r\n                }\r\n                d = new Tension(tension, tension).smooth(points);\r\n            }\r\n        }\r\n        else {\r\n            d = \"\";\r\n        }\r\n        registry.setCache($utils.stringify([\"wavedLine\", point1.x, point2.x, point1.y, point2.y, waveLength, waveHeight]), d);\r\n    }\r\n    return d;\r\n}\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nvar Basis = /** @class */ (function () {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {object}  info  [description]\r\n     */\r\n    function Basis(info) {\r\n        this._closed = info.closed;\r\n    }\r\n    /**\r\n     * [smooth description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param  {Array<IPoint>}  points  [description]\r\n     * @return {string}                 [description]\r\n     */\r\n    Basis.prototype.smooth = function (points) {\r\n        var _this = this;\r\n        var x0 = NaN;\r\n        var x1 = NaN;\r\n        var x2 = NaN;\r\n        var x3 = NaN;\r\n        var x4 = NaN;\r\n        var y0 = NaN;\r\n        var y1 = NaN;\r\n        var y2 = NaN;\r\n        var y3 = NaN;\r\n        var y4 = NaN;\r\n        var point = 0;\r\n        var output = \"\";\r\n        var pushCurve = function (x, y) {\r\n            output += $path.cubicCurveTo({\r\n                x: (x0 + 4 * x1 + x) / 6,\r\n                y: (y0 + 4 * y1 + y) / 6\r\n            }, {\r\n                x: (2 * x0 + x1) / 3,\r\n                y: (2 * y0 + y1) / 3\r\n            }, {\r\n                x: (x0 + 2 * x1) / 3,\r\n                y: (y0 + 2 * y1) / 3\r\n            });\r\n        };\r\n        var pushPoint = function (_a) {\r\n            var x = _a.x, y = _a.y;\r\n            switch (point) {\r\n                case 0:\r\n                    point = 1;\r\n                    if (_this._closed) {\r\n                        x2 = x;\r\n                        y2 = y;\r\n                    }\r\n                    else {\r\n                        output += $path.lineTo({ x: x, y: y });\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    point = 2;\r\n                    if (_this._closed) {\r\n                        x3 = x;\r\n                        y3 = y;\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    point = 3;\r\n                    if (_this._closed) {\r\n                        x4 = x;\r\n                        y4 = y;\r\n                        output += $path.moveTo({ x: (x0 + 4 * x1 + x) / 6, y: (y0 + 4 * y1 + y) / 6 });\r\n                        break;\r\n                    }\r\n                    else {\r\n                        output += $path.lineTo({ x: (5 * x0 + x1) / 6, y: (5 * y0 + y1) / 6 });\r\n                        // fall-through\r\n                    }\r\n                default:\r\n                    pushCurve(x, y);\r\n                    break;\r\n            }\r\n            x0 = x1;\r\n            x1 = x;\r\n            y0 = y1;\r\n            y1 = y;\r\n        };\r\n        $array.each(points, pushPoint);\r\n        if (this._closed) {\r\n            switch (point) {\r\n                case 1:\r\n                    output += $path.moveTo({ x: x2, y: y2 });\r\n                    output += $path.closePath();\r\n                    break;\r\n                case 2:\r\n                    output += $path.moveTo({ x: (x2 + 2 * x3) / 3, y: (y2 + 2 * y3) / 3 });\r\n                    output += $path.lineTo({ x: (x3 + 2 * x2) / 3, y: (y3 + 2 * y2) / 3 });\r\n                    output += $path.closePath();\r\n                    break;\r\n                case 3:\r\n                    pushPoint({ x: x2, y: y2 });\r\n                    pushPoint({ x: x3, y: y3 });\r\n                    pushPoint({ x: x4, y: y4 });\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            switch (point) {\r\n                case 3:\r\n                    pushCurve(x1, y1);\r\n                // fall-through\r\n                case 2:\r\n                    output += $path.lineTo({ x: x1, y: y1 });\r\n                    break;\r\n            }\r\n            output += $path.closePath();\r\n        }\r\n        return output;\r\n    };\r\n    return Basis;\r\n}());\r\nexport { Basis };\r\n//# sourceMappingURL=Smoothing.js.map","import * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../../Base\";\r\nimport { registry } from \"../../Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A base class for color modifiers.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nvar ColorModifier = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ColorModifier, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ColorModifier() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ColorModifier\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Modifies color value.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {Color}  value  Original color\r\n     * @return {Color}         Modified\r\n     */\r\n    ColorModifier.prototype.modify = function (value) {\r\n        return value;\r\n    };\r\n    return ColorModifier;\r\n}(BaseObject));\r\nexport { ColorModifier };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColorModifier\"] = ColorModifier;\r\n//# sourceMappingURL=ColorModifier.js.map","import * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColorModifier } from \"./ColorModifier\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $math from \"../../utils/Math\";\r\nimport * as $type from \"../../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This class can be used to modify linear gradient steps, changing visual\r\n * properties like lightness, brightness, opacity of each set.\r\n *\r\n * It can also set offsets for each gradient step.\r\n *\r\n * E.g. if I want to fill a columns in a column series to be a solid fill from\r\n * top to 80% of height, then gradually fades out, I can use the following\r\n * gradient modifier as a `fillModifier`:\r\n *\r\n * ```TypeScript\r\n * let fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JavaScript\r\n * var fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JSON\r\n * \"series\": [{\r\n *   \"type\": \"ColumnSeries\",\r\n *   \"columns\": {\r\n *     \"fillModifier\": {\r\n *       \"type\": \"GradientModifier\",\r\n *       \"opacities\": [1, 1, 0],\r\n *       \"offsets\": [0, 0.8, 1]\r\n *     }\r\n *   }\r\n * }]\r\n * ```\r\n */\r\nvar GradientModifier = /** @class */ (function (_super) {\r\n    tslib_1.__extends(GradientModifier, _super);\r\n    /**\r\n     * Constructor.\r\n     */\r\n    function GradientModifier() {\r\n        var _this = _super.call(this) || this;\r\n        _this.lightnesses = [];\r\n        _this.brightnesses = [];\r\n        _this.opacities = [];\r\n        _this.offsets = [];\r\n        _this.className = \"GradientModifier\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(GradientModifier.prototype, \"lightnesses\", {\r\n        /**\r\n         * @return {number[]} Lightness values\r\n         */\r\n        get: function () {\r\n            return this._lightnesses;\r\n        },\r\n        /**\r\n         * An array of lightness values for each step.\r\n         *\r\n         * @param {number[]}  value  Lightness values\r\n         */\r\n        set: function (value) {\r\n            this._lightnesses = value;\r\n            this._brightnesses = [];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GradientModifier.prototype, \"brightnesses\", {\r\n        /**\r\n         * @return {number[]} Brightness values\r\n         */\r\n        get: function () {\r\n            return this._brightnesses;\r\n        },\r\n        /**\r\n         * An array of brightness values for each step.\r\n         *\r\n         * @param {number[]}  value  Brightness values\r\n         */\r\n        set: function (value) {\r\n            this._brightnesses = value;\r\n            this._lightnesses = [];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GradientModifier.prototype, \"opacities\", {\r\n        /**\r\n         * @return {number[]} Opacity values\r\n         */\r\n        get: function () {\r\n            return this._opacities;\r\n        },\r\n        /**\r\n         * An array of opacity values for each step.\r\n         *\r\n         * @param {number[]}  value  Opacity values\r\n         */\r\n        set: function (value) {\r\n            this._opacities = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GradientModifier.prototype, \"offsets\", {\r\n        /**\r\n         * @return {number[]} Offsets\r\n         */\r\n        get: function () {\r\n            return this._offsets;\r\n        },\r\n        /**\r\n         * An array of relative position (0-1) for each step.\r\n         *\r\n         * If not set, all steps will be of equal relative length.\r\n         *\r\n         * @param {number[]}  value  Offsets\r\n         */\r\n        set: function (value) {\r\n            this._offsets = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Modifies the color based on step setting.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {Color}  value  Source color\r\n     * @return {Color}         A gradient that matches set modification rules\r\n     */\r\n    GradientModifier.prototype.modify = function (value) {\r\n        // Clear current gradient\r\n        this.gradient.clear();\r\n        // Get step count\r\n        var count = 0;\r\n        if (this.opacities) {\r\n            count = $math.max(count, this.opacities.length);\r\n        }\r\n        if (this.lightnesses) {\r\n            count = $math.max(count, this.lightnesses.length);\r\n        }\r\n        if (this.brightnesses) {\r\n            count = $math.max(count, this.brightnesses.length);\r\n        }\r\n        // Init step values\r\n        var opacity = 1, lightness, brightness;\r\n        // Apply steps\r\n        for (var i = 0; i < count; i++) {\r\n            // Take base color\r\n            var color = value;\r\n            // Check if there are any parameters for this step\r\n            if (this.opacities && $type.isNumber(this.opacities[i])) {\r\n                opacity = this.opacities[i];\r\n            }\r\n            if (this.lightnesses && $type.isNumber(this.lightnesses[i])) {\r\n                lightness = this.lightnesses[i];\r\n                brightness = undefined;\r\n            }\r\n            if (this.brightnesses && $type.isNumber(this.brightnesses[i])) {\r\n                brightness = this.brightnesses[i];\r\n                lightness = undefined;\r\n            }\r\n            // Check if we need to brighten/lighten color\r\n            if ($type.isNumber(brightness)) {\r\n                color = value.brighten(this.brightnesses[i]);\r\n            }\r\n            else if ($type.isNumber(lightness)) {\r\n                color = value.lighten(this.lightnesses[i]);\r\n            }\r\n            // Get offset (it's OK if it's undefined)\r\n            var offset = this.offsets[i];\r\n            // Apply step\r\n            this.gradient.addColor(color, opacity, offset);\r\n        }\r\n        return this.gradient;\r\n    };\r\n    GradientModifier.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this._offsets = source.offsets;\r\n        this._brightnesses = source.brightnesses;\r\n        this._lightnesses = source.lightnesses;\r\n        this._opacities = source.opacities;\r\n    };\r\n    return GradientModifier;\r\n}(ColorModifier));\r\nexport { GradientModifier };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GradientModifier\"] = GradientModifier;\r\n//# sourceMappingURL=GradientModifier.js.map","import * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Pattern } from \"./Pattern\";\r\nimport { registry } from \"../../Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Line pattern.\r\n */\r\nvar LinePattern = /** @class */ (function (_super) {\r\n    tslib_1.__extends(LinePattern, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function LinePattern() {\r\n        var _this = _super.call(this) || this;\r\n        _this._line = _this.paper.add(\"line\");\r\n        _this.addElement(_this._line);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the pattern.\r\n     */\r\n    LinePattern.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        if (this._line) {\r\n            this._line.attr({ \"x2\": this.width * 2 }); // to solve rotation\r\n        }\r\n    };\r\n    return LinePattern;\r\n}(Pattern));\r\nexport { LinePattern };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LinePattern\"] = LinePattern;\r\n//# sourceMappingURL=LinePattern.js.map","/**\r\n * Contains code and logic for generating linear gradients.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../../Base\";\r\nimport { List } from \"../../utils/List\";\r\nimport { getGhostPaper } from \"../Paper\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $iter from \"../../utils/Iterator\";\r\nimport * as $math from \"../../utils/Math\";\r\nimport * as $type from \"../../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Linear gradient class.\r\n */\r\nvar LinearGradient = /** @class */ (function (_super) {\r\n    tslib_1.__extends(LinearGradient, _super);\r\n    /**\r\n     * Constructor.\r\n     */\r\n    function LinearGradient() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * List of colors switch definitions in a gradient.\r\n         *\r\n         * @type {List<IGradientStop>}\r\n         */\r\n        _this._stops = new List();\r\n        /**\r\n         * Gradient direction.\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this._rotation = 0;\r\n        _this.className = \"LinearGradient\";\r\n        _this._stops.events.on(\"setIndex\", _this.validate, _this);\r\n        _this._stops.events.on(\"inserted\", _this.validate, _this);\r\n        // Create element\r\n        _this.element = _this.paper.addGroup(\"linearGradient\");\r\n        _this.id = \"gradient-\" + registry.getUniqueId();\r\n        _this.element.attr({ \"id\": _this.id });\r\n        _this._disposers.push(_this.element);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws gradient.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    LinearGradient.prototype.validate = function () {\r\n        var _this = this;\r\n        var rotation = (this._rotation + 90) * $math.RADIANS;\r\n        var x1 = Math.round(50 + Math.sin(rotation + Math.PI) * 50) + '%';\r\n        var y1 = Math.round(50 + Math.cos(rotation) * 50) + '%';\r\n        var x2 = Math.round(50 + Math.sin(rotation) * 50) + '%';\r\n        var y2 = Math.round(50 + Math.cos(rotation + Math.PI) * 50) + '%';\r\n        var gradientElement = this.element;\r\n        gradientElement.removeChildNodes();\r\n        gradientElement.attr({ \"x1\": x1, \"x2\": x2, \"y1\": y1, \"y2\": y2 });\r\n        $iter.each($iter.indexed(this._stops.iterator()), function (a) {\r\n            var i = a[0];\r\n            var stop = a[1];\r\n            var offset = stop.offset;\r\n            if (!$type.isNumber(offset)) {\r\n                offset = i / (_this._stops.length - 1);\r\n            }\r\n            var gradientStop = _this.paper.add(\"stop\");\r\n            gradientStop.attr({ \"stop-color\": stop.color });\r\n            if ($type.isNumber(stop.opacity)) {\r\n                gradientStop.attr({ \"stop-opacity\": stop.opacity });\r\n            }\r\n            if ($type.isNumber(offset)) {\r\n                gradientStop.attr({ \"offset\": offset });\r\n            }\r\n            gradientElement.add(gradientStop);\r\n        });\r\n    };\r\n    /**\r\n     * Clears the gradient.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    LinearGradient.prototype.clear = function () {\r\n        this._stops.clear();\r\n    };\r\n    /**\r\n     * Adds a color step to the gradient.\r\n     *\r\n     * @param {Color}   color    Color (hex code or named color)\r\n     * @param {number}  opacity  Opacity (value from 0 to 1; 0 completely transaprent, 1 fully opaque)\r\n     * @param {number}  offset   Position of color in the gradient (value 0 to 1; 0 meaning start of the gradient and 1 end)\r\n     */\r\n    LinearGradient.prototype.addColor = function (color, opacity, offset) {\r\n        this._stops.push({ color: color, opacity: opacity, offset: offset });\r\n    };\r\n    Object.defineProperty(LinearGradient.prototype, \"stops\", {\r\n        /**\r\n         * A list of color stops in the gradient.\r\n         *\r\n         * @return {List<IGradientStop>} Stops\r\n         */\r\n        get: function () {\r\n            return this._stops;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LinearGradient.prototype, \"paper\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {Paper} Paper\r\n         */\r\n        get: function () {\r\n            if (this._paper) {\r\n                return this._paper;\r\n            }\r\n            return getGhostPaper();\r\n        },\r\n        /**\r\n         * [[Paper]] instace to use for the gradient.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {Paper}  paper  Paper\r\n         */\r\n        set: function (paper) {\r\n            if (this._paper != paper) {\r\n                this._paper = paper;\r\n                this.validate();\r\n                paper.appendDef(this.element);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(LinearGradient.prototype, \"rotation\", {\r\n        /**\r\n         * @return {number} Rotation\r\n         */\r\n        get: function () {\r\n            return this._rotation;\r\n        },\r\n        /**\r\n         * Rotation (direction) of the gradient in degrees.\r\n         *\r\n         * @param {number}  value  Rotation\r\n         */\r\n        set: function (value) {\r\n            //this.element.attr({ \"gradientTransform\": \"rotate(\" + value + \" 10 100)\" });\r\n            this._rotation = value;\r\n            this.validate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    LinearGradient.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.stops.copyFrom(source.stops);\r\n        this._rotation = source.rotation;\r\n    };\r\n    return LinearGradient;\r\n}(BaseObject));\r\nexport { LinearGradient };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LinearGradient\"] = LinearGradient;\r\n//# sourceMappingURL=LinearGradient.js.map","import * as tslib_1 from \"tslib\";\r\nimport { LinearGradient } from \"./LinearGradient\";\r\nimport { GradientModifier } from \"./GradientModifier\";\r\nimport { registry } from \"../../Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This class can be used to modify linear gradient steps, changing visual\r\n * properties like lightness, brightness, opacity of each set.\r\n *\r\n * It can also set offsets for each gradient step.\r\n *\r\n * E.g. if I want to fill a columns in a column series to be a solid fill from\r\n * top to 80% of height, then gradually fades out, I can use the following\r\n * gradient modifier as a `fillModifier`:\r\n *\r\n * ```TypeScript\r\n * let fillModifier = new am4core.LinearGradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JavaScript\r\n * var fillModifier = new am4core.LinearGradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JSON\r\n * \"series\": [{\r\n *   \"type\": \"ColumnSeries\",\r\n *   \"columns\": {\r\n *     \"fillModifier\": {\r\n *       \"type\": \"LinearGradientModifier\",\r\n *       \"opacities\": [1, 1, 0],\r\n *       \"offsets\": [0, 0.8, 1]\r\n *     }\r\n *   }\r\n * }]\r\n * ```\r\n */\r\nvar LinearGradientModifier = /** @class */ (function (_super) {\r\n    tslib_1.__extends(LinearGradientModifier, _super);\r\n    /**\r\n     * Constructor.\r\n     */\r\n    function LinearGradientModifier() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"LinearGradientModifier\";\r\n        _this.gradient = new LinearGradient();\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    LinearGradientModifier.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.gradient = source.gradient.clone();\r\n    };\r\n    return LinearGradientModifier;\r\n}(GradientModifier));\r\nexport { LinearGradientModifier };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LinearGradientModifier\"] = LinearGradientModifier;\r\n//# sourceMappingURL=LinearGradientModifier.js.map","/**\r\n * Pattern module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../../Base\";\r\nimport { getGhostPaper } from \"../Paper\";\r\nimport { List, ListDisposer } from \"../../utils/List\";\r\nimport { Animation, AnimationDisposer } from \"../../utils/Animation\";\r\nimport { registry } from \"../../Registry\";\r\nimport { InterfaceColorSet } from \"../../utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../utils/Iterator\";\r\nimport * as $object from \"../../utils/Object\";\r\nimport * as $type from \"../../utils/Type\";\r\n;\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Base class to define patterns.\r\n */\r\nvar Pattern = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Pattern, _super);\r\n    //public propertyValues = new Dictionary<PatternProperties, any>();\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Pattern() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * List of elements the pattern consists of.\r\n         *\r\n         * @type {List<AMElement>}\r\n         */\r\n        _this._elements = new List();\r\n        /**\r\n         * A storage for Filter property/value pairs.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @see {@link PatternProperties}\r\n         * @type {PatternProperties}\r\n         */\r\n        _this.properties = {};\r\n        _this.className = \"Pattern\";\r\n        // Set defaults\r\n        _this.width = 10;\r\n        _this.height = 10;\r\n        _this.x = 0;\r\n        _this.y = 0;\r\n        _this.patternUnits = \"userSpaceOnUse\";\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.backgroundFill = interfaceColors.getFor(\"background\");\r\n        _this.backgroundOpacity = 0;\r\n        _this.fillOpacity = 1;\r\n        _this.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n        _this.stroke = interfaceColors.getFor(\"alternativeBackground\");\r\n        _this.strokeOpacity = 1;\r\n        _this.strokeWidth = 1;\r\n        _this.shapeRendering = \"crispEdges\";\r\n        _this.rotation = 0;\r\n        // Create main group to store pattern elements inelements\r\n        _this.element = _this.paper.addGroup(\"pattern\");\r\n        _this.id = \"pattern-\" + registry.getUniqueId();\r\n        _this.element.attr({ \"id\": _this.id });\r\n        _this._disposers.push(_this.element);\r\n        // Make elements disposable\r\n        _this._disposers.push(new ListDisposer(_this._elements));\r\n        // Request again to trigger getter/setter code\r\n        _this.patternUnits = _this.patternUnits;\r\n        _this.width = _this.width;\r\n        _this.height = _this.height;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the pattern.\r\n     */\r\n    Pattern.prototype.draw = function () {\r\n        var _this = this;\r\n        var patternElement = this.element;\r\n        if (patternElement) {\r\n            patternElement.removeChildNodes();\r\n            var background = this.paper.add(\"rect\");\r\n            background.attr({ \"width\": this.width, \"height\": this.height, \"shape-rendering\": \"crispEdges\", \"fill\": this.backgroundFill.hex, \"fill-opacity\": this.backgroundOpacity, \"stroke\": this.backgroundFill.hex, \"stroke-opacity\": this.backgroundOpacity });\r\n            patternElement.add(background);\r\n            patternElement.attr({ \"x\": this.x, \"y\": this.y, \"width\": this.width, \"height\": this.height, \"stroke\": this.stroke.hex, \"fill\": this.fill.hex, \"fill-opacity\": this.fillOpacity, \"stroke-opacity\": this.strokeOpacity, \"stroke-width\": this.strokeWidth, \"shape-rendering\": this.shapeRendering, \"patternUnits\": this.patternUnits });\r\n            $iter.each(this._elements.iterator(), function (element) {\r\n                element.rotation = _this.rotation;\r\n                _this.element.add(element);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Animate pattern properties.\r\n     *\r\n     * @see {@link Animation}\r\n     * @param  {IAnimationOptions[] | IAnimationOptions}  animationOptions  Animation options\r\n     * @param  {number}                                   duration          Duration (ms)\r\n     * @param  {(number) => number}                       easing            Easing function\r\n     * @return {Animation}                                                  Animation instance\r\n     */\r\n    Pattern.prototype.animate = function (animationOptions, duration, easing) {\r\n        return new Animation(this, animationOptions, duration, easing).start();\r\n    };\r\n    /**\r\n     * Adds an element to the pattern.\r\n     *\r\n     * @param {AMElement}  element  Element\r\n     */\r\n    Pattern.prototype.addElement = function (element) {\r\n        this._elements.push(element);\r\n        this._disposers.push(element);\r\n    };\r\n    /**\r\n     * Remove an element from the pattern.\r\n     *\r\n     * @param {AMElement}  element  Element\r\n     */\r\n    Pattern.prototype.removeElement = function (element) {\r\n        this._elements.removeValue(element);\r\n        this.removeDispose(element);\r\n    };\r\n    Object.defineProperty(Pattern.prototype, \"elements\", {\r\n        /**\r\n         * Returns the list of SVG elements comprising the pattern.\r\n         *\r\n         * @return {List<AMElement>} Pattern elements\r\n         */\r\n        get: function () {\r\n            return this._elements;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Pattern.prototype, \"fillOpacity\", {\r\n        /**\r\n         * @return {number} Opacity (0-1)\r\n         */\r\n        get: function () {\r\n            return this.properties[\"fillOpacity\"];\r\n        },\r\n        /**\r\n         * Pattern fill opacity. (0-1)\r\n         *\r\n         * @param {number}  value  Opacity (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"fillOpacity\"] = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Pattern.prototype, \"fill\", {\r\n        /**\r\n         * @return {Color} Fill color\r\n         */\r\n        get: function () {\r\n            return this.properties[\"fill\"];\r\n        },\r\n        /**\r\n         * Fill color of the pattern.\r\n         *\r\n         * @param {Color}  value  Fill color\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"fill\"] = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Pattern.prototype, \"backgroundFill\", {\r\n        /**\r\n         * @return {Color} Background color\r\n         */\r\n        get: function () {\r\n            return this.properties[\"backgroundFill\"];\r\n        },\r\n        /**\r\n         * Pattern background fill color.\r\n         *\r\n         * @param {Color}  value  Background color\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"backgroundFill\"] = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Pattern.prototype, \"backgroundOpacity\", {\r\n        /**\r\n         * @return {number} Background opacity (0-1)\r\n         */\r\n        get: function () {\r\n            return this.properties[\"backgroundOpacity\"];\r\n        },\r\n        /**\r\n         * Pattern backgorund opacity. (0-1)\r\n         *\r\n         * @param {number}  value  Background opacity (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"backgroundOpacity\"] = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Pattern.prototype, \"stroke\", {\r\n        /**\r\n         * @return {Color} Color\r\n         */\r\n        get: function () {\r\n            return this.properties[\"stroke\"];\r\n        },\r\n        /**\r\n         * Pattern stroke (border) color.\r\n         *\r\n         * @param {Color}  value  Color\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"stroke\"] = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Pattern.prototype, \"strokeOpacity\", {\r\n        /**\r\n         * @return {number} Opacity (0-1)\r\n         */\r\n        get: function () {\r\n            return this.properties[\"strokeOpacity\"];\r\n        },\r\n        /**\r\n         * Pattern stroke opacity. (0-1)\r\n         *\r\n         * @param {number}  value  Opacity (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"strokeOpacity\"] = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Pattern.prototype, \"strokeWidth\", {\r\n        /**\r\n         * @return {number} Stroke thickness (px)\r\n         */\r\n        get: function () {\r\n            return this.properties[\"strokeWidth\"];\r\n        },\r\n        /**\r\n         * Pattern stroke thickness in pixels.\r\n         *\r\n         * @param {number}  value  Stroke thickness (px)\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"strokeWidth\"] = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Pattern.prototype, \"shapeRendering\", {\r\n        get: function () {\r\n            return this.properties[\"shapeRendering\"];\r\n        },\r\n        /**\r\n         * Shape rendering\r\n         * @param {ShapeRendering} value [description]\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"shapeRendering\"] = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Pattern.prototype, \"rotation\", {\r\n        /**\r\n         * @return {number} Rotation\r\n         */\r\n        get: function () {\r\n            return this.properties[\"rotation\"];\r\n        },\r\n        /**\r\n         * Pattern rotation in degrees.\r\n         *\r\n         * @param {number}  value  Rotation\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"rotation\"] = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Pattern.prototype, \"patternUnits\", {\r\n        /**\r\n         * @return {\"userSpaceOnUse\" | \"objectBoundingBox\"} Units\r\n         */\r\n        get: function () {\r\n            return this.properties[\"patternUnits\"];\r\n        },\r\n        /**\r\n         * Pattern measuring units.\r\n         *\r\n         * Available options: \"userSpaceOnUse\" | \"objectBoundingBox\".\r\n         *\r\n         * @param {\"userSpaceOnUse\" | \"objectBoundingBox\"}  value  Units\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"patternUnits\"] = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Pattern.prototype, \"width\", {\r\n        /**\r\n         * @return {number} Width (px)\r\n         */\r\n        get: function () {\r\n            return this.properties[\"width\"];\r\n        },\r\n        /**\r\n         * Pattern width in pixels.\r\n         *\r\n         * @param {number}  value  Width (px)\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"width\"] = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Pattern.prototype, \"height\", {\r\n        /**\r\n         * @return {number} Height (px)\r\n         */\r\n        get: function () {\r\n            return this.properties[\"height\"];\r\n        },\r\n        /**\r\n         * Pattern height in pixels.\r\n         *\r\n         * @param {number} value Height (px)\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"height\"] = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Pattern.prototype, \"x\", {\r\n        /**\r\n         * @return {number} X (px)\r\n         */\r\n        get: function () {\r\n            return this.properties[\"x\"];\r\n        },\r\n        /**\r\n         * X position. (pixels)\r\n         *\r\n         * @param {number} value X (px)\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"x\"] = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Pattern.prototype, \"y\", {\r\n        /**\r\n         * @return {number} Y (px)\r\n         */\r\n        get: function () {\r\n            return this.properties[\"y\"];\r\n        },\r\n        /**\r\n         * Y position (px).\r\n         *\r\n         * @param {number} value Y (px)\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"y\"] = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Pattern.prototype, \"paper\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {Paper} Paper\r\n         */\r\n        get: function () {\r\n            if (this._paper) {\r\n                return this._paper;\r\n            }\r\n            return getGhostPaper();\r\n        },\r\n        /**\r\n         * [[Paper]] instance to draw pattern in.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {Paper}  paper  Paper\r\n         */\r\n        set: function (paper) {\r\n            if (this._paper != paper) {\r\n                this._paper = paper;\r\n                this.draw();\r\n                paper.appendDef(this.element);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies properties from another Pattern instance.\r\n     *\r\n     * @param {this}  source  Source pattern\r\n     */\r\n    Pattern.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        _super.prototype.copyFrom.call(this, source);\r\n        $object.each(source.properties, function (key, value) {\r\n            _this[key] = value;\r\n        });\r\n    };\r\n    Object.defineProperty(Pattern.prototype, \"animations\", {\r\n        /**\r\n         * A list of animations currently running on the patter.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {Array<Animation>} Animation list\r\n         */\r\n        get: function () {\r\n            if (!this._animations) {\r\n                this._animations = [];\r\n                this._disposers.push(new AnimationDisposer(this._animations));\r\n            }\r\n            return this._animations;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {object}  config  Config\r\n     */\r\n    Pattern.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Set up series\r\n            if ($type.hasValue(config.elements) && $type.isArray(config.elements)) {\r\n                for (var i = 0, len = config.elements.length; i < len; i++) {\r\n                    var element = config.elements[i];\r\n                    if ($type.hasValue(element[\"type\"])) {\r\n                        var sprite = this.createEntryInstance(element);\r\n                        if (sprite instanceof BaseObject) {\r\n                            sprite.config = element;\r\n                        }\r\n                        this.addElement($type.hasValue(element[\"typeProperty\"])\r\n                            ? sprite[element[\"typeProperty\"]]\r\n                            : sprite.element);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    return Pattern;\r\n}(BaseObject));\r\nexport { Pattern };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Pattern\"] = Pattern;\r\n//# sourceMappingURL=Pattern.js.map","/**\r\n * Contains code and logic for generating radial gradients.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../../Base\";\r\nimport { List } from \"../../utils/List\";\r\nimport { getGhostPaper } from \"../Paper\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $iter from \"../../utils/Iterator\";\r\nimport * as $type from \"../../utils/Type\";\r\nimport { Percent } from \"../../utils/Percent\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Radial gradient class.\r\n */\r\nvar RadialGradient = /** @class */ (function (_super) {\r\n    tslib_1.__extends(RadialGradient, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function RadialGradient() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * List of colors switch definitions in a gradient.\r\n         *\r\n         * @type {List<IGradientStop>}\r\n         */\r\n        _this._stops = new List();\r\n        _this.element = _this.paper.addGroup(\"radialGradient\");\r\n        _this.id = \"gradient-\" + registry.getUniqueId();\r\n        _this.element.attr({ \"id\": _this.id });\r\n        _this._disposers.push(_this.element);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws gradient.\r\n     */\r\n    RadialGradient.prototype.draw = function () {\r\n        var _this = this;\r\n        var gradientElement = this.element;\r\n        if ($type.isNumber(this.cx)) {\r\n            var value = this.cx;\r\n            if (value instanceof Percent) {\r\n                value = value.percent + \"%\";\r\n            }\r\n            gradientElement.attr({ \"cx\": value });\r\n        }\r\n        if ($type.isNumber(this.cy)) {\r\n            var value = this.cy;\r\n            if (value instanceof Percent) {\r\n                value = value.percent + \"%\";\r\n            }\r\n            gradientElement.attr({ \"cy\": value });\r\n        }\r\n        if (this.fx) {\r\n            var value = this.fx;\r\n            if (value instanceof Percent) {\r\n                value = value.percent + \"%\";\r\n            }\r\n            gradientElement.attr({ \"fx\": value });\r\n        }\r\n        if (this.fy) {\r\n            var value = this.fy;\r\n            if (value instanceof Percent) {\r\n                value = value.percent + \"%\";\r\n            }\r\n            gradientElement.attr({ \"fy\": value });\r\n        }\r\n        gradientElement.removeChildNodes();\r\n        $iter.each($iter.indexed(this._stops.iterator()), function (a) {\r\n            var i = a[0];\r\n            var stop = a[1];\r\n            var offset = stop.offset;\r\n            if (!$type.isNumber(offset)) {\r\n                offset = i / (_this._stops.length - 1);\r\n            }\r\n            var gradientStop = _this.paper.add(\"stop\");\r\n            gradientStop.attr({ \"stop-color\": stop.color });\r\n            if ($type.isNumber(stop.opacity)) {\r\n                gradientStop.attr({ \"stop-opacity\": stop.opacity });\r\n            }\r\n            if ($type.isNumber(offset)) {\r\n                gradientStop.attr({ \"offset\": offset });\r\n            }\r\n            gradientElement.add(gradientStop);\r\n        });\r\n    };\r\n    /**\r\n     * Adds a color step to the gradient.\r\n     *\r\n     * @param {Color}   color    Color (hex code or named color)\r\n     * @param {number}  opacity  Opacity (value from 0 to 1; 0 completely transaprent, 1 fully opaque)\r\n     * @param {number}  offset   Position of color in the gradient (value 0 to 1; 0 meaning start of the gradient and 1 end)\r\n     */\r\n    RadialGradient.prototype.addColor = function (color, opacity, offset) {\r\n        this._stops.push({ color: color, opacity: opacity, offset: offset });\r\n        this.draw();\r\n    };\r\n    Object.defineProperty(RadialGradient.prototype, \"paper\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return {Paper} Paper\r\n         */\r\n        get: function () {\r\n            if (this._paper) {\r\n                return this._paper;\r\n            }\r\n            return getGhostPaper();\r\n        },\r\n        /**\r\n         * A [[Paper]] instace to use for the gradient.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {Paper}  paper  Paper\r\n         */\r\n        set: function (paper) {\r\n            if (this._paper != paper) {\r\n                this._paper = paper;\r\n                this.draw();\r\n                paper.appendDef(this.element);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadialGradient.prototype, \"cx\", {\r\n        get: function () {\r\n            return this._cx;\r\n        },\r\n        /**\r\n         * Center x coordinate of the gradient, can be set as number or Percent\r\n         *\r\n         * @param {Optional<number | Percent>}  point  Center point\r\n         */\r\n        set: function (value) {\r\n            this._cx = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadialGradient.prototype, \"cy\", {\r\n        get: function () {\r\n            return this._cy;\r\n        },\r\n        /**\r\n         * Center y coordinate of the gradient, can be set as number or Percent\r\n         *\r\n         * @param {Optional<number | Percent>}  point  Center point\r\n         */\r\n        set: function (value) {\r\n            this._cy = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadialGradient.prototype, \"fx\", {\r\n        get: function () {\r\n            return this._fx;\r\n        },\r\n        /**\r\n         * y coordinate of the focal point of a gradient, can be set in pixels or as Percent\r\n         *\r\n         * @param {Optional<number | Percent>}  point  Center point\r\n         */\r\n        set: function (value) {\r\n            this._fx = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadialGradient.prototype, \"fy\", {\r\n        get: function () {\r\n            return this._fy;\r\n        },\r\n        /**\r\n         * y coordinate of the focal point of a gradient, can be set in pixels or as Percent\r\n         *\r\n         * @param {Optional<number | Percent>}  point  Center point\r\n         */\r\n        set: function (value) {\r\n            this._fy = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    RadialGradient.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.stops.copyFrom(source.stops);\r\n        this.cx = source.cx;\r\n        this.cy = source.cy;\r\n        this.fx = source.fx;\r\n        this.fy = source.fy;\r\n    };\r\n    Object.defineProperty(RadialGradient.prototype, \"stops\", {\r\n        /**\r\n         * A list of color stops in the gradient.\r\n         *\r\n         * @return {List<IGradientStop>} Stops\r\n         */\r\n        get: function () {\r\n            return this._stops;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Clears the gradient.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    RadialGradient.prototype.clear = function () {\r\n        this._stops.clear();\r\n    };\r\n    return RadialGradient;\r\n}(BaseObject));\r\nexport { RadialGradient };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadialGradient\"] = RadialGradient;\r\n//# sourceMappingURL=RadialGradient.js.map","import * as tslib_1 from \"tslib\";\r\nimport { RadialGradient } from \"./RadialGradient\";\r\nimport { GradientModifier } from \"./GradientModifier\";\r\nimport { registry } from \"../../Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This class can be used to modify radial gradient steps, changing visual\r\n * properties like lightness, brightness, opacity of each set.\r\n *\r\n * It can also set offsets for each gradient step.\r\n *\r\n * E.g. if I want to fill a columns in a column series to be a solid fill from\r\n * top to 80% of height, then gradually fades out, I can use the following\r\n * gradient modifier as a `fillModifier`:\r\n *\r\n * ```TypeScript\r\n * let fillModifier = new am4core.LinearGradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JavaScript\r\n * var fillModifier = new am4core.LinearGradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JSON\r\n * \"series\": [{\r\n *   \"type\": \"ColumnSeries\",\r\n *   \"columns\": {\r\n *     \"fillModifier\": {\r\n *       \"type\": \"LinearGradientModifier\",\r\n *       \"opacities\": [1, 1, 0],\r\n *       \"offsets\": [0, 0.8, 1]\r\n *     }\r\n *   }\r\n * }]\r\n * ```\r\n */\r\nvar RadialGradientModifier = /** @class */ (function (_super) {\r\n    tslib_1.__extends(RadialGradientModifier, _super);\r\n    /**\r\n     * Constructor.\r\n     */\r\n    function RadialGradientModifier() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"RadialGradientModifier\";\r\n        _this.gradient = new RadialGradient();\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    RadialGradientModifier.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.gradient = source.gradient.clone();\r\n    };\r\n    return RadialGradientModifier;\r\n}(GradientModifier));\r\nexport { RadialGradientModifier };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadialGradientModifier\"] = RadialGradientModifier;\r\n//# sourceMappingURL=RadialGradientModifier.js.map","/**\r\n * Rectangular pattern module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Pattern } from \"./Pattern\";\r\nimport { registry } from \"../../Registry\";\r\n;\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Rectangular pattern\r\n */\r\nvar RectPattern = /** @class */ (function (_super) {\r\n    tslib_1.__extends(RectPattern, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function RectPattern() {\r\n        var _this = _super.call(this) || this;\r\n        _this.rectHeight = 1;\r\n        _this.rectWidth = 1;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the rectangular element.\r\n     */\r\n    RectPattern.prototype.draw = function () {\r\n        if (this._rect) {\r\n            this.removeElement(this._rect);\r\n        }\r\n        this._rect = this.paper.add(\"rect\");\r\n        this._rect.attr({ \"width\": this.rectWidth, \"height\": this.rectHeight });\r\n        this.addElement(this._rect);\r\n        _super.prototype.draw.call(this);\r\n    };\r\n    Object.defineProperty(RectPattern.prototype, \"rectWidth\", {\r\n        /**\r\n         * @return {number} Width (px)\r\n         */\r\n        get: function () {\r\n            return this.properties[\"rectWidth\"];\r\n        },\r\n        /**\r\n         * Rectangle width in pixels.\r\n         *\r\n         * @param {number} value Width (px)\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"rectWidth\"] = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RectPattern.prototype, \"rectHeight\", {\r\n        /**\r\n         * @return {number} Height (px)\r\n         */\r\n        get: function () {\r\n            return this.properties[\"rectHeight\"];\r\n        },\r\n        /**\r\n         * Rectangle height in pixels.\r\n         *\r\n         * @param {number} value Height (px)\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"rectHeight\"] = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return RectPattern;\r\n}(Pattern));\r\nexport { RectPattern };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RectPattern\"] = RectPattern;\r\n//# sourceMappingURL=RectPattern.js.map","/**\r\n * Module for \"Blur\" filter.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Filter } from \"./Filter\";\r\nimport { registry } from \"../../Registry\";\r\n;\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a \"Blur\" filter.\r\n */\r\nvar BlurFilter = /** @class */ (function (_super) {\r\n    tslib_1.__extends(BlurFilter, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function BlurFilter() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"BlurFilter\";\r\n        // Create elements\r\n        // NOTE: we do not need to add each individual element to `_disposers`\r\n        // because `filterPrimitives` has an event handler which automatically adds\r\n        // anything added to it to `_disposers`\r\n        _this.feGaussianBlur = _this.paper.add(\"feGaussianBlur\");\r\n        _this.feGaussianBlur.attr({ \"result\": \"blurOut\", \"in\": \"SourceGraphic\" });\r\n        _this.filterPrimitives.push(_this.feGaussianBlur);\r\n        // Set default properties\r\n        _this.width = 200;\r\n        _this.height = 200;\r\n        _this.blur = 1.5;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(BlurFilter.prototype, \"blur\", {\r\n        /**\r\n         * @return {number} Blur\r\n         */\r\n        get: function () {\r\n            return this.properties.blur;\r\n        },\r\n        /**\r\n         * Blur value.\r\n         *\r\n         * The bigger the value, the blurrier the target element will become.\r\n         *\r\n         * @default 1.5\r\n         * @param {number} value Blur\r\n         */\r\n        set: function (value) {\r\n            this.properties.blur = value;\r\n            this.feGaussianBlur.attr({ \"stdDeviation\": value / this.scale });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return BlurFilter;\r\n}(Filter));\r\nexport { BlurFilter };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"BlurFilter\"] = BlurFilter;\r\n//# sourceMappingURL=BlurFilter.js.map","/**\r\n * Module for \"Colorize\" filter.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Filter } from \"./Filter\";\r\nimport { registry } from \"../../Registry\";\r\n;\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a \"Colorize\" filter.\r\n */\r\nvar ColorizeFilter = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ColorizeFilter, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ColorizeFilter() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ColorizeFilter\";\r\n        // Create elements\r\n        // NOTE: we do not need to add each individual element to `_disposers`\r\n        // because `filterPrimitives` has an event handler which automatically adds\r\n        // anything added to it to `_disposers`\r\n        _this.feColorMatrix = _this.paper.add(\"feColorMatrix\");\r\n        _this.feColorMatrix.attr({ \"type\": \"matrix\" });\r\n        //this.feColorMatrix.setAttribute(\"in\", \"SourceAlpha\");\r\n        _this.filterPrimitives.push(_this.feColorMatrix);\r\n        // Set default properties\r\n        _this.intensity = 1;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * (Re)applies colors to the already existing filter by modifying filyer's\r\n     * color matrix element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ColorizeFilter.prototype.applyFilter = function () {\r\n        var i = this.intensity;\r\n        var ii = 1 - i;\r\n        var r;\r\n        var g;\r\n        var b;\r\n        var color = this.color;\r\n        if (color && color.rgb) {\r\n            r = color.rgb.r / 255 * i;\r\n            g = color.rgb.g / 255 * i;\r\n            b = color.rgb.b / 255 * i;\r\n        }\r\n        else {\r\n            r = 0;\r\n            g = 0;\r\n            b = 0;\r\n        }\r\n        this.feColorMatrix.attr({ \"values\": ii + \" 0 0 0 \" + r + \" 0 \" + ii + \" 0 0 \" + g + \" 0 0 \" + ii + \" 0 \" + b + \" 0 0 0 1 0\" });\r\n    };\r\n    Object.defineProperty(ColorizeFilter.prototype, \"color\", {\r\n        /**\r\n         * @return {Color} Color\r\n         */\r\n        get: function () {\r\n            return this.properties[\"color\"];\r\n        },\r\n        /**\r\n         * Target color to apply to the element.\r\n         *\r\n         * Depending on the `intensity`, all colors of the target element will steer\r\n         * towards this color.\r\n         *\r\n         * E.g. setting to `am4core.color(\"greener\")` will make all colors greener.\r\n         *\r\n         * @param {Color}  value  Color\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"color\"] = value;\r\n            this.applyFilter();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ColorizeFilter.prototype, \"intensity\", {\r\n        /**\r\n         * @return {number} Intensity (0-1)\r\n         */\r\n        get: function () {\r\n            return this.properties.intensity;\r\n        },\r\n        /**\r\n         * Intensity of the color (0-1).\r\n         *\r\n         * The bigger the number the more of a `color` target's colors will become.\r\n         *\r\n         * 0 means the colors will remain as they are.\r\n         * 1 means all colors will become the target `color`.\r\n         *\r\n         * @default 1\r\n         * @param {number}  value  Intensity (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.properties.intensity = value;\r\n            this.applyFilter();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ColorizeFilter;\r\n}(Filter));\r\nexport { ColorizeFilter };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColorizeFilter\"] = ColorizeFilter;\r\n//# sourceMappingURL=ColorizeFilter.js.map","/**\r\n * Module for \"Desaturate\" filter.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Filter } from \"./Filter\";\r\nimport { registry } from \"../../Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creats a \"Desaturate\" filter\r\n */\r\nvar DesaturateFilter = /** @class */ (function (_super) {\r\n    tslib_1.__extends(DesaturateFilter, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DesaturateFilter() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"DesaturateFilter\";\r\n        // Create elements\r\n        // NOTE: we do not need to add each individual element to `_disposers`\r\n        // because `filterPrimitives` has an event handler which automatically adds\r\n        // anything added to it to `_disposers`\r\n        _this.feColorMatrix = _this.paper.add(\"feColorMatrix\");\r\n        _this.feColorMatrix.attr({ \"type\": \"saturate\" });\r\n        _this.filterPrimitives.push(_this.feColorMatrix);\r\n        // Set default properties\r\n        _this.width = 120;\r\n        _this.height = 120;\r\n        _this.saturation = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DesaturateFilter.prototype, \"saturation\", {\r\n        /**\r\n         * @return {number} Saturation (0-1)\r\n         */\r\n        get: function () {\r\n            return this.properties[\"saturation\"];\r\n        },\r\n        /**\r\n         * Saturation.\r\n         *\r\n         * 0 - completely desaturated.\r\n         * 1 - fully saturated (gray).\r\n         *\r\n         * @param {number}  value  Saturation (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"saturation\"] = value;\r\n            this.feColorMatrix.attr({ \"values\": value.toString() });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DesaturateFilter;\r\n}(Filter));\r\nexport { DesaturateFilter };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DesaturateFilter\"] = DesaturateFilter;\r\n//# sourceMappingURL=DesaturateFilter.js.map","/**\r\n * Module for \"Drop Shadow\" filter.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Filter } from \"./Filter\";\r\nimport { color } from \"../../utils/Color\";\r\nimport { registry } from \"../../Registry\";\r\n;\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creats a \"Drop Shadow\" filter.\r\n */\r\nvar DropShadowFilter = /** @class */ (function (_super) {\r\n    tslib_1.__extends(DropShadowFilter, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DropShadowFilter() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"DropShadowFilter\";\r\n        // Create elements\r\n        // NOTE: we do not need to add each individual element to `_disposers`\r\n        // because `filterPrimitives` has an event handler which automatically adds\r\n        // anything added to it to `_disposers`\r\n        _this.color = color(\"#000\");\r\n        _this.feGaussianBlur = _this.paper.add(\"feGaussianBlur\");\r\n        _this.feGaussianBlur.attr({ \"result\": \"blurOut\", \"in\": \"SourceGraphic\" });\r\n        _this.filterPrimitives.push(_this.feGaussianBlur);\r\n        _this.feOffset = _this.paper.add(\"feOffset\");\r\n        _this.feOffset.attr({ \"result\": \"offsetBlur\" });\r\n        _this.filterPrimitives.push(_this.feOffset);\r\n        _this.feFlood = _this.paper.add(\"feFlood\");\r\n        _this.feFlood.attr({ \"flood-color\": _this.color });\r\n        _this.filterPrimitives.push(_this.feFlood);\r\n        _this.feComposite = _this.paper.add(\"feComposite\");\r\n        _this.feComposite.attr({ \"in2\": \"offsetBlur\", operator: \"in\" });\r\n        _this.filterPrimitives.push(_this.feComposite);\r\n        _this.feMerge = _this.paper.addGroup(\"feMerge\");\r\n        _this.feMerge.add(_this.paper.add(\"feMergeNode\"));\r\n        _this.feMerge.add(_this.paper.add(\"feMergeNode\").attr({ \"in\": \"SourceGraphic\" }));\r\n        _this.filterPrimitives.push(_this.feMerge);\r\n        // Set default properties\r\n        _this.width = 200;\r\n        _this.height = 200;\r\n        _this.blur = 1.5;\r\n        _this.dx = 3;\r\n        _this.dy = 3;\r\n        _this.opacity = 0.5;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DropShadowFilter.prototype, \"color\", {\r\n        /**\r\n         * @return {Color} Color\r\n         */\r\n        get: function () {\r\n            return this.properties.color;\r\n        },\r\n        /**\r\n         * Shadow color.\r\n         *\r\n         * @param {Color}  value  Color\r\n         */\r\n        set: function (value) {\r\n            this.properties.color = value;\r\n            if (this.feFlood) {\r\n                this.feFlood.attr({ \"flood-color\": value });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DropShadowFilter.prototype, \"opacity\", {\r\n        /**\r\n         * @return {number} Opacity (0-1)\r\n         */\r\n        get: function () {\r\n            return this.properties.opacity;\r\n        },\r\n        /**\r\n         * Opacity of the shadow. (0-1)\r\n         *\r\n         * @param {number}  value  Opacity (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.properties.opacity = value;\r\n            this.feFlood.attr({ \"flood-opacity\": value });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DropShadowFilter.prototype, \"dx\", {\r\n        /**\r\n         * @return {number} Horizontal offset (px)\r\n         */\r\n        get: function () {\r\n            return this.properties.dx;\r\n        },\r\n        /**\r\n         * Horizontal offset in pixels.\r\n         *\r\n         * @param {number}  value  Horizontal offset (px)\r\n         */\r\n        set: function (value) {\r\n            this.properties.dx = value;\r\n            this.feOffset.attr({ \"dx\": value / this.scale });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DropShadowFilter.prototype, \"dy\", {\r\n        /**\r\n         * @return {number} Vertical offset (px)\r\n         */\r\n        get: function () {\r\n            return this.properties.dy;\r\n        },\r\n        /**\r\n         * Vertical offset in pixels.\r\n         *\r\n         * @param {number} value Vertical offset (px)\r\n         */\r\n        set: function (value) {\r\n            this.properties.dy = value;\r\n            this.feOffset.attr({ \"dy\": value / this.scale });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DropShadowFilter.prototype, \"blur\", {\r\n        /**\r\n         * @return {number} Blur\r\n         */\r\n        get: function () {\r\n            return this.properties.blur;\r\n        },\r\n        /**\r\n         * Blur.\r\n         *\r\n         * @param {number}  value  Blur\r\n         */\r\n        set: function (value) {\r\n            this.properties.blur = value;\r\n            this.feGaussianBlur.attr({ \"stdDeviation\": value / this.scale });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * [updateScale description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    DropShadowFilter.prototype.updateScale = function () {\r\n        this.dx = this.dx;\r\n        this.dy = this.dy;\r\n        this.blur = this.blur;\r\n    };\r\n    return DropShadowFilter;\r\n}(Filter));\r\nexport { DropShadowFilter };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DropShadowFilter\"] = DropShadowFilter;\r\n//# sourceMappingURL=DropShadowFilter.js.map","/**\r\n * This module contains a base class for an SVG filter.\r\n *\r\n * Filters can be used to decorate, change and transform just about any DOM\r\n * element.\r\n *\r\n * A Filter works by applying one or more effects (primitives) to SVG element.\r\n *\r\n * For more information on how SVG filters work, refer to\r\n * [this MDN tutorial](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/SVG_Filters_Tutorial).\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../../Base\";\r\nimport { getGhostPaper } from \"../Paper\";\r\nimport { Animation, AnimationDisposer } from \"../../utils/Animation\";\r\nimport { List } from \"../../utils/List\";\r\nimport * as $object from \"../../utils/Object\";\r\nimport * as $iter from \"../../utils/Iterator\";\r\n;\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Base filter class.\r\n *\r\n * This class while can be instantiated will not do anything. It is just a base\r\n * functionality for any other \"real\" filters to extend.\r\n *\r\n * Filters can be used to decorate, change and transform just about any DOM\r\n * element.\r\n *\r\n * A Filter works by applying one or more effects (primitives) to SVG element.\r\n *\r\n * For more information on how SVG filters work, refer to\r\n * [this MDN tutorial](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/SVG_Filters_Tutorial).\r\n *\r\n * @todo Example\r\n */\r\nvar Filter = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Filter, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Filter() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * A storage for Filter property/value pairs.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @see {@link FilterProperties}\r\n         * @type {FilterProperties}\r\n         */\r\n        _this.properties = {};\r\n        /**\r\n         * Identifies if this object is a \"template\" and should not be treated as\r\n         * real object that is drawn or actually used in the chart.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this.isTemplate = false;\r\n        /**\r\n         * [_scale description]\r\n         *\r\n         * @todo Description\r\n         * @type {number}\r\n         */\r\n        _this._scale = 1;\r\n        /**\r\n         * [_nonScaling description]\r\n         *\r\n         * @todo Description\r\n         * @type {boolean}\r\n         */\r\n        _this._nonScaling = true;\r\n        _this.className = \"Filter\";\r\n        // Create a list to hold primitives (effect elements)\r\n        _this.filterPrimitives = new List();\r\n        // Automatically add added primitives to `_disposers` so they are discarded\r\n        // when Filter object is destroyed (disposed)\r\n        _this.filterPrimitives.events.on(\"inserted\", function (ev) {\r\n            _this._disposers.push(ev.newValue);\r\n        });\r\n        // Set default dimensions\r\n        _this.width = 120;\r\n        _this.height = 120;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Appends actual filter elements to the filter group.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Group} filterElement An SVG `<group>` element to add filter element to\r\n     */\r\n    Filter.prototype.appendPrimitives = function (filterElement) {\r\n        $iter.each(this.filterPrimitives.iterator(), function (filterPrimitive) {\r\n            filterElement.add(filterPrimitive);\r\n        });\r\n    };\r\n    /**\r\n     * Uses Transitions filter's values from current to target. This is used to\r\n     * smoothly appear filter, rather than it pop into effect.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {IAnimationOptions[] | IAnimationOptions}  animationOptions  Animation options\r\n     * @param  {number}                                   duration          Duration in milliseconds\r\n     * @param  {(number) => number}                       easing            Easing function\r\n     * @return {Animation}                                                  Animation instance\r\n     */\r\n    Filter.prototype.animate = function (animationOptions, duration, easing) {\r\n        var animation = new Animation(this, animationOptions, duration, easing).start();\r\n        return animation;\r\n    };\r\n    Object.defineProperty(Filter.prototype, \"width\", {\r\n        /**\r\n         * @return {number} Width (%)\r\n         */\r\n        get: function () {\r\n            return this.properties[\"width\"];\r\n        },\r\n        /**\r\n         * Width of the filter element in percent.\r\n         *\r\n         * If the filter is designed to \"bleed out\" of the original target element,\r\n         * like for example a shadow, you need this bigger than 100, or the\r\n         * non-fitting parts will be clipped.\r\n         *\r\n         * @default 120\r\n         * @param {number} value Width (px)\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"width\"] = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Filter.prototype, \"height\", {\r\n        /**\r\n         * @return {number} Height\r\n         */\r\n        get: function () {\r\n            return this.properties[\"height\"];\r\n        },\r\n        /**\r\n         * Height of the filter element in percent.\r\n         *\r\n         * If the filter is designed to \"bleed out\" of the original target element,\r\n         * like for example a shadow, you need this bigger than 100, or the\r\n         * non-fitting parts will be clipped.\r\n         *\r\n         * @default 120\r\n         * @param {number} value Height (%)\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"height\"] = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies properties from another [[Filter]] object.\r\n     *\r\n     * @param {Filter} filter Source [[Filter]] object\r\n     */\r\n    Filter.prototype.copyFrom = function (filter) {\r\n        var _this = this;\r\n        _super.prototype.copyFrom.call(this, filter);\r\n        $object.each(filter.properties, function (key, value) {\r\n            _this[key] = value;\r\n        });\r\n    };\r\n    Object.defineProperty(Filter.prototype, \"paper\", {\r\n        /**\r\n         * @return {Paper} Paper\r\n         */\r\n        get: function () {\r\n            if (this._paper) {\r\n                return this._paper;\r\n            }\r\n            return getGhostPaper();\r\n        },\r\n        /**\r\n         * Sets [[Paper]] instance to create filter's elements in.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {Paper}  paper  Paper\r\n         */\r\n        set: function (paper) {\r\n            if (this._paper != paper) {\r\n                this._paper = paper;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Filter.prototype, \"animations\", {\r\n        /**\r\n         * All animations currently in play.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return {Array<Animation>} List of animations\r\n         */\r\n        get: function () {\r\n            if (!this._animations) {\r\n                this._animations = [];\r\n                this._disposers.push(new AnimationDisposer(this._animations));\r\n            }\r\n            return this._animations;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Filter.prototype, \"scale\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         */\r\n        get: function () {\r\n            return this._scale;\r\n        },\r\n        /**\r\n         * [[Sprite]] uses this method to inform filter about it's scale.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        set: function (value) {\r\n            this._scale = value;\r\n            this.updateScale();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates filter properties which depend on scale.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Filter.prototype.updateScale = function () {\r\n        // Dummy method for extending classes to override.\r\n    };\r\n    Object.defineProperty(Filter.prototype, \"nonScaling\", {\r\n        /**\r\n         * @return {boolean} Non scaling?\r\n         */\r\n        get: function () {\r\n            return this._nonScaling;\r\n        },\r\n        /**\r\n         * If a filter is non scaling, it will look the same even if the sprite is\r\n         * scaled, otherwise filter will scale together with a [[Sprite]].\r\n         *\r\n         * @default false\r\n         * @param {boolean}  value  Non scaling?\r\n         */\r\n        set: function (value) {\r\n            this._nonScaling = value;\r\n            if (!value) {\r\n                this._scale = 1;\r\n            }\r\n            this.updateScale();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Filter.prototype, \"sprite\", {\r\n        /**\r\n         * A target element this filter is currently attached to.\r\n         *\r\n         * We need to keep track of it because one filter can be used for just one\r\n         * element, so we have to remove it from the old \"parent\" when attaching to\r\n         * the new one.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {Sprite}  value  Target element\r\n         */\r\n        set: function (value) {\r\n            this.setSprite(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets filter's target element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Sprite}  value  Element filter is being attached to\r\n     */\r\n    Filter.prototype.setSprite = function (value) {\r\n        if (this._sprite && this._sprite != value) {\r\n            this._sprite.filters.removeValue(this);\r\n        }\r\n        this._sprite = value;\r\n    };\r\n    return Filter;\r\n}(BaseObject));\r\nexport { Filter };\r\n//# sourceMappingURL=Filter.js.map","/**\r\n * Module for \"Focus\" filter.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Filter } from \"./Filter\";\r\nimport { InterfaceColorSet } from \"../../utils/InterfaceColorSet\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a \"Focus\" filter.\r\n */\r\nvar FocusFilter = /** @class */ (function (_super) {\r\n    tslib_1.__extends(FocusFilter, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FocusFilter() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"FocusFilter\";\r\n        // Create elements\r\n        // NOTE: we do not need to add each individual element to `_disposers`\r\n        // because `filterPrimitives` has an event handler which automatically adds\r\n        // anything added to it to `_disposers`\r\n        _this.feFlood = _this.paper.add(\"feFlood\");\r\n        _this.feFlood.attr({ \"flood-color\": new InterfaceColorSet().getFor(\"primaryButtonHover\"), \"result\": \"base\" });\r\n        _this.filterPrimitives.push(_this.feFlood);\r\n        _this.feMorphology = _this.paper.add(\"feMorphology\");\r\n        _this.feMorphology.attr({ \"result\": \"bigger\", \"in\": \"SourceGraphic\", \"operator\": \"dilate\", \"radius\": \"2\" });\r\n        _this.filterPrimitives.push(_this.feMorphology);\r\n        _this.feColorMatrix = _this.paper.add(\"feColorMatrix\");\r\n        _this.feColorMatrix.attr({ \"result\": \"mask\", \"in\": \"bigger\", \"type\": \"matrix\", \"values\": \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0\" });\r\n        _this.filterPrimitives.push(_this.feColorMatrix);\r\n        _this.feComposite = _this.paper.add(\"feComposite\");\r\n        _this.feComposite.attr({ \"result\": \"drop\", \"in\": \"base\", \"in2\": \"mask\", \"operator\": \"in\" });\r\n        _this.filterPrimitives.push(_this.feComposite);\r\n        _this.feBlend = _this.paper.add(\"feBlend\");\r\n        _this.feBlend.attr({ \"in\": \"SourceGraphic\", \"in2\": \"drop\", \"mode\": \"normal\" });\r\n        _this.filterPrimitives.push(_this.feBlend);\r\n        // Set default properties\r\n        _this.width = 130;\r\n        _this.height = 130;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(FocusFilter.prototype, \"stroke\", {\r\n        /**\r\n         * @return {Optional<Color>} Color\r\n         */\r\n        get: function () {\r\n            return this.properties[\"stroke\"];\r\n        },\r\n        /**\r\n         * Stroke (outline) color.\r\n         *\r\n         * @param {Color}  value  Color\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"stroke\"] = value;\r\n            this.feFlood.attr({ \"flood-color\": value });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FocusFilter.prototype, \"strokeWidth\", {\r\n        /**\r\n         * @return {number} Outline thickness (px)\r\n         */\r\n        get: function () {\r\n            return this.properties[\"strokeWidth\"];\r\n        },\r\n        /**\r\n         * Stroke (outline) thickness in pixels.\r\n         *\r\n         * @param {number}  value  Outline thickness (px)\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"strokeWidth\"] = value;\r\n            this.feMorphology.attr({ \"radius\": value });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FocusFilter.prototype, \"opacity\", {\r\n        /**\r\n         * @return {number} Outline opacity (0-1)\r\n         */\r\n        get: function () {\r\n            return this.properties[\"opacity\"];\r\n        },\r\n        /**\r\n         * Opacity of the outline. (0-1)\r\n         *\r\n         * @param {number}  value  Outline opacity (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"opacity\"] = value;\r\n            this.feColorMatrix.attr({ \"values\": \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \" + value + \" 0\" });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets filter's target element.\r\n     *\r\n     * In addition it also disables built-in focus outline on element this\r\n     * filter is applied to.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Sprite}  value  Element filter is being attached to\r\n     */\r\n    FocusFilter.prototype.setSprite = function (value) {\r\n        if (this._sprite && this._sprite != value) {\r\n            this._sprite.group.removeStyle(\"outline\");\r\n        }\r\n        value.group.addStyle({\r\n            \"outline\": \"none\"\r\n        });\r\n        _super.prototype.setSprite.call(this, value);\r\n    };\r\n    return FocusFilter;\r\n}(Filter));\r\nexport { FocusFilter };\r\n//# sourceMappingURL=FocusFilter.js.map","/**\r\n * Module for \"Lighten\" filter.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Filter } from \"./Filter\";\r\nimport { registry } from \"../../Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a \"Lighten\" filter.\r\n */\r\nvar LightenFilter = /** @class */ (function (_super) {\r\n    tslib_1.__extends(LightenFilter, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function LightenFilter() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"LightenFilter\";\r\n        // Create elements\r\n        // NOTE: we do not need to add each individual element to `_disposers`\r\n        // because `filterPrimitives` has an event handler which automatically adds\r\n        // anything added to it to `_disposers`\r\n        _this.feColorMatrix = _this.paper.add(\"feColorMatrix\");\r\n        _this.feColorMatrix.attr({ \"type\": \"matrix\" });\r\n        _this.filterPrimitives.push(_this.feColorMatrix);\r\n        // Set default properties\r\n        _this.lightness = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(LightenFilter.prototype, \"lightness\", {\r\n        /**\r\n         * @return {number} Lightness\r\n         */\r\n        get: function () {\r\n            return this.properties[\"lightness\"];\r\n        },\r\n        /**\r\n         * Lightness of the target colors.\r\n         *\r\n         * If `lightness` is a positive number, the filter will make all colors\r\n         * lighter.\r\n         *\r\n         * If `lightness` is negative, colors will be darkened.\r\n         *\r\n         * @param {number}  value  Lightness\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"lightness\"] = value;\r\n            var v = value + 1;\r\n            this.feColorMatrix.attr({ \"values\": v + \" 0 0 0 0 0 \" + v + \" 0 0 0 0 0 \" + v + \" 0 0 0 0 0 1 0\" });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return LightenFilter;\r\n}(Filter));\r\nexport { LightenFilter };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LightenFilter\"] = LightenFilter;\r\n//# sourceMappingURL=LightenFilter.js.map","/**\r\n * Responsive functionality module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObjectEvents } from \"../Base\";\r\nimport { List } from \"../utils/List\";\r\nimport { Adapter } from \"../utils/Adapter\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $iter from \"../utils/Iterator\";\r\nimport * as $array from \"../utils/Array\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Responsive is responsible for overriding certain properties when conditions\r\n * are met.\r\n *\r\n * This class is used to dynamically apply and change certain chart properties\r\n * based on the current values of properties.\r\n *\r\n * Mainly, this is used with [[Sprite]]'s dimensional properties, like\r\n * `pixelWidth` and `pixelHeight`. However, it can be used to dynamically\r\n * change any property, based on any other property's value.\r\n *\r\n * A default responsive rules are disabled.\r\n *\r\n * To enable, set `enabled = false`. E.g.:\r\n *\r\n * ```TypeScript\r\n * chart.responsive.enabled = true;\r\n * ```\r\n * ```JavaScript\r\n * chart.responsive.enabled = true;\r\n * ```\r\n *\r\n * @see {@link IResponsiveEvents} for a list of available events\r\n * @see {@link IResponsiveAdapters} for a list of available Adapters\r\n * @todo Add default rules\r\n * @todo Watch for rule modification\r\n * @important\r\n */\r\nvar Responsive = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Responsive, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Responsive() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Holds a list of responsive rules organized by object type.\r\n         *\r\n         * @type {List<IResponsiveRule>}\r\n         */\r\n        _this._rules = new List();\r\n        /**\r\n         * Holds the list of the default responsive rules.\r\n         *\r\n         * @type {List<IResponsiveRule>}\r\n         */\r\n        _this._defaultRules = new List();\r\n        /**\r\n         * Holds the list of currently applied rules.\r\n         *\r\n         * @type {object}\r\n         */\r\n        _this._appliedRules = {};\r\n        /**\r\n         * Use default rules in addition to the user-defined ones?\r\n         *\r\n         * @type {Boolean}\r\n         */\r\n        _this._useDefault = true;\r\n        /**\r\n         * Adapter.\r\n         *\r\n         * @type {Adapter<Responsive, IResponsiveAdapters>}\r\n         */\r\n        _this.adapter = new Adapter(_this);\r\n        /**\r\n         * Indicates of responsive rules application is enabled.\r\n         *\r\n         * @type {Boolean}\r\n         */\r\n        _this._enabled = false;\r\n        /**\r\n         * Collection of objects and state ids that do not have any properties set.\r\n         *\r\n         * @type {string[]}\r\n         */\r\n        _this._noStates = [];\r\n        _this.className = \"Responsive\";\r\n        // Set up rules list events\r\n        _this.rules.events.on(\"inserted\", _this.checkRules, true);\r\n        _this.rules.events.on(\"removed\", _this.checkRules, true);\r\n        _this._disposers.push(_this.rules.events);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Responsive.prototype, \"component\", {\r\n        /**\r\n         * @return {Optional<Component>} Target object\r\n         */\r\n        get: function () {\r\n            return this._component;\r\n        },\r\n        /**\r\n         * A target object that responsive rules will need to be applied to.\r\n         *\r\n         * @param {Optional<Component>}  value  Target object\r\n         */\r\n        set: function (value) {\r\n            // Check if it's the same\r\n            if (value == this._component) {\r\n                return;\r\n            }\r\n            // Check if we already have a set up component and remove its events\r\n            if (this._sizeEventDisposer) {\r\n                this.removeDispose(this._sizeEventDisposer);\r\n            }\r\n            // Set\r\n            this._component = value;\r\n            // Set up resize monitoring events\r\n            this._sizeEventDisposer = $type.getValue(this.component).events.on(\"sizechanged\", this.checkRules, this);\r\n            this._disposers.push(this._sizeEventDisposer);\r\n            // Enable resoponsive\r\n            this.enabled = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Responsive.prototype, \"enabled\", {\r\n        /**\r\n         * @return {boolean} Apply responsive rules?\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"enabled\", this._enabled);\r\n        },\r\n        /**\r\n         * Should responsive rules be checked against and applied?\r\n         *\r\n         * @default false\r\n         * @param {boolean}  value  Apply responsive rules?\r\n         */\r\n        set: function (value) {\r\n            if (this._enabled != value) {\r\n                this._enabled = value;\r\n                // Run `applyRules` so that any currently applied rules can be reset\r\n                this.applyRules();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Responsive.prototype, \"useDefault\", {\r\n        /**\r\n         * @return {boolean} Use default rules?\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"useDefault\", this._useDefault);\r\n        },\r\n        /**\r\n         * Should default responsive rules be applied in addition to user-defined\r\n         * ones.\r\n         *\r\n         * User-defined rules will take precedence over default rules whenever they\r\n         * produce conflicting settings.\r\n         *\r\n         * @default true\r\n         * @param {boolean}  value  Use default rules?\r\n         */\r\n        set: function (value) {\r\n            if (this._useDefault != value) {\r\n                this._useDefault = true;\r\n                // Run `applyRules` so that any currently applied rules can be reset\r\n                this.applyRules();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Responsive.prototype, \"rules\", {\r\n        /**\r\n         * @return {List<IResponsiveRule>} User-defined rules\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"rules\", this._rules);\r\n        },\r\n        /**\r\n         * User-defined responsive rules.\r\n         *\r\n         * User-defined rules will take precedence over default rules whenever they\r\n         * produce conflicting settings.\r\n         *\r\n         * Use `allRules` to get all applicable rules including default and\r\n         * user-defined ones.\r\n         *\r\n         * @param {List<IResponsiveRule>}  value  User-defined rules\r\n         */\r\n        set: function (value) {\r\n            this._rules = value;\r\n            this._enabled = true;\r\n            this.applyRules();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Responsive.prototype, \"defaultRules\", {\r\n        /**\r\n         * Default responsive rules.\r\n         *\r\n         * @readonly\r\n         * @return {List<IResponsiveRule>} List of responsive rules\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"defaultRules\", this._defaultRules);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Responsive.prototype, \"allRules\", {\r\n        /**\r\n         * Returns all rules: default rules (if not disabled) combined with\r\n         * user-defined ones.\r\n         *\r\n         * @readonly\r\n         * @return {List<IResponsiveRule>} List of all applicable rules\r\n         */\r\n        get: function () {\r\n            // Create empty list\r\n            var rules = new List();\r\n            // Add default rules if not disabled\r\n            // A code, requesting `allRules` must ensure loading of default rules\r\n            // by calling `loadDefaultRules()`\r\n            if (this.useDefault) {\r\n                rules.copyFrom(this.defaultRules);\r\n            }\r\n            // Add user-defined ones\r\n            rules.copyFrom(this.rules);\r\n            return this.adapter.apply(\"allRules\", rules);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Checks if rule by the particular id currently applied.\r\n     *\r\n     * @param  {string}   ruleId  Rule ID\r\n     * @return {boolean}          Is currently applied?\r\n     */\r\n    Responsive.prototype.isApplied = function (ruleId) {\r\n        var rule = this._appliedRules[ruleId];\r\n        return $type.hasValue(rule) ? rule : false;\r\n    };\r\n    /**\r\n     * Checks which responsive rules currently satisfy their conditions and\r\n     * should be applied, or unapplied.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Responsive.prototype.checkRules = function () {\r\n        var _this = this;\r\n        // Check if default rules need to be loaded\r\n        // If needed, we wait until it's loaded and then call `checkRules` again\r\n        if (this.useDefault && this.defaultRules.length == 0) {\r\n            this.loadDefaultRules().then(function (res) {\r\n                _this._defaultRules.setAll(res.default);\r\n                _this.checkRules();\r\n            });\r\n            return;\r\n        }\r\n        // Check if there are any rules\r\n        var rules = this.allRules;\r\n        if (!rules || rules.length == 0) {\r\n            return;\r\n        }\r\n        // Init a list of rules to be applied\r\n        var rulesChanged = false;\r\n        var component = $type.getValue(this.component);\r\n        // Check which rules match\r\n        $iter.each(rules.iterator(), function (rule) {\r\n            // Check if rule has an id\r\n            if (!rule.id) {\r\n                rule.id = registry.getUniqueId();\r\n            }\r\n            // Init indicator if this rule should be applied\r\n            var apply = rule.relevant(component);\r\n            // Let's check if this rule needs to be applied\r\n            if ((apply && !_this.isApplied(rule.id)) || (!apply && _this.isApplied(rule.id))) {\r\n                rulesChanged = true;\r\n            }\r\n            _this._appliedRules[rule.id] = apply;\r\n        });\r\n        // Check if we need to re-apply the rules\r\n        if (rulesChanged) {\r\n            this.applyRules();\r\n        }\r\n    };\r\n    /**\r\n     * Applies current rules to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {any} target Target object\r\n     * @todo Better type check\r\n     */\r\n    Responsive.prototype.applyRules = function (target) {\r\n        var _this = this;\r\n        // If no target supplied, we assume the top-level element\r\n        var newTarget = ($type.hasValue(target)\r\n            ? target\r\n            : $type.getValue(this.component));\r\n        // Check each rule\r\n        var defaultStateApplied = false;\r\n        if (this.enabled) {\r\n            $iter.each(this.allRules.iterator(), function (rule) {\r\n                // Get relevant state\r\n                var state = _this.getState(rule, newTarget);\r\n                // If there's a state, it means it needs to be applied\r\n                if (state) {\r\n                    // Check if default state was already applied to this element.\r\n                    // We don't want to go resetting default states to ALL element,\r\n                    // if they don't have responsive states.\r\n                    if (!defaultStateApplied) {\r\n                        // Nope, reset states (instantly).\r\n                        //console.log(\"Applying default state to \" + newTarget.className + \" (\" + newTarget.uid + \"): \" + JSON.stringify(newTarget.defaultState.properties));\r\n                        newTarget.applyCurrentState(0);\r\n                        defaultStateApplied = true;\r\n                    }\r\n                    // Is this rule currently applied?\r\n                    if (_this.isApplied($type.getValue(rule.id))) {\r\n                        // Yes. Apply the responsive state\r\n                        //console.log(\"Applying state to \" + newTarget.className + \" (\" + newTarget.uid + \"): \" + JSON.stringify(state.properties));\r\n                        newTarget.setState(state);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        // Apply rules to the children\r\n        if (newTarget.children) {\r\n            $iter.each(newTarget.children.iterator(), function (child) {\r\n                _this.applyRules(child);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Applies specific oresponsive overrides to the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {IResponsiveRule}  rule    Responsive rule\r\n     * @param {any}              target  Target element\r\n     * @deprecated\r\n     * @hidden\r\n     */\r\n    /*\tpublic applyRule(rule: IResponsiveRule, target: any): void {\r\n\r\n            // Construct state id\r\n            //let stateId = \"responsive-\" + rule.id;\r\n\r\n            // Check if we need to create a state for the element\r\n            let state = this.getState(rule, target);\r\n\r\n            // Apply the state\r\n            if (state) {\r\n                //if (target.className == \"Container\" && target.parent.className == \"ZoomControl\") {\r\n                console.log(\"Applying state to \" + target.className + \" (\" + target.uid + \"): \" + JSON.stringify(state.properties));\r\n                //}\r\n                target.setState(state);\r\n            }\r\n\r\n        }*/\r\n    /**\r\n     * Returns a relative state for the rule/target, or `undefined` if no state is\r\n     * needed.\r\n     *\r\n     * @param  {IResponsiveRule}  rule    [description]\r\n     * @param  {any}              target  [description]\r\n     * @return {Optional}                 [description]\r\n     */\r\n    Responsive.prototype.getState = function (rule, target) {\r\n        var stateId = \"responsive-\" + rule.id;\r\n        var tmpId = target.uid + \"_\" + stateId;\r\n        if ($array.indexOf(this._noStates, tmpId) !== -1) {\r\n            return;\r\n        }\r\n        else if (!target.states.hasKey(stateId)) {\r\n            var state = rule.state(target, stateId);\r\n            if (!state) {\r\n                this._noStates.push(tmpId);\r\n            }\r\n            return state;\r\n        }\r\n        else {\r\n            return target.states.getKey(stateId);\r\n        }\r\n    };\r\n    /**\r\n     * Gets a value from an element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param  {any}     target    Target object\r\n     * @param  {string}  property  Property\r\n     * @return {any}               Property value\r\n     */\r\n    Responsive.prototype.getValue = function (target, property) {\r\n        // This is a bit hacky, first we check if the property exist.\r\n        // If it doesn't we try accessing target's property directly\r\n        var value = target.getPropertyValue(property);\r\n        if (!$type.hasValue(value) && $type.hasValue(target[property])) {\r\n            value = target[property];\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Loads default responsive rules.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {Promise<any>} Responsive rules\r\n     */\r\n    Responsive.prototype.loadDefaultRules = function () {\r\n        return import(/* webpackChunkName: \"responsivedefaults\" */ \"./ResponsiveDefaults\");\r\n    };\r\n    return Responsive;\r\n}(BaseObjectEvents));\r\nexport { Responsive };\r\n//# sourceMappingURL=Responsive.js.map","/**\r\n * An Adapter can be used to apply chained synchronous transformations to any\r\n * value at runtime.\r\n *\r\n * Each type class using Adapters must have `adapters` property and adapter\r\n * interface defined.\r\n *\r\n * Adapters can be used to allow external code to apply transformations to any\r\n * value at any time.\r\n *\r\n * For example we have a Weather class which has a method `now()` which returns\r\n * current temperature.\r\n *\r\n * ```\r\n * function now() {\r\n *   // ... calculate temperature\r\n *   let temp = \"Temperature now is \" + degrees + \"F\";\r\n *   return temp;\r\n * }\r\n * ```\r\n *\r\n * Now, supposed we want to let other classes to modify the output of the\r\n * `now()`? We just apply an adapter to the `temp` before it is returned:\r\n *\r\n * ```\r\n * temp = this.adapters.apply(\"now\", {\r\n *   temp: temp,\r\n *   degrees: degrees\r\n * }).temp;\r\n * ```\r\n *\r\n * Some other class might tap onto it by defining an Adapter that calculates\r\n * the temperature in Celsius:\r\n *\r\n * weather.adapters.add(\"now\", (arg) => {\r\n *   arg.temp += \"(\" + farenheitToCelsius(arg.degrees) + \"C)\";\r\n *   return arh;\r\n * });\r\n *\r\n * Furthermore some time-related class could add time:\r\n *\r\n * weather.adapters.add(\"now\", (arg) => {\r\n *   arg.temp += \"; the time now is \" + (new Date().toLocaleString());\r\n *   return arh;\r\n * });\r\n *\r\n * So without adapters we would get output like this:\r\n *\r\n * ```\r\n * Temperature now is 90F\r\n * ```\r\n *\r\n * With adapters applied we now have:\r\n *\r\n * ```\r\n * Temperature now is 90F (32C); the time now is 12/11/2012, 7:00:00 PM\r\n * ```\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SortedList } from \"./SortedList\";\r\nimport * as $number from \"./Number\";\r\nimport * as $order from \"./Order\";\r\nimport * as $iter from \"../utils/Iterator\";\r\nimport * as $array from \"../utils/Array\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * GLOBAL ADAPTER\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A global adapter is an adpater that is attached to a class type rather than\r\n * specific object instance.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nvar GlobalAdapter = /** @class */ (function () {\r\n    function GlobalAdapter() {\r\n        /**\r\n         * Callback id iterator.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this._callbackId = 0;\r\n        /**\r\n         * A list of if callbacks (adapters).\r\n         *\r\n         */\r\n        this._callbacks = new SortedList(function (left, right) {\r\n            return $order.or($number.order(left.priority, right.priority), $number.order(left.id, right.id));\r\n        });\r\n    }\r\n    /**\r\n     * Adds a global callback which is not specific to any particular object.\r\n     * Whenever an adapter in any object of the specific class type is invoked\r\n     * global adapters will kick in.\r\n     *\r\n     * @param {any}         type      Class type\r\n     * @param {any}         key       Adapter key\r\n     * @param {any}         callback  Callback function\r\n     * @param {number = 0}  priority  Priority (higher priority meaning adapter will be applied later)\r\n     * @param {any}         scope     Callback function scaope\r\n     */\r\n    GlobalAdapter.prototype.addAll = function (type, key, callback, priority, scope) {\r\n        if (priority === void 0) { priority = 0; }\r\n        this._callbacks.insert({\r\n            id: ++this._callbackId,\r\n            key: key,\r\n            callback: callback,\r\n            priority: priority,\r\n            scope: scope,\r\n            type: type\r\n        });\r\n    };\r\n    /**\r\n     * Returns if there are adapters for specific type available.\r\n     *\r\n     * @param  {Target}   type  Adapter type\r\n     * @param  {Key}      key   Adapter key\r\n     * @return {boolean}\r\n     */\r\n    GlobalAdapter.prototype.isEnabled = function (type, key) {\r\n        // TODO check the type and key\r\n        return this._callbacks.length > 0;\r\n    };\r\n    /**\r\n     * Applies global adapters for the object of the specific type.\r\n     *\r\n     * @param {any}  type   Class type\r\n     * @param {any}  key    Adapter key\r\n     * @param {any}  value  Value\r\n     */\r\n    GlobalAdapter.prototype.applyAll = function (type, key, value) {\r\n        // This is needed to improve the performance and reduce garbage collection\r\n        var callbacks = this._callbacks.values;\r\n        var length = callbacks.length;\r\n        if (length == 0) {\r\n            return value;\r\n        }\r\n        // Cycle through all callbacks and find the ones we need to use\r\n        for (var i = 0; i < length; ++i) {\r\n            var item = callbacks[i];\r\n            if (item.key === key && type instanceof item.type) {\r\n                value = item.callback.call(item.scope, value, type, key);\r\n            }\r\n        }\r\n        return value;\r\n    };\r\n    return GlobalAdapter;\r\n}());\r\nexport { GlobalAdapter };\r\n/**\r\n * A global Adapter for plugins that want to add specific\r\n * functionality for any chart, not just specific instance.\r\n *\r\n * If you want to add an adapter which applies to all instances of the same\r\n * object type, like, for instance all slices in PieSeries, you can use\r\n * global adapter.\r\n *\r\n * Global adapter is a system-wide instance, accessible via `globalAdapter`.\r\n *\r\n * ```TypeScript\r\n * am4core.globalAdapter.addAll<am4charts.IPieSeriesAdapters, am4charts.PieSeries, \"fill\">(am4charts.PieSeries, \"fill\", (value, target, key) => {\r\n *   return am4core.color(\"#005500\");\r\n * });\r\n * ```\r\n * ```JavaScript\r\n * am4core.globalAdapter.addAll(am4charts.PieSeries, \"fill\", (value, target, key) => {\r\n *   return am4core.color(\"#005500\");\r\n * });\r\n * ```\r\n *\r\n * @todo Description (improve)\r\n */\r\nexport var globalAdapter = new GlobalAdapter();\r\n/**\r\n * ============================================================================\r\n * REGULAR ADAPTER\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Adapter allows adding ordered callback functions and associating them with a\r\n * string-based key. An Adapter user can then easily invoke those callbacks to\r\n * apply custom functions on its input, output or intermediate values.\r\n *\r\n * Custom code and plugins can add their own callbacks to modify and enhance\r\n * core functionality.\r\n *\r\n * See the description of `add()` for an example.\r\n *\r\n * Almost any object in amCharts4 has own adapter, accessible with `adapter`\r\n * property.\r\n *\r\n * Any adapters added to it will be applied to that object only.\r\n *\r\n * ### Global Adapters\r\n *\r\n * If you want to add an adapter which applies to all instances of the same\r\n * object type, like, for instance all slices in PieSeries, you can use\r\n * global adapter.\r\n *\r\n * Global adapter is a system-wide instance, accessible via `globalAdapter`.\r\n *\r\n * ```TypeScript\r\n * am4core.globalAdapter.addAll<am4charts.IPieSeriesAdapters, am4charts.PieSeries, \"fill\">(am4charts.PieSeries. \"fill\", (value, target, key) => {\r\n *   return am4core.color(\"#005500\");\r\n * });\r\n * ```\r\n * ```JavaScript\r\n * am4core.globalAdapter.addAll(am4charts.PieSeries. \"fill\", (value, target, key) => {\r\n *   return am4core.color(\"#005500\");\r\n * });\r\n * ```\r\n *\r\n * {@link https://www.amcharts.com/docs/v4/reference/adapter_module/#globalAdapter_property More info}.\r\n *\r\n * @important\r\n */\r\nvar Adapter = /** @class */ (function () {\r\n    /**\r\n     * Constructor, sets the object referece this Adapter should be used for.\r\n     *\r\n     * @param {T} c Object\r\n     */\r\n    function Adapter(c) {\r\n        /**\r\n         * Internal counter for callback ids.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this._callbackId = 0;\r\n        /**\r\n         * A list of adapter callbacks.\r\n         *\r\n         * @param {[type]} $number.order(left.priority, right.priority) [description]\r\n         * @param {[type]} $number.order(left.id,       right.id));\t}  [description]\r\n         */\r\n        this._callbacks = new SortedList(function (left, right) {\r\n            return $order.or($number.order(left.priority, right.priority), $number.order(left.id, right.id));\r\n        });\r\n        this.object = c;\r\n        // TODO this exposes the internal events\r\n        this.events = this._callbacks.events;\r\n    }\r\n    /**\r\n     * Adds a callback for a specific key.\r\n     *\r\n     * ```TypeScript\r\n     * // Override fill color value and make all slices green\r\n     * chart.series.template.adapter.add(\"fill\", (value, target, key) => {\r\n     *   return am4core.color(\"#005500\");\r\n     * });\r\n     * ```\r\n     * ```JavaScript\r\n     * // Override fill color value and make all slices green\r\n     * chart.series.template.adapter.add(\"fill\", function(value, target, key) {\r\n     *   return am4core.color(\"#005500\");\r\n     * });\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"adapter\": {\r\n     *     \t// Override fill color value and make all slices green\r\n     *     \t\"fill\": function(value, target, key) {\r\n     *     \t  return am4core.color(\"#005500\");\r\n     *     \t}\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * The above will call user-defined function (adapter) whenever `fill` value\r\n     * is requested from the Pie series, allowing it to override the default\r\n     * using custom code and any fuzzy logic.\r\n     *\r\n     * There can be any number of adapters set on one property key.\r\n     *\r\n     * In this case adapters will be applied in daisy-chain fashion. The first\r\n     * adapter in queue will make its transformation. The next one will have\r\n     * the output of the first adapter as a starting value, etc.\r\n     *\r\n     * The order of the adapters are determined either by the order they were\r\n     * added in, or their `priority` value.\r\n     *\r\n     * The heigher the `priority`, the later in the game adapter will be applied.\r\n     *\r\n     * @param {string}         key       Key\r\n     * @param {any[]) => any}  callback  A callback function\r\n     * @param {number}         priority  The higher priority, the more chance the adapter will be applied last\r\n     * @param {any}            scope     Scope for the callback function\r\n     */\r\n    Adapter.prototype.add = function (key, callback, priority, scope) {\r\n        if (priority === void 0) { priority = 0; }\r\n        this._callbacks.insert({\r\n            id: ++this._callbackId,\r\n            key: key,\r\n            callback: callback,\r\n            priority: priority,\r\n            scope: scope\r\n        });\r\n    };\r\n    /**\r\n     * Checks whether specific adapter is already set.\r\n     *\r\n     * @param   {string}         key       Key\r\n     * @param   {any[]) => any}  callback  A callback function\r\n     * @param   {number}         priority  The higher priority, the more chance the adapter will be applied last\r\n     * @param   {any}            scope     Scope for the callback function\r\n     * @returns                            Adapter set?\r\n     */\r\n    Adapter.prototype.has = function (key, callback, priority, scope) {\r\n        if (priority === void 0) { priority = 0; }\r\n        // @todo Implement actual check\r\n        return false;\r\n    };\r\n    /**\r\n     * Removes adapter callbacks for the specific `key`.\r\n     *\r\n     * If `priority` is specified, only callbacks for that priority are removed.\r\n     *\r\n     * @param {string} key      Key\r\n     * @param {number} priority Priority\r\n     * @todo Implement\r\n     */\r\n    Adapter.prototype.remove = function (key, priority) {\r\n        var _this = this;\r\n        // It has to make a copy because it removes the elements while iterating\r\n        // TODO inefficient\r\n        $array.each($iter.toArray(this._callbacks.iterator()), function (item) {\r\n            // TODO test this\r\n            if (item.key === key && (!$type.isNumber(priority) || priority === item.priority)) {\r\n                _this._callbacks.remove(item);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Returns if there are any adapters set for the specific `key`.\r\n     *\r\n     * @returns {boolean} Are there any adapters for the key?\r\n     */\r\n    Adapter.prototype.isEnabled = function (key) {\r\n        // TODO check the key\r\n        return this._callbacks.length > 0 || globalAdapter.isEnabled(this.object, key);\r\n    };\r\n    /**\r\n     * Passes the input value through all the callbacks for the defined `key`.\r\n     *\r\n     * @param  {string}  key      Key\r\n     * @param  {any}     value    Input value\r\n     * @param  {any[]}   ...rest  Rest of the parameters to be passed into callback\r\n     * @return {any}              Output value\r\n     */\r\n    Adapter.prototype.apply = function (key, value) {\r\n        // This is needed to improve the performance and reduce garbage collection\r\n        var callbacks = this._callbacks.values;\r\n        var length = callbacks.length;\r\n        if (length > 0) {\r\n            for (var i = 0; i < length; ++i) {\r\n                var item = callbacks[i];\r\n                if (item.key === key) {\r\n                    value = item.callback.call(item.scope, value, this.object, key);\r\n                }\r\n            }\r\n        }\r\n        // Apply global adapters\r\n        value = globalAdapter.applyAll(this.object, key, value);\r\n        return value;\r\n    };\r\n    /**\r\n     * Returns all adapter keys that are currently in effect.\r\n     *\r\n     * @return {string[]} Adapter keys\r\n     */\r\n    Adapter.prototype.keys = function () {\r\n        // TODO inefficient\r\n        return $iter.toArray($iter.map(this._callbacks.iterator(), function (x) { return x.key; }));\r\n    };\r\n    /**\r\n     * Copies all the adapter callbacks from `source`.\r\n     *\r\n     * @param {Adapter<Target, T>}  source  An Adapter to copy items from\r\n     */\r\n    Adapter.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        $iter.each(source._callbacks.iterator(), function (x) {\r\n            _this.add(x.key, x.callback, x.priority, x.scope);\r\n        });\r\n    };\r\n    /**\r\n     * Clears all callbacks from this Adapter.\r\n     */\r\n    Adapter.prototype.clear = function () {\r\n        this._callbacks.clear();\r\n    };\r\n    return Adapter;\r\n}());\r\nexport { Adapter };\r\n//# sourceMappingURL=Adapter.js.map","/**\r\n * Animation module.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObjectEvents } from \"../Base\";\r\nimport { SVGDefaults } from \"../defs/SVGDefaults\";\r\nimport { Disposer } from \"../utils/Disposer\";\r\nimport { Color } from \"../utils/Color\";\r\nimport { Percent, percent } from \"../utils/Percent\";\r\nimport * as $async from \"../utils/AsyncPending\";\r\nimport * as $ease from \"../utils/Ease\";\r\nimport * as $colors from \"../utils/Colors\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $array from \"../utils/Array\";\r\nimport * as $type from \"../utils/Type\";\r\nimport { system } from \"../System\";\r\n/**\r\n * Calls a `callback` function for the `duration` of milliseconds.\r\n *\r\n * @todo Needed?\r\n * @deprecated Not used anywhere\r\n * @ignore Exclude from docs\r\n * @param  {number}     duration  Duration (ms)\r\n * @param  {function}   callback  Callback function\r\n * @return {IDisposer}            Disposer\r\n */\r\nexport function animate(duration, callback) {\r\n    var disposed = false;\r\n    // TODO use performance.now() ?\r\n    var startTime = Date.now();\r\n    function loop(now) {\r\n        if (!disposed) {\r\n            var diff = now - startTime;\r\n            if (diff >= duration) {\r\n                callback(1);\r\n            }\r\n            else {\r\n                $async.nextFrame(loop);\r\n                callback(diff / duration);\r\n            }\r\n        }\r\n    }\r\n    $async.nextFrame(loop);\r\n    return new Disposer(function () {\r\n        disposed = true;\r\n    });\r\n}\r\n/**\r\n * Holds the list of currently playing animations.\r\n *\r\n * @ignore Exclude from docs\r\n * @type {Array<IAnimationObject>}\r\n */\r\nexport var animations = [];\r\n/**\r\n * Returns numeric value accoring to progress between start and end values.\r\n *\r\n * @param  {number}  progress  Progress (0-1)\r\n * @param  {number}  from\r\n * @param  {number}  to\r\n * @return {number}            Value according to progress\r\n */\r\nfunction getProgressNumber(progress, from, to) {\r\n    return from + ((to - from) * progress);\r\n}\r\n/**\r\n * Returns [[Percent]] value accoring to progress between start and end\r\n * values.\r\n *\r\n * @param  {number}   progress  Progress (0-1)\r\n * @param  {Percent}  from\r\n * @param  {Percent}  to\r\n * @return {number}             Value according to progress\r\n */\r\nfunction getProgressPercent(progress, from, to) {\r\n    return new Percent(getProgressNumber(progress, from.percent, to.percent));\r\n}\r\n/**\r\n * Returns color value accoring to progress between start and end values.\r\n *\r\n * @param  {number}  progress  Progress (0-1)\r\n * @param  {Color}   from\r\n * @param  {Color}   to\r\n * @return {string}            Color according to progress\r\n */\r\nfunction getProgressColor(progress, from, to) {\r\n    return new Color($colors.interpolate(from.rgb, to.rgb, progress));\r\n}\r\n/**\r\n * [getHybridProperty description]\r\n *\r\n * @todo Description\r\n * @param  {string}     property [description]\r\n * @param  {\"pixel\" |        \"relative\"}  type [description]\r\n * @return {string}              [description]\r\n */\r\nfunction getHybridProperty(property, type) {\r\n    return type + property.charAt(0).toUpperCase() + property.substr(1);\r\n}\r\nfunction processAnimationOptions(object, animationOptions) {\r\n    var processed = [];\r\n    $array.each($array.toArray(animationOptions), function (options) {\r\n        var childObject = (options.childObject ? options.childObject : object);\r\n        if (!$type.hasValue(options.from)) {\r\n            options.from = childObject[options.property];\r\n            if (!$type.hasValue(options.from)) {\r\n                options.from = SVGDefaults[options.property];\r\n            }\r\n            /*if (!$type.hasValue(options.from)) {\r\n                throw Error(\"Could not get initial transition value.\");\r\n            }*/\r\n        }\r\n        if (options.from !== options.to) { // || options.to == (<any>object)[options.property]){ this is not good, as dataItem.value is set to final at once, and we animate workingValue\r\n            // Use different update methods for different value types\r\n            if ($type.isNumber(options.to)) {\r\n                // Check if initial value is not Percent\r\n                if (options.from instanceof Percent) {\r\n                    // It is. Let's convert it to pixel value\r\n                    // @todo Check if we can do this in a less hacky way\r\n                    var convertedFrom = childObject[getHybridProperty(options.property, \"pixel\")];\r\n                    // TODO better check\r\n                    if (!isNaN(convertedFrom)) {\r\n                        options.from = convertedFrom;\r\n                    }\r\n                }\r\n                processed.push({\r\n                    childObject: childObject,\r\n                    property: options.property,\r\n                    update: function (time) {\r\n                        childObject[options.property] = getProgressNumber(time, options.from, options.to);\r\n                    }\r\n                });\r\n                // Check if maybe we have a color or percent value\r\n            }\r\n            else if (options.to instanceof Color) {\r\n                // Yup - set resolved named color\r\n                //options.from = $colors.stringToColor(<string>options.from);\r\n                if (options.from) {\r\n                    processed.push({\r\n                        childObject: childObject,\r\n                        property: options.property,\r\n                        update: function (time) {\r\n                            childObject[options.property] = getProgressColor(time, options.from, options.to);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    processed.push({\r\n                        childObject: childObject,\r\n                        property: options.property,\r\n                        update: function (time) {\r\n                            childObject[options.property] = (time < 0.5 ? options.from : options.to);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            else if (options.to instanceof Percent) {\r\n                // Check if the initial value is maybe in pixels\r\n                // TODO better check\r\n                if (!isNaN(options.from)) {\r\n                    // It is. Let's convert it\r\n                    // @todo Check if we can do this in a less hacky way\r\n                    var convertedFrom = childObject[getHybridProperty(options.property, \"relative\")];\r\n                    // TODO better check\r\n                    if (!isNaN(convertedFrom)) {\r\n                        options.from = percent(convertedFrom * 100);\r\n                    }\r\n                }\r\n                processed.push({\r\n                    childObject: childObject,\r\n                    property: options.property,\r\n                    update: function (time) {\r\n                        childObject[options.property] = getProgressPercent(time, options.from, options.to);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                processed.push({\r\n                    childObject: childObject,\r\n                    property: options.property,\r\n                    update: function (time) {\r\n                        childObject[options.property] = (time < 0.5 ? options.from : options.to);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    });\r\n    return processed;\r\n}\r\nvar AnimationDisposer = /** @class */ (function () {\r\n    function AnimationDisposer(array) {\r\n        this._disposer = new Disposer(function () {\r\n            while (array.length !== 0) {\r\n                array[0].dispose();\r\n            }\r\n        });\r\n    }\r\n    AnimationDisposer.prototype.isDisposed = function () {\r\n        return this._disposer.isDisposed();\r\n    };\r\n    AnimationDisposer.prototype.dispose = function () {\r\n        this._disposer.dispose();\r\n    };\r\n    return AnimationDisposer;\r\n}());\r\nexport { AnimationDisposer };\r\n/**\r\n * Animation can be used to transition certain properties on an object that\r\n * implements [[IAnimatable]] interface.\r\n *\r\n * @see {@link IAnimationEvents} for a list of available events\r\n */\r\nvar Animation = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Animation, _super);\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {IAnimatable}                              object            An object animation should run on\r\n     * @param {IAnimationOptions[] | IAnimationOptions}  animationOptions  One or several (array) of animation options\r\n     * @param {number}                                   duration          Duration (ms)\r\n     * @param {(number) => number}                       easing            Easing function\r\n     */\r\n    function Animation(object, animationOptions, duration, easing) {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Duration of the animation in milliseconds.\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this.duration = 0;\r\n        /**\r\n         * Easing function to use.\r\n         *\r\n         * @see {@link Ease}\r\n         * @type {(value: number) => number}\r\n         */\r\n        _this.easing = $ease.linear;\r\n        /**\r\n         * Contains progress of the current animation: 0 (start) to 1 (end).\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this.progress = 0;\r\n        /**\r\n         * Indicated how many times animation should loop.\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this._loop = 0;\r\n        /**\r\n         * Animation is paused.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this._pause = false;\r\n        /**\r\n         * Holds reference to timeout for delayed play.\r\n         *\r\n         * @type {IDisposer}\r\n         */\r\n        _this._delayTimeout = null;\r\n        /**\r\n         * Elapsed time in currently playing animation.\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this._time = 0;\r\n        _this._isFinished = false;\r\n        _this.className = \"Animation\";\r\n        // Set parameters\r\n        _this.object = object;\r\n        _this.animationOptions = $array.toArray(animationOptions);\r\n        _this.duration = duration;\r\n        if (easing) {\r\n            _this.easing = easing;\r\n        }\r\n        // Run check if there are already animations playing on the same properties\r\n        // and stop them - the last animation takes precedence\r\n        //this.stopSameAnimations();\r\n        /*if ($type.hasValue(callback)) {\r\n            // TODO don't use .call\r\n            this.events.on(\"animationended\", callback, object);\r\n        }*/\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    // TODO verify that this is correct\r\n    Animation.prototype.debug = function () { };\r\n    /**\r\n     * Disposes this object, clears up after itself.\r\n     */\r\n    Animation.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        this.pause();\r\n    };\r\n    /**\r\n     * Delays animation start by X milliseconds.\r\n     *\r\n     * @param  {number}     delay  Delay (ms)\r\n     * @return {Animation}         Animation\r\n     */\r\n    Animation.prototype.delay = function (delay) {\r\n        var _this = this;\r\n        //@todo Maybe not use `bind()`\r\n        if (delay > 0) {\r\n            this.pause();\r\n            // This is so that it will get disposed if `this.object` is disposed\r\n            // TODO hacky, figure out a better way\r\n            $array.move(this.object.animations, this);\r\n            var id_1 = setTimeout(function () {\r\n                _this._delayTimeout = null;\r\n                _this.start();\r\n            }, delay);\r\n            this._delayTimeout = new Disposer(function () {\r\n                clearTimeout(id_1);\r\n            });\r\n        }\r\n        return this;\r\n    };\r\n    Animation.prototype._start = function () {\r\n        this._isFinished = false;\r\n        // Clear delay timeout if there was one\r\n        if (this._delayTimeout) {\r\n            this.removeDispose(this._delayTimeout);\r\n            this._delayTimeout = null;\r\n        }\r\n        // Run check if there are already animations playing on the same properties\r\n        // and stop them - the last animation takes precedence\r\n        this.stopSameAnimations();\r\n        // Reset counters\r\n        this._pause = false;\r\n        // Register animation\r\n        $array.move(animations, this);\r\n        // Register this animation in object's `animations` list\r\n        $array.move(this.object.animations, this);\r\n        system.requestFrame();\r\n    };\r\n    /**\r\n     * Starts animation.\r\n     *\r\n     * @return {Animation} Animation\r\n     */\r\n    Animation.prototype.start = function () {\r\n        this._start();\r\n        this._startTime = Date.now();\r\n        this._time = 0;\r\n        this.staticOptions = [];\r\n        // Process initial property values\r\n        for (var i = this.animationOptions.length - 1; i >= 0; i--) {\r\n            var options = this.animationOptions[i];\r\n            if (!$type.hasValue(options.from)) {\r\n                if (options.childObject) {\r\n                    options.from = options.childObject[options.property];\r\n                }\r\n                else {\r\n                    options.from = this.object[options.property];\r\n                    if (!$type.hasValue(options.from)) {\r\n                        options.from = SVGDefaults[options.property];\r\n                    }\r\n                }\r\n                /*if (!$type.hasValue(options.from)) {\r\n                    throw Error(\"Could not get initial transition value.\");\r\n                }*/\r\n            }\r\n            if (options.from == options.to) { // || options.to == (<any>this.object)[options.property]){ this is not good, as dataItem.value is set to final at once, and we animate workingValue\r\n                $array.remove(this.animationOptions, options);\r\n            }\r\n            else if (!$type.hasValue(options.from)) {\r\n                // Initial value is undefined, treat it as static\r\n                this.staticOptions.push(options);\r\n                $array.remove(this.animationOptions, options);\r\n            }\r\n            else {\r\n                // Use different update methods for different value types\r\n                if ($type.isNumber(options.to)) {\r\n                    // Numeric value\r\n                    options.updateMethod = getProgressNumber;\r\n                    // Check if initial value is not Percent\r\n                    if (options.from instanceof Percent) {\r\n                        // It is. Let's convert it to pixel value\r\n                        // @todo Check if we can do this in a less hacky way\r\n                        var convertedFrom = this.object[getHybridProperty(options.property, \"pixel\")];\r\n                        if (!isNaN(convertedFrom)) {\r\n                            options.from = convertedFrom;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    // Check if maybe we have a color or percent value\r\n                    if (options.to instanceof Color) {\r\n                        // Yup - set resolved named color\r\n                        //options.from = $colors.stringToColor(<string>options.from);\r\n                        if (options.from) {\r\n                            options.updateMethod = getProgressColor;\r\n                        }\r\n                        else {\r\n                            // Static value\r\n                            this.staticOptions.push(options);\r\n                            $array.remove(this.animationOptions, options);\r\n                        }\r\n                    }\r\n                    else if (options.to instanceof Percent) {\r\n                        // Percent\r\n                        options.updateMethod = getProgressPercent;\r\n                        // Check if the initial value is maybe in pixels\r\n                        if (!isNaN(options.from)) {\r\n                            // It is. Let's convert it\r\n                            // @todo Check if we can do this in a less hacky way\r\n                            var convertedFrom = this.object[getHybridProperty(options.property, \"relative\")];\r\n                            if (!isNaN(convertedFrom)) {\r\n                                options.from = percent(convertedFrom * 100);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Static value\r\n                        this.staticOptions.push(options);\r\n                        $array.remove(this.animationOptions, options);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Apply static options (just in case they were reset by previous\r\n        // animation loop)\r\n        this.applyStaticOptions();\r\n        if (this.events.isEnabled(\"animationstarted\")) {\r\n            var event_1 = {\r\n                type: \"animationstarted\",\r\n                target: this,\r\n                progress: this.progress\r\n            };\r\n            this.events.dispatchImmediately(\"animationstarted\", event_1);\r\n        }\r\n        this.update();\r\n        // If duration is 0, just end animation\r\n        if (this.duration === 0) {\r\n            this.end();\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Sets loop count for the animation. If parameter is not a valid number the\r\n     * animation will keep on looping indefinitely.\r\n     *\r\n     * @param  {number}     count  Number of times to loop animation\r\n     * @return {Animation}         Animation\r\n     */\r\n    Animation.prototype.loop = function (count) {\r\n        if (!$type.isNumber(count)) {\r\n            count = Infinity;\r\n        }\r\n        this._loop = count;\r\n        return this;\r\n    };\r\n    /**\r\n     * Pauses animation.\r\n     *\r\n     * @return {Animation} Animation\r\n     */\r\n    Animation.prototype.pause = function () {\r\n        this._pause = true;\r\n        if (this._delayTimeout) {\r\n            this.removeDispose(this._delayTimeout);\r\n            this._delayTimeout = null;\r\n        }\r\n        $array.remove(animations, this);\r\n        $array.remove(this.object.animations, this);\r\n        return this;\r\n    };\r\n    /**\r\n     * Resumes paused animation.\r\n     *\r\n     * @return {Animation} Animation\r\n     */\r\n    Animation.prototype.resume = function () {\r\n        this._start();\r\n        this._startTime = Date.now() - this._time;\r\n        return this;\r\n    };\r\n    /**\r\n     * Jumps to animation end. If animation is set to loop, this will start\r\n     * another round of animation from start.\r\n     *\r\n     * @return {Animation} Animation\r\n     */\r\n    Animation.prototype.end = function () {\r\n        // Pause and complete the progress\r\n        if (this._loop == 0) {\r\n            this.pause();\r\n        }\r\n        this.setProgress(1);\r\n        // Apply static options\r\n        this.applyStaticOptions();\r\n        if (this.events.isEnabled(\"animationended\")) {\r\n            var event_2 = {\r\n                type: \"animationended\",\r\n                target: this,\r\n                progress: this.progress\r\n            };\r\n            this.events.dispatchImmediately(\"animationended\", event_2);\r\n        }\r\n        // Check if we should loop\r\n        if (this._loop > 0) {\r\n            this._loop--;\r\n            this.start();\r\n        }\r\n        else {\r\n            this.stop();\r\n            this._isFinished = true;\r\n        }\r\n        return this;\r\n    };\r\n    Animation.prototype.kill = function () {\r\n        this.pause();\r\n        this._isFinished = true;\r\n    };\r\n    /**\r\n     * Returns indicator if this animation is finished or not\r\n     *\r\n     * @return {boolean} Is finished?\r\n     */\r\n    Animation.prototype.isFinished = function () {\r\n        return this._isFinished;\r\n    };\r\n    /**\r\n     * Applies static options that can't be animated.\r\n     */\r\n    Animation.prototype.applyStaticOptions = function () {\r\n        var _this = this;\r\n        $array.each(this.staticOptions, function (options) {\r\n            if (options.childObject) {\r\n                options.childObject[options.property] = _this.progress == 1 ? options.to : options.from;\r\n            }\r\n            else {\r\n                _this.object[options.property] = _this.progress == 1 ? options.to : options.from;\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Stops animation.\r\n     *\r\n     * When animation is stopped, the properties of the target object will remain\r\n     * where they were at the moment when `stop()` was called.\r\n     *\r\n     * @param  {boolean}    skipEvent  Do not trigger `animationstopped` event\r\n     * @return {Animation}             Animation\r\n     */\r\n    Animation.prototype.stop = function (skipEvent) {\r\n        this.pause();\r\n        if (!skipEvent) {\r\n            if (this.events.isEnabled(\"animationstopped\")) {\r\n                var event_3 = {\r\n                    type: \"animationstopped\",\r\n                    target: this,\r\n                    progress: this.progress\r\n                };\r\n                this.events.dispatchImmediately(\"animationstopped\", event_3);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Sets current progress and updates object's numeric and color values.\r\n     *\r\n     * @param {number} progress Progress (0-1)\r\n     */\r\n    Animation.prototype.setProgress = function (progress) {\r\n        var _this = this;\r\n        this._time = this.duration * progress; // just in case we call this from outside\r\n        $array.each(this.animationOptions, function (options) {\r\n            if (options.updateMethod && $type.hasValue(options.from)) {\r\n                var value = options.updateMethod(progress, options.from, options.to);\r\n                if (options.childObject) {\r\n                    options.childObject[options.property] = value;\r\n                }\r\n                else {\r\n                    _this.object[options.property] = value;\r\n                }\r\n            }\r\n        });\r\n        this.progress = progress;\r\n        if (this.events.isEnabled(\"animationprogress\")) {\r\n            var event_4 = {\r\n                type: \"animationprogress\",\r\n                target: this,\r\n                progress: this.progress\r\n            };\r\n            this.events.dispatchImmediately(\"animationprogress\", event_4);\r\n        }\r\n        system.requestFrame();\r\n    };\r\n    /**\r\n     * Tracks and sets progress according to time or frames.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {Animation} Animation\r\n     */\r\n    Animation.prototype.update = function () {\r\n        if (!this._pause) {\r\n            var progress = void 0;\r\n            this._time = $math.fitToRange(Date.now() - this._startTime, 0, this.duration);\r\n            var timeProgress = this._time / this.duration;\r\n            progress = this.easing(timeProgress);\r\n            if (this.duration == 0 || !$type.isNumber(progress) || timeProgress >= 1) {\r\n                progress = 1;\r\n            }\r\n            this.setProgress(progress);\r\n            if ($math.round(this._time / this.duration, 6) == 1) {\r\n                this.end();\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Object.defineProperty(Animation.prototype, \"delayed\", {\r\n        /**\r\n         * Returns `true` if this animation is delayed.\r\n         *\r\n         * @readonly\r\n         * @return {boolean} [description]\r\n         */\r\n        get: function () {\r\n            return this._delayTimeout ? true : false;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Checks other animations currently running on the same object and removes\r\n     * overlapping options from those other animations that are contained in\r\n     * this animation.\r\n     *\r\n     * This is needed to ensure that no two confurent animations step on each\r\n     * other's toes by trying to animate the same property.\r\n     */\r\n    Animation.prototype.stopSameAnimations = function () {\r\n        var _this = this;\r\n        // stop animation of the same property\r\n        // TODO make this more efficient\r\n        // TODO don't copy the array\r\n        $array.each($array.copy(this.object.animations), function (animation) {\r\n            if (animation !== _this && !animation.delayed) {\r\n                var killed_1 = [];\r\n                $array.each(_this.animationOptions, function (newOptions) {\r\n                    $array.each(animation.animationOptions, function (oldOptions) {\r\n                        if (newOptions.property == oldOptions.property && newOptions.childObject == oldOptions.childObject) {\r\n                            killed_1.push(oldOptions);\r\n                            if (animation.animationOptions.length == 0) {\r\n                                animation.kill();\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n                $array.each(killed_1, function (oldOptions) {\r\n                    $array.remove(animation.animationOptions, oldOptions);\r\n                });\r\n            }\r\n        });\r\n    };\r\n    return Animation;\r\n}(BaseObjectEvents));\r\nexport { Animation };\r\n//# sourceMappingURL=Animation.js.map","import * as $math from \"./Math\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Searches `array` for `value`.\r\n *\r\n * Returns -1 if not found.\r\n *\r\n * @param   {ArrayLike<A>}  array  Source array\r\n * @param   {A}             value  Value to search\r\n * @returns {number}               Index\r\n */\r\nexport function indexOf(array, value) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        // TODO handle NaN\r\n        if (array[i] === value) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * Calls `test` for each element in `array`.\r\n *\r\n * If `test` returns `true` then it immediately returns `true`.\r\n *\r\n * If `test` returns `false` for all of the elements in `array` then it returns `false`.\r\n *\r\n * @param   {ArrayLike<A>}           array  Source array\r\n * @param   {(value: A) => boolean}  test   Function which is called on each element\r\n * @returns {boolean}                Whether `test` returned true or not\r\n */\r\nexport function any(array, test) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        if (test(array[i])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Calls `fn` function for every member of array and returns a new array out\r\n * of all outputs.\r\n *\r\n * @param   {ArrayLike<A>}  array  Source array\r\n * @param   {function}      fn     Callback function\r\n * @returns {number}               New array\r\n */\r\nexport function map(array, fn) {\r\n    var length = array.length;\r\n    var output = new Array(length);\r\n    for (var i = 0; i < length; ++i) {\r\n        output[i] = fn(array[i], i);\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param   {ArrayLike<A>}  array  Source array\r\n * @param   {function}      fn     Callback function\r\n */\r\nexport function each(array, fn) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        fn(array[i], i);\r\n    }\r\n}\r\n/**\r\n * Iterates through all items in array in reverse order and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param   {ArrayLike<A>}  array  Source array\r\n * @param   {function}      fn     Callback function\r\n */\r\nexport function eachReverse(array, fn) {\r\n    var i = array.length;\r\n    while (i--) {\r\n        fn(array[i], i);\r\n    }\r\n}\r\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * If `fn` call evaluates to `false`, further iteration is cancelled.\r\n *\r\n * @param   {ArrayLike<A>}  array  Source array\r\n * @param   {function}      fn     Callback function\r\n */\r\nexport function eachContinue(array, fn) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        if (!fn(array[i], i)) {\r\n            break;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Shifts an item at `index` towards beginning of the array.\r\n *\r\n * @param {ArrayLike<A>}  array  Source array\r\n * @param {number}        index  Target element index\r\n */\r\nexport function shiftLeft(array, index) {\r\n    var length = array.length;\r\n    for (var i = index; i < length; ++i) {\r\n        array[i - index] = array[i];\r\n    }\r\n    array.length = length - index;\r\n}\r\n/**\r\n * Returns the last item of the array.\r\n *\r\n * @param   {ArrayLike<A>}  array  Source array\r\n * @returns {A}                    Last item\r\n */\r\nexport function last(array) {\r\n    var length = array.length;\r\n    return length ? array[length - 1] : undefined;\r\n}\r\n/**\r\n * Returns the first item of the array.\r\n *\r\n * @param   {ArrayLike<A>}  array  Source array\r\n * @returns {A}                    Last item\r\n */\r\nexport function first(array) {\r\n    return array[0];\r\n}\r\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * Caps `index` to be between `0` and `array.length`\r\n *\r\n * @param {ArrayLike<A>}  array    Source array\r\n * @param {ArrayLike<A>}  element  Item to insert\r\n * @param {ArrayLike<A>}  array    Index to insert item at\r\n */\r\nexport function insert(array, element, index) {\r\n    //if (array) {\r\n    index = $math.fitToRange(index, 0, array.length);\r\n    array.splice(index, 0, element);\r\n    //}\r\n}\r\n/**\r\n * Removes all copies of `element` from `array` (if they exist) and then\r\n * inserts `element` at `index`.\r\n *\r\n * @param {ArrayLike<A>}  array    Source array\r\n * @param {ArrayLike<A>}  element  Item\r\n * @param {ArrayLike<A>}  array    Index to move item to\r\n */\r\nexport function setIndex(array, element, index) {\r\n    remove(array, element);\r\n    insert(array, element, index);\r\n}\r\n/**\r\n * Pushes all of the elements from `input` into `array`.\r\n *\r\n * @param {ArrayLike<A>}  array  Output array\r\n * @param {ArrayLike<A>}  input  Input array\r\n */\r\nexport function pushAll(array, input) {\r\n    var length = input.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        array.push(input[i]);\r\n    }\r\n}\r\n/**\r\n * Removes `element` from `array`.\r\n *\r\n * If there are multiple copies of `element`, they are all removed.\r\n *\r\n * @param {ArrayLike<A>}  array    Source array\r\n * @param {ArrayLike<A>}  element  Item to remove\r\n */\r\nexport function remove(array, element) {\r\n    var found = false;\r\n    var index = array.indexOf(element);\r\n    if (index !== -1) {\r\n        found = true;\r\n        array.splice(index, 1);\r\n        var length_1 = array.length;\r\n        while (index < length_1) {\r\n            // TODO handle NaN\r\n            if (array[index] === element) {\r\n                array.splice(index, 1);\r\n                --length_1;\r\n            }\r\n            else {\r\n                ++index;\r\n            }\r\n        }\r\n    }\r\n    return found;\r\n}\r\n/**\r\n * Adds an `element` to `array`.\r\n *\r\n * If array already contains and item like this, it is removed before adding\r\n * it again.\r\n *\r\n * Optionally `toIndex` can be specified to add element at specific index.\r\n *\r\n * @param {ArrayLike<A>}  array    Source array\r\n * @param {ArrayLike<A>}  element  Item to add\r\n * @param {ArrayLike<A>}  array    Index to move item to\r\n */\r\nexport function move(array, element, toIndex) {\r\n    // @todo this implementation must be the same as the List.moveValue method\r\n    // @todo don't do anything if the desired index is the same as the current index\r\n    var index = indexOf(array, element);\r\n    // @todo remove all old values rather than only the first ?\r\n    if (index !== -1) {\r\n        removeIndex(array, index);\r\n    }\r\n    if (toIndex == null) {\r\n        array.push(element);\r\n    }\r\n    else {\r\n        insertIndex(array, toIndex, element);\r\n    }\r\n}\r\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param {ArrayLike<A>}  array    Source array\r\n * @param {ArrayLike<A>}  element  Item to add\r\n * @param {ArrayLike<A>}  array    Index to add item at\r\n */\r\nexport function add(array, element, index) {\r\n    // Append to the end if index is not set\r\n    if (!$type.isNumber(index)) {\r\n        array.push(element);\r\n    }\r\n    // Add to the beginning of array if index is 0\r\n    else if (index === 0) {\r\n        array.unshift(element);\r\n    }\r\n    // Add to indicated place if index is set\r\n    else {\r\n        array.splice(index, 0, element);\r\n    }\r\n}\r\n/**\r\n * Removes `element` from `array` (if it exists) and then inserts `element` at\r\n * `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param {ArrayLike<A>}  array    Source array\r\n * @param {ArrayLike<A>}  element  Item to remove\r\n * @param {ArrayLike<A>}  array    Index to move item to\r\n */\r\nexport function replace(array, element, index) {\r\n    // check if exists\r\n    var ind = array.indexOf(element);\r\n    // remove if exists\r\n    if (ind !== -1) {\r\n        array.splice(ind, 1);\r\n    }\r\n    // add to end if index is not set\r\n    if (!$type.isNumber(index)) {\r\n        array.push(element);\r\n    }\r\n    // add to indicated place if index is set\r\n    else {\r\n        array.splice(index, 0, element);\r\n    }\r\n}\r\n/**\r\n * Wraps `input` in an array, if it isn't already an array.\r\n *\r\n * @param {Array<A> | A}  input  Source value\r\n * @return {Array<A>} An array\r\n */\r\nexport function toArray(input) {\r\n    if (Array.isArray(input)) {\r\n        return input;\r\n    }\r\n    else {\r\n        return [input];\r\n    }\r\n}\r\n/**\r\n * Returns `true` if `element` exists in `array`.\r\n *\r\n * @param   {ArrayLike<A>}  array    Source array\r\n * @param   {ArrayLike<A>}  element  Item to search for\r\n * @returns {boolean}                Item in array?\r\n */\r\nexport function has(array, element) {\r\n    return indexOf(array, element) !== -1;\r\n}\r\n/**\r\n * Returns a shallow copy of `array`.\r\n *\r\n * @param   {ArrayLike<A>}  array  Source array\r\n * @returns {boolean}              Copy of the array\r\n */\r\nexport function copy(array) {\r\n    var length = array.length;\r\n    // It's faster to create the array with a pre-defined length\r\n    var output = new Array(length);\r\n    for (var i = 0; i < length; ++i) {\r\n        // Because the array has a pre-defined length, we have to assign rather than push\r\n        // This is also faster than pushing\r\n        output[i] = array[i];\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * Returns a copy of `array` which contains all the elements between `start`\r\n * and `end`. (including `start` and excluding `end`)\r\n *\r\n * If `end` is not provided, it defaults to `array.length`.\r\n *\r\n * @param   {ArrayLike<A>}  array  Source array\r\n * @param   {number}        start  Start index\r\n * @param   {number}        end    End index\r\n * @returns {Array<A>}             Part of the array\r\n */\r\nexport function slice(array, start, end) {\r\n    if (end === void 0) { end = array.length; }\r\n    var output = new Array(end - start);\r\n    for (var i = start; i < end; ++i) {\r\n        output[i - start] = array[i];\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * Inserts a value into array at specific index.\r\n *\r\n * @param {Array<A>}  array  Source array\r\n * @param {number}    index  Index\r\n * @param {A}         value  Value to insert\r\n */\r\nexport function insertIndex(array, index, value) {\r\n    array.splice(index, 0, value);\r\n}\r\n/**\r\n * Removes a value from array at specific index.\r\n *\r\n * @param {Array<A>}  array  Source array\r\n * @param {number}    index  Index\r\n */\r\nexport function removeIndex(array, index) {\r\n    array.splice(index, 1);\r\n}\r\n/**\r\n * Orders an array using specific `ordering` function and returns index of\r\n * the `value`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param   {ArrayLike<A>}  array     Source array\r\n * @param   {function}      ordering  An ordering function\r\n * @param   {ArrayLike<A>}  value     Value to search for\r\n * @returns {SortResult}              Result of the search\r\n */\r\nexport function getSortedIndex(array, ordering, value) {\r\n    var start = 0;\r\n    var end = array.length;\r\n    var found = false;\r\n    while (start < end) {\r\n        // TODO is this faster/slower than using Math.floor ?\r\n        var pivot = (start + end) >> 1;\r\n        var order = ordering(value, array[pivot]);\r\n        // less\r\n        if (order < 0) {\r\n            end = pivot;\r\n            // equal\r\n        }\r\n        else if (order === 0) {\r\n            found = true;\r\n            start = pivot + 1;\r\n            // more\r\n        }\r\n        else {\r\n            start = pivot + 1;\r\n        }\r\n    }\r\n    return {\r\n        found: found,\r\n        index: (found ? start - 1 : start)\r\n    };\r\n}\r\n/**\r\n * Searches the array using custom function and returns index of the item if\r\n * found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns -1.\r\n *\r\n * @param   {ArrayLike<A>}  array    Source array\r\n * @param   {function}      matches  Search function\r\n * @returns {number}                 Index of the item if found\r\n */\r\nexport function findIndex(array, matches) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        if (matches(array[i], i)) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * Searches the array using custom function and returns item if found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns `undefined`.\r\n *\r\n * @param   {ArrayLike<A>}  array    Source array\r\n * @param   {function}      matches  Search function\r\n * @returns {number}                 Item if found\r\n */\r\nexport function find(array, matches) {\r\n    var index = findIndex(array, matches);\r\n    if (index !== -1) {\r\n        return array[index];\r\n    }\r\n}\r\n//# sourceMappingURL=Array.js.map","/**\r\n * A collection of low-level async operation stuff.\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $array from \"./Array\";\r\nvar pendingFrame = false;\r\nvar nextQueue = [];\r\nvar readQueue = [];\r\nvar writeQueue = [];\r\nvar idleQueue = [];\r\nvar fps = 1000 / 60;\r\n/**\r\n * [raf description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @type {[type]}\r\n */\r\nexport var raf = (typeof requestAnimationFrame === \"function\"\r\n    ? function (fn) {\r\n        requestAnimationFrame(fn);\r\n    }\r\n    : function (fn) {\r\n        setTimeout(fn, fps);\r\n    });\r\n/**\r\n * [frameLoop description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nfunction frameLoop() {\r\n    var now = Date.now();\r\n    var length = nextQueue.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        nextQueue[i](now);\r\n    }\r\n    $array.shiftLeft(nextQueue, length);\r\n    for (var i = 0; i < readQueue.length; ++i) {\r\n        readQueue[i](now);\r\n    }\r\n    readQueue.length = 0;\r\n    for (var i = 0; i < writeQueue.length; ++i) {\r\n        writeQueue[i](now);\r\n    }\r\n    writeQueue.length = 0;\r\n    if (nextQueue.length === 0 && readQueue.length === 0) {\r\n        pendingFrame = false;\r\n    }\r\n    else {\r\n        raf(frameLoop);\r\n    }\r\n}\r\n/**\r\n * [pendFrame description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nfunction pendFrame() {\r\n    if (!pendingFrame) {\r\n        pendingFrame = true;\r\n        raf(frameLoop);\r\n    }\r\n}\r\n/**\r\n * [nextFrame description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param {Listener} fn [description]\r\n */\r\nexport function nextFrame(fn) {\r\n    nextQueue.push(fn);\r\n    pendFrame();\r\n}\r\n/**\r\n * [readFrame description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param {Listener} fn [description]\r\n */\r\nexport function readFrame(fn) {\r\n    readQueue.push(fn);\r\n    pendFrame();\r\n}\r\n/**\r\n * [writeFrame description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param {Listener} fn [description]\r\n */\r\nexport function writeFrame(fn) {\r\n    writeQueue.push(fn);\r\n    pendFrame();\r\n}\r\n/**\r\n * [whenIdle description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param {Listener} fn [description]\r\n */\r\nexport function whenIdle(fn) {\r\n    idleQueue.push(fn);\r\n}\r\n/**\r\n * [triggerIdle description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @todo Maybe don't trigger a callback which was added while in the middle of triggering?\r\n */\r\nexport function triggerIdle() {\r\n    var now = Date.now();\r\n    var length = idleQueue.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        idleQueue.shift()(now);\r\n    }\r\n}\r\n//# sourceMappingURL=AsyncPending.js.map","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Dictionary } from \"./Dictionary\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Represents object cache.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Better storage\r\n * @todo TTL logging\r\n * @todo Garbage collector\r\n */\r\nvar Cache = /** @class */ (function () {\r\n    function Cache() {\r\n        /**\r\n         * Storage for cache items.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        this._storage = new Dictionary();\r\n        /**\r\n         * Default TTL in milliseconds.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.ttl = 1000;\r\n    }\r\n    /**\r\n     * Caches or updates cached value, resets TTL.\r\n     *\r\n     * If `ttl` is set to zero, item will never expire.\r\n     *\r\n     * @param {string}  owner  An id of the object that owns this cache\r\n     * @param {string}  key    Index key\r\n     * @param {A}       value  Value\r\n     * @param {number}  ttl    TTL of the cache to live in milliseconds\r\n     */\r\n    Cache.prototype.set = function (owner, key, value, ttl) {\r\n        // Create if storage does not exist for this owner\r\n        var ownerStorage = this._storage.insertKeyIfEmpty(owner, function () { return new Dictionary(); });\r\n        // Create cache item\r\n        var item = {\r\n            \"touched\": new Date().getTime(),\r\n            \"ttl\": $type.isNumber(ttl) ? ttl : this.ttl,\r\n            \"value\": value\r\n        };\r\n        // Set\r\n        ownerStorage.setKey(key, item);\r\n    };\r\n    /**\r\n     * Rerturns cached item, respecting TTL.\r\n     *\r\n     * @param  {string}  owner  An id of the object that owns this cache\r\n     * @param  {string}  key    Index key\r\n     * @param  {string}  value  Value to return if cache not available\r\n     * @return {A}              Value, or `undefined` if not set\r\n     */\r\n    Cache.prototype.get = function (owner, key, value) {\r\n        if (value === void 0) { value = undefined; }\r\n        // \t\t || ypeof this._storage[owner][key] === \"undefined\" || this._storage[owner][key].expired === true) {\r\n        if (this._storage.hasKey(owner)) {\r\n            var ownerStorage = this._storage.getKey(owner);\r\n            if (ownerStorage.hasKey(key)) {\r\n                var cacheItem = ownerStorage.getKey(key);\r\n                if (cacheItem.ttl && ((cacheItem.touched + cacheItem.ttl) < new Date().getTime())) {\r\n                    cacheItem.expired = true;\r\n                }\r\n                if (cacheItem.expired) {\r\n                    ownerStorage.removeKey(key);\r\n                    return value;\r\n                }\r\n                return cacheItem.value;\r\n            }\r\n            else {\r\n                return value;\r\n            }\r\n        }\r\n        else {\r\n            return value;\r\n        }\r\n    };\r\n    /**\r\n     * Clears cache for specific owner or everything.\r\n     *\r\n     * @param {string} owner Owner to clear cache for\r\n     */\r\n    Cache.prototype.clear = function (owner) {\r\n        if (owner) {\r\n            this._storage.removeKey(owner);\r\n        }\r\n        else {\r\n            this._storage.clear();\r\n        }\r\n    };\r\n    return Cache;\r\n}());\r\nexport { Cache };\r\n/**\r\n * ============================================================================\r\n * GLOBAL INSTANCE\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A global instance of cache. Use this instance to cache any values.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport var cache = new Cache();\r\n//# sourceMappingURL=Cache.js.map","/**\r\n * This module contains Color object definition\r\n */\r\nimport { registry } from \"../Registry\";\r\nimport * as $colors from \"./Colors\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * Represents a color.\r\n *\r\n * `Color` accepts value only in [[iRGB]] object format. To create `Color`\r\n * object by parsing it from any supported string-based formats, use helper\r\n * [[color]] function:\r\n *\r\n * ```TypeScript\r\n * am4core.color(\"#ff0000\");\r\n * am4core.color(\"#f00\");\r\n * am4core.color(\"rgb(255, 0, 0)\");\r\n * am4core.color(\"rgba(255, 0, 0, 0.5)\");\r\n * am4core.color({ r: 255, g: 0, b: 0 });\r\n * am4core.color(\"red\");\r\n * ```\r\n * ```JavaScript\r\n * am4core.color(\"#ff0000\");\r\n * am4core.color(\"#f00\");\r\n * am4core.color(\"rgb(255, 0, 0)\");\r\n * am4core.color(\"rgba(255, 0, 0, 0.5)\");\r\n * am4core.color({ r: 255, g: 0, b: 0 });\r\n * am4core.color(\"red\");\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\r\nvar Color = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {iRGB} color Source color\r\n     */\r\n    function Color(color) {\r\n        this._value = color;\r\n    }\r\n    Object.defineProperty(Color.prototype, \"rgb\", {\r\n        /**\r\n         * Returns [[iRGB]] representation of the color.\r\n         *\r\n         * @return {iRGB} RGB object\r\n         */\r\n        get: function () {\r\n            return this._value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Color.prototype, \"hex\", {\r\n        /**\r\n         * Returns color hex value string, e.g. \"#FF0000\".\r\n         *\r\n         * @return {string} Hex color code\r\n         */\r\n        get: function () {\r\n            return this._value ? $colors.rgbToHex(this._value) : \"none\";\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Color.prototype, \"rgba\", {\r\n        /**\r\n         * Returns an `rgba()` representation of the color, e.g.:\r\n         * `rgba(255, 0, 0, 0.5)`.\r\n         *\r\n         * @return {string} rgba color string\r\n         */\r\n        get: function () {\r\n            return this._value ? $colors.rgbToRGBA(this._value) : \"none\";\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Color.prototype, \"alpha\", {\r\n        /**\r\n         * Returns current transparency.\r\n         *\r\n         * @return {number} Alpha (0-1)\r\n         */\r\n        get: function () {\r\n            if (this._value != null && this._value.a != null) {\r\n                return this._value.a;\r\n            }\r\n            else {\r\n                return 1;\r\n            }\r\n        },\r\n        /**\r\n         * Set alpha (transparency) of the color.\r\n         *\r\n         * @param {number} value Alpha (0-1)\r\n         */\r\n        set: function (value) {\r\n            if (this._value) {\r\n                this._value.a = value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Color.prototype, \"lightColor\", {\r\n        /**\r\n         * Returns current light color setting.\r\n         *\r\n         * @return {Color} Color\r\n         */\r\n        get: function () {\r\n            if (!this._lightColor) {\r\n                this._lightColor = new Color({ r: 255, g: 255, b: 255 });\r\n            }\r\n            return this._lightColor;\r\n        },\r\n        /**\r\n         * Sets \"light\" color. Used when determining contrasting color.\r\n         *\r\n         * @param {Color} color Color\r\n         */\r\n        set: function (color) {\r\n            this._lightColor = color;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Color.prototype, \"darkColor\", {\r\n        /**\r\n         * Returns current dark color setting.\r\n         *\r\n         * @return {Color} Color\r\n         */\r\n        get: function () {\r\n            if (!this._darkColor) {\r\n                this._darkColor = new Color({ r: 0, g: 0, b: 0 });\r\n            }\r\n            return this._darkColor;\r\n        },\r\n        /**\r\n         * Sets \"dark\" color. Used when determining contrasting color.\r\n         *\r\n         * @param {Color} color Color\r\n         */\r\n        set: function (color) {\r\n            this._darkColor = color;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Overrides `toString` method so that [[Color]] object can be used as\r\n     * string.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {string} String represantion of color (usable in CSS)\r\n     */\r\n    Color.prototype.toString = function () {\r\n        return this.alpha < 1 ? this.rgba : this.hex;\r\n    };\r\n    /**\r\n     * Returns a new [[Color]] which is percent lighter (positive value),\r\n     * or darker (negative value).\r\n     *\r\n     * Parameter is in the scale of -1 to 1.\r\n     *\r\n     * @param  {number}  percent  Increase/decrease lightness by X\r\n     * @return {Color}            New Color\r\n     */\r\n    Color.prototype.lighten = function (percent) {\r\n        return new Color($colors.lighten(this.rgb, percent));\r\n    };\r\n    /**\r\n     * Returns a new [[Color]] which is percent brighter (positive value),\r\n     * or darker (negative value).\r\n     *\r\n     * Parameter is in the scale of -1 to 1.\r\n     *\r\n     * @param  {number}  percent  Increase/decrease brightness by X\r\n     * @return {Color}            New Color\r\n     */\r\n    Color.prototype.brighten = function (percent) {\r\n        return new Color($colors.brighten(this.rgb, percent));\r\n    };\r\n    /**\r\n     * Returns a new [[Color]] based on current color with specific saturation\r\n     * applied.\r\n     *\r\n     * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully\r\n     * saturated).\r\n     *\r\n     * @param  {number}  saturation  Saturation (0-1)\r\n     * @return {Color}               New (saturated) color\r\n     */\r\n    Color.prototype.saturate = function (saturation) {\r\n        return new Color($colors.saturate(this.rgb, saturation));\r\n    };\r\n    Object.defineProperty(Color.prototype, \"alternative\", {\r\n        /**\r\n         * Returns a either light or dark color that contrasts specifically with\r\n         * this color.\r\n         *\r\n         * Uses properties `darkColor` (default black) and `lightColor` (default\r\n         * white).\r\n         *\r\n         * Useful when determining which color label should be on a colored\r\n         * background, so that it stands out.\r\n         *\r\n         * @return {Color} Contrasting color\r\n         */\r\n        get: function () {\r\n            if (this.rgb != null) {\r\n                return $colors.isLight(this.rgb) ? this.darkColor : this.lightColor;\r\n            }\r\n            else {\r\n                throw new Error(\"Color does not exist\");\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Color;\r\n}());\r\nexport { Color };\r\n/**\r\n * Resolves an input variable to a normal [[iRGB]] color and creates [[Color]]\r\n * object for it.\r\n *\r\n * @param  {string | iRGB | Color}  value  Input value\r\n * @param  {number}                 alpha  Alpha (0-1)\r\n * @return {Color}                         Color object\r\n */\r\nexport function color(value, alpha) {\r\n    if (!$type.hasValue(value)) {\r\n        return new Color(undefined);\r\n    }\r\n    if (typeof value == \"string\") {\r\n        var cacheId = \"_color_\" + value + \"_\" + (alpha || \"1\");\r\n        var cached = registry.getCache(cacheId);\r\n        if (cached) {\r\n            return new Color({\r\n                r: cached.r,\r\n                g: cached.g,\r\n                b: cached.b,\r\n                a: cached.a\r\n            });\r\n        }\r\n        var rgb = $colors.rgb(value, alpha);\r\n        registry.setCache(cacheId, rgb);\r\n        return new Color(rgb);\r\n    }\r\n    // Check if it's already a Color object\r\n    if (value instanceof Color) {\r\n        if ($type.hasValue(alpha)) {\r\n            value.alpha = alpha;\r\n        }\r\n        return value;\r\n    }\r\n    // Not a string or Color instance, it's the iRGB object then\r\n    return new Color(value);\r\n}\r\n/**\r\n * Checks if supplied argument is instance of [[Color]].\r\n *\r\n * @param  {any}      value  Input value\r\n * @return {boolean}         Is Color?\r\n */\r\nexport function isColor(value) {\r\n    return value instanceof Color;\r\n}\r\n/**\r\n * Converts any value to [[Color]].\r\n *\r\n * @param  {any}    value  Input value\r\n * @return {Color}         Color\r\n */\r\nexport function castColor(value) {\r\n    return color(value);\r\n}\r\n/**\r\n * Converts any value into a [[Color]].\r\n *\r\n * @param  {any}    value  Source value\r\n * @return {Color}         Color object\r\n */\r\nexport function toColor(value) {\r\n    if ($type.hasValue(value) && !isColor(value)) {\r\n        return castColor(value);\r\n    }\r\n    return value;\r\n}\r\n//# sourceMappingURL=Color.js.map","/**\r\n * This module contains ColorSet object definition\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { Color, color } from \"./Color\";\r\nimport * as $colors from \"./Colors\";\r\nimport * as $type from \"./Type\";\r\nimport * as $utils from \"./Utils\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Represents a set of colors. Can also generate colors according to set rules.\r\n *\r\n * @important\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\r\nvar ColorSet = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ColorSet, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ColorSet() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Holds the list of the colors in this set. (preset or auto-generated)\r\n         *\r\n         * @type {Color[]}\r\n         */\r\n        _this._list = [];\r\n        /**\r\n         * Current step in a color generator's cycle.\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this._currentStep = 0;\r\n        /**\r\n         * Current pass in the color generator's cycle. Normally a generator would\r\n         * cycle through all available hue range, then repeat it, alternating other\r\n         * color properties, to generate distinctive colors.\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this._currentPass = 0;\r\n        /**\r\n         * A base color. If there are no colors pre-set in the color list, ColorSet\r\n         * will use this color as a base when generating new ones, applying\r\n         * `stepOptions` and `passOptions` to this base color.\r\n         *\r\n         * @type {Color}\r\n         */\r\n        _this.baseColor = new Color({\r\n            r: 103,\r\n            g: 183,\r\n            b: 220\r\n        });\r\n        /**\r\n         * Modifications to apply with each new generated color.\r\n         *\r\n         * @type {Partial<IColorSetStepOptions>}\r\n         */\r\n        _this.stepOptions = {};\r\n        /**\r\n         * Modifications to apply on top of `stepOptions` for each \"pass\" of the\r\n         * color generation.\r\n         *\r\n         * A \"pass\" is when ColorSet generates `minColors` number of colors.\r\n         *\r\n         * @type {Partial<IColorSetStepOptions>}\r\n         */\r\n        _this.passOptions = {\r\n            brighten: -0.2\r\n        };\r\n        /**\r\n         * An index increment to use when iterating through color list.\r\n         *\r\n         * Default is 1, which means returning each and every color.\r\n         *\r\n         * Setting it to a bigger number will make ColorSet `next()` iterator skip\r\n         * some colors.\r\n         *\r\n         * E.g. setting to 2, will return every second color in the list.\r\n         *\r\n         * This is useful, when the color list has colors that are too close each\r\n         * other for contrast.\r\n         *\r\n         * However, having bigger number will mean that `next()` iterator will go\r\n         * through the list quicker, and the generator will kick sooner.\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this.step = 1;\r\n        /**\r\n         * A number of colors to generate in one \"pass\".\r\n         *\r\n         * This setting can be automatically overridden, if ColorSet has a list of\r\n         * pre-set colors. In such case ColorSet will generate exactly the same\r\n         * number of colors with each pass as there were colors in original set.\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this.minColors = 20;\r\n        /**\r\n         * Do not let the \"lightness\" of generated color to fall below this\r\n         * threshold.\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this.minLightness = 0.2;\r\n        /**\r\n         * Do not let the \"lightness\" of generated color to get above this threshold.\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this.maxLightness = 0.9;\r\n        /**\r\n         * Randomly shuffle generated colors.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this.shuffle = false;\r\n        /**\r\n         * When colors are generated, based on `stepOptions`, each generated color\r\n         * gets either lighter or darker.\r\n         *\r\n         * If this is set to `true`, color generator will switch to opposing spectrum\r\n         * when reaching `minLightness` or `maxLightness`.\r\n         *\r\n         * E.g. if we start off with a red color, then gradually generate lighter\r\n         * colors through rose shades, then switch back to dark red and gradually\r\n         * increase the lightness of it until it reaches the starting red.\r\n         *\r\n         * If set to `false` it will stop there and cap lightness at whatever level\r\n         * we hit `minLightness` or `maxLightness`, which may result in a number of\r\n         * the same colors.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this.wrap = true;\r\n        /**\r\n         * Re-use same colors in the pre-set list, when ColorSet runs out of colors,\r\n         * rather than start generating new ones.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this.reuse = false;\r\n        /**\r\n         * Saturation of colors. This will change saturation of all colors of color\r\n         * set.\r\n         *\r\n         * It is recommended to set this in theme, as changing it at run time won't\r\n         * make the items to redraw and change color.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this.saturation = 1;\r\n        _this.className = \"ColorSet\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ColorSet.prototype, \"list\", {\r\n        /**\r\n         * Returns current list of colors.\r\n         *\r\n         * If there are none, a new list of colors is generated, based on various\r\n         * ColorSet settings.\r\n         *\r\n         * @return {Color[]} Color list\r\n         */\r\n        get: function () {\r\n            if (!this._list) {\r\n                this.generate(this.minColors);\r\n            }\r\n            return this._list;\r\n        },\r\n        /**\r\n         * Sets a list of pre-defined colors to use for the iterator.\r\n         *\r\n         * @param {Color[]} value Color list\r\n         */\r\n        set: function (value) {\r\n            this._list = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns next color in the list using internal iterator counter.\r\n     *\r\n     * If `step` is set to something other than 1, it may return other color than\r\n     * exact next one in the list.\r\n     *\r\n     * @return {Color} Color\r\n     */\r\n    ColorSet.prototype.next = function () {\r\n        if (this.list.length <= this._currentStep) {\r\n            if (this.reuse && this._currentPass == 0 && this._list.length) {\r\n                this.minColors = this._list.length;\r\n            }\r\n            this.generate(this.minColors);\r\n        }\r\n        var color = this.list[this._currentStep];\r\n        this._currentStep += this.step;\r\n        return color.saturate(this.saturation);\r\n    };\r\n    /**\r\n     * Returns a color at specific index in the list.\r\n     *\r\n     * @param  {number}  i  Index\r\n     * @return {Color}      Color\r\n     */\r\n    ColorSet.prototype.getIndex = function (i) {\r\n        if (this.list.length <= i) {\r\n            if (this.reuse && this._currentPass == 0 && this._list.length) {\r\n                this.minColors = this._list.length;\r\n            }\r\n            this.generate(this.minColors);\r\n            return this.getIndex(i);\r\n        }\r\n        return this.list[i].saturate(this.saturation);\r\n    };\r\n    /**\r\n     * Resets internal iterator.\r\n     *\r\n     * Calling `next()` after this will return the very first color in the color\r\n     * list, even if it was already returned before.\r\n     */\r\n    ColorSet.prototype.reset = function () {\r\n        this._currentStep = 0;\r\n    };\r\n    Object.defineProperty(ColorSet.prototype, \"currentStep\", {\r\n        /**\r\n         * @return {number} Step\r\n         */\r\n        get: function () {\r\n            return this._currentStep;\r\n        },\r\n        /**\r\n         * Sets current color iteration. You can use this property to skip some\r\n         * colors from iteration. E.g. setting it to `10` will skip first ten\r\n         * colors.\r\n         *\r\n         * Please note that the number is zero-based.\r\n         *\r\n         * @param {number}  value  Step\r\n         */\r\n        set: function (value) {\r\n            this._currentStep = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Generates colors based on the various ColorSet settings.\r\n     *\r\n     * @param {number} count Number of colors to generate\r\n     */\r\n    ColorSet.prototype.generate = function (count) {\r\n        // Init\r\n        var curColor = this.currentColor;\r\n        var hsl = $colors.rgbToHsl($type.getValue(curColor.rgb));\r\n        var hueStep = $type.hasValue(this.stepOptions.hue) ? this.stepOptions.hue : 1 / count;\r\n        var mods = {\r\n            brighten: 0,\r\n            lighten: 0,\r\n            hue: hsl.h,\r\n            lightness: hsl.l,\r\n            saturation: hsl.s\r\n        };\r\n        // Generate list of hues, and shuffle them\r\n        var hues = [];\r\n        if (this.reuse) {\r\n            for (var i = 0; i < count; i++) {\r\n                hues.push($colors.rgbToHsl($type.getValue(this._list[i].rgb)).h);\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0; i < count; i++) {\r\n                var h = hsl.h + hueStep * i;\r\n                if (this.wrap && (h > 1)) {\r\n                    h -= 1;\r\n                }\r\n                hues.push(h);\r\n            }\r\n        }\r\n        // Shuffle colors randomly\r\n        if (this.shuffle) {\r\n            hues.sort(function (a, b) {\r\n                return Math.random() - 0.5;\r\n            });\r\n        }\r\n        // Generate colors by rotating hue\r\n        for (var i = 0; i < count; i++) {\r\n            // Update hue\r\n            if (this.reuse) {\r\n                hsl = $colors.rgbToHsl($type.getValue(this._list[i].rgb));\r\n            }\r\n            else {\r\n                hsl.h = hues.shift();\r\n            }\r\n            // Apply HSL mods\r\n            this.applyStepOptions(hsl, mods, i + 1, this._currentPass);\r\n            // Convert back to Color\r\n            var c = color($colors.hslToRgb(hsl));\r\n            // Apply regular color mods\r\n            var brighten = (this.stepOptions.brighten || 0) * (i + 1) + (this.passOptions.brighten || 0) * this._currentPass;\r\n            if (brighten != 0) {\r\n                if (this.wrap) {\r\n                    brighten = $utils.fitNumberRelative(brighten, this.minLightness, this.maxLightness);\r\n                }\r\n                else {\r\n                    brighten = $utils.fitNumber(brighten, this.minLightness, this.maxLightness);\r\n                }\r\n                c = c.brighten(brighten);\r\n            }\r\n            var lighten = (this.stepOptions.lighten || 0) * (i + 1) + (this.passOptions.lighten || 0) * this._currentPass;\r\n            if (lighten != 0) {\r\n                if (this.wrap) {\r\n                    lighten = $utils.fitNumberRelative(lighten, this.minLightness, this.maxLightness);\r\n                }\r\n                else {\r\n                    lighten = $utils.fitNumber(lighten, this.minLightness, this.maxLightness);\r\n                }\r\n                c = c.lighten(lighten);\r\n            }\r\n            this._list.push(c);\r\n        }\r\n        this._currentPass++;\r\n    };\r\n    Object.defineProperty(ColorSet.prototype, \"currentColor\", {\r\n        /**\r\n         * Returns current last color. It's either the last color in the list of\r\n         * colors, or `baseColor` if list is empty.\r\n         *\r\n         * @return {Color} Color\r\n         */\r\n        get: function () {\r\n            if (this._list.length == 0) {\r\n                return this.baseColor.saturate(this.saturation);\r\n            }\r\n            else {\r\n                return this._list[this._list.length - 1].saturate(this.saturation);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Generates modifiers for color, based on what step and pass.\r\n     *\r\n     * @param {iHSL}                  hsl   Curren HSL value of the color to modify\r\n     * @param {IColorSetStepOptions}  base  The modifiers that were before modification to use as a base\r\n     * @param {number}                step  Current step\r\n     * @param {number}                pass  Current pass\r\n     */\r\n    ColorSet.prototype.applyStepOptions = function (hsl, base, step, pass) {\r\n        // Process lightness\r\n        hsl.l = base.lightness + (this.stepOptions.lightness || 0) * step + (this.passOptions.lightness || 0) * pass;\r\n        if (this.wrap) {\r\n            if (hsl.l > 1) {\r\n                hsl.l = hsl.l - Math.floor(hsl.l);\r\n            }\r\n            else if (hsl.l < 0) {\r\n                hsl.l = -(hsl.l - Math.floor(hsl.l));\r\n            }\r\n            hsl.l = $utils.fitNumberRelative(hsl.l, this.minLightness, this.maxLightness);\r\n        }\r\n        else {\r\n            if (hsl.l > 1) {\r\n                hsl.l = 1;\r\n            }\r\n            else if (hsl.l < 0) {\r\n                hsl.l = 0;\r\n            }\r\n            hsl.l = $utils.fitNumber(hsl.l, this.minLightness, this.maxLightness);\r\n        }\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {object}  config  Config\r\n     */\r\n    ColorSet.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Set up axis ranges\r\n            if ($type.hasValue(config.list) && $type.isArray(config.list)) {\r\n                for (var i = 0, len = config.list.length; i < len; i++) {\r\n                    if (!(config.list[i] instanceof Color)) {\r\n                        config.list[i] = color(config.list[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    return ColorSet;\r\n}(BaseObject));\r\nexport { ColorSet };\r\n//# sourceMappingURL=ColorSet.js.map","/**\r\n * A collection of color-related functions\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $math from \"./Math\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * Define named colors for easy resolution to RGB.\r\n *\r\n * @type {Object}\r\n */\r\nvar namedColors = {\r\n    aliceblue: { r: 240, g: 248, b: 255 },\r\n    antiquewhite: { r: 250, g: 235, b: 215 },\r\n    aqua: { r: 0, g: 255, b: 255 },\r\n    aquamarine: { r: 127, g: 255, b: 212 },\r\n    azure: { r: 240, g: 255, b: 255 },\r\n    beige: { r: 245, g: 245, b: 220 },\r\n    bisque: { r: 255, g: 228, b: 196 },\r\n    black: { r: 0, g: 0, b: 0 },\r\n    blanchedalmond: { r: 255, g: 235, b: 205 },\r\n    blue: { r: 0, g: 0, b: 255 },\r\n    blueviolet: { r: 138, g: 43, b: 226 },\r\n    brown: { r: 165, g: 42, b: 42 },\r\n    burlywood: { r: 222, g: 184, b: 135 },\r\n    cadetblue: { r: 95, g: 158, b: 160 },\r\n    chartreuse: { r: 127, g: 255, b: 0 },\r\n    chocolate: { r: 210, g: 105, b: 30 },\r\n    coral: { r: 255, g: 127, b: 80 },\r\n    cornflowerblue: { r: 100, g: 149, b: 237 },\r\n    cornsilk: { r: 255, g: 248, b: 220 },\r\n    crimson: { r: 220, g: 20, b: 60 },\r\n    cyan: { r: 0, g: 255, b: 255 },\r\n    darkblue: { r: 0, g: 0, b: 139 },\r\n    darkcyan: { r: 0, g: 139, b: 139 },\r\n    darkgoldenrod: { r: 184, g: 134, b: 11 },\r\n    darkgray: { r: 169, g: 169, b: 169 },\r\n    darkgrey: { r: 169, g: 169, b: 169 },\r\n    darkgreen: { r: 0, g: 100, b: 0 },\r\n    darkkhaki: { r: 189, g: 183, b: 107 },\r\n    darkmagenta: { r: 139, g: 0, b: 139 },\r\n    darkolivegreen: { r: 85, g: 107, b: 47 },\r\n    darkorange: { r: 255, g: 140, b: 0 },\r\n    darkorchid: { r: 153, g: 50, b: 204 },\r\n    darkred: { r: 139, g: 0, b: 0 },\r\n    darksalmon: { r: 233, g: 150, b: 122 },\r\n    darkseagreen: { r: 143, g: 188, b: 143 },\r\n    darkslateblue: { r: 72, g: 61, b: 139 },\r\n    darkslategray: { r: 47, g: 79, b: 79 },\r\n    darkslategrey: { r: 47, g: 79, b: 79 },\r\n    darkturquoise: { r: 0, g: 206, b: 209 },\r\n    darkviolet: { r: 148, g: 0, b: 211 },\r\n    deeppink: { r: 255, g: 20, b: 147 },\r\n    deepskyblue: { r: 0, g: 191, b: 255 },\r\n    dimgray: { r: 105, g: 105, b: 105 },\r\n    dimgrey: { r: 105, g: 105, b: 105 },\r\n    dodgerblue: { r: 30, g: 144, b: 255 },\r\n    firebrick: { r: 178, g: 34, b: 34 },\r\n    floralwhite: { r: 255, g: 250, b: 240 },\r\n    forestgreen: { r: 34, g: 139, b: 34 },\r\n    fuchsia: { r: 255, g: 0, b: 255 },\r\n    gainsboro: { r: 220, g: 220, b: 220 },\r\n    ghostwhite: { r: 248, g: 248, b: 255 },\r\n    gold: { r: 255, g: 215, b: 0 },\r\n    goldenrod: { r: 218, g: 165, b: 32 },\r\n    gray: { r: 128, g: 128, b: 128 },\r\n    grey: { r: 128, g: 128, b: 128 },\r\n    green: { r: 0, g: 128, b: 0 },\r\n    greenyellow: { r: 173, g: 255, b: 47 },\r\n    honeydew: { r: 240, g: 255, b: 240 },\r\n    hotpink: { r: 255, g: 105, b: 180 },\r\n    indianred: { r: 205, g: 92, b: 92 },\r\n    indigo: { r: 75, g: 0, b: 130 },\r\n    ivory: { r: 255, g: 255, b: 240 },\r\n    khaki: { r: 240, g: 230, b: 140 },\r\n    lavender: { r: 230, g: 230, b: 250 },\r\n    lavenderblush: { r: 255, g: 240, b: 245 },\r\n    lawngreen: { r: 124, g: 252, b: 0 },\r\n    lemonchiffon: { r: 255, g: 250, b: 205 },\r\n    lightblue: { r: 173, g: 216, b: 230 },\r\n    lightcoral: { r: 240, g: 128, b: 128 },\r\n    lightcyan: { r: 224, g: 255, b: 255 },\r\n    lightgoldenrodyellow: { r: 250, g: 250, b: 210 },\r\n    lightgray: { r: 211, g: 211, b: 211 },\r\n    lightgrey: { r: 211, g: 211, b: 211 },\r\n    lightgreen: { r: 144, g: 238, b: 144 },\r\n    lightpink: { r: 255, g: 182, b: 193 },\r\n    lightsalmon: { r: 255, g: 160, b: 122 },\r\n    lightseagreen: { r: 32, g: 178, b: 170 },\r\n    lightskyblue: { r: 135, g: 206, b: 250 },\r\n    lightslategray: { r: 119, g: 136, b: 153 },\r\n    lightslategrey: { r: 119, g: 136, b: 153 },\r\n    lightsteelblue: { r: 176, g: 196, b: 222 },\r\n    lightyellow: { r: 255, g: 255, b: 224 },\r\n    lime: { r: 0, g: 255, b: 0 },\r\n    limegreen: { r: 50, g: 205, b: 50 },\r\n    linen: { r: 250, g: 240, b: 230 },\r\n    magenta: { r: 255, g: 0, b: 255 },\r\n    maroon: { r: 128, g: 0, b: 0 },\r\n    mediumaquamarine: { r: 102, g: 205, b: 170 },\r\n    mediumblue: { r: 0, g: 0, b: 205 },\r\n    mediumorchid: { r: 186, g: 85, b: 211 },\r\n    mediumpurple: { r: 147, g: 112, b: 219 },\r\n    mediumseagreen: { r: 60, g: 179, b: 113 },\r\n    mediumslateblue: { r: 123, g: 104, b: 238 },\r\n    mediumspringgreen: { r: 0, g: 250, b: 154 },\r\n    mediumturquoise: { r: 72, g: 209, b: 204 },\r\n    mediumvioletred: { r: 199, g: 21, b: 133 },\r\n    midnightblue: { r: 25, g: 25, b: 112 },\r\n    mintcream: { r: 245, g: 255, b: 250 },\r\n    mistyrose: { r: 255, g: 228, b: 225 },\r\n    moccasin: { r: 255, g: 228, b: 181 },\r\n    navajowhite: { r: 255, g: 222, b: 173 },\r\n    navy: { r: 0, g: 0, b: 128 },\r\n    oldlace: { r: 253, g: 245, b: 230 },\r\n    olive: { r: 128, g: 128, b: 0 },\r\n    olivedrab: { r: 107, g: 142, b: 35 },\r\n    orange: { r: 255, g: 165, b: 0 },\r\n    orangered: { r: 255, g: 69, b: 0 },\r\n    orchid: { r: 218, g: 112, b: 214 },\r\n    palegoldenrod: { r: 238, g: 232, b: 170 },\r\n    palegreen: { r: 152, g: 251, b: 152 },\r\n    paleturquoise: { r: 175, g: 238, b: 238 },\r\n    palevioletred: { r: 219, g: 112, b: 147 },\r\n    papayawhip: { r: 255, g: 239, b: 213 },\r\n    peachpuff: { r: 255, g: 218, b: 185 },\r\n    peru: { r: 205, g: 133, b: 63 },\r\n    pink: { r: 255, g: 192, b: 203 },\r\n    plum: { r: 221, g: 160, b: 221 },\r\n    powderblue: { r: 176, g: 224, b: 230 },\r\n    purple: { r: 128, g: 0, b: 128 },\r\n    rebeccapurple: { r: 102, g: 51, b: 153 },\r\n    red: { r: 255, g: 0, b: 0 },\r\n    rosybrown: { r: 188, g: 143, b: 143 },\r\n    royalblue: { r: 65, g: 105, b: 225 },\r\n    saddlebrown: { r: 139, g: 69, b: 19 },\r\n    salmon: { r: 250, g: 128, b: 114 },\r\n    sandybrown: { r: 244, g: 164, b: 96 },\r\n    seagreen: { r: 46, g: 139, b: 87 },\r\n    seashell: { r: 255, g: 245, b: 238 },\r\n    sienna: { r: 160, g: 82, b: 45 },\r\n    silver: { r: 192, g: 192, b: 192 },\r\n    skyblue: { r: 135, g: 206, b: 235 },\r\n    slateblue: { r: 106, g: 90, b: 205 },\r\n    slategray: { r: 112, g: 128, b: 144 },\r\n    slategrey: { r: 112, g: 128, b: 144 },\r\n    snow: { r: 255, g: 250, b: 250 },\r\n    springgreen: { r: 0, g: 255, b: 127 },\r\n    steelblue: { r: 70, g: 130, b: 180 },\r\n    tan: { r: 210, g: 180, b: 140 },\r\n    teal: { r: 0, g: 128, b: 128 },\r\n    thistle: { r: 216, g: 191, b: 216 },\r\n    tomato: { r: 255, g: 99, b: 71 },\r\n    turquoise: { r: 64, g: 224, b: 208 },\r\n    violet: { r: 238, g: 130, b: 238 },\r\n    wheat: { r: 245, g: 222, b: 179 },\r\n    white: { r: 255, g: 255, b: 255 },\r\n    whitesmoke: { r: 245, g: 245, b: 245 },\r\n    yellow: { r: 255, g: 255, b: 0 },\r\n    yellowgreen: { r: 154, g: 205, b: 50 }\r\n};\r\n/**\r\n * Tries to resolve a named color into a hex color representation.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {string}  value  Color name\r\n * @return {string}         Color\r\n * @deprecated\r\n * @hidden\r\n */\r\n/*export function resolveNamedColor(value: string): Color {\r\n    return (<any>namedColors)[value] ? (<any>namedColors)[value] : undefined;\r\n}*/\r\n/**\r\n * Converts a proper color hex code (i.e. \"#FF5500\") or named color (i.e. \"red\")\r\n * into an {iRGB} object. If the code is not correctly formatted, an RGB of\r\n * black is returned.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {string}  color  Color code\r\n * @param  {number}  alpha  Alpha (0-1)\r\n * @return {iRGB}           RGB\r\n */\r\nexport function rgb(color, alpha) {\r\n    // Init return value\r\n    var rgb;\r\n    // Try resolving color format\r\n    // Named color?\r\n    if (namedColors[color]) {\r\n        rgb = namedColors[color];\r\n    }\r\n    // Hex code?\r\n    else if (color.charAt(0) === \"#\") {\r\n        rgb = hexToRgb(color);\r\n    }\r\n    // rgb() format?\r\n    else if (color.match(/^rgba?\\(/)) {\r\n        rgb = rgbaToRgb(color);\r\n    }\r\n    // Was not able to resolve?\r\n    if (!rgb) {\r\n        rgb = { r: 0, g: 0, b: 0, a: 1 };\r\n    }\r\n    // Set alpha\r\n    if ($type.hasValue(alpha)) {\r\n        rgb.a = alpha;\r\n    }\r\n    return rgb;\r\n}\r\n/**\r\n * Converts a hex color code (i.e. \"#FF5500\") to an [[iRGB]] object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {string}  hex  Hex color code\r\n * @return {iRGB}         RGB\r\n */\r\nexport function hexToRgb(hex) {\r\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\r\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n    hex = hex.replace(shorthandRegex, function (m, r, g, b) {\r\n        return r + r + g + g + b + b;\r\n    });\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? {\r\n        r: parseInt(result[1], 16),\r\n        g: parseInt(result[2], 16),\r\n        b: parseInt(result[3], 16)\r\n    } : undefined;\r\n}\r\n/**\r\n * Converts color strings in format like `rgb()` and `rgba()` to [[iRGB]].\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {string}  color  Color code\r\n * @return {iRGB}           RGB\r\n */\r\nexport function rgbaToRgb(color) {\r\n    // Init\r\n    var matches;\r\n    color = color.replace(/[ ]/g, \"\");\r\n    // Try rgb() format\r\n    if (matches = color.match(/^rgb\\(([0-9]*),([0-9]*),([0-9]*)\\)/i)) {\r\n        matches.push(\"1\");\r\n    }\r\n    else if (matches = color.match(/^rgba\\(([0-9]*),([0-9]*),([0-9]*),([.0-9]*)\\)/i)) {\r\n        // nothing\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n    return {\r\n        r: parseInt(matches[1]),\r\n        g: parseInt(matches[2]),\r\n        b: parseInt(matches[3]),\r\n        a: parseFloat(matches[4])\r\n    };\r\n}\r\n/**\r\n * Converts an [[iRGB]] object into a hex color code.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {iRGB}    rgb  RGB\r\n * @return {string}       Hex color code\r\n */\r\nexport function rgbToHex(rgb) {\r\n    return \"#\" + pad2(rgb.r.toString(16)) + pad2(rgb.g.toString(16)) + pad2(rgb.b.toString(16));\r\n}\r\n/**\r\n * Converts an [[iRGB]] object into its `rgb()` or `rgba()` representation.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {iRGB}    rgb  RGB\r\n * @return {string}       `rgba()` syntax\r\n */\r\nexport function rgbToRGBA(rgb) {\r\n    if ($type.hasValue(rgb.a) && rgb.a !== 1) {\r\n        return \"rgba(\" + rgb.r + \",\" + rgb.g + \",\" + rgb.b + \",\" + rgb.a + \")\";\r\n    }\r\n    else {\r\n        return \"rgb(\" + rgb.r + \",\" + rgb.g + \",\" + rgb.b + \")\";\r\n    }\r\n}\r\n/**\r\n * Pads a 1-digit string with a zero.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {string}  c  Input string\r\n * @return {string}     Padded string\r\n */\r\nexport function pad2(c) {\r\n    return c.length == 1 ? \"0\" + c : \"\" + c;\r\n}\r\n/**\r\n * Returns an intermediate color between two colors based on the relative\r\n * position. Position needs to be in range between 0 and 1. Zero meaning the\r\n * resulting color will be closest to the first reference color.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {Optional<iRGB>}    color1   First reference color\r\n * @param  {Optional<iRGB>}    color2   Second reference color\r\n * @param  {number}            percent  Relative position (0-1)\r\n * @return {Optional<iRGB>}             Interpolated color\r\n */\r\nexport function interpolate(rgb1, rgb2, percent) {\r\n    percent = $math.fitToRange(percent, 0, 1);\r\n    if (rgb1) {\r\n        if (rgb2) {\r\n            return {\r\n                r: rgb1.r + Math.round((rgb2.r - rgb1.r) * percent),\r\n                g: rgb1.g + Math.round((rgb2.g - rgb1.g) * percent),\r\n                b: rgb1.b + Math.round((rgb2.b - rgb1.b) * percent),\r\n                a: (rgb1.a || 1) + Math.round(((rgb2.a || 1) - (rgb1.a || 1)) * percent)\r\n            };\r\n        }\r\n        else {\r\n            return rgb1;\r\n        }\r\n    }\r\n    else if (rgb2) {\r\n        return rgb2;\r\n    }\r\n    else {\r\n        return rgb1;\r\n    }\r\n}\r\n/**\r\n * Returns a color that is `percent` brighter than the reference color.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {iRGB}    color    Reference color\r\n * @param  {number}  percent  Brightness percent\r\n * @return {iRGB}             Hex code of the new color\r\n */\r\nexport function lighten(rgb, percent) {\r\n    if (rgb) {\r\n        return {\r\n            r: Math.max(0, Math.min(255, rgb.r + getLightnessStep(rgb.r, percent))),\r\n            g: Math.max(0, Math.min(255, rgb.g + getLightnessStep(rgb.g, percent))),\r\n            b: Math.max(0, Math.min(255, rgb.b + getLightnessStep(rgb.b, percent))),\r\n            a: rgb.a\r\n        };\r\n    }\r\n    else {\r\n        // TODO is this correct ?\r\n        return rgb;\r\n    }\r\n}\r\n;\r\n/**\r\n * Gets lightness step.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {number}  value    Value\r\n * @param  {number}  percent  Percent\r\n * @return {number}           Step\r\n */\r\nexport function getLightnessStep(value, percent) {\r\n    var base = percent > 0 ? 255 - value : value;\r\n    return Math.round(base * percent);\r\n}\r\n/**\r\n * Returns a color that is `percent` brighter than the source `color`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {iRGB}    color    Source color\r\n * @param  {number}  percent  Brightness percent\r\n * @return {iRGB}             New color\r\n */\r\nexport function brighten(rgb, percent) {\r\n    if (rgb) {\r\n        var base = Math.min(Math.max(rgb.r, rgb.g, rgb.b), 230);\r\n        //let base = Math.max(rgb.r, rgb.g, rgb.b);\r\n        var step = getLightnessStep(base, percent);\r\n        return {\r\n            r: Math.max(0, Math.min(255, Math.round(rgb.r + step))),\r\n            g: Math.max(0, Math.min(255, Math.round(rgb.g + step))),\r\n            b: Math.max(0, Math.min(255, Math.round(rgb.b + step))),\r\n            a: rgb.a\r\n        };\r\n    }\r\n    else {\r\n        // TODO is this correct ?\r\n        return rgb;\r\n    }\r\n}\r\n;\r\n/**\r\n * Returns brightness step.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {number}  value    Value\r\n * @param  {number}  percent  Percent\r\n * @return {number}           Step\r\n */\r\nexport function getBrightnessStep(value, percent) {\r\n    var base = 255; //percent > 0 ? 255 - value : value;\r\n    return Math.round(base * percent);\r\n}\r\n/**\r\n * Returns a new [[iRGB]] object based on `rgb` parameter with specific\r\n * saturation applied.\r\n *\r\n * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully\r\n * saturated).\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {iRGB}    color       Base color\r\n * @param  {number}  saturation  Saturation (0-1)\r\n * @return {iRGB}                New color\r\n */\r\nexport function saturate(rgb, saturation) {\r\n    if (rgb == null || saturation == 1) {\r\n        return rgb;\r\n    }\r\n    var hsl = rgbToHsl(rgb);\r\n    hsl.s = saturation;\r\n    return hslToRgb(hsl);\r\n}\r\n/*\r\n// not used\r\nexport function rgbToMatrix(rgb: iRGB): string {\r\n    let r = $type.toText($math.round((rgb.r || 0) / 255, 10));\r\n    let g = $type.toText($math.round((rgb.g || 0) / 255, 10));\r\n    let b = $type.toText($math.round((rgb.b || 0) / 255, 10));\r\n    let a = $type.toText(rgb.a || 1);\r\n    return\t      r + \" 0 0 0 0\" +\r\n                    \" 0 \" + g + \" 0 0 0\" +\r\n                    \" 0 0 \" + b + \" 0 0\" +\r\n                    \" 0 0 0 \" + a + \" 0\";\r\n}\r\n*/\r\n/**\r\n * The functions below are taken and adapted from Garry Tan's blog post:\r\n * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n *\r\n * The further attributions go mjijackson.com, which now seems to be defunct.\r\n */\r\n/**\r\n * Converts an HSL color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes h, s, and l are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n * Function adapted from:\r\n * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n *\r\n * @ignore Exclude from docs\r\n * @param   {number}  h       The hue\r\n * @param   {number}  s       The saturation\r\n * @param   {number}  l       The lightness\r\n * @return  {Array}           The RGB representation\r\n */\r\nexport function hslToRgb(color) {\r\n    var r, g, b;\r\n    var h = color.h;\r\n    var s = color.s;\r\n    var l = color.l;\r\n    if (s == 0) {\r\n        r = g = b = l; // achromatic\r\n    }\r\n    else {\r\n        var hue2rgb = function hue2rgb(p, q, t) {\r\n            if (t < 0)\r\n                t += 1;\r\n            if (t > 1)\r\n                t -= 1;\r\n            if (t < 1 / 6)\r\n                return p + (q - p) * 6 * t;\r\n            if (t < 1 / 2)\r\n                return q;\r\n            if (t < 2 / 3)\r\n                return p + (q - p) * (2 / 3 - t) * 6;\r\n            return p;\r\n        };\r\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n        var p = 2 * l - q;\r\n        r = hue2rgb(p, q, h + 1 / 3);\r\n        g = hue2rgb(p, q, h);\r\n        b = hue2rgb(p, q, h - 1 / 3);\r\n    }\r\n    return {\r\n        r: Math.round(r * 255),\r\n        g: Math.round(g * 255),\r\n        b: Math.round(b * 255)\r\n    };\r\n}\r\n/**\r\n * Converts an RGB color value to HSL. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes r, g, and b are contained in the set [0, 255] and\r\n * returns h, s, and l in the set [0, 1].\r\n *\r\n * Function adapted from:\r\n * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\r\n *\r\n * @ignore Exclude from docs\r\n * @param   {number}  r       The red color value\r\n * @param   {number}  g       The green color value\r\n * @param   {number}  b       The blue color value\r\n * @return  {Array}           The HSL representation\r\n */\r\nexport function rgbToHsl(color) {\r\n    var r = color.r / 255;\r\n    var g = color.g / 255;\r\n    var b = color.b / 255;\r\n    var max = Math.max(r, g, b);\r\n    var min = Math.min(r, g, b);\r\n    var h = 0;\r\n    var s = 0;\r\n    var l = (max + min) / 2;\r\n    if (max === min) {\r\n        h = s = 0; // achromatic\r\n    }\r\n    else {\r\n        var d = max - min;\r\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n        switch (max) {\r\n            case r:\r\n                h = (g - b) / d + (g < b ? 6 : 0);\r\n                break;\r\n            case g:\r\n                h = (b - r) / d + 2;\r\n                break;\r\n            case b:\r\n                h = (r - g) / d + 4;\r\n                break;\r\n        }\r\n        h /= 6;\r\n    }\r\n    return {\r\n        h: h,\r\n        s: s,\r\n        l: l\r\n    };\r\n}\r\n/**\r\n * Converts an RGB color value to HSV. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\r\n * Assumes r, g, and b are contained in the set [0, 255] and\r\n * returns h, s, and v in the set [0, 1].\r\n *\r\n * @ignore Exclude from docs\r\n * @param   Number  r       The red color value\r\n * @param   Number  g       The green color value\r\n * @param   Number  b       The blue color value\r\n * @return  Array           The HSV representation\r\n */\r\nexport function rgbToHsv(color) {\r\n    var r = color.r / 255;\r\n    var g = color.g / 255;\r\n    var b = color.b / 255;\r\n    var max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n    var h = 0;\r\n    var s = 0;\r\n    var v = max;\r\n    var d = max - min;\r\n    s = max == 0 ? 0 : d / max;\r\n    if (max == min) {\r\n        h = 0; // achromatic\r\n    }\r\n    else {\r\n        switch (max) {\r\n            case r:\r\n                h = (g - b) / d + (g < b ? 6 : 0);\r\n                break;\r\n            case g:\r\n                h = (b - r) / d + 2;\r\n                break;\r\n            case b:\r\n                h = (r - g) / d + 4;\r\n                break;\r\n        }\r\n        h /= 6;\r\n    }\r\n    return {\r\n        h: h,\r\n        s: s,\r\n        v: v\r\n    };\r\n}\r\n/**\r\n * Converts an HSV color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\r\n * Assumes h, s, and v are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n * @ignore Exclude from docs\r\n * @param   Number  h       The hue\r\n * @param   Number  s       The saturation\r\n * @param   Number  v       The value\r\n * @return  Array           The RGB representation\r\n */\r\nexport function hsvToRgb(color) {\r\n    var r = 0;\r\n    var g = 0;\r\n    var b = 0;\r\n    var h = color.h;\r\n    var s = color.s;\r\n    var v = color.v;\r\n    var i = Math.floor(h * 6);\r\n    var f = h * 6 - i;\r\n    var p = v * (1 - s);\r\n    var q = v * (1 - f * s);\r\n    var t = v * (1 - (1 - f) * s);\r\n    switch (i % 6) {\r\n        case 0:\r\n            r = v, g = t, b = p;\r\n            break;\r\n        case 1:\r\n            r = q, g = v, b = p;\r\n            break;\r\n        case 2:\r\n            r = p, g = v, b = t;\r\n            break;\r\n        case 3:\r\n            r = p, g = q, b = v;\r\n            break;\r\n        case 4:\r\n            r = t, g = p, b = v;\r\n            break;\r\n        case 5:\r\n            r = v, g = p, b = q;\r\n            break;\r\n    }\r\n    return {\r\n        r: Math.round(r * 255),\r\n        g: Math.round(g * 255),\r\n        b: Math.round(b * 255)\r\n    };\r\n}\r\n/**\r\n * Returns `true` if color is \"light\". Useful indetermining which contrasting\r\n * color to use for elements over this color. E.g.: you would want to use\r\n * black text over light background, and vice versa.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {iRGB}     color  Source color\r\n * @return {boolean}         Light?\r\n */\r\nexport function isLight(color) {\r\n    return ((color.r * 299) + (color.g * 587) + (color.b * 114)) / 1000 >= 128;\r\n}\r\n//# sourceMappingURL=Colors.js.map","/**\r\n * A collection of DOM-related functions.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Disposer } from \"./Disposer\";\r\nimport { readFrame, writeFrame } from \"./AsyncPending\";\r\nimport * as $object from \"./Object\";\r\nimport * as $array from \"./Array\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * SVG namespace.\r\n *\r\n * @ignore Exclude from docs\r\n * @type {string}\r\n */\r\nexport var SVGNS = \"http://www.w3.org/2000/svg\";\r\n/**\r\n * XML namespace.\r\n *\r\n * @ignore Exclude from docs\r\n * @type {string}\r\n */\r\nexport var XMLNS = \"http://www.w3.org/2000/xmlns/\";\r\n/**\r\n * XLINK namespace.\r\n *\r\n * @ignore Exclude from docs\r\n * @type {string}\r\n */\r\nexport var XLINK = \"http://www.w3.org/1999/xlink\";\r\n/**\r\n * Function that adds a disposable event listener directly to a DOM element.\r\n *\r\n * @ignore Exclude from docs\r\n * @param {EventTarget}   dom       A DOM element to add event to\r\n * @param {string}        type      Event type\r\n * @param {Function}      listener  Event listener\r\n * @returns {IDisposer}             Disposable event\r\n */\r\nexport function addEventListener(dom, type, listener, options) {\r\n    //@todo proper type check for options: EventListenerOptions | boolean (TS for some reason gives error on passive parameter)\r\n    //console.log(type, dom);\r\n    dom.addEventListener(type, listener, options || false);\r\n    return new Disposer(function () {\r\n        dom.removeEventListener(type, listener, options || false);\r\n    });\r\n}\r\n/**\r\n * Finds and returns an element reference using following logic:\r\n * * If we pass in an element instance, we just return it back.\r\n * * If we pass in a string, the function looks for an element with such id.\r\n * * If no element with such id is found, we grab the first element with a tag name like this.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {Optional<HTMLElement | string>}  el  Element definition (reference, or id, or tag name)\r\n * @return {Optional<HTMLElement>}               Element reference\r\n * @todo Review this function as it seems pretty fuzzy and hacky\r\n */\r\nexport function getElement(el) {\r\n    if ($type.isString(el)) {\r\n        var e = document.getElementById(el);\r\n        if (e == null) {\r\n            e = document.getElementsByClassName(el)[0];\r\n        }\r\n        if (e instanceof HTMLElement) {\r\n            return e;\r\n        }\r\n    }\r\n    else if (el instanceof HTMLElement) {\r\n        return el;\r\n    }\r\n}\r\n/**\r\n * Adds a class name to an HTML or SVG element.\r\n *\r\n * @ignore Exclude from docs\r\n * @param {HTMLElement | SVGSVGElement}  element    Element\r\n * @param {string}                       className  Class name to add\r\n */\r\nexport function addClass(element, className) {\r\n    if (element.classList) {\r\n        element.classList.add(className);\r\n    }\r\n    else {\r\n        var currentClassName = element.getAttribute(\"class\");\r\n        if (currentClassName) {\r\n            element.setAttribute(\"class\", currentClassName.split(\" \").filter(function (item) {\r\n                return item !== className;\r\n            }).join(\" \") + \" \" + className);\r\n        }\r\n        else {\r\n            element.setAttribute(\"class\", className);\r\n        }\r\n        //element.className = element.className.replace(new RegExp(\"^\" + className + \"| \" + className), \"\") + \" \" + className;\r\n    }\r\n}\r\n/**\r\n * Removes a class name from an HTML or SVG element.\r\n *\r\n * @ignore Exclude from docs\r\n * @param {HTMLElement | SVGSVGElement}  element    Element\r\n * @param {string}                       className  Class name to add\r\n */\r\nexport function removeClass(element, className) {\r\n    if (element.classList) {\r\n        element.classList.remove(className);\r\n    }\r\n    else {\r\n        var currentClassName = element.getAttribute(\"class\");\r\n        if (currentClassName) {\r\n            element.setAttribute(\"class\", currentClassName.split(\" \").filter(function (item) {\r\n                return item !== className;\r\n            }).join(\" \"));\r\n        }\r\n        //element.className = element.className.replace(new RegExp(\"^\" + className + \"| \" + className), \"\");\r\n    }\r\n}\r\n/**\r\n * Sets style property on DOM element.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Still needed?\r\n */\r\nexport function setStyle(element, property, value) {\r\n    element.style[property] = value;\r\n}\r\n/**\r\n * Removes focus from any element by shifting focus to body.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport function blur() {\r\n    var input = document.createElement(\"input\");\r\n    input.style.position = \"fixed\";\r\n    input.style.top = \"0px\";\r\n    input.style.left = \"-10000px\";\r\n    document.body.appendChild(input);\r\n    input.focus();\r\n    input.blur();\r\n    document.body.removeChild(input);\r\n}\r\n/**\r\n * Tries to focus the element.\r\n *\r\n * @ignore Exlude from docs\r\n * @param {HTMLElement | SVGSVGElement}  element  Element to focus\r\n */\r\nexport function focus(element) {\r\n    if (element instanceof HTMLElement) {\r\n        element.focus();\r\n    }\r\n    else {\r\n        var input = document.createElement(\"input\");\r\n        var fo = document.createElementNS(SVGNS, \"foreignObject\");\r\n        fo.appendChild(input);\r\n        element.appendChild(fo);\r\n        input.focus();\r\n        input.disabled = true;\r\n        fo.remove();\r\n    }\r\n    /*if ((<any>element).focus != undefined) {\r\n        (<any>element).focus();\r\n    }\r\n    else if (element instanceof SVGSVGElement) {\r\n        // Not implemented\r\n        // @todo implement focus fallback\r\n    }*/\r\n}\r\n/**\r\n * Returns markup for the element including the element tag itself.\r\n * SVG elements do not support `outerHTML` so this functions applies of\r\n * a workaround which creates a new temporary wrapper, clones element and uses\r\n * wrapper's `innerHTML`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {HTMLElement | SVGSVGElement}  element  Element to get full markup for\r\n * @return {string}                                Markup\r\n * @deprecated Not in use anywhere\r\n */\r\nexport function outerHTML(element) {\r\n    if (element.outerHTML) {\r\n        return element.outerHTML;\r\n    }\r\n    else {\r\n        var twrap = document.createElement(\"div\");\r\n        var tnode = element.cloneNode(true);\r\n        twrap.appendChild(tnode);\r\n        var content = twrap.innerHTML;\r\n        return content;\r\n    }\r\n}\r\n/**\r\n * Checks if element is a valid DOM node.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {HTMLElement}  el  Element\r\n * @return {boolean}          `true` if element is a valid DOM node\r\n */\r\nexport function isElement(el) {\r\n    return el instanceof Object && el && el.nodeType === 1;\r\n}\r\n/**\r\n * Checks of element `a` contains element `b`.\r\n *\r\n * @param  {HTMLElement | SVGSVGElement}  a  Aleged ascendant\r\n * @param  {HTMLElement | SVGSVGElement}  b  Aleged descendant\r\n * @return {boolean}                         Contains?\r\n */\r\nexport function contains(a, b) {\r\n    return a !== b && (a.contains\r\n        ? a.contains(b)\r\n        : a.compareDocumentPosition\r\n            ? !!(a.compareDocumentPosition(b) & 16)\r\n            : true);\r\n}\r\n/**\r\n * Copies attributes from one element to another.\r\n *\r\n * @ignore Exclude from docs\r\n * @param {Element | HTMLElement |  SVGSVGElement}  source  Element to copy attributes from\r\n * @param {HTMLElement | SVGSVGElement}          target  Element to copy attributes to\r\n */\r\nexport function copyAttributes(source, target) {\r\n    $array.each(source.attributes, function (attr) {\r\n        // TODO what if it's null ?\r\n        if (attr.value != null) {\r\n            target.setAttribute(attr.name, attr.value);\r\n        }\r\n    });\r\n}\r\n/**\r\n * [fixPixelPerfect description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param {HTMLElement}  el  Element\r\n */\r\nexport function fixPixelPerfect(el) {\r\n    readFrame(function () {\r\n        // sometimes IE doesn't like this\r\n        // TODO figure out a way to remove this\r\n        try {\r\n            var rect = el.getBoundingClientRect();\r\n            var left_1 = rect.left - Math.round(rect.left);\r\n            var top_1 = rect.top - Math.round(rect.top);\r\n            if (left_1 !== 0) {\r\n                writeFrame(function () {\r\n                    el.style.left = left_1 + \"px\";\r\n                });\r\n            }\r\n            if (top_1 !== 0) {\r\n                writeFrame(function () {\r\n                    el.style.top = top_1 + \"px\";\r\n                });\r\n            }\r\n        }\r\n        catch (e) { }\r\n    });\r\n}\r\n/**\r\n * [rootStylesheet description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @type {Optional<CSSStyleSheet>}\r\n */\r\nvar rootStylesheet;\r\n/**\r\n * [getStylesheet description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @return {CSSStyleSheet} [description]\r\n */\r\nfunction getStylesheet() {\r\n    if (!$type.hasValue(rootStylesheet)) {\r\n        // TODO use createElementNS ?\r\n        var e = document.createElement(\"style\");\r\n        e.type = \"text/css\";\r\n        document.head.appendChild(e);\r\n        rootStylesheet = e.sheet;\r\n    }\r\n    return rootStylesheet;\r\n}\r\n/**\r\n * [makeStylesheet description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {string}        selector  [description]\r\n * @return {CSSStyleRule}            [description]\r\n */\r\nfunction makeStylesheet(selector) {\r\n    var root = getStylesheet();\r\n    var index = root.cssRules.length;\r\n    root.insertRule(selector + \"{}\", index);\r\n    return root.cssRules[index];\r\n}\r\n/**\r\n * Defines a class for a CSS rule.\r\n *\r\n * Can be used to dynamically add CSS to the document.\r\n */\r\nvar StyleRule = /** @class */ (function (_super) {\r\n    tslib_1.__extends(StyleRule, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {string}  selector  CSS selector\r\n     * @param {object}  styles    An object of style attribute - value pairs\r\n     */\r\n    function StyleRule(selector, styles) {\r\n        var _this = \r\n        // TODO test this\r\n        _super.call(this, function () {\r\n            var root = getStylesheet();\r\n            // TODO a bit hacky\r\n            var index = $array.indexOf(root.cssRules, _this._rule);\r\n            if (index === -1) {\r\n                throw new Error(\"Could not dispose StyleRule\");\r\n            }\r\n            else {\r\n                root.deleteRule(index);\r\n            }\r\n        }) || this;\r\n        _this._rule = makeStylesheet(selector);\r\n        $object.each(styles, function (key, value) {\r\n            _this.setStyle(key, value);\r\n        });\r\n        return _this;\r\n    }\r\n    Object.defineProperty(StyleRule.prototype, \"selector\", {\r\n        /**\r\n         * @return {string} CSS selector\r\n         */\r\n        get: function () {\r\n            return this._rule.selectorText;\r\n        },\r\n        /**\r\n         * A CSS selector text.\r\n         *\r\n         * E.g.: `.myClass p`\r\n         *\r\n         * @param {string}  selector  CSS selector\r\n         */\r\n        set: function (selector) {\r\n            this._rule.selectorText = selector;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets the same style properties with browser-speicifc prefixes.\r\n     *\r\n     * @param {string}  name   Attribute name\r\n     * @param {string}  value  Attribute value\r\n     */\r\n    StyleRule.prototype._setVendorPrefixName = function (name, value) {\r\n        var style = this._rule.style;\r\n        style.setProperty(\"-webkit-\" + name, value, \"\");\r\n        style.setProperty(\"-moz-\" + name, value, \"\");\r\n        style.setProperty(\"-ms-\" + name, value, \"\");\r\n        style.setProperty(\"-o-\" + name, value, \"\");\r\n        style.setProperty(name, value, \"\");\r\n    };\r\n    /**\r\n     * Sets a value for specific style attribute.\r\n     *\r\n     * @param {string}  name   Attribute\r\n     * @param {string}  value  Value\r\n     */\r\n    StyleRule.prototype.setStyle = function (name, value) {\r\n        if (name === \"transition\") {\r\n            this._setVendorPrefixName(name, value);\r\n        }\r\n        else {\r\n            this._rule.style.setProperty(name, value, \"\");\r\n        }\r\n    };\r\n    return StyleRule;\r\n}(Disposer));\r\nexport { StyleRule };\r\n/**\r\n * An internal counter for unique style ids.\r\n *\r\n * @ignore Exclude from docs\r\n * @type {number}\r\n */\r\nvar styleId = 0;\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nvar StyleClass = /** @class */ (function (_super) {\r\n    tslib_1.__extends(StyleClass, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {object}  styles  An object of style attribute - value pairs\r\n     * @param {string}  name    Class name\r\n     */\r\n    function StyleClass(styles, name) {\r\n        var _this = this;\r\n        var className = (!$type.hasValue(name)\r\n            // TODO generate the classname randomly\r\n            ? \"__style_\" + (++styleId) + \"__\"\r\n            : name);\r\n        _this = _super.call(this, \".\" + className, styles) || this;\r\n        _this._className = className;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(StyleClass.prototype, \"className\", {\r\n        /**\r\n         * @return {string} Class name\r\n         */\r\n        get: function () {\r\n            return this._className;\r\n        },\r\n        /**\r\n         * Class name.\r\n         *\r\n         * @param {string}  name  Class name\r\n         */\r\n        set: function (name) {\r\n            this._className = name;\r\n            this.selector = \".\" + name;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts the whole class to\r\n     * @ignore Exclude from docs\r\n     */\r\n    StyleClass.prototype.toString = function () {\r\n        return this._className;\r\n    };\r\n    return StyleClass;\r\n}(StyleRule));\r\nexport { StyleClass };\r\nexport function ready(f) {\r\n    if (document.readyState !== \"loading\") {\r\n        f();\r\n    }\r\n    else {\r\n        var listener_1 = function () {\r\n            if (document.readyState !== \"loading\") {\r\n                document.removeEventListener(\"readystatechange\", listener_1);\r\n                f();\r\n            }\r\n        };\r\n        document.addEventListener(\"readystatechange\", listener_1);\r\n    }\r\n}\r\n//# sourceMappingURL=DOM.js.map","import * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Disposer } from \"./Disposer\";\r\nimport { EventDispatcher } from \"./EventDispatcher\";\r\nimport * as $object from \"./Object\";\r\nimport * as $iter from \"./Iterator\";\r\nimport * as $string from \"./String\";\r\n/**\r\n * A disposable dictionary, which when disposed itself will call `dispose()`\r\n * method on all its items.\r\n */\r\nvar DictionaryDisposer = /** @class */ (function (_super) {\r\n    tslib_1.__extends(DictionaryDisposer, _super);\r\n    function DictionaryDisposer(dict) {\r\n        var _this = this;\r\n        var disposer = dict.events.on(\"removed\", function (x) {\r\n            x.oldValue.dispose();\r\n        }, undefined, false);\r\n        _this = _super.call(this, function () {\r\n            disposer.dispose();\r\n            // TODO clear the dictionary ?\r\n            $iter.each(dict.iterator(), function (a) {\r\n                var v = a[1];\r\n                v.dispose();\r\n            });\r\n        }) || this;\r\n        return _this;\r\n    }\r\n    return DictionaryDisposer;\r\n}(Disposer));\r\nexport { DictionaryDisposer };\r\n/**\r\n * A Dictionary is collection where values of some type can be mapped to\r\n * string keys.\r\n *\r\n * You might call it an \"associative list\" or \"associative array\".\r\n */\r\nvar Dictionary = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Dictionary() {\r\n        /**\r\n         * Event dispatcher.\r\n         *\r\n         * @type {EventDispatcher<AMEvent<Dictionary<Key, T>, IDictionaryEvents<Key, T>>>}\r\n         */\r\n        this.events = new EventDispatcher();\r\n        this._dictionary = {};\r\n    }\r\n    /**\r\n     * Returns `true` if key exists in Dictionary.\r\n     *\r\n     * @param  {Key}      key  The key to search for\r\n     * @return {boolean}       `true` if key exists, `false` if it doesn't\r\n     */\r\n    Dictionary.prototype.hasKey = function (key) {\r\n        return $object.hasKey(this._dictionary, key);\r\n    };\r\n    /**\r\n     * Returns the value for a specific key.\r\n     *\r\n     * @param  {Key}          key  The key to search for\r\n     * @return {Optional<T>}       Value for the key, or `undefined` if it doesn't exist\r\n     */\r\n    Dictionary.prototype.getKey = function (key) {\r\n        return this._dictionary[key];\r\n    };\r\n    /**\r\n     * Inserts value at specific key.\r\n     *\r\n     * Will thrown an exception if the key already exists in the dictionary.\r\n     *\r\n     * @param {Key}  key    Key\r\n     * @param {T}    value  Value\r\n     */\r\n    Dictionary.prototype.insertKey = function (key, value) {\r\n        if ($object.hasKey(this._dictionary, key)) {\r\n            throw new Error(\"Key \" + key + \" already exists in dictionary\");\r\n        }\r\n        else {\r\n            this._dictionary[key] = value;\r\n            if (this.events.isEnabled(\"insertKey\")) {\r\n                this.events.dispatchImmediately(\"insertKey\", {\r\n                    type: \"insertKey\",\r\n                    target: this,\r\n                    key: key,\r\n                    newValue: value\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Adds or updates key/value into dictionary.\r\n     *\r\n     * If the key already exists, the old value will be overwritten.\r\n     *\r\n     * If the new value is exactly the same as the old value (using ===), it won't do anything.\r\n     *\r\n     * @param  {Key}  key    Key\r\n     * @param  {T}    value  Value\r\n     */\r\n    Dictionary.prototype.setKey = function (key, value) {\r\n        if ($object.hasKey(this._dictionary, key)) {\r\n            var oldValue = this._dictionary[key];\r\n            if (oldValue !== value) {\r\n                this._dictionary[key] = value;\r\n                if (this.events.isEnabled(\"setKey\")) {\r\n                    this.events.dispatchImmediately(\"setKey\", {\r\n                        type: \"setKey\",\r\n                        target: this,\r\n                        key: key,\r\n                        oldValue: oldValue,\r\n                        newValue: value\r\n                    });\r\n                }\r\n                if (this.events.isEnabled(\"removed\")) {\r\n                    this.events.dispatchImmediately(\"removed\", {\r\n                        type: \"removed\",\r\n                        target: this,\r\n                        oldValue: oldValue\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._dictionary[key] = value;\r\n            if (this.events.isEnabled(\"insertKey\")) {\r\n                this.events.dispatchImmediately(\"insertKey\", {\r\n                    type: \"insertKey\",\r\n                    target: this,\r\n                    key: key,\r\n                    newValue: value\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates the value at specific `key` using custom function.\r\n     *\r\n     * Passes in current value into the function, and uses its output as a new\r\n     * value.\r\n     *\r\n     * If the new value is exactly the same as the old value (using ===), it won't do anything.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {Key}       key  Key\r\n     * @param {function}  fn   Function to transform the value\r\n     */\r\n    Dictionary.prototype.updateKey = function (key, fn) {\r\n        if ($object.hasKey(this._dictionary, key)) {\r\n            var oldValue = this._dictionary[key];\r\n            var newValue = fn(oldValue);\r\n            if (oldValue !== newValue) {\r\n                this._dictionary[key] = newValue;\r\n                if (this.events.isEnabled(\"setKey\")) {\r\n                    this.events.dispatchImmediately(\"setKey\", {\r\n                        type: \"setKey\",\r\n                        target: this,\r\n                        key: key,\r\n                        oldValue: oldValue,\r\n                        newValue: newValue\r\n                    });\r\n                }\r\n                if (this.events.isEnabled(\"removed\")) {\r\n                    this.events.dispatchImmediately(\"removed\", {\r\n                        type: \"removed\",\r\n                        target: this,\r\n                        oldValue: oldValue\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(\"Key \" + key + \" doesn't exist in dictionary\");\r\n        }\r\n    };\r\n    /**\r\n     * Removes value at specific `key` from dictionary.\r\n     *\r\n     * @param {Key}  key  Key to remove\r\n     */\r\n    Dictionary.prototype.removeKey = function (key) {\r\n        if ($object.hasKey(this._dictionary, key)) {\r\n            var oldValue = this._dictionary[key];\r\n            delete this._dictionary[key];\r\n            if (this.events.isEnabled(\"removeKey\")) {\r\n                this.events.dispatchImmediately(\"removeKey\", {\r\n                    type: \"removeKey\",\r\n                    target: this,\r\n                    key: key,\r\n                    oldValue: oldValue\r\n                });\r\n            }\r\n            if (this.events.isEnabled(\"removed\")) {\r\n                this.events.dispatchImmediately(\"removed\", {\r\n                    type: \"removed\",\r\n                    target: this,\r\n                    oldValue: oldValue\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * [insertKeyIfEmpty description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo description\r\n     * @param  {Key}       key      [description]\r\n     * @param  {function}  ifEmpty  [description]\r\n     * @return {T}                  [description]\r\n     */\r\n    Dictionary.prototype.insertKeyIfEmpty = function (key, ifEmpty) {\r\n        if (!this.hasKey(key)) {\r\n            this.insertKey(key, ifEmpty());\r\n        }\r\n        return this.getKey(key);\r\n    };\r\n    /**\r\n     * Removes all items from the dictionary.\r\n     */\r\n    Dictionary.prototype.clear = function () {\r\n        var _this = this;\r\n        // TODO dispatch this after clear\r\n        if (this.events.isEnabled(\"removed\")) {\r\n            $object.each(this._dictionary, function (key, value) {\r\n                _this.events.dispatchImmediately(\"removed\", {\r\n                    type: \"removed\",\r\n                    target: _this,\r\n                    oldValue: value\r\n                });\r\n            });\r\n        }\r\n        this._dictionary = {};\r\n        if (this.events.isEnabled(\"cleared\")) {\r\n            this.events.dispatchImmediately(\"cleared\", {\r\n                type: \"cleared\",\r\n                target: this\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Copies items from another Dictionary.\r\n     *\r\n     * @param {Dictionary<Key, T>}  source  A Dictionary to copy items from\r\n     */\r\n    Dictionary.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        $iter.each(source.iterator(), function (a) {\r\n            // TODO fix this type cast\r\n            _this.setKey(a[0], a[1]);\r\n        });\r\n    };\r\n    /**\r\n     * Returns an interator that can be used to iterate through all items in\r\n     * the dictionary.\r\n     *\r\n     * @return {Iterator} Iterator\r\n     */\r\n    Dictionary.prototype.iterator = function () {\r\n        // @todo fix this type after the Iterator bug is fixed\r\n        // https://github.com/Microsoft/TypeScript/issues/16730\r\n        return $object.entries(this._dictionary);\r\n    };\r\n    /**\r\n     * Returns an ES6 iterator for the keys/values of the dictionary.\r\n     */\r\n    Dictionary.prototype[Symbol.iterator] = function () {\r\n        var _a, _b, _i, key;\r\n        return tslib_1.__generator(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    _a = [];\r\n                    for (_b in this._dictionary)\r\n                        _a.push(_b);\r\n                    _i = 0;\r\n                    _c.label = 1;\r\n                case 1:\r\n                    if (!(_i < _a.length)) return [3 /*break*/, 4];\r\n                    key = _a[_i];\r\n                    if (!$object.hasKey(this._dictionary, key)) return [3 /*break*/, 3];\r\n                    return [4 /*yield*/, [key, this._dictionary[key]]];\r\n                case 2:\r\n                    _c.sent();\r\n                    _c.label = 3;\r\n                case 3:\r\n                    _i++;\r\n                    return [3 /*break*/, 1];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Calls `f` for each key/value in the dictionary.\r\n     */\r\n    Dictionary.prototype.each = function (f) {\r\n        $iter.each(this.iterator(), function (_a) {\r\n            var _b = tslib_1.__read(_a, 2), key = _b[0], value = _b[1];\r\n            return f(key, value);\r\n        });\r\n    };\r\n    /**\r\n     * Returns an iterator that can be used to iterate through all items in\r\n     * the dictionary, ordered by key.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {Iterator} Iterator\r\n     */\r\n    Dictionary.prototype.sortedIterator = function () {\r\n        return $iter.sort(this.iterator(), function (x, y) { return $string.order(x[0], y[0]); });\r\n    };\r\n    return Dictionary;\r\n}());\r\nexport { Dictionary };\r\n/**\r\n * A version of a [[Dictionary]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nvar DictionaryTemplate = /** @class */ (function (_super) {\r\n    tslib_1.__extends(DictionaryTemplate, _super);\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {T} t Template object\r\n     */\r\n    function DictionaryTemplate(t) {\r\n        var _this = _super.call(this) || this;\r\n        _this.template = t;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DictionaryTemplate.prototype, \"template\", {\r\n        /**\r\n         * @return {T} Template object\r\n         */\r\n        get: function () {\r\n            return this._template;\r\n        },\r\n        /**\r\n         * A \"template\" object to copy all properties from when creating new list\r\n         * items.\r\n         *\r\n         * @param {T}  v  Template object\r\n         */\r\n        set: function (v) {\r\n            v.isTemplate = true;\r\n            this._template = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all elements from other dictionary.\r\n     *\r\n     * @param {DictionaryTemplate}  source  Source dictionary\r\n     */\r\n    DictionaryTemplate.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        $iter.each(source.iterator(), function (a) {\r\n            // TODO fix this type cast\r\n            // TODO why does this need to clone ?\r\n            _this.setKey(a[0], a[1].clone());\r\n        });\r\n    };\r\n    /**\r\n     * Instantiates a new object of the specified type, adds it to specified\r\n     * `key` in the dictionary, and returns it.\r\n     *\r\n     * @param make  Item type to use. Will use the default type for the dictionary if not specified.\r\n     * @return      Newly created item\r\n     */\r\n    DictionaryTemplate.prototype.create = function (key) {\r\n        var _this = this;\r\n        return this.insertKeyIfEmpty(key, function () { return _this.template.clone(); });\r\n    };\r\n    return DictionaryTemplate;\r\n}(Dictionary));\r\nexport { DictionaryTemplate };\r\n//# sourceMappingURL=Dictionary.js.map","import * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $array from \"./Array\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * A base class for disposable objects.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nvar Disposer = /** @class */ (function () {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {function}  dispose  Function that disposes object\r\n     */\r\n    function Disposer(dispose) {\r\n        this._disposed = false;\r\n        this._dispose = dispose;\r\n    }\r\n    /**\r\n     * Checks if object is disposed.\r\n     *\r\n     * @return {boolean} Disposed?\r\n     */\r\n    Disposer.prototype.isDisposed = function () {\r\n        return this._disposed;\r\n    };\r\n    /**\r\n     * Disposes the object.\r\n     */\r\n    Disposer.prototype.dispose = function () {\r\n        if (!this._disposed) {\r\n            this._disposed = true;\r\n            this._dispose();\r\n        }\r\n    };\r\n    return Disposer;\r\n}());\r\nexport { Disposer };\r\n/**\r\n * A collection of related disposers that can be disposed in one go.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nvar MultiDisposer = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MultiDisposer, _super);\r\n    function MultiDisposer(disposers) {\r\n        return _super.call(this, function () {\r\n            $array.each(disposers, function (x) {\r\n                x.dispose();\r\n            });\r\n        }) || this;\r\n    }\r\n    return MultiDisposer;\r\n}(Disposer));\r\nexport { MultiDisposer };\r\n/**\r\n * A special kind of Disposer that has attached value set.\r\n *\r\n * If a new value is set using `set()` method, the old disposer value is\r\n * disposed.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nvar MutableValueDisposer = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MutableValueDisposer, _super);\r\n    /**\r\n     * Constructor.\r\n     */\r\n    function MutableValueDisposer() {\r\n        var _this = _super.call(this, function () {\r\n            if ($type.hasValue(_this._disposer)) {\r\n                _this._disposer.dispose();\r\n                _this._disposer = undefined;\r\n            }\r\n        }) || this;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns current value.\r\n     *\r\n     * @return {Optional<T>} Value\r\n     */\r\n    MutableValueDisposer.prototype.get = function () {\r\n        return this._value;\r\n    };\r\n    /**\r\n     * Sets value and disposes previous disposer if it was set.\r\n     *\r\n     * @param {Optional<T>}          value     New value\r\n     * @param {Optional<IDisposer>}  disposer  Disposer\r\n     */\r\n    MutableValueDisposer.prototype.set = function (value, disposer) {\r\n        if ($type.hasValue(this._disposer)) {\r\n            this._disposer.dispose();\r\n        }\r\n        this._disposer = disposer;\r\n        this._value = value;\r\n    };\r\n    /**\r\n     * Resets the disposer value.\r\n     */\r\n    MutableValueDisposer.prototype.reset = function () {\r\n        this.set(undefined, undefined);\r\n    };\r\n    return MutableValueDisposer;\r\n}(Disposer));\r\nexport { MutableValueDisposer };\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nvar CounterDisposer = /** @class */ (function (_super) {\r\n    tslib_1.__extends(CounterDisposer, _super);\r\n    function CounterDisposer() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /**\r\n         * [_counter description]\r\n         *\r\n         * @todo Description\r\n         * @type {number}\r\n         */\r\n        _this._counter = 0;\r\n        return _this;\r\n    }\r\n    /**\r\n     * [increment description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    CounterDisposer.prototype.increment = function () {\r\n        var _this = this;\r\n        // TODO throw an error if it is disposed\r\n        ++this._counter;\r\n        // TODO make this more efficient\r\n        return new Disposer(function () {\r\n            --_this._counter;\r\n            if (_this._counter === 0) {\r\n                _this.dispose();\r\n            }\r\n        });\r\n    };\r\n    return CounterDisposer;\r\n}(Disposer));\r\nexport { CounterDisposer };\r\n//# sourceMappingURL=Disposer.js.map","/**\r\n * A collection of easing functions\r\n *\r\n * Parts of this collection are taken from D3.js library (https://d3js.org/)\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $math from \"../utils/Math\";\r\n/**\r\n * The functions below are from D3.js library (https://d3js.org/)\r\n *\r\n * ----------------------------------------------------------------------------\r\n * Copyright 2017 Mike Bostock\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of the copyright holder nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n * ----------------------------------------------------------------------------\r\n * @hidden\r\n */\r\n/**\r\n * ============================================================================\r\n * LINEAR FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Easing function: \"linear\".\r\n */\r\nexport function linear(t) {\r\n    return +t;\r\n}\r\n/**\r\n * Easing function: \"quadIn\".\r\n */\r\nexport function quadIn(t) {\r\n    return t * t;\r\n}\r\n/**\r\n * Easing function: \"quadOut\".\r\n */\r\nexport function quadOut(t) {\r\n    return t * (2 - t);\r\n}\r\n/**\r\n * Easing function: \"quadInOut\".\r\n */\r\nexport function quadInOut(t) {\r\n    return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;\r\n}\r\n/**\r\n * Easing function: \"polyIn\".\r\n */\r\nexport function polyIn(t, e) {\r\n    return Math.pow(t, e);\r\n}\r\n/**\r\n * Easing function: \"polyOut\".\r\n */\r\nexport function polyOut(t, e) {\r\n    return 1 - Math.pow(1 - t, e);\r\n}\r\n/**\r\n * Easing function: \"polyInOut\".\r\n */\r\nexport function polyInOut(t, e) {\r\n    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;\r\n}\r\n/**\r\n * Easing function: \"polyIn3\".\r\n */\r\nexport function polyIn3(t) {\r\n    return polyIn(t, 3);\r\n}\r\n/**\r\n * Easing function: \"polyOut3\".\r\n */\r\nexport function polyOut3(t) {\r\n    return polyOut(t, 3);\r\n}\r\n/**\r\n * Easing function: \"polyInOut3\".\r\n */\r\nexport function polyInOut3(t) {\r\n    return polyInOut(t, 3);\r\n}\r\n/**\r\n * ============================================================================\r\n * EXPONENTIAL FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Easing function: \"expIn\".\r\n */\r\nexport function expIn(t) {\r\n    return Math.pow(2, 10 * t - 10);\r\n}\r\n/**\r\n * Easing function: \"expOut\".\r\n */\r\nexport function expOut(t) {\r\n    return 1 - Math.pow(2, -10 * t);\r\n}\r\n/**\r\n * Easing function: \"expInOut\".\r\n */\r\nexport function expInOut(t) {\r\n    return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;\r\n}\r\n/**\r\n * ============================================================================\r\n * SINE FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Easing function: \"sinIn\".\r\n */\r\nexport function sinIn(t) {\r\n    return 1 - Math.cos(t * $math.HALFPI);\r\n}\r\n/**\r\n * Easing function: \"sinOut\".\r\n */\r\nexport function sinOut(t) {\r\n    return Math.sin(t * $math.HALFPI);\r\n}\r\n/**\r\n * Easing function: \"sinInOut\".\r\n */\r\nexport function sinInOut(t) {\r\n    return (1 - Math.cos($math.PI * t)) / 2;\r\n}\r\n/**\r\n * ============================================================================\r\n * CUBIC FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Easing function: \"cubicIn\".\r\n */\r\nexport function cubicIn(t) {\r\n    return t * t * t;\r\n}\r\n/**\r\n * Easing function: \"cubicOut\".\r\n */\r\nexport function cubicOut(t) {\r\n    return --t * t * t + 1;\r\n}\r\n/**\r\n * Easing function: \"cubicInOut\".\r\n */\r\nexport function cubicInOut(t) {\r\n    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\r\n}\r\n/**\r\n * ============================================================================\r\n * CIRCLE FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Easing function: \"circleIn\".\r\n */\r\nexport function circleIn(t) {\r\n    return 1 - Math.sqrt(1 - t * t);\r\n}\r\n/**\r\n * Easing function: \"circleOut\".\r\n */\r\nexport function circleOut(t) {\r\n    return Math.sqrt(1 - --t * t);\r\n}\r\n/**\r\n * Easing function: \"circleInOut\".\r\n */\r\nexport function circleInOut(t) {\r\n    return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;\r\n}\r\n/**\r\n * ============================================================================\r\n * BOUNCE FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nvar b1 = 4 / 11, b2 = 6 / 11, b3 = 8 / 11, b4 = 3 / 4, b5 = 9 / 11, b6 = 10 / 11, b7 = 15 / 16, b8 = 21 / 22, b9 = 63 / 64, b0 = 1 / b1 / b1;\r\n/**\r\n * Easing function: \"bounceIn\".\r\n */\r\nexport function bounceIn(t) {\r\n    return 1 - bounceOut(1 - t);\r\n}\r\n/**\r\n * Easing function: \"bounceOut\".\r\n */\r\nexport function bounceOut(t) {\r\n    return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;\r\n}\r\n/**\r\n * Easing function: \"bounceInOut\".\r\n */\r\nexport function bounceInOut(t) {\r\n    return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;\r\n}\r\n/**\r\n * ============================================================================\r\n * ELASTIC FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nvar tau = 2 * Math.PI;\r\nvar amplitude = 1;\r\nvar period = 0.3 / tau;\r\nvar s = Math.asin(1 / amplitude) * period;\r\n/**\r\n * Easing function: \"elasticIn\".\r\n *\r\n * @function elasticIn\r\n * @param {number}  a  Amplitude\r\n * @param {number}  p  period\r\n */\r\nexport function elasticIn(t) {\r\n    return amplitude * Math.pow(2, 10 * --t) * Math.sin((s - t) / period);\r\n}\r\n/**\r\n * Easing function: \"elasticOut\".\r\n *\r\n * @function elasticOut\r\n * @param {number}  a  Amplitude\r\n * @param {number}  p  period\r\n */\r\nexport function elasticOut(t) {\r\n    return 1 - amplitude * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / period);\r\n}\r\n/**\r\n * Easing function: \"elasticInOut\".\r\n *\r\n * @function elasticInOut\r\n * @param {number}  a  Amplitude\r\n * @param {number}  p  period\r\n */\r\nexport function elasticInOut(t) {\r\n    return ((t = t * 2 - 1) < 0\r\n        ? amplitude * Math.pow(2, 10 * t) * Math.sin((s - t) / period)\r\n        : 2 - amplitude * Math.pow(2, -10 * t) * Math.sin((s + t) / period)) / 2;\r\n}\r\n//# sourceMappingURL=Ease.js.map","/**\r\n * Event Dispatcher module is used for registering listeners and dispatching\r\n * events across amCharts system.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Disposer } from \"./Disposer\";\r\nimport * as $array from \"./Array\";\r\nimport * as $async from \"./AsyncPending\";\r\nimport * as $type from \"./Type\";\r\n/*export interface IEventDispatcher<T> {\r\n    isDisposed(): boolean;\r\n    dispose(): void;\r\n    hasListeners(): boolean;\r\n    enable(): void;\r\n    disable(): void;\r\n    enableType<Key extends keyof T>(type: Key): void;\r\n    disableType<Key extends keyof T>(type: Key, amount?: number): void;\r\n    isEnabled<Key extends keyof T>(type: Key): boolean;\r\n    has<C, Key extends keyof T>(type: Key, callback?: (this: C, event: T[Key]) => void, context?: C): boolean;\r\n    dispatchImmediately<Key extends keyof T>(type: Key, event: T[Key]): void;\r\n    dispatch<Key extends keyof T>(type: Key, event: T[Key]): void;\r\n    onAll<C, Key extends keyof T>(callback: (this: C, type: Key, event: T[Key]) => void, context?: C): IDisposer;\r\n    on<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): IDisposer;\r\n    once<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): IDisposer;\r\n    off<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): void;\r\n    off<C, Key extends keyof T>(type: Key, callback: (this: C, event: T[Key]) => void, context?: C): void;\r\n    copyFrom(source: this): void;\r\n}*/\r\n/**\r\n * Universal Event Dispatcher.\r\n *\r\n * @important\r\n */\r\nvar EventDispatcher = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     */\r\n    function EventDispatcher() {\r\n        this._listeners = [];\r\n        this._killed = [];\r\n        this._disabled = {};\r\n        this._iterating = 0;\r\n        this._enabled = true;\r\n        this._disposed = false;\r\n    }\r\n    /**\r\n     * Returns if this object has been already disposed.\r\n     *\r\n     * @return {boolean} Disposed?\r\n     */\r\n    EventDispatcher.prototype.isDisposed = function () {\r\n        return this._disposed;\r\n    };\r\n    /**\r\n     * Dispose (destroy) this object.\r\n     */\r\n    EventDispatcher.prototype.dispose = function () {\r\n        if (!this._disposed) {\r\n            this._disposed = true;\r\n            var a = this._listeners;\r\n            this._iterating = 1;\r\n            this._listeners = null;\r\n            this._disabled = null;\r\n            try {\r\n                $array.each(a, function (x) {\r\n                    x.disposer.dispose();\r\n                });\r\n            }\r\n            finally {\r\n                this._killed = null;\r\n                this._iterating = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Checks if this particular event dispatcher has any listeners set.\r\n     *\r\n     * @return {boolean} Has listeners?\r\n     */\r\n    EventDispatcher.prototype.hasListeners = function () {\r\n        return this._listeners.length !== 0;\r\n    };\r\n    /**\r\n     * Checks if this particular event dispatcher has any particular listeners set.\r\n     *\r\n     * @return {boolean} Has particular event listeners?\r\n     */\r\n    EventDispatcher.prototype.hasListenersByType = function (type) {\r\n        return $array.any(this._listeners, function (x) { return (x.type === null || x.type === type) && !x.killed; });\r\n    };\r\n    /**\r\n     * Enable dispatching of events if they were previously disabled by\r\n     * `disable()`.\r\n     */\r\n    EventDispatcher.prototype.enable = function () {\r\n        this._enabled = true;\r\n    };\r\n    /**\r\n     * Disable dispatching of events until re-enabled by `enable()`.\r\n     */\r\n    EventDispatcher.prototype.disable = function () {\r\n        this._enabled = false;\r\n    };\r\n    /**\r\n     * Enable dispatching particular event, if it was disabled before by\r\n     * `disableType()`.\r\n     *\r\n     * @param {Key} type Event type\r\n     */\r\n    EventDispatcher.prototype.enableType = function (type) {\r\n        delete this._disabled[type];\r\n    };\r\n    /**\r\n     * Disable dispatching of events for a certain event type.\r\n     *\r\n     * Optionally, can set how many dispatches to skip before automatically\r\n     * re-enabling the dispatching.\r\n     *\r\n     * @param {Key}                type    Event type\r\n     * @param {number = Infinity}  amount  Number of event dispatches to skip\r\n     */\r\n    EventDispatcher.prototype.disableType = function (type, amount) {\r\n        if (amount === void 0) { amount = Infinity; }\r\n        this._disabled[type] = amount;\r\n    };\r\n    /**\r\n     * Removes listener from dispatcher.\r\n     *\r\n     * Will throw an exception if such listener does not exists.\r\n     *\r\n     * @param {EventListener<T>} listener Listener to remove\r\n     */\r\n    EventDispatcher.prototype._removeListener = function (listener) {\r\n        if (this._iterating === 0) {\r\n            var index = this._listeners.indexOf(listener);\r\n            if (index === -1) {\r\n                throw new Error(\"Invalid state: could not remove listener\");\r\n            }\r\n            this._listeners.splice(index, 1);\r\n        }\r\n        else {\r\n            this._killed.push(listener);\r\n        }\r\n    };\r\n    /**\r\n     * Removes existing listener by certain parameters.\r\n     *\r\n     * @param {boolean}     once         Listener's once setting\r\n     * @param {Key | null}  type         Listener's type\r\n     * @param {A}           callback     Callback function\r\n     * @param {B}           context      Callback context\r\n     */\r\n    EventDispatcher.prototype._removeExistingListener = function (once, type, callback, context) {\r\n        if (this._disposed) {\r\n            throw new Error(\"EventDispatcher is disposed\");\r\n        }\r\n        var index = $array.findIndex(this._listeners, function (info) {\r\n            return info.once === once && // TODO is this correct ?\r\n                info.type === type &&\r\n                info.callback === callback &&\r\n                info.context === context;\r\n        });\r\n        if (index !== -1) {\r\n            this._listeners[index].disposer.dispose();\r\n        }\r\n    };\r\n    /**\r\n     * Checks if dispatching for particular event type is enabled.\r\n     *\r\n     * @param  {Key}      type  Event type\r\n     * @return {boolean}        Enabled?\r\n     */\r\n    EventDispatcher.prototype.isEnabled = function (type) {\r\n        if (this._disposed) {\r\n            throw new Error(\"EventDispatcher is disposed\");\r\n        }\r\n        // TODO is this check correct ?\r\n        return this._enabled && this._listeners.length > 0 && this.hasListenersByType(type) && this._disabled[type] == null;\r\n    };\r\n    /**\r\n     * Checks if there's already a listener with specific parameters.\r\n     *\r\n     * @param   {Key | null}  type      Listener's type\r\n     * @param   {A}           callback  Callback function\r\n     * @param   {B}           context   Callback context\r\n     * @return {boolean}                Has listener?\r\n     */\r\n    EventDispatcher.prototype.has = function (type, callback, context) {\r\n        var index = $array.findIndex(this._listeners, function (info) {\r\n            return info.once !== true && // Ignoring \"once\" listeners\r\n                info.type === type &&\r\n                (!callback || info.callback === callback) &&\r\n                info.context === context;\r\n        });\r\n        return index !== -1;\r\n    };\r\n    /**\r\n     * Checks whether event of the particular type should be dispatched.\r\n     *\r\n     * @param  {Key}   type  Event type\r\n     * @return {boolean}        Dispatch?\r\n     */\r\n    EventDispatcher.prototype._shouldDispatch = function (type) {\r\n        if (this._disposed) {\r\n            throw new Error(\"EventDispatcher is disposed\");\r\n        }\r\n        var count = this._disabled[type];\r\n        if (!$type.isNumber(count)) {\r\n            return this._enabled;\r\n        }\r\n        else {\r\n            if (count <= 1) {\r\n                delete this._disabled[type];\r\n            }\r\n            else {\r\n                --this._disabled[type];\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * [_eachListener description]\r\n     *\r\n     * All of this extra code is needed when a listener is removed while iterating\r\n     *\r\n     * @todo Description\r\n     * @param {EventListener<T>) => void} fn [description]\r\n     */\r\n    EventDispatcher.prototype._eachListener = function (fn) {\r\n        var _this = this;\r\n        ++this._iterating;\r\n        try {\r\n            $array.each(this._listeners, fn);\r\n        }\r\n        finally {\r\n            --this._iterating;\r\n            // TODO should this be inside or outside the finally ?\r\n            if (this._iterating === 0 && this._killed.length !== 0) {\r\n                // Remove killed listeners\r\n                $array.each(this._killed, function (killed) {\r\n                    _this._removeListener(killed);\r\n                });\r\n                this._killed.length = 0;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Dispatches an event immediately without waiting for next cycle.\r\n     *\r\n     * @param {Key}     type   Event type\r\n     * @param {T[Key]}  event  Event object\r\n     * @todo automatically add in type and target properties if they are missing\r\n     */\r\n    EventDispatcher.prototype.dispatchImmediately = function (type, event) {\r\n        if (this._shouldDispatch(type)) {\r\n            // TODO check if it's faster to use an object of listeners rather than a single big array\r\n            // TODO if the function throws, maybe it should keep going ?\r\n            this._eachListener(function (listener) {\r\n                if (!listener.killed && (listener.type === null || listener.type === type)) {\r\n                    listener.dispatch(type, event);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Shelves the event to be dispatched within next update cycle.\r\n     *\r\n     * @param {Key}     type   Event type\r\n     * @param {T[Key]}  event  Event object\r\n     * @todo automatically add in type and target properties if they are missing\r\n     */\r\n    EventDispatcher.prototype.dispatch = function (type, event) {\r\n        if (this._shouldDispatch(type)) {\r\n            this._eachListener(function (listener) {\r\n                // TODO check if it's faster to use an object of listeners rather than a single big array\r\n                if (!listener.killed && (listener.type === null || listener.type === type)) {\r\n                    // TODO if the function throws, maybe it should keep going ?\r\n                    // TODO dispatch during the update cycle, rather than using whenIdle\r\n                    $async.whenIdle(function () {\r\n                        if (!listener.killed) {\r\n                            listener.dispatch(type, event);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Creates, catalogs and returns an [[EventListener]].\r\n     *\r\n     * Event listener can be disposed.\r\n     *\r\n     * @param   {boolean}     once         Listener's once setting\r\n     * @param   {Key | null}  type         Listener's type\r\n     * @param   {A}           callback     Callback function\r\n     * @param   {B}           context      Callback context\r\n     * @param   {boolean}     shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n     * @param   {function}    dispatch\r\n     * @returns {EventListener} An event listener\r\n     */\r\n    EventDispatcher.prototype._on = function (once, type, callback, context, shouldClone, dispatch) {\r\n        var _this = this;\r\n        if (this._disposed) {\r\n            throw new Error(\"EventDispatcher is disposed\");\r\n        }\r\n        this._removeExistingListener(once, type, callback, context);\r\n        var info = {\r\n            type: type,\r\n            callback: callback,\r\n            context: context,\r\n            shouldClone: shouldClone,\r\n            dispatch: dispatch,\r\n            killed: false,\r\n            once: once,\r\n            disposer: new Disposer(function () {\r\n                info.killed = true;\r\n                _this._removeListener(info);\r\n            })\r\n        };\r\n        this._listeners.push(info);\r\n        return info;\r\n    };\r\n    /**\r\n     * Creates an event listener to be invoked on **any** event.\r\n     *\r\n     * @param   {A}           callback     Callback function\r\n     * @param   {B}           context      Callback context\r\n     * @param   {boolean}     shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n     * @returns {IDisposer}                A disposable event listener\r\n     * @todo what if `listen` is called on the same function twice ?\r\n     */\r\n    EventDispatcher.prototype.onAll = function (callback, context, shouldClone) {\r\n        if (shouldClone === void 0) { shouldClone = true; }\r\n        return this._on(false, null, callback, context, shouldClone, function (type, event) { return callback.call(context, type, event); }).disposer;\r\n    };\r\n    /**\r\n     * Creates an event listener to be invoked on a specific event type.\r\n     *\r\n     * ```TypeScript\r\n     * series.events.on(\"hidden\", (ev) => {\r\n     *   console.log(\"Series hidden: \" + ev.target.name);\r\n     * }, this);\r\n     * ```\r\n     * ```JavaScript\r\n     * series.events.on(\"hidden\", function(ev) {\r\n     *   console.log(\"Series hidden: \" + ev.target.name);\r\n     * }, this);\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"events\": {\r\n     *     \t\"hidden\": function(ev) {\r\n     *     \t  console.log(\"Series hidden: \" + ev.target.name);\r\n     *     \t}\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * The above will invoke our custom event handler whenever series we put\r\n     * event on is hidden.\r\n     *\r\n     * @param   {Key | null}  type         Listener's type\r\n     * @param   {A}           callback     Callback function\r\n     * @param   {B}           context      Callback context\r\n     * @param   {boolean}     shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n     * @returns {IDisposer}                A disposable event listener\r\n     * @todo what if `listen` is called on the same function twice ?\r\n     */\r\n    EventDispatcher.prototype.on = function (type, callback, context, shouldClone) {\r\n        if (shouldClone === void 0) { shouldClone = true; }\r\n        return this._on(false, type, callback, context, shouldClone, function (type, event) { return callback.call(context, event); }).disposer;\r\n    };\r\n    /**\r\n     * Creates an event listener to be invoked on a specific event type once.\r\n     *\r\n     * Once the event listener is invoked, it is automatically disposed.\r\n     *\r\n     * ```TypeScript\r\n     * series.events.on(\"hidden\", (ev) => {\r\n     *   console.log(\"Series hidden: \" + ev.target.name);\r\n     * }, this);\r\n     * ```\r\n     * ```JavaScript\r\n     * series.events.on(\"hidden\", function(ev) {\r\n     *   console.log(\"Series hidden: \" + ev.target.name);\r\n     * }, this);\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"events\": {\r\n     *     \t\"hidden\": function(ev) {\r\n     *     \t  console.log(\"Series hidden: \" + ev.target.name);\r\n     *     \t}\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * The above will invoke our custom event handler the first time series we\r\n     * put event on is hidden.\r\n     *\r\n     * @param   {Key | null}  type         Listener's type\r\n     * @param   {A}           callback     Callback function\r\n     * @param   {B}           context      Callback context\r\n     * @param   {boolean}     shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n     * @returns {IDisposer}                A disposable event listener\r\n     * @todo what if `listen` is called on the same function twice ?\r\n     */\r\n    EventDispatcher.prototype.once = function (type, callback, context, shouldClone) {\r\n        if (shouldClone === void 0) { shouldClone = true; }\r\n        var x = this._on(true, type, callback, context, shouldClone, function (type, event) {\r\n            x.disposer.dispose();\r\n            callback.call(context, event);\r\n        });\r\n        // TODO maybe this should return a different Disposer ?\r\n        return x.disposer;\r\n    };\r\n    /**\r\n     * Removes the event listener with specific parameters.\r\n     *\r\n     * @param   {Key | null}  type         Listener's type\r\n     * @param   {A}           callback     Callback function\r\n     * @param   {B}           context      Callback context\r\n     */\r\n    EventDispatcher.prototype.off = function (type, callback, context) {\r\n        this._removeExistingListener(false, type, callback, context);\r\n    };\r\n    /**\r\n     * Copies all dispatcher parameters, including listeners, from another event\r\n     * dispatcher.\r\n     *\r\n     * @param {this} source Source event dispatcher\r\n     */\r\n    EventDispatcher.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        if (this._disposed) {\r\n            throw new Error(\"EventDispatcher is disposed\");\r\n        }\r\n        if (source === this) {\r\n            throw new Error(\"Cannot copyFrom the same TargetedEventDispatcher\");\r\n        }\r\n        $array.each(source._listeners, function (x) {\r\n            // TODO is this correct ?\r\n            if (!x.killed && x.shouldClone) {\r\n                if (x.type === null) {\r\n                    _this.onAll(x.callback, x.context);\r\n                }\r\n                else if (x.once) {\r\n                    _this.once(x.type, x.callback, x.context);\r\n                }\r\n                else {\r\n                    _this.on(x.type, x.callback, x.context);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    return EventDispatcher;\r\n}());\r\nexport { EventDispatcher };\r\n/**\r\n * A version of the [[EventDispatcher]] that dispatches events for a specific\r\n * target object.\r\n *\r\n * @type {[type]}\r\n * @important\r\n */\r\nvar TargetedEventDispatcher = /** @class */ (function (_super) {\r\n    tslib_1.__extends(TargetedEventDispatcher, _super);\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {Target} target Event dispatcher target\r\n     */\r\n    function TargetedEventDispatcher(target) {\r\n        var _this = _super.call(this) || this;\r\n        _this.target = target;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Copies all dispatcher parameters, including listeners, from another event\r\n     * dispatcher.\r\n     *\r\n     * @param {this} source Source event dispatcher\r\n     */\r\n    TargetedEventDispatcher.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        if (this._disposed) {\r\n            throw new Error(\"EventDispatcher is disposed\");\r\n        }\r\n        if (source === this) {\r\n            throw new Error(\"Cannot copyFrom the same TargetedEventDispatcher\");\r\n        }\r\n        $array.each(source._listeners, function (x) {\r\n            // TODO very hacky\r\n            if (x.context === source.target) {\r\n                return;\r\n            }\r\n            // TODO is this correct ?\r\n            if (!x.killed && x.shouldClone) {\r\n                if (x.type === null) {\r\n                    _this.onAll(x.callback, x.context);\r\n                }\r\n                else if (x.once) {\r\n                    _this.once(x.type, x.callback, x.context);\r\n                }\r\n                else {\r\n                    _this.on(x.type, x.callback, x.context);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    return TargetedEventDispatcher;\r\n}(EventDispatcher));\r\nexport { TargetedEventDispatcher };\r\n//# sourceMappingURL=EventDispatcher.js.map","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { system } from \"../System\";\r\nimport { registry } from \"../Registry\";\r\nimport { Container } from \"../Container\";\r\nimport { Paper } from \"../rendering/Paper\";\r\nimport { SVGContainer, svgContainers } from \"../rendering/SVGContainer\";\r\nimport { FocusFilter } from \"../rendering/filters/FocusFilter\";\r\nimport { Preloader } from \"../elements/Preloader\";\r\nimport { AmChartsLogo } from \"../elements/AmChartsLogo\";\r\nimport { Tooltip } from \"../elements/Tooltip\";\r\nimport { Disposer } from \"../utils/Disposer\";\r\nimport { percent } from \"./Percent\";\r\nimport { options } from \"../Options\";\r\nimport * as $array from \"./Array\";\r\nimport * as $type from \"./Type\";\r\nimport * as $dom from \"./DOM\";\r\n/**\r\n * ============================================================================\r\n * INSTANTIATION FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates all HTML and SVG containers needed for the chart instance, as well\r\n * as the new [[Sprite]] (as specified in `classType` parameter).\r\n *\r\n * @param  {Optional<HTMLElement | string>}  htmlElement  A container to creat elements in\r\n * @param  {T}                               classType    A class definition of the new element to create\r\n * @return {T}                                            Newly-created Sprite object\r\n */\r\nfunction createChild(htmlElement, classType) {\r\n    var htmlContainer = $dom.getElement(htmlElement);\r\n    if (htmlContainer) {\r\n        htmlContainer.innerHTML = \"\";\r\n        //htmlContainer.style.overflow = \"hidden\";\r\n        var svgDiv_1 = new SVGContainer(htmlContainer);\r\n        var paper = new Paper(svgDiv_1.SVGContainer, \"svg-\" + (svgContainers.length - 1));\r\n        // the approach with masks is chosen because overflow:visible is set on SVG element in order tooltips could go outside\r\n        // svg area - this is often needed when working with small charts.\r\n        // main container which holds content container and tooltips container\r\n        var container_1 = new Container();\r\n        container_1.htmlContainer = htmlContainer;\r\n        container_1.svgContainer = svgDiv_1;\r\n        container_1.width = percent(100);\r\n        container_1.height = percent(100);\r\n        container_1.background.fillOpacity = 0;\r\n        container_1.paper = paper;\r\n        paper.append(container_1.group);\r\n        // this is set from parent container, but this one doesn't have, so do it manually.\r\n        container_1.relativeWidth = 1;\r\n        container_1.relativeHeight = 1;\r\n        svgDiv_1.container = container_1;\r\n        // creating classType instance\r\n        var sprite_1 = container_1.createChild(classType);\r\n        sprite_1.topParent = container_1;\r\n        var uid = sprite_1.uid;\r\n        registry.invalidSprites[uid] = [];\r\n        registry.invalidDatas[uid] = [];\r\n        registry.invalidPositions[uid] = [];\r\n        registry.invalidLayouts[uid] = [];\r\n        container_1.baseId = uid;\r\n        sprite_1.isBaseSprite = true;\r\n        sprite_1.focusFilter = new FocusFilter();\r\n        registry.baseSprites.push(sprite_1);\r\n        registry.baseSpritesByUid[uid] = sprite_1;\r\n        sprite_1.maskRectangle = { x: 0, y: 0, width: svgDiv_1.width, height: svgDiv_1.height };\r\n        // this solves issues with display:none, as all children are measured as 0x0\r\n        container_1.events.on(\"maxsizechanged\", function (event) {\r\n            if (event.previousWidth == 0 || event.previousHeight == 0) {\r\n                container_1.deepInvalidate();\r\n            }\r\n            if (sprite_1.maskRectangle) {\r\n                sprite_1.maskRectangle = { x: 0, y: 0, width: svgDiv_1.width, height: svgDiv_1.height };\r\n            }\r\n        });\r\n        sprite_1.addDisposer(new Disposer(function () {\r\n            $array.remove(registry.baseSprites, sprite_1);\r\n            registry.baseSpritesByUid[sprite_1.uid] = undefined;\r\n        }));\r\n        // TODO figure out a better way of doing this\r\n        sprite_1.addDisposer(container_1);\r\n        // tooltip container\r\n        var tooltipContainer_1 = container_1.createChild(Container);\r\n        tooltipContainer_1.topParent = container_1;\r\n        tooltipContainer_1.width = percent(100);\r\n        tooltipContainer_1.height = percent(100);\r\n        tooltipContainer_1.isMeasured = false;\r\n        container_1.tooltipContainer = tooltipContainer_1;\r\n        sprite_1.tooltip = new Tooltip();\r\n        sprite_1.tooltip.hide(0);\r\n        sprite_1.tooltip.setBounds({ x: 0, y: 0, width: tooltipContainer_1.maxWidth, height: tooltipContainer_1.maxHeight });\r\n        tooltipContainer_1.events.on(\"maxsizechanged\", function () {\r\n            $type.getValue(sprite_1.tooltip).setBounds({ x: 0, y: 0, width: tooltipContainer_1.maxWidth, height: tooltipContainer_1.maxHeight });\r\n        }, undefined, false);\r\n        //@todo: maybe we don't need to create one by default but only on request?\r\n        var preloader_1 = new Preloader();\r\n        preloader_1.events.on(\"inited\", function () {\r\n            preloader_1.__disabled = true;\r\n        }, undefined, false);\r\n        container_1.preloader = preloader_1;\r\n        if (!options.commercialLicense) {\r\n            var logo_1 = tooltipContainer_1.createChild(AmChartsLogo);\r\n            tooltipContainer_1.events.on(\"maxsizechanged\", function (ev) {\r\n                if ((tooltipContainer_1.maxWidth <= 100) || (tooltipContainer_1.maxHeight <= 50)) {\r\n                    logo_1.hide();\r\n                }\r\n                else if (logo_1.isHidden || logo_1.isHiding) {\r\n                    logo_1.show();\r\n                }\r\n            }, undefined, false);\r\n            sprite_1.logo = logo_1;\r\n            logo_1.align = \"left\";\r\n            logo_1.valign = \"bottom\";\r\n        }\r\n        sprite_1.numberFormatter; // need to create one.\r\n        // Set this as an autonomouse instance\r\n        // Controls like Preloader, Export will use this.\r\n        container_1.isStandaloneInstance = true;\r\n        return sprite_1;\r\n    }\r\n    else {\r\n        system.log(\"html container not found\");\r\n        throw new Error(\"html container not found\");\r\n    }\r\n}\r\n/**\r\n * A shortcut to creating a chart instance.\r\n *\r\n * The first argument is either a reference to or an id of a DOM element to be\r\n * used as a container for the chart.\r\n *\r\n * The second argument is the type reference of the chart type. (for plain\r\n * JavaScript users this can also be a string indicating chart type)\r\n *\r\n * ```TypeScript\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n * ```\r\n * ```JavaScript\r\n * // Can pass in chart type reference like this:\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // ... or chart class type as a string:\r\n * var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @param  {HTMLElement | string}  htmlElement  Reference or id of the target container element\r\n * @param  {T}                     classType    Class type of the target chart type\r\n * @return {T}                                  Chart instance\r\n */\r\nexport function create(htmlElement, classType) {\r\n    // This is a nasty hack for the benefit of vanilla JS users, who do not\r\n    // enjoy benefits of type-check anyway.\r\n    // We're allowing passing in a name of the class rather than type reference\r\n    // itself.\r\n    var classError;\r\n    if ($type.isString(classType)) {\r\n        if ($type.hasValue(registry.registeredClasses[classType])) {\r\n            classType = registry.registeredClasses[classType];\r\n        }\r\n        else {\r\n            classType = registry.registeredClasses[\"Container\"];\r\n            classError = new Error(\"Class [\" + classType + \"] is not loaded.\");\r\n        }\r\n    }\r\n    // Create the chart\r\n    var chart = createChild(htmlElement, classType);\r\n    // Error?\r\n    if (classError) {\r\n        chart.raiseCriticalError(classError);\r\n    }\r\n    return chart;\r\n}\r\n/**\r\n * A shortcut to creating a chart from a config object.\r\n *\r\n * Example:\r\n *\r\n * ```TypeScript\r\n * let chart am4core.createFromConfig({ ... }, \"chartdiv\", am4charts.XYChart );\r\n * ```\r\n * ```JavaScript\r\n * var chart am4core.createFromConfig({ ... }, \"chartdiv\", \"XYChart\" );\r\n * ```\r\n *\r\n * If `chartType` parameter is not supplied it must be set in a config object,\r\n * via reference to chart type, e.g.:\r\n *\r\n * ```TypeScript\r\n * {\r\n *   \"type\": am4charts.XYChart,\r\n *   // ...\r\n * }\r\n * ```\r\n * ```JavaScript\r\n * {\r\n *   \"type\": am4charts.XYChart,\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * Or via string: (if you are using JavaScript)\r\n *\r\n * ```TypeScript\r\n * {\r\n *   \"type\": \"XYChart\",\r\n *   // ...\r\n * }\r\n * ```\r\n * ```JavaScript\r\n * {\r\n *   \"type\": \"XYChart\",\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * A `container` can either be a reference to an HTML container to put chart\r\n * in, or it's unique id.\r\n *\r\n * If `container` is not specified, it must be included in the config object:\r\n *\r\n * ```TypeScript\r\n * {\r\n *   \"type\": \"XYChart\",\r\n *   \"container\": \"chartdiv\",\r\n *   // ...\r\n * }\r\n * ```\r\n * ```JavaScript\r\n * {\r\n *   \"type\": \"XYChart\",\r\n *   \"container\": \"chartdiv\",\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * @param  {any}                   config       Config object in property/value pairs\r\n * @param  {string | HTMLElement}  htmlElement  Container reference or ID\r\n * @param  {typeof Chart}          objectType   Chart type\r\n * @return {Chart}                              A newly created chart instance\r\n * @todo Throw exception if type is not correct\r\n */\r\nexport function createFromConfig(config, htmlElement, classType) {\r\n    // Extract chart type from config if necessary\r\n    if (!$type.hasValue(classType)) {\r\n        classType = config.type;\r\n        delete config.type;\r\n    }\r\n    // Extract element from config if necessary\r\n    if (!$type.hasValue(htmlElement)) {\r\n        htmlElement = config.container;\r\n        delete config.container;\r\n    }\r\n    // Check if we need to extract actual type reference\r\n    var finalType;\r\n    var classError;\r\n    if ($type.isString(classType) && $type.hasValue(registry.registeredClasses[classType])) {\r\n        finalType = registry.registeredClasses[classType];\r\n    }\r\n    else if (typeof classType !== \"function\") {\r\n        finalType = Container;\r\n        classError = new Error(\"Class [\" + classType + \"] is not loaded.\");\r\n    }\r\n    else {\r\n        finalType = classType;\r\n    }\r\n    // Check if maybe we have `geodata` set as string, which would mean that\r\n    // we need to try to refer to a loaded map with a global variable, like\r\n    // `am4geodata_xxx`\r\n    if ($type.hasValue(config[\"geodata\"]) && $type.isString(config[\"geodata\"])) {\r\n        // Check if there's a map loaded by such name\r\n        if ($type.hasValue(window[\"am4geodata_\" + config[\"geodata\"]])) {\r\n            config[\"geodata\"] = window[\"am4geodata_\" + config[\"geodata\"]];\r\n        }\r\n        // Nope. Let's try maybe we got JSON as string?\r\n        else {\r\n            try {\r\n                config[\"geodata\"] = JSON.parse(config[\"geodata\"]);\r\n            }\r\n            catch (e) {\r\n                // No go again. Error out.\r\n                classError = new Error(\"<code>geodata</code> is incorrect or the map file is not loaded.\");\r\n            }\r\n        }\r\n    }\r\n    // Create the chart\r\n    var chart = createChild(htmlElement, finalType);\r\n    // Set config\r\n    if (classError) {\r\n        chart.raiseCriticalError(classError);\r\n    }\r\n    else {\r\n        chart.config = config;\r\n    }\r\n    return chart;\r\n}\r\n/**\r\n * Applies a theme to System, and subsequently all chart instances created\r\n * from that point forward.\r\n *\r\n * amCharts supports multiple themes. Calling `useTheme` multiple times will\r\n * make the System apply multiple themes, rather than overwrite previously\r\n * set one.\r\n *\r\n * This enables combining features from multiple themes on the same chart.\r\n * E.g.:\r\n *\r\n * ```TypeScript\r\n * am4core.useTheme(am4themes.material);\r\n * am4core.useTheme(am4themes.animated);\r\n * ```\r\n * ```JavaScript\r\n * am4core.useTheme(am4themes.material);\r\n * am4core.useTheme(am4themes.animated);\r\n * ```\r\n *\r\n * The above will apply both the Material color and animation options to all\r\n * charts created.\r\n *\r\n * @param {ITheme}  value  A reference to a theme\r\n */\r\nexport function useTheme(value) {\r\n    registry.themes.push(value);\r\n}\r\n/**\r\n * Removes a theme from \"active themes\" list, so it won't get applied to any\r\n * charts created subsequently.\r\n *\r\n * @param {ITheme}  value  A reference to a theme\r\n */\r\nexport function unuseTheme(value) {\r\n    $array.remove(registry.themes, value);\r\n}\r\n/**\r\n * Removes all \"active\" themes. Any charts created subsequently will not have\r\n * any theme applied to them.\r\n */\r\nexport function unuseAllThemes() {\r\n    registry.themes = [];\r\n}\r\n//# sourceMappingURL=Instance.js.map","/**\r\n * This module contains a version of ColorSet that can (and should) be used for\r\n * coloring UI elements.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { color } from \"./Color\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This module contains a version of ColorSet that can (and should) be used for\r\n * coloring UI elements.\r\n *\r\n * The main difference from the basic [[ColorSet]] is that instead of sequenced\r\n * colors, it uses a concept of named colors.\r\n *\r\n * This way, every element in the UI can extract an exact color theme author\r\n * meant for the specific purpose, like strokes, backgrounds, etc.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\r\nvar InterfaceColorSet = /** @class */ (function (_super) {\r\n    tslib_1.__extends(InterfaceColorSet, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function InterfaceColorSet() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Maps the list of purposes (like \"stroke\") to an index of color of the\r\n         * color set.\r\n         */\r\n        _this._purposes = {\r\n            stroke: color(\"#e5e5e5\"),\r\n            fill: color(\"#f3f3f3\"),\r\n            primaryButton: color(\"#6794dc\"),\r\n            primaryButtonHover: color(\"#6771dc\"),\r\n            primaryButtonDown: color(\"#68dc75\"),\r\n            primaryButtonActive: color(\"#68dc75\"),\r\n            primaryButtonText: color(\"#FFFFFF\"),\r\n            primaryButtonStroke: color(\"#FFFFFF\"),\r\n            secondaryButton: color(\"#d9d9d9\"),\r\n            secondaryButtonHover: color(\"#d9d9d9\").brighten(-0.25),\r\n            secondaryButtonDown: color(\"#d9d9d9\").brighten(-0.35),\r\n            secondaryButtonActive: color(\"#d9d9d9\").brighten(0.35),\r\n            secondaryButtonText: color(\"#000000\"),\r\n            secondaryButtonStroke: color(\"#FFFFFF\"),\r\n            grid: color(\"#000000\"),\r\n            background: color(\"#ffffff\"),\r\n            alternativeBackground: color(\"#000000\"),\r\n            text: color(\"#000000\"),\r\n            alternativeText: color(\"#FFFFFF\"),\r\n            disabledBackground: color(\"#999999\"),\r\n            positive: color(\"#67dc75\"),\r\n            negative: color(\"#dc6788\")\r\n        };\r\n        _this.className = \"InterfaceColorSet\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    InterfaceColorSet.prototype.debug = function () { };\r\n    /**\r\n     * Returns a color to be used for the specific purpose.\r\n     *\r\n     * ```TypeScript\r\n     * let uicolors = new am4core.InterfaceColorSet();\r\n     * console.log(uicolors.getFor(\"stroke\"));\r\n     * ```\r\n     * ```JavaScript\r\n     * var uicolors = new am4core.InterfaceColorSet();\r\n     * console.log(uicolors.getFor(\"stroke\"));\r\n     * ```\r\n     *\r\n     * @param  {keyof IColorPurpose}  purpose  Color use purpuse\r\n     * @return {Color}                        Color\r\n     */\r\n    InterfaceColorSet.prototype.getFor = function (purpose) {\r\n        return this._purposes[purpose];\r\n    };\r\n    /**\r\n     * Sets color to be used for the specific purpose.\r\n     *\r\n     * @param {keyof IColorPurpose}  purpose  Color use purpose\r\n     * @param {Color}               color    Color\r\n     */\r\n    InterfaceColorSet.prototype.setFor = function (purpose, color) {\r\n        this._purposes[purpose] = color;\r\n    };\r\n    return InterfaceColorSet;\r\n}(BaseObject));\r\nexport { InterfaceColorSet };\r\n//# sourceMappingURL=InterfaceColorSet.js.map","import * as $array from \"./Array\";\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport function fromArray(array) {\r\n    return function (push) {\r\n        var length = array.length;\r\n        for (var i = 0; i < length; ++i) {\r\n            if (!push(array[i])) {\r\n                break;\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport function length(iter) {\r\n    var sum = 0;\r\n    iter(function (_) {\r\n        ++sum;\r\n        return true;\r\n    });\r\n    return sum;\r\n}\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport function toArray(iter) {\r\n    var output = [];\r\n    iter(function (value) {\r\n        output.push(value);\r\n        return true;\r\n    });\r\n    return output;\r\n}\r\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @type {Iterator<A>}\r\n */\r\nexport function eachContinue(iter, fn) {\r\n    return iter(fn);\r\n}\r\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @type {Iterator<A>}\r\n */\r\nexport function each(iter, fn) {\r\n    return iter(function (value) {\r\n        fn(value);\r\n        return true;\r\n    });\r\n}\r\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @type {Iterator<A>}\r\n */\r\nexport function sort(iter, fn) {\r\n    return fromArray(toArray(iter).sort(fn));\r\n}\r\n/**\r\n * [A description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @type {[type]}\r\n */\r\nexport function map(iter, fn) {\r\n    return function (push) { return iter(function (value) { return push(fn(value)); }); };\r\n}\r\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @type {Iterator<A>}\r\n */\r\nexport function filter(iter, fn) {\r\n    return function (push) { return iter(function (value) {\r\n        if (fn(value)) {\r\n            return push(value);\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }); };\r\n}\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport function concat() {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    return function (push) {\r\n        var go = true;\r\n        var push2 = function (value) { return (go = push(value)); };\r\n        var length = args.length;\r\n        for (var i = 0; i < length; ++i) {\r\n            args[i](push2);\r\n            if (!go) {\r\n                break;\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nexport function flatten(iter) {\r\n    return function (push) {\r\n        var go = true;\r\n        var push2 = function (value) { return (go = push(value)); };\r\n        return iter(function (value) {\r\n            value(push2);\r\n            return go;\r\n        });\r\n    };\r\n}\r\n/**\r\n * [number description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @type {[type]}\r\n */\r\nexport function indexed(iter) {\r\n    return function (push) {\r\n        var index = 0;\r\n        return iter(function (value) { return push([index++, value]); });\r\n    };\r\n}\r\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @type {Iterator<A>}\r\n */\r\nexport function findIndex(iter, matches) {\r\n    var found = false;\r\n    var i = 0;\r\n    iter(function (value) {\r\n        if (matches(value)) {\r\n            found = true;\r\n            return false;\r\n        }\r\n        else {\r\n            ++i;\r\n            return true;\r\n        }\r\n    });\r\n    return (found ? i : -1);\r\n}\r\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @type {Iterator<A>}\r\n */\r\nexport function find(iter, matches) {\r\n    var output;\r\n    iter(function (value) {\r\n        if (matches(value)) {\r\n            output = value;\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    });\r\n    return output;\r\n}\r\n/**\r\n * [A description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @type {[type]}\r\n */\r\nexport function findMap(iter, matches) {\r\n    var output;\r\n    iter(function (value) {\r\n        var v = matches(value);\r\n        if (v !== null) {\r\n            output = v;\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    });\r\n    return output;\r\n}\r\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @type {Iterator<A>}\r\n */\r\nexport function contains(iter, matches) {\r\n    var output = false;\r\n    iter(function (value) {\r\n        if (matches(value)) {\r\n            output = true;\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    });\r\n    return output;\r\n}\r\n/**\r\n * [A description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @type {[type]}\r\n */\r\nexport function foldl(iter, init, fn) {\r\n    iter(function (value) {\r\n        init = fn(init, value);\r\n        return true;\r\n    });\r\n    return init;\r\n}\r\n/**\r\n * [min2 description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {number |     null}        left [description]\r\n * @param  {number}    right [description]\r\n * @return {number}          [description]\r\n */\r\nfunction min2(left, right) {\r\n    if (left == null || right < left) {\r\n        return right;\r\n    }\r\n    else {\r\n        return left;\r\n    }\r\n}\r\n/**\r\n * [min description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Verify that this works correctly\r\n * @todo Description\r\n * @param  {Iterator<number>} a [description]\r\n * @return {number}             [description]\r\n */\r\nexport function min(a) {\r\n    return foldl(a, null, min2);\r\n}\r\n/**\r\n * [max2 description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {number |     null}        left [description]\r\n * @param  {number}    right [description]\r\n * @return {number}          [description]\r\n */\r\nfunction max2(left, right) {\r\n    if (left == null || right > left) {\r\n        return right;\r\n    }\r\n    else {\r\n        return left;\r\n    }\r\n}\r\n/**\r\n * [max description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Verify that this works correctly\r\n * @todo Description\r\n * @param  {Iterator<number>} a [description]\r\n * @return {number}             [description]\r\n */\r\nexport function max(a) {\r\n    return foldl(a, null, max2);\r\n}\r\n/**\r\n * [join description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {Iterator<string>} iter [description]\r\n * @param  {string        =    \"\"}          separator [description]\r\n * @return {string}                [description]\r\n */\r\nexport function join(iter, separator) {\r\n    if (separator === void 0) { separator = \"\"; }\r\n    var first = true;\r\n    var init = \"\";\r\n    iter(function (value) {\r\n        if (first) {\r\n            first = false;\r\n        }\r\n        else {\r\n            init += separator;\r\n        }\r\n        init += value;\r\n        return true;\r\n    });\r\n    return init;\r\n}\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nvar ListIterator = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {Iterable<T>} list [description]\r\n     * @param {()       =>   T}           create [description]\r\n     */\r\n    function ListIterator(list, create) {\r\n        // flag specifies if iterator should create new list item if it is reqested for a nextItem but there is no more left in the list\r\n        this.createNewItems = false;\r\n        this.list = list;\r\n        this._create = create;\r\n        this.reset();\r\n    }\r\n    ListIterator.prototype.reset = function () {\r\n        this._listCopy = toArray(this.list.iterator());\r\n    };\r\n    ListIterator.prototype.clear = function () {\r\n        this._listCopy.length = 0;\r\n    };\r\n    ListIterator.prototype.getFirst = function () {\r\n        return this.returnItem(0);\r\n    };\r\n    ListIterator.prototype.getLast = function () {\r\n        return this.returnItem(this._listCopy.length - 1);\r\n    };\r\n    ListIterator.prototype.find = function (fn) {\r\n        var index = $array.findIndex(this._listCopy, fn);\r\n        if (index !== -1) {\r\n            var item = this._listCopy[index];\r\n            // TODO use removeIndex instead ?\r\n            $array.remove(this._listCopy, item);\r\n            return item;\r\n        }\r\n        else {\r\n            return this.getLast();\r\n        }\r\n    };\r\n    ListIterator.prototype.removeItem = function (item) {\r\n        return $array.remove(this._listCopy, item);\r\n    };\r\n    ListIterator.prototype.returnItem = function (index) {\r\n        if (index >= 0 && index < this._listCopy.length) {\r\n            var item = this._listCopy[index];\r\n            // TODO use removeIndex instead ?\r\n            $array.remove(this._listCopy, item);\r\n            return item;\r\n        }\r\n        else if (this.createNewItems) {\r\n            return this._create();\r\n        }\r\n    };\r\n    ListIterator.prototype.iterator = function () {\r\n        return fromArray(this._listCopy);\r\n    };\r\n    return ListIterator;\r\n}());\r\nexport { ListIterator };\r\n//# sourceMappingURL=Iterator.js.map","/**\r\n * A collection of keyboard-related utilities accessible via `keyboard`\r\n * instance.\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $type from \"./Type\";\r\n/**\r\n * A class that represents collection of keyboard-related utilities.\r\n *\r\n * Do not instantiate this class directly, but rather use `keyboard` variable.\r\n */\r\nvar Keyboard = /** @class */ (function () {\r\n    function Keyboard() {\r\n    }\r\n    /**\r\n     * Returns a named key based on information contained in the event or\r\n     * \"other\".\r\n     *\r\n     * @param  {KeyboardEvent}  ev  A keyboard event\r\n     * @return {KeyboardKeys}       Keyboard named key\r\n     */\r\n    Keyboard.prototype.getEventKey = function (ev) {\r\n        // Get the key code\r\n        var code = ev.keyCode || ev.which, key;\r\n        // Map to internal key\r\n        switch (code) {\r\n            case 38:\r\n                key = \"up\";\r\n                break;\r\n            case 40:\r\n                key = \"down\";\r\n                break;\r\n            case 37:\r\n                key = \"left\";\r\n                break;\r\n            case 39:\r\n                key = \"right\";\r\n                break;\r\n            case 13:\r\n                key = \"enter\";\r\n                break;\r\n            case 27:\r\n                key = \"esc\";\r\n                break;\r\n            case 36:\r\n                key = \"home\";\r\n                break;\r\n            case 35:\r\n                key = \"end\";\r\n                break;\r\n            case 9:\r\n                key = \"tab\";\r\n                break;\r\n            case 17:\r\n                key = \"ctrl\";\r\n                break;\r\n            case 18:\r\n                key = \"alt\";\r\n                break;\r\n            case 16:\r\n                key = \"shift\";\r\n                break;\r\n            case 32:\r\n                key = \"space\";\r\n                break;\r\n            case 36:\r\n                key = \"home\";\r\n                break;\r\n            case 35:\r\n                key = \"end\";\r\n                break;\r\n            case 33:\r\n                key = \"pgup\";\r\n                break;\r\n            case 34:\r\n                key = \"pgdn\";\r\n                break;\r\n            case 45:\r\n                key = \"ins\";\r\n                break;\r\n            case 46:\r\n                key = \"del\";\r\n                break;\r\n            case 107:\r\n                key = \"plus\";\r\n                break;\r\n            case 109:\r\n                key = \"minus\";\r\n                break;\r\n            default:\r\n                key = \"other\";\r\n                break;\r\n        }\r\n        return key;\r\n    };\r\n    /**\r\n     * Checks if event key is one or more of the selected named keys.\r\n     *\r\n     * @param  {KeyboardEvent}      ev   Keyboard event\r\n     * @param  {string | string[]}  key  Named key or array of keys\r\n     * @return {boolean}                 Is event key one of the list?\r\n     */\r\n    Keyboard.prototype.isKey = function (ev, key) {\r\n        var eventKey = this.getEventKey(ev);\r\n        if ($type.isString(key)) {\r\n            key = [key];\r\n        }\r\n        return key.indexOf(eventKey) !== -1;\r\n    };\r\n    /**\r\n     * Returns `true` if shift key was presset at the moment of the event.\r\n     *\r\n     * @param  {KeyboardEvent | MouseEvent}  ev  Event object\r\n     * @return {boolean}                         Was shift pressed?\r\n     */\r\n    Keyboard.prototype.shiftKey = function (ev) {\r\n        return ev.shiftKey;\r\n    };\r\n    /**\r\n     * Returns `true` if ctrl key was presset at the moment of the event.\r\n     *\r\n     * @param  {KeyboardEvent | MouseEvent}  ev  Event object\r\n     * @return {boolean}                         Was ctrl pressed?\r\n     */\r\n    Keyboard.prototype.ctrlKey = function (ev) {\r\n        return ev.ctrlKey;\r\n    };\r\n    /**\r\n     * Returns `true` if alt key was presset at the moment of the event\r\n     * @param  {KeyboardEvent | MouseEvent}  ev  Event object\r\n     * @return {boolean}                         Was alt pressed?\r\n     */\r\n    Keyboard.prototype.altKey = function (ev) {\r\n        return ev.altKey;\r\n    };\r\n    /**\r\n     * Returns `true` if meta key was presset at the moment of the event\r\n     * @param  {KeyboardEvent | MouseEvent}  ev  Event object\r\n     * @return {boolean}                         Was meta pressed?\r\n     */\r\n    Keyboard.prototype.metaKey = function (ev) {\r\n        return ev.metaKey;\r\n    };\r\n    return Keyboard;\r\n}());\r\nexport { Keyboard };\r\n/**\r\n * A single [[Keyboard]] instance to be reused across all elements so that\r\n * they don't need to instantiate their own.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport var keyboard = new Keyboard();\r\n//# sourceMappingURL=Keyboard.js.map","/**\r\n * Language module contains everything related to language-specific operations:\r\n * * Translating prompts\r\n * * Translating functions\r\n * * Date format localizations\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObjectEvents } from \"../Base\";\r\nimport { Adapter } from \"./Adapter\";\r\nimport * as $array from \"./Array\";\r\nimport * as $type from \"./Type\";\r\nimport en from \"../../../lang/en\";\r\nimport { options } from \"../Options\";\r\n;\r\n;\r\n/**\r\n * Handles all language-related tasks, like loading and storing translations,\r\n * translating prompts, lists of prompts and even functions.\r\n *\r\n * Almost every object in amCharts4 universe will have a `language` property,\r\n * which can be accessed for prompt translation.\r\n *\r\n * @see {@link ILanguageAdapters} for a list of available Adapters\r\n * @todo Make prompt keys case-insensitive\r\n * @important\r\n */\r\nvar Language = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Language, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Language() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Adapter.\r\n         *\r\n         * @type {Adapter<this, this[\"_adapter\"]>}\r\n         */\r\n        _this.adapter = new Adapter(_this);\r\n        /**\r\n         * Current locale.\r\n         *\r\n         * @type {ILocale}\r\n         */\r\n        _this._locale = en;\r\n        /**\r\n         * Default locale. A locale to fall back to if none is specified, or\r\n         * if there's no translation for the prompt for the current language.\r\n         *\r\n         * @type {ILocaleDefault}\r\n         */\r\n        _this._defaultLocale = en;\r\n        _this.className = \"Language\";\r\n        // Set default language if necessary\r\n        if ($type.hasValue(options.defaultLocale)) {\r\n            _this.locale = options.defaultLocale;\r\n        }\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns locale that is currently used.\r\n     *\r\n     * @param  {ILocale}  locale  Force locale. Will use current language if not set.\r\n     * @return {string}           Locale\r\n     */\r\n    Language.prototype.getLocale = function (locale) {\r\n        if (locale == null) {\r\n            locale = this._locale;\r\n        }\r\n        return this.adapter.apply(\"locale\", {\r\n            locale: locale\r\n        }).locale;\r\n    };\r\n    /**\r\n     * Returns the translation of the string.\r\n     *\r\n     * If the translation is empty, it will return untranslated prompt.\r\n     *\r\n     * Third parameter and up are strings that can be used to replace \"%X\"\r\n     * placeholders in prompt.\r\n     *\r\n     * E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * // Results in \"This is a first translation test\"\r\n     * chart.language.translate(\"This is a %1 translation %2\", null, \"first\", \"test\");\r\n     * ```\r\n     * ```JavaScriptScript\r\n     * // Results in \"This is a first translation test\"\r\n     * chart.language.translate(\"This is a %1 translation %2\", null, \"first\", \"test\");\r\n     * ```\r\n     *\r\n     * @param  {Key}            prompt   A string to translate\r\n     * @param  {ILocale}        locale   Force translation into specific locale, e.g. fr_FR\r\n     * @param  {Array<string>}  ...rest  Parameters to replace in string\r\n     * @return {string}                  Translation\r\n     */\r\n    Language.prototype.translate = function (prompt, locale) {\r\n        var rest = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            rest[_i - 2] = arguments[_i];\r\n        }\r\n        // Get langauge\r\n        locale = this.getLocale(locale);\r\n        // Init translation\r\n        var translation = prompt;\r\n        // Get translations for the locale\r\n        var translations = this.getTranslations(locale);\r\n        var value = translations[prompt];\r\n        // Try to look for the translation\r\n        if (value === null) {\r\n            value = \"\";\r\n        }\r\n        else if ($type.hasValue(value)) {\r\n            // It might be an empty string\r\n            if (value) {\r\n                translation = value;\r\n            }\r\n        }\r\n        else if (locale !== this._defaultLocale) {\r\n            // Try to look in default language\r\n            return this.translate.apply(this, tslib_1.__spread([prompt, this._defaultLocale], rest));\r\n        }\r\n        // Replace %1, %2, etc params\r\n        if (rest.length) {\r\n            for (var len = rest.length, i = 0; i < len; ++i) {\r\n                translation = translation.split(\"%\" + (i + 1)).join(rest[i]);\r\n            }\r\n        }\r\n        // Return the translation\r\n        return this.adapter.apply(\"translate\", {\r\n            translation: translation,\r\n            locale: locale\r\n        }).translation;\r\n    };\r\n    /**\r\n     * Translates prompt.\r\n     *\r\n     * If translation is empty, it will return empty string, which is a different\r\n     * behavior than that of regular `translate`.\r\n     *\r\n     * @param  {Key}            prompt   A string to translate\r\n     * @param  {ILocale}        locale   Force translation into specific locale, e.g. fr_FR\r\n     * @param  {Array<string>}  ...rest  Parameters to replace in string\r\n     * @return {string}                  Translation\r\n     */\r\n    Language.prototype.translateEmpty = function (prompt, locale) {\r\n        var rest = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            rest[_i - 2] = arguments[_i];\r\n        }\r\n        var translation = this.translate.apply(this, tslib_1.__spread([prompt, locale], rest));\r\n        return translation == prompt ? \"\" : translation;\r\n    };\r\n    /**\r\n     * Translates a function.\r\n     *\r\n     * This method will return a function reference, but will not run it. It's\r\n     * up to the caller script to run the function.\r\n     *\r\n     * @param  {Key}                    prompt  A function id to translate\r\n     * @param  {ILocale}                locale  Force translation into specific locale. e.g. fr_FR\r\n     * @return {ILocaleFunctions[Key]}          A language-specific version of the function\r\n     * @todo Apply adapter\r\n     */\r\n    Language.prototype.translateFunc = function (prompt, locale) {\r\n        // Get langauge\r\n        locale = this.getLocale(locale);\r\n        // Get translations for the locale\r\n        var translations = this.getTranslations(locale);\r\n        var value = translations[prompt];\r\n        // Try to look for the translation\r\n        if (value != null) {\r\n            return value;\r\n        }\r\n        // Try to look in default language\r\n        if (locale !== this._defaultLocale) {\r\n            return this.translateFunc(prompt, this._defaultLocale);\r\n        }\r\n        // Fail - return empty function\r\n        return function () {\r\n            return \"\";\r\n        };\r\n    };\r\n    /**\r\n     * Translates a list of prompts in one go.\r\n     *\r\n     * @param  {Array<Key>}     list    An array of strings to translate\r\n     * @param  {ILocale}        locale  Force translation into specific locale. e.g. fr_FR\r\n     * @return {Array<string>}          An array of translated strings in the same order as source list\r\n     */\r\n    Language.prototype.translateAll = function (list, locale) {\r\n        var _this = this;\r\n        // Translate all items in the list\r\n        if (!this.isDefault()) {\r\n            return $array.map(list, function (x) { return _this.translate(x, locale); });\r\n        }\r\n        else {\r\n            return list;\r\n        }\r\n    };\r\n    /**\r\n     * Returns `true` if the currently selected locale is a default locale.\r\n     *\r\n     * @return {boolean} `true` if locale is default; `false` if it is not.\r\n     */\r\n    Language.prototype.isDefault = function () {\r\n        return this._defaultLocale === this._locale;\r\n    };\r\n    Object.defineProperty(Language.prototype, \"locale\", {\r\n        /**\r\n         * @return {ILocale} Locale definition\r\n         */\r\n        get: function () {\r\n            return this._locale;\r\n        },\r\n        /**\r\n         * Current locale.\r\n         *\r\n         * @param {ILocale}  value  Locale definition (translations)\r\n         */\r\n        set: function (value) {\r\n            if (this._locale != value) {\r\n                this._locale = value;\r\n                if (this.events.isEnabled(\"localechanged\")) {\r\n                    var event_1 = {\r\n                        type: \"localechanged\",\r\n                        locale: value,\r\n                        target: this\r\n                    };\r\n                    this.events.dispatchImmediately(\"localechanged\", event_1);\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns translations for a given locale.\r\n     *\r\n     * @ignore\r\n     * @deprecated\r\n     * @param  {ILocale}        locale  Locale\r\n     * @return {ILocale}        Translations\r\n     */\r\n    Language.prototype.getTranslations = function (locale) {\r\n        return this.adapter.apply(\"translations\", {\r\n            translations: locale,\r\n            locale: locale\r\n        }).translations;\r\n    };\r\n    return Language;\r\n}(BaseObjectEvents));\r\nexport { Language };\r\n//# sourceMappingURL=Language.js.map","import * as tslib_1 from \"tslib\";\r\nimport { Disposer, MultiDisposer } from \"./Disposer\";\r\nimport { EventDispatcher } from \"./EventDispatcher\";\r\nimport * as $array from \"./Array\";\r\nimport * as $iter from \"./Iterator\";\r\n/**\r\n * @todo Description\r\n */\r\nvar IndexedIterable = /** @class */ (function () {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {Array<A>}  array  List items\r\n     * @param {number}    start  Start index\r\n     * @param {number}    end    End index\r\n     */\r\n    function IndexedIterable(array, start, end) {\r\n        this._array = array;\r\n        this._start = start;\r\n        this._end = end;\r\n    }\r\n    /**\r\n     * Returns a list item iterator.\r\n     *\r\n     * @return {Iterator} Iterator\r\n     */\r\n    IndexedIterable.prototype.iterator = function () {\r\n        var _this = this;\r\n        return function (push) {\r\n            if (_this._start !== _this._end) {\r\n                if (_this._start < _this._end) {\r\n                    for (var i = _this._start; i < _this._end; ++i) {\r\n                        if (!push(_this._array[i])) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    for (var i = _this._start - 1; i >= _this._end; --i) {\r\n                        if (!push(_this._array[i])) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * Returns an interable list sorted backwards than current list.\r\n     *\r\n     * @return {IndexedIterable<A>} List\r\n     */\r\n    IndexedIterable.prototype.backwards = function () {\r\n        return new IndexedIterable(this._array, this._end, this._start);\r\n    };\r\n    /**\r\n     * Returns a new list consisting only of specific range of items between\r\n     * `start` and `end` indexes.\r\n     *\r\n     * @param  {number}              start  Start index\r\n     * @param  {number}              end    End index\r\n     * @return {IndexedIterable<A>}         List\r\n     */\r\n    IndexedIterable.prototype.range = function (start, end) {\r\n        if (start <= end) {\r\n            if (this._start === this._end) {\r\n                return this;\r\n            }\r\n            else if (this._start < this._end) {\r\n                var diff = end - start;\r\n                start = Math.max(this._start + start, this._start);\r\n                end = Math.min(start + diff, this._end);\r\n                return new IndexedIterable(this._array, start, end);\r\n            }\r\n            else {\r\n                var diff = end - start;\r\n                start = Math.max(this._start - start, this._end);\r\n                end = Math.max(start - diff, this._end);\r\n                return new IndexedIterable(this._array, start, end);\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(\"Start index must be lower than end index\");\r\n        }\r\n    };\r\n    return IndexedIterable;\r\n}());\r\nexport { IndexedIterable };\r\n/**\r\n * ListGrouper organizes [[List]] items into groups.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nvar ListGrouper = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ListGrouper, _super);\r\n    /**\r\n     * Constructor.\r\n     */\r\n    function ListGrouper(list, getKey, sort) {\r\n        var _this = _super.call(this, [\r\n            list.events.on(\"inserted\", function (x) {\r\n                var value = x.newValue;\r\n                var key = _this._getKey(value);\r\n                var index = 0;\r\n                $iter.eachContinue(list.iterator(), function (x) {\r\n                    if (x === value) {\r\n                        return false;\r\n                    }\r\n                    else if (_this._getKey(x) === key) {\r\n                        ++index;\r\n                    }\r\n                    return true;\r\n                });\r\n                _this._insert(value, key, index);\r\n            }, undefined, false),\r\n            list.events.on(\"removed\", function (x) {\r\n                _this._remove(x.oldValue);\r\n            }, undefined, false)\r\n        ]) || this;\r\n        /**\r\n         * Grouping keys.\r\n         *\r\n         * @type {Array<number>}\r\n         */\r\n        _this._keys = [];\r\n        /**\r\n         * List item groups.\r\n         */\r\n        _this._groups = {};\r\n        _this._getKey = getKey;\r\n        _this._sort = sort;\r\n        $iter.each(list.iterator(), function (x) {\r\n            _this._insert(x, getKey(x));\r\n        });\r\n        return _this;\r\n    }\r\n    /**\r\n     * Inserts an item (`x`) to a specific group (`key`) and specific `index`.\r\n     *\r\n     * @param {A}       x      Item\r\n     * @param {number}  key    Group name\r\n     * @param {number}  index  Index\r\n     */\r\n    ListGrouper.prototype._insert = function (x, key, index) {\r\n        if (this._groups[key] == null) {\r\n            this._groups[key] = [];\r\n            // TODO code duplication with SortedList\r\n            var _a = $array.getSortedIndex(this._keys, this._sort, key), found = _a.found, index_1 = _a.index;\r\n            if (found) {\r\n                throw new Error(\"Key already exists: \" + key);\r\n            }\r\n            else {\r\n                $array.insertIndex(this._keys, index_1, key);\r\n            }\r\n        }\r\n        if (index == null) {\r\n            this._groups[key].push(x);\r\n        }\r\n        else {\r\n            $array.insertIndex(this._groups[key], index, x);\r\n        }\r\n    };\r\n    /**\r\n     * Removes an item from the list.\r\n     *\r\n     * @param {A} x Item to remove\r\n     */\r\n    ListGrouper.prototype._remove = function (x) {\r\n        var key = this._getKey(x);\r\n        var values = this._groups[key];\r\n        if (values != null) {\r\n            $array.remove(values, x);\r\n            if (values.length === 0) {\r\n                delete this._groups[key];\r\n                var _a = $array.getSortedIndex(this._keys, this._sort, key), found = _a.found, index = _a.index;\r\n                if (found) {\r\n                    $array.removeIndex(this._keys, index);\r\n                }\r\n                else {\r\n                    throw new Error(\"Key doesn't exist: \" + key);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns an iterator for the list.\r\n     *\r\n     * The iterator will iterate through all items in all groups.\r\n     *\r\n     * @return {.Iterator<A>} Iterator\r\n     */\r\n    ListGrouper.prototype.iterator = function () {\r\n        var _this = this;\r\n        return $iter.flatten($iter.map($iter.fromArray(this._keys), function (key) {\r\n            return $iter.fromArray(_this._groups[key]);\r\n        }));\r\n    };\r\n    return ListGrouper;\r\n}(MultiDisposer));\r\nexport { ListGrouper };\r\n/**\r\n * A disposable list, which when disposed itself will call `dispose()` method\r\n * on all its items.\r\n */\r\nvar ListDisposer = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ListDisposer, _super);\r\n    function ListDisposer(list) {\r\n        var _this = this;\r\n        var disposer = list.events.on(\"removed\", function (x) {\r\n            x.oldValue.dispose();\r\n        }, undefined, false);\r\n        _this = _super.call(this, function () {\r\n            disposer.dispose();\r\n            // TODO clear the list ?\r\n            $iter.each(list.iterator(), function (x) {\r\n                x.dispose();\r\n            });\r\n        }) || this;\r\n        return _this;\r\n    }\r\n    return ListDisposer;\r\n}(Disposer));\r\nexport { ListDisposer };\r\n/**\r\n * Checks if specific index fits into length.\r\n *\r\n * @param {number}  index  Index\r\n * @param {number}  len    Length\r\n */\r\nfunction checkBounds(index, len) {\r\n    if (!(index >= 0 && index < len)) {\r\n        throw new Error(\"Index out of bounds: \" + index);\r\n    }\r\n}\r\n/**\r\n * A List class is used to hold a number of indexed items of the same type.\r\n */\r\nvar List = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {Array<T>}  initial  Inital list of values to add to list\r\n     */\r\n    function List(initial) {\r\n        if (initial === void 0) { initial = []; }\r\n        /**\r\n         * Event dispatcher.\r\n         *\r\n         * @type {EventDispatcher<AMEvent<this, IListEvents<T>>>}\r\n         */\r\n        this.events = new EventDispatcher();\r\n        this._values = initial;\r\n    }\r\n    Object.defineProperty(List.prototype, \"values\", {\r\n        /**\r\n         * An array of values in the list.\r\n         *\r\n         * Do not use this property to add values. Rather use dedicated methods, like\r\n         * `push()`, `removeIndex()`, etc.\r\n         *\r\n         * @readonly\r\n         * @return {Array<T>} List values\r\n         */\r\n        get: function () {\r\n            return this._values;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Checks if list contains specific item reference.\r\n     *\r\n     * @param  {T}        item  Item to search for\r\n     * @return {boolean}        `true` if found, `false` if not found\r\n     */\r\n    List.prototype.contains = function (value) {\r\n        return this._values.indexOf(value) !== -1;\r\n    };\r\n    /**\r\n     * Removes specific item from the list.\r\n     *\r\n     * @param {T} item An item to remove\r\n     */\r\n    List.prototype.removeValue = function (value) {\r\n        var i = 0;\r\n        var length = this._values.length;\r\n        while (i < length) {\r\n            // TODO handle NaN\r\n            if (this._values[i] === value) {\r\n                this.removeIndex(i);\r\n                --length;\r\n            }\r\n            else {\r\n                ++i;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Searches the list for specific item and returns its index.\r\n     *\r\n     * @param  {T}       item  An item to search for\r\n     * @return {number}        Index or -1 if not found\r\n     */\r\n    List.prototype.indexOf = function (value) {\r\n        return $array.indexOf(this._values, value);\r\n    };\r\n    Object.defineProperty(List.prototype, \"length\", {\r\n        /**\r\n         * Number of items in list.\r\n         *\r\n         * @readonly\r\n         * @return {number} Number of items\r\n         */\r\n        get: function () {\r\n            return this._values.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Checks if there's a value at specific index.\r\n     *\r\n     * @param  {number}   index  Index\r\n     * @return {boolean}         Value exists?\r\n     */\r\n    List.prototype.hasIndex = function (index) {\r\n        return index >= 0 && index < this._values.length;\r\n    };\r\n    /**\r\n     * Returns an item at specified index.\r\n     *\r\n     * @param  {number}  index  Index\r\n     * @return {T}              List item\r\n     */\r\n    List.prototype.getIndex = function (index) {\r\n        return this._values[index];\r\n    };\r\n    /**\r\n     * Sets value at specific index.\r\n     *\r\n     * If there's already a value at the index, it is overwritten.\r\n     *\r\n     * @param  {number}  index  Index\r\n     * @param  {T}       value  New value\r\n     * @return {T}              New value\r\n     */\r\n    List.prototype.setIndex = function (index, value) {\r\n        checkBounds(index, this._values.length);\r\n        var oldValue = this._values[index];\r\n        // Do nothing if the old value and the new value are the same\r\n        if (oldValue !== value) {\r\n            this._values[index] = value;\r\n            if (this.events.isEnabled(\"setIndex\")) {\r\n                this.events.dispatchImmediately(\"setIndex\", {\r\n                    type: \"setIndex\",\r\n                    target: this,\r\n                    index: index,\r\n                    oldValue: oldValue,\r\n                    newValue: value\r\n                });\r\n            }\r\n            if (this.events.isEnabled(\"removed\")) {\r\n                this.events.dispatchImmediately(\"removed\", {\r\n                    type: \"removed\",\r\n                    target: this,\r\n                    oldValue: oldValue\r\n                });\r\n            }\r\n            if (this.events.isEnabled(\"inserted\")) {\r\n                this.events.dispatchImmediately(\"inserted\", {\r\n                    type: \"inserted\",\r\n                    target: this,\r\n                    newValue: value\r\n                });\r\n            }\r\n        }\r\n        return oldValue;\r\n    };\r\n    /**\r\n     * Adds an item to the list at a specific index, which pushes all the other\r\n     * items further down the list.\r\n     *\r\n     * @param  {number} index Index\r\n     * @param  {T}      item  An item to add\r\n     */\r\n    List.prototype.insertIndex = function (index, value) {\r\n        checkBounds(index, this._values.length + 1);\r\n        $array.insertIndex(this._values, index, value);\r\n        if (this.events.isEnabled(\"insertIndex\")) {\r\n            this.events.dispatchImmediately(\"insertIndex\", {\r\n                type: \"insertIndex\",\r\n                target: this,\r\n                index: index,\r\n                newValue: value\r\n            });\r\n        }\r\n        if (this.events.isEnabled(\"inserted\")) {\r\n            this.events.dispatchImmediately(\"inserted\", {\r\n                type: \"inserted\",\r\n                target: this,\r\n                newValue: value\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * [_sortQuicksort description]\r\n     *\r\n     * @todo Description\r\n     * @param {number}    low    [description]\r\n     * @param {number}    high   [description]\r\n     * @param {function}  order  [description]\r\n     */\r\n    List.prototype._sortQuicksort = function (low, high, order) {\r\n        if (low < high) {\r\n            var p = this._sortPartition(low, high, order);\r\n            this._sortQuicksort(low, p, order);\r\n            this._sortQuicksort(p + 1, high, order);\r\n        }\r\n    };\r\n    /**\r\n     * [_sortPartition description]\r\n     *\r\n     * @todo Description\r\n     * @param  {number}    low    [description]\r\n     * @param  {number}    high   [description]\r\n     * @param  {function}  order  [description]\r\n     * @return {number}           [description]\r\n     */\r\n    List.prototype._sortPartition = function (low, high, order) {\r\n        var values = this._values;\r\n        var pivot = values[low];\r\n        var i = low - 1;\r\n        var j = high + 1;\r\n        for (;;) {\r\n            do {\r\n                ++i;\r\n            } while (order(values[i], pivot) < 0);\r\n            do {\r\n                --j;\r\n            } while (order(values[j], pivot) > 0);\r\n            if (i >= j) {\r\n                return j;\r\n            }\r\n            else {\r\n                this.swap(i, j);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Reorders list items according to specific ordering function.\r\n     *\r\n     * @param {T) => Ordering}  order  Ordering function\r\n     */\r\n    List.prototype.sort = function (order) {\r\n        // https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\r\n        // @todo faster implementation of this\r\n        // @todo test this\r\n        this._sortQuicksort(0, this._values.length - 1, order);\r\n    };\r\n    /**\r\n     * Swaps indexes of two items in the list.\r\n     *\r\n     * @param {number}  a  Item 1\r\n     * @param {number}  b  Item 2\r\n     */\r\n    List.prototype.swap = function (a, b) {\r\n        var len = this._values.length;\r\n        checkBounds(a, len);\r\n        checkBounds(b, len);\r\n        if (a !== b) {\r\n            var value_a = this._values[a];\r\n            var value_b = this._values[b];\r\n            this._values[a] = value_b;\r\n            if (this.events.isEnabled(\"setIndex\")) {\r\n                this.events.dispatchImmediately(\"setIndex\", {\r\n                    type: \"setIndex\",\r\n                    target: this,\r\n                    index: a,\r\n                    oldValue: value_a,\r\n                    newValue: value_b\r\n                });\r\n            }\r\n            this._values[b] = value_a;\r\n            if (this.events.isEnabled(\"setIndex\")) {\r\n                this.events.dispatchImmediately(\"setIndex\", {\r\n                    type: \"setIndex\",\r\n                    target: this,\r\n                    index: b,\r\n                    oldValue: value_b,\r\n                    newValue: value_a\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Removes a value at specific index.\r\n     *\r\n     * @param  {number}  index  Index of value to remove\r\n     * @return {T}              Removed value\r\n     */\r\n    List.prototype.removeIndex = function (index) {\r\n        checkBounds(index, this._values.length);\r\n        var oldValue = this._values[index];\r\n        $array.removeIndex(this._values, index);\r\n        if (this.events.isEnabled(\"removeIndex\")) {\r\n            this.events.dispatchImmediately(\"removeIndex\", {\r\n                type: \"removeIndex\",\r\n                target: this,\r\n                index: index,\r\n                oldValue: oldValue\r\n            });\r\n        }\r\n        if (this.events.isEnabled(\"removed\")) {\r\n            this.events.dispatchImmediately(\"removed\", {\r\n                type: \"removed\",\r\n                target: this,\r\n                oldValue: oldValue\r\n            });\r\n        }\r\n        return oldValue;\r\n    };\r\n    /**\r\n     * Moves an item to a specific index within the list.\r\n     *\r\n     * If the index is not specified it will move the item to the end of the\r\n     * list.\r\n     *\r\n     * @param {T}       value  Item to move\r\n     * @param {number}  index  Index to place item at\r\n     */\r\n    List.prototype.moveValue = function (value, toIndex) {\r\n        // TODO don't do anything if the desired index is the same as the current index\r\n        var index = this.indexOf(value);\r\n        // TODO remove all old values rather than only the first ?\r\n        if (index !== -1) {\r\n            var oldValue = this._values[index];\r\n            $array.removeIndex(this._values, index);\r\n            if (this.events.isEnabled(\"removeIndex\")) {\r\n                this.events.dispatchImmediately(\"removeIndex\", {\r\n                    type: \"removeIndex\",\r\n                    target: this,\r\n                    index: index,\r\n                    oldValue: oldValue\r\n                });\r\n            }\r\n        }\r\n        if (toIndex == null) {\r\n            toIndex = this._values.length;\r\n            this._values.push(value);\r\n        }\r\n        else {\r\n            $array.insertIndex(this._values, toIndex, value);\r\n        }\r\n        if (this.events.isEnabled(\"insertIndex\")) {\r\n            this.events.dispatchImmediately(\"insertIndex\", {\r\n                type: \"insertIndex\",\r\n                target: this,\r\n                index: toIndex,\r\n                newValue: value\r\n            });\r\n        }\r\n        if (index === -1) {\r\n            if (this.events.isEnabled(\"inserted\")) {\r\n                this.events.dispatchImmediately(\"inserted\", {\r\n                    type: \"inserted\",\r\n                    target: this,\r\n                    newValue: value\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Adds an item to the end of the list.\r\n     *\r\n     * @param  {T}  item  An item to add\r\n     */\r\n    List.prototype.push = function (value) {\r\n        var index = this._values.push(value) - 1;\r\n        if (this.events.isEnabled(\"insertIndex\")) {\r\n            this.events.dispatchImmediately(\"insertIndex\", {\r\n                type: \"insertIndex\",\r\n                target: this,\r\n                index: index,\r\n                newValue: value\r\n            });\r\n        }\r\n        if (this.events.isEnabled(\"inserted\")) {\r\n            this.events.dispatchImmediately(\"inserted\", {\r\n                type: \"inserted\",\r\n                target: this,\r\n                newValue: value\r\n            });\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Adds an item as a first item in the list.\r\n     *\r\n     * @param  {T}  item  An item to add\r\n     */\r\n    List.prototype.unshift = function (value) {\r\n        return this.insertIndex(0, value);\r\n    };\r\n    /**\r\n     * Adds multiple items to the list.\r\n     *\r\n     * @param {Array<T>}  items  An Array of items to add\r\n     */\r\n    List.prototype.pushAll = function (values) {\r\n        var _this = this;\r\n        $array.each(values, function (value) {\r\n            _this.push(value);\r\n        });\r\n    };\r\n    /**\r\n     * Copies and adds items from abother list.\r\n     *\r\n     * @param {List<T>}  source  A list top copy items from\r\n     */\r\n    List.prototype.copyFrom = function (source) {\r\n        this.pushAll(source._values);\r\n    };\r\n    /**\r\n     * Returns the last item from the list, and removes it.\r\n     *\r\n     * @return {T} Item\r\n     */\r\n    List.prototype.pop = function () {\r\n        var index = this._values.length - 1;\r\n        return index < 0 ? undefined : this.removeIndex(this._values.length - 1);\r\n    };\r\n    /**\r\n     * Returns the first item from the list, and removes it.\r\n     *\r\n     * @return {T} Item\r\n     */\r\n    List.prototype.shift = function () {\r\n        return this._values.length ? this.removeIndex(0) : undefined;\r\n    };\r\n    /**\r\n     * Sets multiple items to the list.\r\n     *\r\n     * All current items are removed.\r\n     *\r\n     * @param {Array<T>}  newArray  New items\r\n     */\r\n    List.prototype.setAll = function (newArray) {\r\n        var _this = this;\r\n        // @tod if a value exists in both the new and old arrays, don't send remove/insert events\r\n        var oldArray = $array.copy(this._values);\r\n        this._values.length = 0;\r\n        $array.each(newArray, function (value) {\r\n            _this._values.push(value);\r\n        });\r\n        if (this.events.isEnabled(\"setAll\")) {\r\n            this.events.dispatchImmediately(\"setAll\", {\r\n                type: \"setAll\",\r\n                target: this,\r\n                oldArray: oldArray,\r\n                newArray: this._values // TODO make a copy ?\r\n            });\r\n        }\r\n        if (this.events.isEnabled(\"removed\")) {\r\n            $array.each(oldArray, function (x) {\r\n                _this.events.dispatchImmediately(\"removed\", {\r\n                    type: \"removed\",\r\n                    target: _this,\r\n                    oldValue: x\r\n                });\r\n            });\r\n        }\r\n        if (this.events.isEnabled(\"inserted\")) {\r\n            $array.each(this._values, function (x) {\r\n                _this.events.dispatchImmediately(\"inserted\", {\r\n                    type: \"inserted\",\r\n                    target: _this,\r\n                    newValue: x\r\n                });\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Removes all items from the list.\r\n     */\r\n    List.prototype.clear = function () {\r\n        this.setAll([]);\r\n    };\r\n    /**\r\n     * Returns a list iterator.\r\n     *\r\n     * @return {Iterator} Iterator\r\n     */\r\n    List.prototype.iterator = function () {\r\n        return $iter.fromArray(this._values);\r\n    };\r\n    /**\r\n     * Returns an ES6 iterator for the list.\r\n     */\r\n    List.prototype[Symbol.iterator] = function () {\r\n        var length, i;\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    length = this._values.length;\r\n                    i = 0;\r\n                    _a.label = 1;\r\n                case 1:\r\n                    if (!(i < length)) return [3 /*break*/, 4];\r\n                    return [4 /*yield*/, this._values[i]];\r\n                case 2:\r\n                    _a.sent();\r\n                    _a.label = 3;\r\n                case 3:\r\n                    ++i;\r\n                    return [3 /*break*/, 1];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Calls `f` for each element in the list.\r\n     *\r\n     * `f` should have at least one parameter defined which will get a current\r\n     * item, with optional second argument - index.\r\n     */\r\n    List.prototype.each = function (f) {\r\n        $array.each(this._values, f);\r\n    };\r\n    /**\r\n     * Returns a specific range of list items, which can be iterated.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Code duplication with IndexedIterable\r\n     * @param  {number}              start  Start index\r\n     * @param  {number}              end    End index\r\n     * @return {IndexedIterable<T>}         Range\r\n     */\r\n    List.prototype.range = function (start, end) {\r\n        if (start <= end) {\r\n            var diff = end - start;\r\n            start = Math.max(start, 0);\r\n            end = Math.min(start + diff, this._values.length);\r\n            return new IndexedIterable(this._values, start, end);\r\n        }\r\n        else {\r\n            throw new Error(\"Start index must be lower than end index\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns an iterator that has list items sorted backwards.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return {IndexedIterable<T>} List\r\n     */\r\n    List.prototype.backwards = function () {\r\n        return new IndexedIterable(this._values, this._values.length, 0);\r\n    };\r\n    return List;\r\n}());\r\nexport { List };\r\n/**\r\n * A version of a [[List]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nvar ListTemplate = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ListTemplate, _super);\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {T} t Template object\r\n     */\r\n    function ListTemplate(t) {\r\n        var _this = _super.call(this) || this;\r\n        _this.template = t;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ListTemplate.prototype, \"template\", {\r\n        /**\r\n         * @return {T} Template object\r\n         */\r\n        get: function () {\r\n            return this._template;\r\n        },\r\n        /**\r\n         * A \"template\" object to copy all properties from when creating new list\r\n         * items.\r\n         *\r\n         * @param {T}  v  Template object\r\n         */\r\n        set: function (v) {\r\n            v.isTemplate = true;\r\n            this._template = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all elements from other list.\r\n     *\r\n     * @param {ListTemplate}  source  Source list\r\n     */\r\n    ListTemplate.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        $iter.each(source.iterator(), function (value) {\r\n            _this.push(value.clone());\r\n        });\r\n    };\r\n    ListTemplate.prototype.create = function (make) {\r\n        var clone = (make != null\r\n            ? new make()\r\n            : this.template.clone());\r\n        this.push(clone);\r\n        return clone;\r\n    };\r\n    /**\r\n     * Creates an exact clone of the list, including its items and template.\r\n     *\r\n     * @return {ListTemplate<T>} New list\r\n     */\r\n    ListTemplate.prototype.clone = function () {\r\n        var out = new ListTemplate(this.template);\r\n        var values = this.values;\r\n        var length = values.length;\r\n        for (var i = 0; i < length; ++i) {\r\n            out.push(values[i].clone());\r\n        }\r\n        return out;\r\n    };\r\n    return ListTemplate;\r\n}(List));\r\nexport { ListTemplate };\r\n//# sourceMappingURL=List.js.map","/**\r\n * A collection of Math-related functions\r\n *\r\n * @todo Comment trigonometric functions?\r\n */\r\nimport * as $type from \"./Type\";\r\n/**\r\n * ============================================================================\r\n * CONSTANTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nexport var PI = Math.PI;\r\nexport var HALFPI = PI / 2;\r\nexport var RADIANS = PI / 180;\r\nexport var DEGREES = 180 / PI;\r\n/**\r\n * Converts any value and fits it into a specific value range.\r\n *\r\n * @param  {any}     value  Source value\r\n * @param  {number}  min    Minimum allowable value\r\n * @param  {number}  max    Maximum allowable value\r\n * @return {number}         Number\r\n */\r\nexport function toNumberRange(value, min, max) {\r\n    if ($type.hasValue(value)) {\r\n        value = $type.toNumber(value);\r\n        return fitToRange(value, min, max);\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Rounds the numeric value to whole number or specific precision of set.\r\n *\r\n * @param  {number} value      Value\r\n * @param  {number} precision  Precision (number of decimal points)\r\n * @param  {boolean} floor  In case value ends with 0.5 and precision is 0, we might need to floor the value instead of ceiling it.\r\n * @return {number}            Rounded value\r\n */\r\nexport function round(value, precision, floor) {\r\n    if (!$type.isNumber(precision) || precision <= 0) {\r\n        var rounded = Math.round(value);\r\n        if (floor) {\r\n            if (rounded - value == 0.5) {\r\n                rounded--;\r\n            }\r\n        }\r\n        return rounded;\r\n    }\r\n    else {\r\n        var d = Math.pow(10, precision);\r\n        return Math.round(value * d) / d;\r\n    }\r\n}\r\n/**\r\n * Ceils the numeric value to whole number or specific precision of set.\r\n *\r\n * @param  {number} value      Value\r\n * @param  {number} precision  Precision (number of decimal points)\r\n * @return {number}            Rounded value\r\n */\r\nexport function ceil(value, precision) {\r\n    if (!$type.isNumber(precision) || precision <= 0) {\r\n        return Math.ceil(value);\r\n    }\r\n    else {\r\n        var d = Math.pow(10, precision);\r\n        return Math.ceil(value * d) / d;\r\n    }\r\n}\r\n/**\r\n * Stretches `t` so that it will always be between `from` and `to`.\r\n *\r\n * @param  {number} t     Number from 0 to 1\r\n * @param  {number} from  Lowest possible value\r\n * @param  {number} to    Highest possible value\r\n * @return {number}       Adjusted value\r\n */\r\nexport function stretch(t, from, to) {\r\n    return (t * (to - from)) + from;\r\n}\r\n/**\r\n * Adjust numeric value so it fits to specific value range.\r\n *\r\n * @param  {number} value     Value\r\n * @param  {Optional<number>} minValue  Lowest possible value\r\n * @param  {Optional<number>} maxValue  Highest possible value\r\n * @return {number}                     Adjusted value\r\n */\r\nexport function fitToRange(value, minValue, maxValue) {\r\n    if ($type.isNumber(minValue)) {\r\n        if ($type.isNumber(maxValue) && maxValue < minValue) {\r\n            var temp = maxValue;\r\n            maxValue = minValue;\r\n            minValue = temp;\r\n        }\r\n        if (value < minValue) {\r\n            value = minValue;\r\n        }\r\n    }\r\n    if ($type.isNumber(maxValue)) {\r\n        if (value > maxValue) {\r\n            value = maxValue;\r\n        }\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Returns sine of a number.\r\n *\r\n * @param  {number} value  Value\r\n * @return {number}        Sine\r\n */\r\nexport function sin(value) {\r\n    return round(Math.sin(RADIANS * value), 10);\r\n}\r\n/**\r\n * Returns tan of a number.\r\n *\r\n * @param  {number} value  Value\r\n * @return {number}        Sine\r\n */\r\nexport function tan(value) {\r\n    return round(Math.tan(RADIANS * value), 10);\r\n}\r\n/**\r\n * Returns cosine of a number.\r\n *\r\n * @param  {number} value  Value\r\n * @return {number}        Cosine\r\n */\r\nexport function cos(value) {\r\n    return round(Math.cos(RADIANS * value), 10);\r\n}\r\nexport function max(left, right) {\r\n    if ($type.isNumber(left)) {\r\n        if ($type.isNumber(right)) {\r\n            if (right > left) {\r\n                return right;\r\n            }\r\n            else {\r\n                return left;\r\n            }\r\n        }\r\n        else {\r\n            return left;\r\n        }\r\n    }\r\n    else if ($type.isNumber(right)) {\r\n        return right;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\nexport function min(left, right) {\r\n    if ($type.isNumber(left)) {\r\n        if ($type.isNumber(right)) {\r\n            if (right < left) {\r\n                return right;\r\n            }\r\n            else {\r\n                return left;\r\n            }\r\n        }\r\n        else {\r\n            return left;\r\n        }\r\n    }\r\n    else if ($type.isNumber(right)) {\r\n        return right;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns the closest value from the array of values to the reference value.\r\n *\r\n * @param  {number[]}  values  Array of values\r\n * @param  {number}    value   Reference value\r\n * @return {number}            Closes value from the array\r\n */\r\nexport function closest(values, referenceValue) {\r\n    return values.reduce(function (prev, curr) {\r\n        return (Math.abs(curr - referenceValue) < Math.abs(prev - referenceValue) ? curr : prev);\r\n    });\r\n}\r\n/**\r\n * Checks whether two ranges of values intersect.\r\n *\r\n * @param {IRange}    range1  Range 1\r\n * @param {IRange}    range2  Range 2\r\n * @return {boolean}          Any intersecting numbers?\r\n */\r\nexport function intersect(range1, range2) {\r\n    var start1 = $type.getValue(range1.start);\r\n    var start2 = $type.getValue(range2.start);\r\n    var end1 = $type.getValue(range1.end);\r\n    var end2 = $type.getValue(range2.end);\r\n    return Math.max(start1, start2) <= Math.min(end1, end2);\r\n}\r\n/**\r\n * Inverts the range of values.\r\n *\r\n * @param {IRange}  range  Range\r\n */\r\nexport function invertRange(range) {\r\n    var start = $type.getValue(range.start);\r\n    var end = $type.getValue(range.end);\r\n    return { start: 1 - end, end: 1 - start };\r\n}\r\n/**\r\n * Returns an intersection range between two ranges of values.\r\n *\r\n * @param  {IRange}  range1  Range 1\r\n * @param  {IRange}  range2  Range 2\r\n * @return {IRange}          Intersecting value range\r\n */\r\nexport function intersection(range1, range2) {\r\n    var start1 = $type.getValue(range1.start);\r\n    var start2 = $type.getValue(range2.start);\r\n    var end1 = $type.getValue(range1.end);\r\n    var end2 = $type.getValue(range2.end);\r\n    var startMax = Math.max(start1, start2);\r\n    var endMin = Math.min(end1, end2);\r\n    if (endMin < startMax) {\r\n        return undefined;\r\n    }\r\n    else {\r\n        return { start: startMax, end: endMin };\r\n    }\r\n}\r\n/**\r\n * Returns pixel \"distance\" between two points.\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param  {IPoint}  point1  Point 1\r\n * @param  {IPoint}  point2  Point 2\r\n * @return {number}          Distance in relative pixels\r\n */\r\nexport function getDistance(point1, point2) {\r\n    if (!point1) {\r\n        return 0;\r\n    }\r\n    if (!point2) {\r\n        point2 = { x: 0, y: 0 };\r\n    }\r\n    return Math.sqrt(Math.pow(Math.abs(point1.x - point2.x), 2) + Math.pow(Math.abs(point1.y - point2.y), 2));\r\n}\r\n/**\r\n * Returns scale based on original and end position of the two points.\r\n *\r\n * @param  {IPoint}  point1       Current position of point 1\r\n * @param  {IPoint}  startPoint1  Start position of point 1\r\n * @param  {IPoint}  point2       Current position of point 1\r\n * @param  {IPoint}  startPoint2  Start position of point 2\r\n * @return {number}  Scale        Calculated scale\r\n */\r\nexport function getScale(point1, startPoint1, point2, startPoint2) {\r\n    var initialDistance = getDistance(startPoint1, startPoint2);\r\n    var currentDistance = getDistance(point1, point2);\r\n    return Math.abs(currentDistance / initialDistance);\r\n}\r\n/**\r\n * Returns an exact mid point between two points.\r\n *\r\n * @param  {IPoint}  point1     Position of point 1\r\n * @param  {IPoint}  point2     Position of point 2\r\n * @return {IPoint}  Mid point  Position of mid-point\r\n */\r\nexport function getMidPoint(point1, point2, position) {\r\n    if (!$type.isNumber(position)) {\r\n        position = 0.5;\r\n    }\r\n    return {\r\n        \"x\": (point1.x + (point2.x - point1.x) * position),\r\n        \"y\": (point1.y + (point2.y - point1.y) * position)\r\n    };\r\n}\r\n/**\r\n * Returns difference in angles between starting and ending position of two\r\n * vectors.\r\n *\r\n * @param  {IPoint}  point1       Current position of point 1\r\n * @param  {IPoint}  startPoint1  Start position of point 1\r\n * @param  {IPoint}  point2       Current position of point 1\r\n * @param  {IPoint}  startPoint2  Start position of point 2\r\n * @return {number}               Angle difference in degrees\r\n */\r\nexport function getRotation(point1, startPoint1, point2, startPoint2) {\r\n    // Get start and end angles\r\n    var startAngle = getAngle(startPoint1, startPoint2);\r\n    var angle = getAngle(point1, point2);\r\n    // Calculate angle\r\n    var diff = startAngle - angle;\r\n    if (diff < 0) {\r\n        diff += 360;\r\n    }\r\n    return diff;\r\n}\r\n/**\r\n * Calculates angle of the vector based on two or one point.\r\n *\r\n * @param  {IPoint}  point1  Point 1\r\n * @param  {IPoint}  point2  Point 2\r\n * @return {number}          Angle in degrees\r\n */\r\nexport function getAngle(point1, point2) {\r\n    if (!point2) {\r\n        point2 = { x: point1.x * 2, y: point1.y * 2 };\r\n    }\r\n    var diffX = point2.x - point1.x;\r\n    var diffY = point2.y - point1.y;\r\n    var angle = Math.atan2(diffY, diffX) * DEGREES;\r\n    if (angle < 0) {\r\n        angle += 360;\r\n    }\r\n    return normalizeAngle(angle);\r\n}\r\n/**\r\n * Returns the shift in coordinates of the center when item is rotated, moved\r\n * and scaled at the same time.\r\n *\r\n * @param  {IPoint}  center       Current center\r\n * @param  {IPoint}  point1       Frst reference point\r\n * @param  {IPoint}  startPoint1  Original position of the first reference point\r\n * @param  {IPoint}  point2       Second reference point\r\n * @param  {IPoint}  startPoint2  Original position of the first reference point\r\n * @return {IPoint}               Shift in center point coordinates\r\n */\r\nexport function getCenterShift(center, point1, startPoint1, point2, startPoint2) {\r\n    // Get angle\r\n    var angle = getRotation(point1, startPoint1, point2, startPoint2) - 90;\r\n    if (angle < 0) {\r\n        angle += 360;\r\n    }\r\n    // Get distance between new position\r\n    var distance = getDistance(point1, point2);\r\n    // Calculate new X\r\n    var x = Math.cos(angle) / distance + point1.x;\r\n    var y = Math.cos(angle) / distance + point1.y;\r\n    var shift = {\r\n        \"x\": x - center.x,\r\n        \"y\": y - center.y\r\n    };\r\n    return shift;\r\n}\r\n/**\r\n * Converts an array of points into a bounding box rectangle.\r\n *\r\n * Array can contain any number of points.\r\n *\r\n * @param  {IPoint[]}              points  Points\r\n * @return {Optional<IRectangle>}          Bounding box rectangle\r\n */\r\nexport function getBBox(points) {\r\n    if (points) {\r\n        var length_1 = points.length;\r\n        if (length_1 !== 0) {\r\n            var left = void 0;\r\n            var right = void 0;\r\n            var top_1;\r\n            var bottom = void 0;\r\n            for (var i = 0; i < length_1; i++) {\r\n                var point = points[i];\r\n                if (!$type.isNumber(right) || (point.x > right)) {\r\n                    right = point.x;\r\n                }\r\n                if (!$type.isNumber(left) || (point.x < left)) {\r\n                    left = point.x;\r\n                }\r\n                if (!$type.isNumber(top_1) || (point.y < top_1)) {\r\n                    top_1 = point.y;\r\n                }\r\n                if (!$type.isNumber(bottom) || (point.y > bottom)) {\r\n                    bottom = point.y;\r\n                }\r\n            }\r\n            return { x: left, y: top_1, width: right - left, height: bottom - top_1 };\r\n        }\r\n    }\r\n    return { x: 0, y: 0, width: 0, height: 0 };\r\n}\r\n/**\r\n * Returns a [[IRectangle]] object representing a common rectangle that fits\r\n * all passed in rectangles in it.\r\n *\r\n * @param {IRectangle[]}           rectangles  An array of rectangles\r\n * @return {Optional<IRectangle>}              Common rectangle\r\n */\r\nexport function getCommonRectangle(rectangles) {\r\n    var length = rectangles.length;\r\n    if (length !== 0) {\r\n        var minX = void 0;\r\n        var minY = void 0;\r\n        var maxX = void 0;\r\n        var maxY = void 0;\r\n        for (var i = 0; i < length; i++) {\r\n            var rectangle = rectangles[i];\r\n            minX = min(rectangle.x, minX);\r\n            minY = min(rectangle.y, minY);\r\n            maxX = max(rectangle.x + rectangle.width, maxX);\r\n            maxY = max(rectangle.y + rectangle.height, maxY);\r\n        }\r\n        return { x: minX, y: minY, width: maxX - minX, height: maxY - minY };\r\n    }\r\n}\r\n/**\r\n * [getPointOnQuadraticCurve description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {IPoint}  pointA        [description]\r\n * @param  {IPoint}  pointB        [description]\r\n * @param  {IPoint}  controlPoint  [description]\r\n * @param  {number}  position      [description]\r\n * @return {IPoint}                [description]\r\n */\r\nexport function getPointOnQuadraticCurve(pointA, pointB, controlPoint, position) {\r\n    var x = (1 - position) * (1 - position) * pointA.x + 2 * (1 - position) * position * controlPoint.x + position * position * pointB.x;\r\n    var y = (1 - position) * (1 - position) * pointA.y + 2 * (1 - position) * position * controlPoint.y + position * position * pointB.y;\r\n    return { x: x, y: y };\r\n}\r\n/**\r\n * [getPointOnCubicCurve description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {IPoint}  pointA         [description]\r\n * @param  {IPoint}  pointB         [description]\r\n * @param  {IPoint}  controlPointA  [description]\r\n * @param  {IPoint}  controlPointB  [description]\r\n * @param  {number}  position       [description]\r\n * @return {IPoint}                 [description]\r\n */\r\nexport function getPointOnCubicCurve(pointA, pointB, controlPointA, controlPointB, position) {\r\n    var point = { x: 0, y: 0 };\r\n    var mt1 = 1 - position;\r\n    var mt2 = mt1 * mt1;\r\n    var mt3 = mt2 * mt1;\r\n    point.x = pointA.x * mt3 + controlPointA.x * 3 * mt2 * position + controlPointB.x * 3 * mt1 * position * position + pointB.x * position * position * position;\r\n    point.y = pointA.y * mt3 + controlPointA.y * 3 * mt2 * position + controlPointB.y * 3 * mt1 * position * position + pointB.y * position * position * position;\r\n    return point;\r\n}\r\n/**\r\n * [getCubicControlPointA description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {IPoint}  p0        [description]\r\n * @param  {IPoint}  p1        [description]\r\n * @param  {IPoint}  p2        [description]\r\n * @param  {IPoint}  p3        [description]\r\n * @param  {number}  tensionX  [description]\r\n * @param  {number}  tensionY  [description]\r\n * @return {IPoint}            [description]\r\n */\r\nexport function getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY) {\r\n    tensionX = adjustTension(tensionX);\r\n    tensionY = adjustTension(tensionY);\r\n    return { x: ((-p0.x + p1.x / tensionX + p2.x) * tensionX), y: ((-p0.y + p1.y / tensionY + p2.y) * tensionY) };\r\n}\r\n/**\r\n * [getCubicControlPointB description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {IPoint}  p0        [description]\r\n * @param  {IPoint}  p1        [description]\r\n * @param  {IPoint}  p2        [description]\r\n * @param  {IPoint}  p3        [description]\r\n * @param  {number}  tensionX  [description]\r\n * @param  {number}  tensionY  [description]\r\n * @return {IPoint}            [description]\r\n */\r\nexport function getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY) {\r\n    tensionX = adjustTension(tensionX);\r\n    tensionY = adjustTension(tensionY);\r\n    return { x: ((p1.x + p2.x / tensionX - p3.x) * tensionX), y: ((p1.y + p2.y / tensionY - p3.y) * tensionY) };\r\n}\r\n/**\r\n * [adjustTension description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {number}  tension  [description]\r\n * @return {number}           [description]\r\n */\r\nexport function adjustTension(tension) {\r\n    return 1 - tension + 0.00001;\r\n}\r\n/**\r\n * [normalizeAngle description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {number}  value  [description]\r\n * @return {number}         [description]\r\n */\r\nexport function normalizeAngle(value) {\r\n    if (value == 360) {\r\n        return 360;\r\n    }\r\n    return value % 360;\r\n}\r\n/**\r\n * [normalizeAngleToRange description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @todo review this with various angles, can be tested on radar chart with custom start/end angles\r\n * @param {number}   value       [description]\r\n * @param {number}   startAngle  [description]\r\n * @param {number}   endAngle    [description]\r\n * @return {number}              [description]\r\n */\r\nexport function fitAngleToRange(value, startAngle, endAngle) {\r\n    if (startAngle > endAngle) {\r\n        var temp = startAngle;\r\n        startAngle = endAngle;\r\n        endAngle = temp;\r\n    }\r\n    value = normalizeAngle(value);\r\n    var count = (startAngle - normalizeAngle(startAngle)) / 360;\r\n    if (value < startAngle) {\r\n        value += 360 * (count + 1);\r\n    }\r\n    var maxEnd = startAngle + (endAngle - startAngle) / 2 + 180;\r\n    var maxStart = startAngle + (endAngle - startAngle) / 2 - 180;\r\n    if (value > endAngle) {\r\n        if (value - 360 > startAngle) {\r\n            value -= 360;\r\n        }\r\n        else {\r\n            if (value < maxEnd) {\r\n                value = endAngle;\r\n            }\r\n            else {\r\n                value = startAngle;\r\n            }\r\n        }\r\n    }\r\n    if (value < startAngle) {\r\n        if (value > maxStart) {\r\n            value = startAngle;\r\n        }\r\n        else {\r\n            value = endAngle;\r\n        }\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Returns [[IRectangle]] of an arc in relative values, assuming that the\r\n * center is at the circle center.\r\n *\r\n * Used to find out max radius of an arc.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {number}      startAngle  Start angle\r\n * @param  {number}      endAngle    End angle\r\n * @param  {number}      radius    \t Relative radius\r\n * @return {IRectangle}              Rectangle\r\n */\r\nexport function getArcRect(startAngle, endAngle, radius) {\r\n    var minX = Number.MAX_VALUE;\r\n    var minY = Number.MAX_VALUE;\r\n    var maxX = -Number.MAX_VALUE;\r\n    var maxY = -Number.MAX_VALUE;\r\n    var bpoints = [];\r\n    if (!$type.isNumber(radius)) {\r\n        radius = 1;\r\n    }\r\n    bpoints.push(getArcPoint(radius, startAngle));\r\n    bpoints.push(getArcPoint(radius, endAngle));\r\n    var fromAngle = Math.min(Math.floor(startAngle / 90) * 90, Math.floor(endAngle / 90) * 90);\r\n    var toAngle = Math.max(Math.ceil(startAngle / 90) * 90, Math.ceil(endAngle / 90) * 90);\r\n    for (var angle = fromAngle; angle <= toAngle; angle += 90) {\r\n        if (angle >= startAngle && angle <= endAngle) {\r\n            bpoints.push(getArcPoint(radius, angle));\r\n        }\r\n    }\r\n    for (var i = 0; i < bpoints.length; i++) {\r\n        var pt = bpoints[i];\r\n        if (pt.x < minX) {\r\n            minX = pt.x;\r\n        }\r\n        if (pt.y < minY) {\r\n            minY = pt.y;\r\n        }\r\n        if (pt.x > maxX) {\r\n            maxX = pt.x;\r\n        }\r\n        if (pt.y > maxY) {\r\n            maxY = pt.y;\r\n        }\r\n    }\r\n    return ({ x: minX, y: minY, width: maxX - minX, height: maxY - minY });\r\n}\r\n/**\r\n * Returns point on arc\r\n *\r\n * @param  {IPoint}  center point\r\n * @param  {number}  radius\r\n * @param  {number}  arc\r\n * @return {boolean}\r\n */\r\nexport function getArcPoint(radius, arc) {\r\n    return ({ x: radius * cos(arc), y: radius * sin(arc) });\r\n}\r\n/**\r\n * Returns true if a point is within rectangle\r\n *\r\n * @param  {IPoint}      point\r\n * @param  {IRectangle}  rectangle\r\n * @return {boolean}\r\n */\r\nexport function isInRectangle(point, rectangle) {\r\n    if (point.x >= rectangle.x && point.x <= rectangle.x + rectangle.width && point.y > rectangle.y && point.y < rectangle.y + rectangle.height) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport function getLineIntersection(pointA1, pointA2, pointB1, pointB2) {\r\n    var x = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.x - pointB2.x) - (pointA1.x - pointA2.x) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));\r\n    var y = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));\r\n    return { x: x, y: y };\r\n}\r\n//# sourceMappingURL=Math.js.map","/**\r\n * Morpher module contains functionality that allows morphing one polygon to\r\n * another.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { Animation, AnimationDisposer } from \"../utils/Animation\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $ease from \"../utils/Ease\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * Morpher can be used to morph one polygon to some other polygon.\r\n */\r\nvar Morpher = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Morpher, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {IMorphable} morphable An object to morph\r\n     */\r\n    function Morpher(morphable) {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * A storage for measurements.\r\n         *\r\n         * @type {IRectangle[]}\r\n         */\r\n        _this._bboxes = [];\r\n        /**\r\n         * Duration of the morphing animation in milliseconds.\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this.morphDuration = 800;\r\n        /**\r\n         * An easing function to use for morphing animation.\r\n         *\r\n         * @see {@link Ease}\r\n         * @type {Function}\r\n         */\r\n        _this.morphEasing = $ease.cubicOut;\r\n        /**\r\n         * If set to `true`, all separate parts of the multi-part polygon will\r\n         * morph into a single circle or polygon when using built-in methods\r\n         * `morphToCircle()` or `morphToPolygon()`.\r\n         *\r\n         * Otherwise each separate part of polygon will morph to individual target\r\n         * circle or polgyon.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this.morphToSingle = true;\r\n        /**\r\n         * A ratio to scale morphed object in relation to the source object.\r\n         *\r\n         * @type {number}\r\n         */\r\n        _this.scaleRatio = 1;\r\n        _this.className = \"Morpher\";\r\n        _this.morphable = morphable;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Morphs a polygon to another polygon.\r\n     *\r\n     * @param {IPoint[][][]}        toPoints  Corner points of the target shape\r\n     * @param {number}              duration  Duration in milliseconds\r\n     * @param {(number) => number}  easing    Easing function\r\n     * @return {Animation}                    Animation\r\n     */\r\n    Morpher.prototype.morphToPolygon = function (toPoints, duration, easing) {\r\n        var points = this.morphable.currentPoints;\r\n        this.sortPoints(points);\r\n        this.sortPoints(toPoints);\r\n        this._morphFromPointsReal = [];\r\n        this._morphToPointsReal = [];\r\n        if (!$type.hasValue(duration)) {\r\n            duration = this.morphDuration;\r\n        }\r\n        if (!$type.hasValue(easing)) {\r\n            easing = this.morphEasing;\r\n        }\r\n        this._morphFromPointsReal = this.normalizePoints(toPoints, points);\r\n        this._morphToPointsReal = this.normalizePoints(points, toPoints);\r\n        this.morphable.currentPoints = this._morphFromPointsReal;\r\n        var animation = new Animation(this, { property: \"morphProgress\", from: 0, to: 1 }, duration, easing);\r\n        this._disposers.push(animation);\r\n        animation.start();\r\n        return animation;\r\n    };\r\n    /**\r\n     * [normalizePoints description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param  {IPoint[][][]}  pointsA  Point A\r\n     * @param  {IPoint[][][]}  pointsB  Point B\r\n     * @return {IPoint[]}               Normalized points\r\n     */\r\n    Morpher.prototype.normalizePoints = function (pointsA, pointsB) {\r\n        for (var i = 0, len = pointsA.length; i < len; i++) {\r\n            var surfaceA = pointsA[i][0];\r\n            var holeA = pointsA[i][1];\r\n            var bboxA = $type.getValue($math.getBBox(surfaceA));\r\n            var middleX = bboxA.x + bboxA.width;\r\n            var middleY = bboxA.y + bboxA.height;\r\n            // check if we have the same in PointsB\r\n            if (!pointsB[i]) {\r\n                pointsB[i] = [];\r\n            }\r\n            // check if we have surface in pointsB\r\n            if (surfaceA && !pointsB[i][0]) {\r\n                pointsB[i][0] = [{ x: middleX, y: middleY }, { x: middleX, y: middleY }];\r\n            }\r\n            if (pointsB[i][0]) {\r\n                pointsB[i][0] = this.addPoints(pointsB[i][0], surfaceA.length);\r\n                var distance = Infinity;\r\n                var splitAt = 0;\r\n                for (var a = 0; a < pointsB[i][0].length; a++) {\r\n                    var newDistance = $math.getDistance(pointsB[i][0][a], surfaceA[0]);\r\n                    if (newDistance < distance) {\r\n                        splitAt = a;\r\n                        distance = newDistance;\r\n                    }\r\n                }\r\n                var partA = pointsB[i][0].slice(0, splitAt);\r\n                var partB = pointsB[i][0].slice(splitAt);\r\n                pointsB[i][0] = partB.concat(partA);\r\n            }\r\n            if (holeA) {\r\n                if (!pointsB[i][1]) {\r\n                    pointsB[i][1] = [{ x: middleX, y: middleY }, { x: middleX, y: middleY }];\r\n                }\r\n                pointsB[i][1] = this.addPoints(pointsB[i][1], holeA.length);\r\n            }\r\n        }\r\n        return pointsB;\r\n    };\r\n    /**\r\n     * [sortPoints description]\r\n     *\r\n     * @ignore Exclude from doc\r\n     * @todo Description\r\n     * @param {IPoint[][][]}  points  [description]\r\n     * @return                        common bbox of points\r\n     */\r\n    Morpher.prototype.sortPoints = function (points) {\r\n        points.sort(function (a, b) {\r\n            var bbox1 = $type.getValue($math.getBBox(a[0]));\r\n            var bbox2 = $type.getValue($math.getBBox(b[0]));\r\n            if (bbox1.width * bbox1.height > bbox2.width * bbox2.height) {\r\n                return -1;\r\n            }\r\n            else {\r\n                return 1;\r\n            }\r\n        });\r\n        var bboxes = [];\r\n        for (var i = 0, len = points.length; i < len; i++) {\r\n            var surface = points[i][0];\r\n            if (surface) {\r\n                bboxes.push($type.getValue($math.getBBox(surface)));\r\n            }\r\n        }\r\n        return $math.getCommonRectangle(bboxes);\r\n    };\r\n    /**\r\n     * Morphs polygon to a circle (it is actually a polygon which makes a circle).\r\n     *\r\n     * @param  {number}              radius    Target circle radius (px)\r\n     * @param  {number}              duration  Duration (ms)\r\n     * @param  {(number) => number}  easing    Easing function\r\n     * @return {Animation}                     Animation\r\n     */\r\n    Morpher.prototype.morphToCircle = function (radius, duration, easing) {\r\n        var points = this.morphable.points;\r\n        var commonBBox = this.sortPoints(points);\r\n        this._morphFromPointsReal = [];\r\n        this._morphToPointsReal = [];\r\n        if (!$type.hasValue(duration)) {\r\n            duration = this.morphDuration;\r\n        }\r\n        if (!$type.hasValue(easing)) {\r\n            easing = this.morphEasing;\r\n        }\r\n        // surface\r\n        for (var i = 0, len = points.length; i < len; i++) {\r\n            var surface = points[i][0];\r\n            var hole = points[i][1];\r\n            this._morphFromPointsReal[i] = [];\r\n            this._morphToPointsReal[i] = [];\r\n            if (surface) {\r\n                var toPoints = surface;\r\n                var fromPoints = surface;\r\n                var bbox = $type.getValue($math.getBBox(fromPoints)); // this._bboxes[i];\r\n                if (this.morphToSingle) {\r\n                    bbox = $type.getValue(commonBBox);\r\n                }\r\n                var middleX = bbox.x + bbox.width / 2;\r\n                var middleY = bbox.y + bbox.height / 2;\r\n                var realRadius = radius;\r\n                if (!$type.isNumber(realRadius)) {\r\n                    realRadius = Math.min(bbox.width / 2, bbox.height / 2);\r\n                }\r\n                toPoints = [];\r\n                // find angle for the first point\r\n                var startAngle = $math.getAngle({ x: middleX, y: middleY }, surface[0]);\r\n                var count = 100;\r\n                if (surface.length > count) {\r\n                    count = surface.length;\r\n                }\r\n                fromPoints = this.addPoints(surface, count);\r\n                count = fromPoints.length; // add Points might increase number a bit\r\n                var angle = 360 / (count - 1);\r\n                for (var a = 0; a < count; a++) {\r\n                    var realAngle = angle * a + startAngle;\r\n                    var pointOnCircle = { x: middleX + realRadius * $math.cos(realAngle), y: middleY + realRadius * $math.sin(realAngle) };\r\n                    toPoints[a] = pointOnCircle;\r\n                }\r\n                if (hole && hole.length > 0) {\r\n                    for (var i_1 = 0, hlen = hole.length; i_1 < hlen; i_1++) {\r\n                        toPoints.push({ x: middleX, y: middleY });\r\n                    }\r\n                }\r\n                this._morphFromPointsReal[i][0] = fromPoints;\r\n                this._morphToPointsReal[i][0] = toPoints;\r\n            }\r\n        }\r\n        this.morphable.currentPoints = this._morphFromPointsReal;\r\n        var animation = new Animation(this, { property: \"morphProgress\", from: 0, to: 1 }, duration, easing);\r\n        this._disposers.push(animation);\r\n        animation.start();\r\n        return animation;\r\n    };\r\n    /**\r\n     * [addPoints description]\r\n     *\r\n     * @ignore Exclude from doc\r\n     * @todo Description\r\n     * @param  {IPoint[]}  points         [description]\r\n     * @param  {number}    mustHaveCount  [description]\r\n     * @return {IPoint[]}                 [description]\r\n     */\r\n    Morpher.prototype.addPoints = function (points, mustHaveCount) {\r\n        var addToSegmentCount = Math.round(mustHaveCount / points.length);\r\n        var newPoints = [];\r\n        for (var i = 0, len = points.length; i < len; i++) {\r\n            var point0 = points[i];\r\n            var point1 = void 0;\r\n            if (i == points.length - 1) {\r\n                point1 = points[0];\r\n            }\r\n            else {\r\n                point1 = points[i + 1];\r\n            }\r\n            newPoints.push(point0);\r\n            for (var p = 1; p < addToSegmentCount; p++) {\r\n                var percent = p / addToSegmentCount;\r\n                var extraPoint = { x: point0.x + (point1.x - point0.x) * percent, y: point0.y + (point1.y - point0.y) * percent };\r\n                newPoints.push(extraPoint);\r\n            }\r\n            // stop adding in case we already added more than left in original\r\n            if (newPoints.length + points.length - i == mustHaveCount) {\r\n                addToSegmentCount = 0;\r\n            }\r\n        }\r\n        if (newPoints.length < mustHaveCount && points.length > 0) {\r\n            var lastPoint = points[points.length - 1];\r\n            for (var p = newPoints.length; p < mustHaveCount; p++) {\r\n                // add same as last\r\n                newPoints.push({ x: lastPoint.x, y: lastPoint.y });\r\n            }\r\n        }\r\n        return newPoints;\r\n    };\r\n    /**\r\n     * Morphs polygon into a rectangular polygon.\r\n     *\r\n     * @param  {number}              width     Width of the target rectangle (px)\r\n     * @param  {number}              height    Height of the target rectangle (px)\r\n     * @param  {number}              duration  Duration (ms)\r\n     * @param  {(number) => number}  easing    Easing function\r\n     * @return {Animation}                     Animation\r\n     */\r\n    Morpher.prototype.morphToRectangle = function (width, height, duration, easing) {\r\n        var points = this.morphable.points;\r\n        this.sortPoints(points);\r\n        this._morphFromPointsReal = [];\r\n        this._morphToPointsReal = [];\r\n        if (!$type.hasValue(duration)) {\r\n            duration = this.morphDuration;\r\n        }\r\n        if (!$type.hasValue(easing)) {\r\n            easing = this.morphEasing;\r\n        }\r\n        //\t\tlet biggestBBox: IRectangle = this._bboxes[this._biggestIndex];\r\n        // surface\r\n        for (var i = 0, len = points.length; i < len; i++) {\r\n            var surface = points[i][0];\r\n            var hole = points[i][1];\r\n            this._morphFromPointsReal[i] = [];\r\n            this._morphToPointsReal[i] = [];\r\n            if (surface) {\r\n                var toPoints = surface;\r\n                var fromPoints = surface;\r\n                var bbox = this._bboxes[i];\r\n                // we only work with first area. TODO: maybe we should find the biggest one?\r\n                if (this.morphToSingle) {\r\n                    //if (i != this._biggestIndex) {\r\n                    //\tbbox = { x: biggestBBox.x + biggestBBox.width / 2, y: biggestBBox.y + biggestBBox.height / 2, width: 0, height: 0 };\r\n                    //}\r\n                }\r\n                var x = bbox.x;\r\n                var y = bbox.y;\r\n                var realWidth = width;\r\n                var realHeight = height;\r\n                if (!$type.isNumber(realWidth)) {\r\n                    realWidth = bbox.width;\r\n                }\r\n                if (!$type.isNumber(realHeight)) {\r\n                    realHeight = bbox.height;\r\n                }\r\n                toPoints = [{ x: x, y: y }, { x: x + realWidth, y: y }, { x: x + realWidth, y: y + realHeight }, { x: x, y: y + realHeight }];\r\n                toPoints = this.addPoints(toPoints, surface.length);\r\n                // if polygon has less points then count, add\r\n                if (surface.length < 4) {\r\n                    for (var i_2 = surface.length; i_2 < 4; i_2++) {\r\n                        toPoints.push({ x: surface[i_2].x, y: surface[i_2].y });\r\n                    }\r\n                }\r\n                if (hole && hole.length > 0) {\r\n                    var middleX = bbox.x + bbox.width / 2;\r\n                    var middleY = bbox.y + bbox.height / 2;\r\n                    for (var i_3 = 0, hlen = hole.length; i_3 < hlen; i_3++) {\r\n                        toPoints.push({ x: middleX, y: middleY });\r\n                    }\r\n                }\r\n                this._morphFromPointsReal[i][0] = fromPoints;\r\n                this._morphToPointsReal[i][0] = toPoints;\r\n            }\r\n        }\r\n        this.morphable.currentPoints = this._morphFromPointsReal;\r\n        var animation = new Animation(this, { property: \"morphProgress\", from: 0, to: 1 }, duration, easing);\r\n        this._disposers.push(animation);\r\n        animation.start();\r\n        return animation;\r\n    };\r\n    Object.defineProperty(Morpher.prototype, \"morphProgress\", {\r\n        /**\r\n         * Returns the progress of morph transition.\r\n         *\r\n         * @return {Optional<number>} Progress (0-1)\r\n         */\r\n        get: function () {\r\n            return this._morphProgress;\r\n        },\r\n        /**\r\n         * Progress of the morph transition.\r\n         *\r\n         * Setting this will also trigger actual transformation.\r\n         *\r\n         * @param {number}  value  Progress (0-1)\r\n         */\r\n        set: function (value) {\r\n            this._morphProgress = value;\r\n            var currentPoints = [];\r\n            if (value != null) {\r\n                var fromPoints = this._morphFromPointsReal;\r\n                var toPoints = this._morphToPointsReal;\r\n                if (fromPoints != null && toPoints != null) {\r\n                    for (var i = 0, len = fromPoints.length; i < len; i++) {\r\n                        var currentArea = [];\r\n                        currentPoints.push(currentArea);\r\n                        var surfaceFrom = fromPoints[i][0];\r\n                        var holeFrom = fromPoints[i][1];\r\n                        var surfaceTo = toPoints[i][0];\r\n                        var holeTo = toPoints[i][1];\r\n                        if (surfaceFrom && surfaceFrom.length > 0 && surfaceTo && surfaceTo.length > 0) {\r\n                            var currentSurface = [];\r\n                            for (var i_4 = 0, slen = surfaceFrom.length; i_4 < slen; i_4++) {\r\n                                var point0 = surfaceFrom[i_4];\r\n                                var point1 = surfaceTo[i_4];\r\n                                var currentPoint = { x: point0.x + (point1.x * this.scaleRatio - point0.x) * value, y: point0.y + (point1.y * this.scaleRatio - point0.y) * value };\r\n                                currentSurface.push(currentPoint);\r\n                            }\r\n                            currentArea[0] = currentSurface;\r\n                        }\r\n                        if (holeFrom && holeFrom.length > 0 && holeTo && holeTo.length > 0) {\r\n                            var currentHole = [];\r\n                            for (var i_5 = 0, hlen = holeFrom.length; i_5 < hlen; i_5++) {\r\n                                var point0 = holeFrom[i_5];\r\n                                var point1 = holeTo[i_5];\r\n                                var currentPoint = { x: point0.x + (point1.x * this.scaleRatio - point0.x) * value, y: point0.y + (point1.y * this.scaleRatio - point0.y) * value };\r\n                                currentHole.push(currentPoint);\r\n                            }\r\n                            currentArea[1] = currentHole;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.morphable.currentPoints = currentPoints;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Restores the polygon to its original appearance.\r\n     *\r\n     * @param {number}              duration  Duration (ms)\r\n     * @param {(number) => number}  easing    Easing function\r\n     * @return {Animation}                    Animation\r\n     */\r\n    Morpher.prototype.morphBack = function (duration, easing) {\r\n        this._morphToPointsReal = this._morphFromPointsReal;\r\n        this._morphFromPointsReal = this.morphable.currentPoints;\r\n        if (!$type.hasValue(duration)) {\r\n            duration = this.morphDuration;\r\n        }\r\n        if (!$type.hasValue(easing)) {\r\n            easing = this.morphEasing;\r\n        }\r\n        var animation = new Animation(this, { property: \"morphProgress\", from: 0, to: 1 }, duration, easing);\r\n        this._disposers.push(animation);\r\n        animation.start();\r\n        return animation;\r\n    };\r\n    Object.defineProperty(Morpher.prototype, \"animations\", {\r\n        /**\r\n         * Returns a list of morph animations currently being played.\r\n         *\r\n         * @return {Array<Animation>} List of animations\r\n         */\r\n        get: function () {\r\n            if (!this._animations) {\r\n                this._animations = [];\r\n                this._disposers.push(new AnimationDisposer(this._animations));\r\n            }\r\n            return this._animations;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Morpher;\r\n}(BaseObject));\r\nexport { Morpher };\r\n//# sourceMappingURL=Morpher.js.map","/**\r\n * A collection of network-related functions\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $type from \"./Type\";\r\n/**\r\n * Loads an external file via its URL.\r\n *\r\n * Please note that this is an asynchronous function.\r\n *\r\n * It will not return the result, but rather a `Promise`.\r\n *\r\n * You can use the `await` notion, or `then()`.\r\n *\r\n * ```TypeScript\r\n * // Using await\r\n * let response = await Net.load( \"http://www.my.com/data.json\" );\r\n * console.log( response.response );\r\n *\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( ( response ) => {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n * ```JavaScript\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( function( response ) {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n *\r\n * @async\r\n * @param  {string}                      url      URL for the file to load\r\n * @param  {A}                           target   A target element that is requesting the net load\r\n * @param  {INetRequestOptions}          options  Request options\r\n * @return {Promise<INetLoadResult<A>>}           Result (Promise)\r\n */\r\nexport function load(url, target, options) {\r\n    return new Promise(function (success, error) {\r\n        // Is return type Blob?\r\n        var isBlob = $type.hasValue(options) && options.responseType == \"blob\";\r\n        // Create request and set up handlers\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.onload = function () {\r\n            if (xhr.status === 200) {\r\n                var response = void 0;\r\n                var blob = void 0;\r\n                if (isBlob) {\r\n                    blob = xhr.response;\r\n                }\r\n                else {\r\n                    response = xhr.responseText || xhr.response;\r\n                }\r\n                var output = {\r\n                    xhr: xhr,\r\n                    error: false,\r\n                    response: response,\r\n                    blob: blob,\r\n                    type: xhr.getResponseHeader(\"Content-Type\"),\r\n                    target: target\r\n                };\r\n                success(output);\r\n            }\r\n            else {\r\n                error({\r\n                    xhr: xhr,\r\n                    error: true,\r\n                    type: xhr.getResponseHeader(\"Content-Type\"),\r\n                    target: target\r\n                });\r\n            }\r\n        };\r\n        xhr.onerror = function () {\r\n            error({\r\n                xhr: xhr,\r\n                error: true,\r\n                type: xhr.getResponseHeader(\"Content-Type\"),\r\n                target: target\r\n            });\r\n        };\r\n        // Open request\r\n        xhr.open(\"GET\", url, true);\r\n        if (options && options.withCredentials) {\r\n            xhr.withCredentials = true;\r\n        }\r\n        // Process options\r\n        if ($type.hasValue(options)) {\r\n            if ($type.hasValue(options.requestHeaders)) {\r\n                for (var i = 0; i < options.requestHeaders.length; i++) {\r\n                    var header = options.requestHeaders[i];\r\n                    xhr.setRequestHeader(header.key, header.value);\r\n                }\r\n            }\r\n            if ($type.hasValue(options.responseType)) {\r\n                xhr.responseType = options.responseType;\r\n            }\r\n        }\r\n        // Send request\r\n        xhr.send();\r\n    });\r\n}\r\n//# sourceMappingURL=Net.js.map","/**\r\n * ============================================================================\r\n * COMPARING FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Comparing function used for ordering.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {number}    a  Number 1\r\n * @param  {number}    b  Number 2\r\n * @return {Ordering}     Result\r\n */\r\nexport function order(a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n}\r\n//# sourceMappingURL=Number.js.map","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $array from \"./Array\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Returns an iterator for all entries in object.\r\n *\r\n * Can be used to safely iterate through all properties of the object.\r\n *\r\n * @param   {object}    object  Source object\r\n * @returns {Iterator}          Iterator\r\n */\r\nexport function entries(object) {\r\n    return function (push) {\r\n        // TODO make this more efficient ?\r\n        for (var key in object) {\r\n            if (hasKey(object, key)) {\r\n                if (!push([key, object[key]])) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Returns an array of object's property names.\r\n *\r\n * @param   {object}        object  Source object\r\n * @returns {Array<string}          Object property names\r\n */\r\nexport function keys(object) {\r\n    var output = [];\r\n    for (var key in object) {\r\n        if (hasKey(object, key)) {\r\n            output.push(key);\r\n        }\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * Returns an array of object's property names ordered using specific ordering\r\n * function.\r\n *\r\n * @param   {object}        object  Source object\r\n * @param   {function}      order   Ordering function\r\n * @returns {Array<string>}          Object property names\r\n */\r\nexport function keysOrdered(object, order) {\r\n    return keys(object).sort(order);\r\n}\r\n/**\r\n * Checks if `object` has a specific `key`.\r\n *\r\n * @param   {object}   object  Source object\r\n * @param   {string}   key     Property name\r\n * @returns {boolean}          Has key?\r\n */\r\nexport function hasKey(object, key) {\r\n    return {}.hasOwnProperty.call(object, key);\r\n}\r\n/**\r\n * Returns value of the specific `key`.\r\n *\r\n * @param   {object}   object  Source object\r\n * @param   {string}   key     Property name\r\n * @returns {any}              Key value\r\n */\r\nexport function getKey(object, key) {\r\n    return object[key];\r\n}\r\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * If return value of the function evaluates to `false` further iteration is\r\n * cancelled.\r\n *\r\n * @param {object}   object  Source object\r\n * @param {function} fn      Callback function\r\n */\r\nexport function eachContinue(object, fn) {\r\n    for (var key in object) {\r\n        if (hasKey(object, key)) {\r\n            if (!fn(key, object[key])) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * @param {object}   object  Source object\r\n * @param {function} fn      Callback function\r\n */\r\nexport function each(object, fn) {\r\n    eachContinue(object, function (key, value) {\r\n        fn(key, value);\r\n        return true;\r\n    });\r\n}\r\n/**\r\n * Orders object properties using custom `ord` function and iterates through\r\n * them calling `fn` for each of them.\r\n *\r\n * @param {object}    object  Source object\r\n * @param {function}  fn      Callback function\r\n * @param {function}  order   Ordering function\r\n */\r\nexport function eachOrdered(object, fn, ord) {\r\n    $array.each(keysOrdered(object, ord), function (key) {\r\n        fn(key, object[key]);\r\n    });\r\n}\r\n/**\r\n * Returns a copy of the object.\r\n *\r\n * @param   {object} object  Source object\r\n * @returns {object}         Copy of the object\r\n */\r\nexport function copy(object) {\r\n    return Object.assign({}, object);\r\n}\r\n/**\r\n * Merges two objects and returns a new object that contains properties from\r\n * both source objects.\r\n *\r\n * @param   {object} object1  Source object #1\r\n * @param   {object} object2  Source object #2\r\n * @returns {object}          Combined object\r\n */\r\nexport function merge(object1, object2) {\r\n    return Object.assign({}, object1, object2);\r\n}\r\n/**\r\n * Copies a list of properties from one object to another.\r\n *\r\n * Will not copy empty properties.\r\n *\r\n * @param {object}         source  Source object\r\n * @param {object}         target    Target object\r\n * @param {Array<string>}  keys  List of keys to copy\r\n */\r\nexport function copyProperties(source, target, keys) {\r\n    $array.each(keys, function (key) {\r\n        if ($type.hasValue(source[key])) {\r\n            target[key] = source[key];\r\n        }\r\n    });\r\n}\r\n/**\r\n * Copies a list of properties from one object to another only if target does't have value of the property set.\r\n *\r\n * Will not copy empty properties.\r\n *\r\n * @param {object}         source  Source object\r\n * @param {object}         target    Target object\r\n * @param {Array<string>}  keys  List of keys to copy\r\n */\r\nexport function softCopyProperties(source, target, keys) {\r\n    $array.each(keys, function (key) {\r\n        if ($type.hasValue(source[key]) && !($type.hasValue(target[key]))) {\r\n            target[key] = source[key];\r\n        }\r\n    });\r\n}\r\n/**\r\n * Copies a list of properties from one object to another.\r\n *\r\n * Will copy empty properties.\r\n *\r\n * @param {object}         source  Source object\r\n * @param {object}         target    Target object\r\n * @param {Array<string>}  keys  List of keys to copy\r\n */\r\nexport function forceCopyProperties(source, target, keys) {\r\n    $array.each(keys, function (key) {\r\n        target[key] = source[key];\r\n    });\r\n}\r\n/**\r\n * Copies all properties from one object to another.\r\n *\r\n * @param {object}  from  Source object\r\n * @param {object}  to    Target object\r\n */\r\nexport function copyAllProperties(from, to) {\r\n    copyProperties(from, to, keys(from));\r\n}\r\n//# sourceMappingURL=Object.js.map","/**\r\n * A collection of functions for ordering.\r\n */\r\n/**\r\n * [reverse description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {Ordering}  a  [description]\r\n * @return {Ordering}     [description]\r\n */\r\nexport function reverse(a) {\r\n    switch (a) {\r\n        case 0:\r\n            return 0;\r\n        case -1:\r\n            return 1;\r\n        case 1:\r\n            return -1;\r\n    }\r\n}\r\n/**\r\n * [or description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {Ordering}  a  Item 1\r\n * @param  {Ordering}  b  Item 2\r\n * @return {Ordering}     [description]\r\n */\r\nexport function or(a, b) {\r\n    if (a === 0) {\r\n        return b;\r\n    }\r\n    else {\r\n        return a;\r\n    }\r\n}\r\n//# sourceMappingURL=Order.js.map","/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Represents a relative value. (percent)\r\n */\r\nvar Percent = /** @class */ (function () {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {number}  percent  Percent value\r\n     */\r\n    function Percent(percent) {\r\n        this._value = percent;\r\n    }\r\n    Object.defineProperty(Percent.prototype, \"value\", {\r\n        /**\r\n         * Relative value.\r\n         *\r\n         * E.g. 100% is 1, 50% is 0.5, etc.\r\n         *\r\n         * This is useful to apply transformations to other values. E.g.:\r\n         *\r\n         * ```TypeScript\r\n         * let value = 256;\r\n         * let percent = new am4core.Percent(50);\r\n         * console.log(value * percent.value); // outputs 128\r\n         * ```\r\n         * ```JavaScript\r\n         * var value = 256;\r\n         * var percent = new am4core.Percent(50);\r\n         * console.log(value * percent.value); // outputs 128\r\n         * ```\r\n         *\r\n         * @readonly\r\n         * @return {number} Relative value\r\n         */\r\n        get: function () {\r\n            return this._value / 100;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Percent.prototype, \"percent\", {\r\n        /**\r\n         * Value in percent.\r\n         *\r\n         * @return {number} Percent\r\n         */\r\n        get: function () {\r\n            return this._value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Percent.prototype.toString = function () {\r\n        return \"\" + this._value + \"%\";\r\n    };\r\n    return Percent;\r\n}());\r\nexport { Percent };\r\n/**\r\n * Converts numeric percent value to a proper [[Percent]] object.\r\n *\r\n * ```TypeScript\r\n * pieSeries.radius = am4core.percent(80);\r\n * ```\r\n * ```JavaScript\r\n * pieSeries.radius = am4core.percent(80);\r\n * ```\r\n *\r\n * @param  {number}   value  Percent\r\n * @return {Percent}         Percent object\r\n */\r\nexport function percent(value) {\r\n    return new Percent(value);\r\n}\r\n/**\r\n * Checks if value is a [[Percent]] object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {any}      value  Input value\r\n * @return {boolean}         Is percent?\r\n */\r\nexport function isPercent(value) {\r\n    return value instanceof Percent;\r\n}\r\n//# sourceMappingURL=Percent.js.map","import * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { EventDispatcher } from \"./EventDispatcher\";\r\nimport * as $array from \"./Array\";\r\nimport * as $iter from \"./Iterator\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * Ordered list contains values of any type in an indexed array.\r\n */\r\nvar OrderedList = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {Array<T>}  initial  Inital list of values to add to list\r\n     */\r\n    function OrderedList(initial) {\r\n        /**\r\n         * Holds list values.\r\n         *\r\n         * @type {Array<T>}\r\n         */\r\n        this._values = [];\r\n        /**\r\n         * Event dispatcher.\r\n         *\r\n         * @type {EventDispatcher<AMEvent<OrderedList<T>, ISortedListEvents<T>>>}\r\n         */\r\n        this.events = new EventDispatcher();\r\n        if (initial != null) {\r\n            this.setAll(initial);\r\n        }\r\n    }\r\n    Object.defineProperty(OrderedList.prototype, \"values\", {\r\n        /**\r\n         * All items of the list.\r\n         *\r\n         * Do not modify the list directly. Rather use `insert()` and `remove()`\r\n         * methods.\r\n         *\r\n         * @return {Array<T>} List values\r\n         */\r\n        get: function () {\r\n            return this._values;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Inserts a value into list item array.\r\n     *\r\n     * @param {T}  value  Value\r\n     */\r\n    OrderedList.prototype._insert = function (value) {\r\n        this._values.push(value);\r\n        return this._values.length - 1;\r\n    };\r\n    Object.defineProperty(OrderedList.prototype, \"length\", {\r\n        /**\r\n         * Number of items in the list.\r\n         *\r\n         * @readonly\r\n         * @return {number} Length\r\n         */\r\n        get: function () {\r\n            return this._values.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns the index of the specific `value`.\r\n     *\r\n     * -1 if not found.\r\n     *\r\n     * @param  {T}       value  Value\r\n     * @return {number}        Index\r\n     */\r\n    OrderedList.prototype.indexOf = function (value) {\r\n        return $array.indexOf(this._values, value);\r\n    };\r\n    /**\r\n     * Checks if list contains the `value`.\r\n     *\r\n     * @param  {T}        value  Value\r\n     * @return {boolean}         In the list?\r\n     */\r\n    OrderedList.prototype.contains = function (value) {\r\n        return this.indexOf(value) !== -1;\r\n    };\r\n    /**\r\n     * Returns an item at specific `index`.\r\n     *\r\n     * @param  {number}  index  Index\r\n     * @return {T}              Item\r\n     */\r\n    OrderedList.prototype.getIndex = function (index) {\r\n        return this._values[index];\r\n    };\r\n    Object.defineProperty(OrderedList.prototype, \"first\", {\r\n        /**\r\n         * First item in the list.\r\n         *\r\n         * @return {T} Item\r\n         */\r\n        get: function () {\r\n            return this._values[0];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OrderedList.prototype, \"last\", {\r\n        /**\r\n         * Last item in the list.\r\n         *\r\n         * @return {T} Item\r\n         */\r\n        get: function () {\r\n            return this._values[this._values.length - 1];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Inserts a value into list.\r\n     *\r\n     * @param {T}  value  Value\r\n     */\r\n    OrderedList.prototype.insert = function (value) {\r\n        var index = this._insert(value);\r\n        if (this.events.isEnabled(\"inserted\")) {\r\n            this.events.dispatchImmediately(\"inserted\", {\r\n                type: \"inserted\",\r\n                target: this,\r\n                index: index,\r\n                newValue: value\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Removes an item with the `value` from the list.\r\n     *\r\n     * @param {T}  value  Value\r\n     */\r\n    OrderedList.prototype.remove = function (value) {\r\n        var index = this.indexOf(value);\r\n        if (index !== -1) {\r\n            var oldValue = this._values[index];\r\n            $array.removeIndex(this._values, index);\r\n            if (this.events.isEnabled(\"removed\")) {\r\n                this.events.dispatchImmediately(\"removed\", {\r\n                    type: \"removed\",\r\n                    target: this,\r\n                    index: index,\r\n                    oldValue: oldValue,\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets multiple items to the list.\r\n     *\r\n     * All current items are removed.\r\n     *\r\n     * @param {Array<T>}  newArray  New items\r\n     */\r\n    OrderedList.prototype.setAll = function (newArray) {\r\n        var _this = this;\r\n        $array.eachReverse(this._values, function (x, i) {\r\n            _this._values.pop();\r\n            if (_this.events.isEnabled(\"removed\")) {\r\n                _this.events.dispatchImmediately(\"removed\", {\r\n                    type: \"removed\",\r\n                    target: _this,\r\n                    index: i,\r\n                    oldValue: x\r\n                });\r\n            }\r\n        });\r\n        $array.each(newArray, function (value) {\r\n            _this.insert(value);\r\n        });\r\n    };\r\n    /**\r\n     * Removes all items from the list.\r\n     */\r\n    OrderedList.prototype.clear = function () {\r\n        this.setAll([]);\r\n    };\r\n    /**\r\n     * Returns part of the list between `start` and `end` indexes, as a new\r\n     * [[OrderedList]].\r\n     *\r\n     * @param  {number}          start  Start index\r\n     * @param  {number}          end    End index\r\n     * @return {OrderedList<T>}         Items in range\r\n     */\r\n    OrderedList.prototype.slice = function (start, end) {\r\n        var out = new OrderedList();\r\n        out._values = this._values.slice(start, end);\r\n        return out;\r\n    };\r\n    /**\r\n     * Finds a closest available index to the `value` in specified direction.\r\n     *\r\n     * @ignore exclude from docs\r\n     * @param  {number}                      value      value to search for\r\n     * @param  {function}                    fn         A callback function that returns value of the item\r\n     * @param  {\"left\" | \"right\" |  \"any\" }  direction  Direciton\r\n     * @return {number}                                 Index\r\n     */\r\n    OrderedList.prototype.findClosestIndex = function (value, fn, direction) {\r\n        if (direction === void 0) { direction = \"any\"; }\r\n        // Init temporary values\r\n        var closestIndex = -1;\r\n        var closestValue;\r\n        var closestDifference;\r\n        var i = 0;\r\n        $iter.eachContinue(this.iterator(), function (element) {\r\n            var item = fn(element);\r\n            // Exact match?\r\n            if (item === value) {\r\n                // Found exact value - don't bother searching further\r\n                closestIndex = i;\r\n                return false;\r\n            }\r\n            // Calc difference\r\n            if (direction === \"any\") {\r\n                var difference = Math.abs(value - item);\r\n                if (!$type.hasValue(closestDifference) || (closestDifference > difference)) {\r\n                    closestIndex = i;\r\n                    closestValue = item;\r\n                    closestDifference = difference;\r\n                }\r\n            }\r\n            else if (direction === \"left\" && (item < value)) {\r\n                if (!$type.hasValue(closestValue) || (closestValue < item)) {\r\n                    closestIndex = i;\r\n                    closestValue = item;\r\n                }\r\n            }\r\n            else if (direction === \"right\" && (item > value)) {\r\n                if (!$type.hasValue(closestValue) || (closestValue > item)) {\r\n                    closestIndex = i;\r\n                    closestValue = item;\r\n                }\r\n            }\r\n            ++i;\r\n            return true;\r\n        });\r\n        // Found nothing?\r\n        if (closestIndex === -1) {\r\n            if (direction === \"left\") {\r\n                // Use First one\r\n                closestIndex = 0;\r\n            }\r\n            else if (direction === \"right\") {\r\n                // Use last item\r\n                closestIndex = this.length - 1;\r\n            }\r\n        }\r\n        return closestIndex;\r\n    };\r\n    /**\r\n     * Returns a list iterator.\r\n     *\r\n     * @return {Iterator} Iterator\r\n     */\r\n    OrderedList.prototype.iterator = function () {\r\n        return $iter.fromArray(this._values);\r\n    };\r\n    /**\r\n     * Returns an ES6 iterator for the list.\r\n     */\r\n    OrderedList.prototype[Symbol.iterator] = function () {\r\n        var length, i;\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    length = this._values.length;\r\n                    i = 0;\r\n                    _a.label = 1;\r\n                case 1:\r\n                    if (!(i < length)) return [3 /*break*/, 4];\r\n                    return [4 /*yield*/, this._values[i]];\r\n                case 2:\r\n                    _a.sent();\r\n                    _a.label = 3;\r\n                case 3:\r\n                    ++i;\r\n                    return [3 /*break*/, 1];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Calls `f` for each element in the list.\r\n     */\r\n    OrderedList.prototype.each = function (f) {\r\n        $array.each(this._values, f);\r\n    };\r\n    return OrderedList;\r\n}());\r\nexport { OrderedList };\r\n/**\r\n * A list where all items are ordered according to specific ordering function,\r\n * which is passed in via constructor parameter, when creating an instance of\r\n * [[SortedList]].\r\n */\r\nvar SortedList = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SortedList, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {T) => Ordering}  sort  Ordering function\r\n     */\r\n    function SortedList(sort) {\r\n        var _this = _super.call(this) || this;\r\n        _this._ordering = sort;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Inserts item into the list.\r\n     *\r\n     * @param {T}  value  Item\r\n     */\r\n    SortedList.prototype._insert = function (value) {\r\n        var index = $array.getSortedIndex(this._values, this._ordering, value).index;\r\n        $array.insertIndex(this._values, index, value);\r\n        return index;\r\n    };\r\n    /**\r\n     * Returns index of the item in list if found.\r\n     *\r\n     * -1 if item is not in the list.\r\n     *\r\n     * @param  {T}       value  Item to search for\r\n     * @return {number}         Index\r\n     */\r\n    SortedList.prototype.indexOf = function (value) {\r\n        var _a = $array.getSortedIndex(this._values, this._ordering, value), found = _a.found, index = _a.index;\r\n        if (found) {\r\n            return index;\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n    };\r\n    /**\r\n     * [udpate description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param {T} value [description]\r\n     */\r\n    SortedList.prototype.update = function (value) {\r\n        // @todo test this\r\n        var index = $array.indexOf(this._values, value);\r\n        // @todo throw an error if it doesn't exist ?\r\n        if (index !== -1) {\r\n            var last = this._values.length - 1;\r\n            // Check if the current ordering is correct\r\n            if (!((index === 0 || this._ordering(this._values[index - 1], value) < 0) &&\r\n                (index === last || this._ordering(value, this._values[index + 1]) < 0))) {\r\n                // TODO send remove/insert/move events\r\n                $array.removeIndex(this._values, index);\r\n                this._insert(value);\r\n            }\r\n        }\r\n    };\r\n    return SortedList;\r\n}(OrderedList));\r\nexport { SortedList };\r\n/**\r\n * A version of a [[OrderedList]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nvar OrderedListTemplate = /** @class */ (function (_super) {\r\n    tslib_1.__extends(OrderedListTemplate, _super);\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {T} t Template object\r\n     */\r\n    function OrderedListTemplate(t) {\r\n        var _this = _super.call(this) || this;\r\n        _this.template = t;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(OrderedListTemplate.prototype, \"template\", {\r\n        /**\r\n         * @return {T} Template object\r\n         */\r\n        get: function () {\r\n            return this._template;\r\n        },\r\n        /**\r\n         * A \"template\" object to copy all properties from when creating new list\r\n         * items.\r\n         *\r\n         * @param {T}  v  Template object\r\n         */\r\n        set: function (v) {\r\n            v.isTemplate = true;\r\n            this._template = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all elements from other list.\r\n     *\r\n     * @param {OrderedListTemplate}  source  Source list\r\n     */\r\n    OrderedListTemplate.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        $iter.each(source.iterator(), function (value) {\r\n            _this.insert(value.clone());\r\n        });\r\n    };\r\n    /**\r\n     * Returns part of the list, starting at `start` and ending at `end` indexes,\r\n     * as a new [[OrderedListTemplate]].\r\n     *\r\n     * @param  {number}                  start  Start index\r\n     * @param  {number}                  end    End index\r\n     * @return {OrderedListTemplate<T>}         New list\r\n     */\r\n    OrderedListTemplate.prototype.slice = function (start, end) {\r\n        var out = new OrderedListTemplate(this.template);\r\n        out._values = this._values.slice(start, end);\r\n        return out;\r\n    };\r\n    OrderedListTemplate.prototype.create = function (make) {\r\n        var clone = (make != null\r\n            ? new make()\r\n            : this.template.clone());\r\n        this.insert(clone);\r\n        return clone;\r\n    };\r\n    return OrderedListTemplate;\r\n}(OrderedList));\r\nexport { OrderedListTemplate };\r\n/**\r\n * A version of a [[SortedList]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nvar SortedListTemplate = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SortedListTemplate, _super);\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {T}         t     Template object\r\n     * @param {function}  sort  Ordering function\r\n     */\r\n    function SortedListTemplate(t, sort) {\r\n        var _this = _super.call(this, sort) || this;\r\n        _this.template = t;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(SortedListTemplate.prototype, \"template\", {\r\n        /**\r\n         * @return {T} Template object\r\n         */\r\n        get: function () {\r\n            return this._template;\r\n        },\r\n        /**\r\n         * A \"template\" object to copy all properties from when creating new list\r\n         * items.\r\n         *\r\n         * @param {T}  v  Template object\r\n         */\r\n        set: function (v) {\r\n            v.isTemplate = true;\r\n            this._template = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all elements from other list.\r\n     *\r\n     * @param {SortedListTemplate}  source  Source list\r\n     */\r\n    SortedListTemplate.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        $iter.each(source.iterator(), function (value) {\r\n            _this.insert(value.clone());\r\n        });\r\n    };\r\n    SortedListTemplate.prototype.create = function (make) {\r\n        var clone = (make != null\r\n            ? new make()\r\n            : this.template.clone());\r\n        this.insert(clone);\r\n        return clone;\r\n    };\r\n    return SortedListTemplate;\r\n}(SortedList));\r\nexport { SortedListTemplate };\r\n//# sourceMappingURL=SortedList.js.map","/**\r\n * ============================================================================\r\n * COMPARING FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Comparing function used for ordering.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Use localeCompare\r\n * @param  {string}    a  Item 1\r\n * @param  {string}    b  Item 2\r\n * @return {Ordering}     Result\r\n */\r\nexport function order(a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n}\r\n/**\r\n * ============================================================================\r\n * OTHER FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Repeats a `string` number of times as set in `amount`.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Make this faster\r\n * @param  {string}  string  Source string\r\n * @param  {number}  amount  Number of times to repeat string\r\n * @return {string}          New string\r\n */\r\nexport function repeat(string, amount) {\r\n    return new Array(amount + 1).join(string);\r\n}\r\n/**\r\n * Generates a random string `characters` length.\r\n *\r\n * @param  {number}  chars  Number of characters\r\n * @return {string}         Random string\r\n */\r\nexport function random(chars) {\r\n    var res = \"\";\r\n    var choice = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    for (var i = 0; i < chars; i++) {\r\n        res += choice.charAt(Math.floor(Math.random() * choice.length));\r\n    }\r\n    return res;\r\n}\r\n//# sourceMappingURL=String.js.map","/**\r\n * A collection of String-based constants.\r\n * @hidden\r\n * @ignore Exclude from docs\r\n */\r\n/**\r\n * @ignore Exclude from docs\r\n * @type {string}\r\n */\r\nexport var PX = \"px\";\r\n/**\r\n * @ignore Exclude from docs\r\n * @type {string}\r\n */\r\nexport var STRING = \"string\";\r\n/**\r\n * @ignore Exclude from docs\r\n * @type {string}\r\n */\r\nexport var NUMBER = \"number\";\r\n/**\r\n * @ignore Exclude from docs\r\n * @type {string}\r\n */\r\nexport var DATE = \"date\";\r\n/**\r\n * @ignore Exclude from docs\r\n * @type {string}\r\n */\r\nexport var DURATION = \"duration\";\r\n/**\r\n * @ignore Exclude from docs\r\n * @type {string}\r\n */\r\nexport var PLACEHOLDER = \"__§§§__\";\r\n/**\r\n * @ignore Exclude from docs\r\n * @type {string}\r\n */\r\nexport var PLACEHOLDER2 = \"__§§§§__\";\r\n//# sourceMappingURL=Strings.js.map","import * as $type from \"../utils/Type\";\r\n/**\r\n * Maps time period names to their numeric representations in milliseconds.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport var timeUnitDurations = {\r\n    millisecond: 1,\r\n    second: 1000,\r\n    minute: 60000,\r\n    hour: 3600000,\r\n    day: 86400000,\r\n    week: 604800000,\r\n    month: 2592000000,\r\n    year: 31536000000\r\n};\r\n/**\r\n * Returns the next time unit that goes after source `unit`.\r\n *\r\n * E.g. \"hour\" is the next unit after \"minute\", etc.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {TimeUnit}            unit  Source time unit\r\n * @return {Optional<TimeUnit>}        Next time unit\r\n */\r\nexport function getNextUnit(unit) {\r\n    switch (unit) {\r\n        case \"year\":\r\n            return;\r\n        case \"month\":\r\n            return \"year\";\r\n        case \"week\":\r\n            return \"month\";\r\n        case \"day\":\r\n            return \"month\"; // not a mistake\r\n        case \"hour\":\r\n            return \"day\";\r\n        case \"minute\":\r\n            return \"hour\";\r\n        case \"second\":\r\n            return \"minute\";\r\n        case \"millisecond\":\r\n            return \"second\";\r\n    }\r\n}\r\n/**\r\n * Returns number of milliseconds in the `count` of time `unit`.\r\n *\r\n * Available units: \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\",\r\n * \"month\", and \"year\".\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {TimeUnit}  unit   Time unit\r\n * @param  {number}    count  Number of units\r\n * @return {number}           Milliseconds\r\n */\r\nexport function getDuration(unit, count) {\r\n    if (!$type.hasValue(count)) {\r\n        count = 1;\r\n    }\r\n    return timeUnitDurations[unit] * count;\r\n}\r\n/**\r\n * Returns current `Date` object.\r\n *\r\n * @return {Date} Current date\r\n */\r\nexport function now() {\r\n    return new Date();\r\n}\r\n/**\r\n * Returns current timestamp.\r\n *\r\n * @return {Date} Current timestamp\r\n */\r\nexport function getTime() {\r\n    return now().getTime();\r\n}\r\n/**\r\n * Returns a copy of the `Date` object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {Date}  date  Source date\r\n * @return {Date}        Copy\r\n */\r\nexport function copy(date) {\r\n    return new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3\r\n}\r\n/**\r\n * Checks if the `unit` part of two `Date` objects do not match. Two dates\r\n * represent a \"range\" of time, rather the same time date.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {Date}      dateOne  Date 1\r\n * @param  {Date}      dateTwo  Date 2\r\n * @param  {TimeUnit}  unit     Time unit to check\r\n * @return {boolean}            Range?\r\n */\r\nexport function checkChange(dateOne, dateTwo, unit) {\r\n    switch (unit) {\r\n        case \"year\":\r\n            if (dateOne.getFullYear() != dateTwo.getFullYear()) {\r\n                return true;\r\n            }\r\n            break;\r\n        case \"month\":\r\n            if (dateOne.getMonth() != dateTwo.getMonth()) {\r\n                return true;\r\n            }\r\n            break;\r\n        case \"day\":\r\n            if (dateOne.getDate() != dateTwo.getDate()) {\r\n                return true;\r\n            }\r\n            break;\r\n        case \"hour\":\r\n            if (dateOne.getHours() != dateTwo.getHours()) {\r\n                return true;\r\n            }\r\n            break;\r\n        case \"minute\":\r\n            if (dateOne.getMinutes() != dateTwo.getMinutes()) {\r\n                return true;\r\n            }\r\n            break;\r\n        case \"second\":\r\n            if (dateOne.getSeconds() != dateTwo.getSeconds()) {\r\n                return true;\r\n            }\r\n            break;\r\n        case \"millisecond\":\r\n            if (dateOne.getTime() != dateTwo.getTime()) {\r\n                return true;\r\n            }\r\n            break;\r\n    }\r\n    var nextUnit = getNextUnit(unit);\r\n    if (nextUnit) {\r\n        return checkChange(dateOne, dateTwo, nextUnit);\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Adds `count` of time `unit` to the source date. Returns a modified `Date` object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {Date}      date   Source date\r\n * @param  {TimeUnit}  unit   Time unit\r\n * @param  {number}    count  Number of units to add\r\n * @return {Date}             Modified date\r\n */\r\nexport function add(date, unit, count) {\r\n    switch (unit) {\r\n        case \"day\":\r\n            var day = date.getDate();\r\n            date.setDate(day + count);\r\n            break;\r\n        case \"second\":\r\n            var seconds = date.getSeconds();\r\n            date.setSeconds(seconds + count);\r\n            break;\r\n        case \"millisecond\":\r\n            var milliseconds = date.getMilliseconds();\r\n            date.setMilliseconds(milliseconds + count);\r\n            break;\r\n        case \"hour\":\r\n            var hours = date.getHours();\r\n            date.setHours(hours + count);\r\n            break;\r\n        case \"minute\":\r\n            var minutes = date.getMinutes();\r\n            date.setMinutes(minutes + count);\r\n            break;\r\n        case \"year\":\r\n            var year = date.getFullYear();\r\n            date.setFullYear(year + count);\r\n            break;\r\n        case \"month\":\r\n            var month = date.getMonth();\r\n            date.setMonth(month + count);\r\n            break;\r\n        case \"week\":\r\n            var wday = date.getDate();\r\n            date.setDate(wday + count * 7);\r\n            break;\r\n    }\r\n    return date;\r\n}\r\n/**\r\n * \"Rounds\" the date to specific time unit.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {Date}      date             Source date\r\n * @param  {TimeUnit}  unit             Time unit\r\n * @param  {number}    count            Number of units to round to\r\n * @param  {number}    firstDateOfWeek  First day of week\r\n * @return {Date}                       New date\r\n */\r\nexport function round(date, unit, count, firstDateOfWeek) {\r\n    if (!$type.isNumber(count)) {\r\n        count = 1;\r\n    }\r\n    switch (unit) {\r\n        case \"day\":\r\n            var day = date.getDate();\r\n            if (count > 1) {\r\n                day = Math.floor(day / count) * count;\r\n            }\r\n            day = day;\r\n            date.setDate(day);\r\n            date.setHours(0, 0, 0, 0);\r\n            break;\r\n        case \"second\":\r\n            var seconds = date.getSeconds();\r\n            if (count > 1) {\r\n                seconds = Math.floor(seconds / count) * count;\r\n            }\r\n            date.setSeconds(seconds, 0);\r\n            break;\r\n        case \"millisecond\":\r\n            if (count == 1) {\r\n                return date; // much better for perf!\r\n            }\r\n            var milliseconds = date.getMilliseconds();\r\n            milliseconds = Math.floor(milliseconds / count) * count;\r\n            date.setMilliseconds(milliseconds);\r\n            break;\r\n        case \"hour\":\r\n            var hours = date.getHours();\r\n            if (count > 1) {\r\n                hours = Math.floor(hours / count) * count;\r\n            }\r\n            date.setHours(hours, 0, 0, 0);\r\n            break;\r\n        case \"minute\":\r\n            var minutes = date.getMinutes();\r\n            milliseconds = date.getMilliseconds();\r\n            if (count > 1) {\r\n                minutes = Math.floor(minutes / count) * count;\r\n            }\r\n            date.setMinutes(minutes, 0, 0);\r\n            break;\r\n        case \"month\":\r\n            var month = date.getMonth();\r\n            if (count > 1) {\r\n                month = Math.floor(month / count) * count;\r\n            }\r\n            date.setMonth(month, 1);\r\n            date.setHours(0, 0, 0, 0);\r\n            break;\r\n        case \"year\":\r\n            var year = date.getFullYear();\r\n            if (count > 1) {\r\n                year = Math.floor(year / count) * count;\r\n            }\r\n            date.setFullYear(year, 0, 1);\r\n            date.setHours(0, 0, 0, 0);\r\n            break;\r\n        case \"week\":\r\n            var wday = date.getDate();\r\n            var weekDay = date.getDay();\r\n            if (!$type.isNumber(firstDateOfWeek)) {\r\n                firstDateOfWeek = 1;\r\n            }\r\n            // todo: rounding when count is not 1\r\n            if (weekDay >= firstDateOfWeek) {\r\n                wday = wday - weekDay + firstDateOfWeek;\r\n            }\r\n            else {\r\n                wday = wday - (7 + weekDay) + firstDateOfWeek;\r\n            }\r\n            date.setDate(wday);\r\n            date.setHours(0, 0, 0, 0);\r\n            break;\r\n    }\r\n    return date;\r\n}\r\n//# sourceMappingURL=Time.js.map","/**\r\n * A collection of utility functions for various type checks and conversion\r\n * @todo Review unused functions for removal\r\n * @hidden\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { percent, isPercent } from \"./Percent\";\r\n/**\r\n * ============================================================================\r\n * TYPE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Returns `true` if value is not a number (NaN).\r\n *\r\n * @param  {number}  value Input value\r\n * @return {boolean}       Is NaN?\r\n * @deprecated Is not used anywhere. JS built-in isNaN is used everywhere. Maybe we don't need this, or if we do, then we should use it everywhere\r\n */\r\nexport function isNaN(value) {\r\n    return Number(value) !== value;\r\n}\r\n/**\r\n * Returns a type of the value.\r\n *\r\n * @param  {any}   value  Input value\r\n * @return {Type}         Type of the value\r\n */\r\nexport function getType(value) {\r\n    return ({}).toString.call(value);\r\n}\r\n/**\r\n * Returns a default value if the passed in value is empty.\r\n *\r\n * @param  {any}   value     Input value\r\n * @param  {any}   optional  Default value\r\n * @return {any}             Value or default value whichever is available\r\n * @deprecated Not used anywhere\r\n */\r\nexport function getDefault(value, optional) {\r\n    return value || optional;\r\n}\r\n/**\r\n * Checks if the passed in value is a string.\r\n *\r\n * @param  {any}   value  Value\r\n * @return {value}        Is string?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkString(value) {\r\n    if (typeof value === \"string\") {\r\n        return true;\r\n    }\r\n    else {\r\n        throw new Error(\"Expected a string but got \" + getType(value));\r\n    }\r\n}\r\n/**\r\n * Checks if the passed in value is a boolean.\r\n *\r\n * @param  {any}   value  Value\r\n * @return {value}        Is boolean?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkBoolean(value) {\r\n    if (typeof value === \"boolean\") {\r\n        return true;\r\n    }\r\n    else {\r\n        throw new Error(\"Expected a boolean but got \" + getType(value));\r\n    }\r\n}\r\n/**\r\n * Checks if the passed in value is a number.\r\n *\r\n * @param  {any}   value  Value\r\n * @return {value}        Is number?\r\n * @throws {Error}\r\n */\r\nexport function checkNumber(value) {\r\n    if (typeof value === \"number\") {\r\n        if (isNaN(value)) {\r\n            throw new Error(\"Expected a number but got NaN\");\r\n        }\r\n    }\r\n    else {\r\n        throw new Error(\"Expected a number but got \" + getType(value));\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Checks if the passed in value is an object.\r\n *\r\n * @param  {any}   value  Value\r\n * @return {value}        Is object?\r\n * @throws {Error}\r\n * @todo Is the input type correct?\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkObject(value) {\r\n    var t = getType(value);\r\n    if (t === \"[object Object]\") {\r\n        return true;\r\n    }\r\n    else {\r\n        throw new Error(\"Expected an object but got \" + t);\r\n    }\r\n}\r\n/**\r\n * Checks if the passed in value is an array.\r\n *\r\n * @param  {any}   value  Value\r\n * @return {value}        Is array?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkArray(value) {\r\n    if (Array.isArray(value)) {\r\n        return true;\r\n    }\r\n    else {\r\n        throw new Error(\"Expected an array but got \" + getType(value));\r\n    }\r\n}\r\n/**\r\n * Checks if the passed in value is a Date object.\r\n *\r\n * @param  {any}   value  Value\r\n * @return {value}        Is Date object?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkDate(value) {\r\n    var t = getType(value);\r\n    if (t === \"[object Date]\") {\r\n        return true;\r\n    }\r\n    else {\r\n        throw new Error(\"Expected a date but got \" + t);\r\n    }\r\n}\r\n/**\r\n * ============================================================================\r\n * TYPE CASTING\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Casts string or a number into string.\r\n *\r\n * @param  {string | number}  value  Input\r\n * @return {string}                  String value\r\n * @deprecated Not used anywhere\r\n */\r\nexport function castString(value) {\r\n    if (typeof value === \"string\") {\r\n        return value;\r\n    }\r\n    else if (typeof value === \"number\") {\r\n        return \"\" + value;\r\n    }\r\n    else {\r\n        throw new Error(\"Expected a string or number but got \" + getType(value));\r\n    }\r\n}\r\n/**\r\n * Casts string or a number into a number.\r\n *\r\n * @param  {string | number | Date}  value   Input value\r\n * @return {number}                  Number  value\r\n * @throws {Error}\r\n */\r\nexport function castNumber(value) {\r\n    if (typeof value === \"string\") {\r\n        var number = +value;\r\n        if (isNaN(number)) {\r\n            throw new Error(\"Cannot cast string \" + JSON.stringify(value) + \" to a number\");\r\n        }\r\n        else {\r\n            return number;\r\n        }\r\n    }\r\n    else if (typeof value === \"number\") {\r\n        if (isNaN(value)) {\r\n            throw new Error(\"Expected a number but got NaN\");\r\n        }\r\n        else {\r\n            return value;\r\n        }\r\n    }\r\n    else {\r\n        var t = getType(value);\r\n        if (t === \"[object Date]\") {\r\n            return value.getTime();\r\n        }\r\n        else {\r\n            throw new Error(\"Expected a string, number, or date but got \" + t);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Casts number, string or Date into a Date object.\r\n *\r\n * @param  {string | number | Date}   value  Input value\r\n * @return {Date}                            Date object\r\n * @deprecated Not used anywhere\r\n * @throws {Error}\r\n * @hidden\r\n * @deprecated\r\n */\r\n/*export function castDate(value: string | number | Date, formatter?: DateFormatter): Date {\r\n    if (typeof value === \"string\") {\r\n        if (formatter) {\r\n            return formatter.parse(value);\r\n        }\r\n        return new Date(value);\r\n\r\n    } else if (typeof value === \"number\") {\r\n        return new Date(value);\r\n\r\n    } else {\r\n        const t = getType(value);\r\n\r\n        if (t === \"[object Date]\") {\r\n            return value;\r\n\r\n        } else {\r\n            throw new Error(\"Expected a string, number, or date but got \" + t);\r\n        }\r\n    }\r\n}*/\r\n/**\r\n * ============================================================================\r\n * QUICK CONVERSION\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Converts any value into `boolean`.\r\n *\r\n * @param  {any}      value  Source value\r\n * @return {boolean}         `true` or `false`\r\n */\r\nexport function toBoolean(value) {\r\n    return value ? true : false;\r\n}\r\n/**\r\n * Converts any value into a `number`.\r\n *\r\n * @param  {any}     value  Source value\r\n * @return {number}         Number representation of value\r\n */\r\nexport function toNumber(value) {\r\n    if (hasValue(value) && !isNumber(value)) {\r\n        var converted = Number(value);\r\n        if (isNaN(converted) && isString(value) && value != \"\") {\r\n            return toNumber(value.replace(/[^0-9.\\-]+/g, ''));\r\n        }\r\n        return converted;\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Converts any value into a string (text).\r\n *\r\n * @param  {any}     value  Source value\r\n * @return {string}         String representation of the input\r\n */\r\nexport function toText(value) {\r\n    if (hasValue(value) && !isString(value)) {\r\n        if (isNumber(value)) {\r\n            return castString(value);\r\n        }\r\n        else if (isObject(value)) {\r\n            return value.toString();\r\n        }\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Converts any value to a number or [[Percent]].\r\n *\r\n * If the parameter is a string and contains \"%\", it will\r\n * convert it into a [[Percent]].\r\n *\r\n * Otherwise, it will convert into a number.\r\n *\r\n * @param {number | Percent}   value  Number or percent\r\n * @return {number | Percent}         Percent object\r\n */\r\nexport function toNumberOrPercent(value) {\r\n    if (!hasValue(value) || isNumber(value) || isPercent(value)) {\r\n        return value;\r\n    }\r\n    if (isString(value) && value.indexOf(\"%\") != -1) {\r\n        return percent(toNumber(value));\r\n    }\r\n    return toNumber(value);\r\n}\r\n/**\r\n * Checks if a variable has a value.\r\n *\r\n * @param {Optional<A> | null}  a  Input value\r\n * @returns                        Has value?\r\n */\r\nexport function hasValue(a) {\r\n    return a != null;\r\n}\r\n/**\r\n * Returns a value or throws an {Error} exception if the variable has not\r\n * value.\r\n *\r\n * @param {Optional<A> | null}  a  Input value\r\n * @returns                        Value\r\n */\r\nexport function getValue(a) {\r\n    if (hasValue(a)) {\r\n        return a;\r\n    }\r\n    else {\r\n        throw new Error(\"Value doesn't exist\");\r\n    }\r\n}\r\n/**\r\n * Returns a value, or returns the default value if it doesn't have a value.\r\n *\r\n * @param {Optional<A> | null}  a  Input value\r\n * @returns                        Value\r\n */\r\nexport function getValueDefault(a, defaultValue) {\r\n    if (hasValue(a)) {\r\n        return a;\r\n    }\r\n    else {\r\n        return defaultValue;\r\n    }\r\n}\r\n/**\r\n * ============================================================================\r\n * TYPE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Checks if parameter is `Date`.\r\n *\r\n * @param  {any}    value  Input value\r\n * @return {value}         Is Date?\r\n */\r\nexport function isDate(value) {\r\n    return getType(value) === \"[object Date]\";\r\n}\r\n/**\r\n * Checks if parameter is `string`.\r\n *\r\n * @param  {any}    value  Input value\r\n * @return {value}         Is string?\r\n */\r\nexport function isString(value) {\r\n    return typeof value === \"string\";\r\n}\r\n/**\r\n * Checks if parameter is `number`.\r\n *\r\n * @param  {any}    value  Input value\r\n * @return {value}         Is number?\r\n */\r\nexport function isNumber(value) {\r\n    return typeof value === \"number\" && Number(value) == value;\r\n}\r\n/**\r\n * Checks if parameter is `object`.\r\n *\r\n * @param  {any}    value  Input value\r\n * @return {value}         Is object?\r\n */\r\nexport function isObject(value) {\r\n    return typeof value === \"object\";\r\n}\r\n/**\r\n * Checks if parameter is `Array`.\r\n *\r\n * @param  {any}    value  Input value\r\n * @return {value}         Is Array?\r\n */\r\nexport function isArray(value) {\r\n    return Array.isArray(value);\r\n}\r\n//# sourceMappingURL=Type.js.map","/**\r\n * A collection of universal utility functions.\r\n */\r\nimport { Percent } from \"./Percent\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $string from \"./String\";\r\nimport * as $strings from \"./Strings\";\r\nimport * as $object from \"./Object\";\r\nimport * as $array from \"./Array\";\r\n/**\r\n * ============================================================================\r\n * MISC FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Copies all properties of one object to the other, omitting undefined.\r\n *\r\n * @param  {Object}   fromObject  Source object\r\n * @param  {Object}   toObject    Target object\r\n * @return {Object}               Updated target object\r\n * @todo Maybe consolidate with utils.copy?\r\n */\r\nexport function copyProperties(source, target) {\r\n    $object.each(source, function (key, value) {\r\n        // only if value is set\r\n        if ($type.hasValue(value)) {\r\n            target[key] = value;\r\n        }\r\n    });\r\n    return target;\r\n}\r\n/**\r\n * Copies all properties of one object to the other, omitting undefined, but only if property in target object doesn't have a value set.\r\n *\r\n * @param  {Object}   fromObject  Source object\r\n * @param  {Object}   toObject    Target object\r\n * @return {Object}               Updated target object\r\n * @todo Maybe consolidate with utils.copy?\r\n */\r\nexport function softCopyProperties(source, target) {\r\n    $object.each(source, function (key, value) {\r\n        // only if value is set\r\n        if ($type.hasValue(value) && !($type.hasValue(target[key]))) {\r\n            target[key] = value;\r\n        }\r\n    });\r\n    return target;\r\n}\r\n/**\r\n * Copies all properties of one object to the other.\r\n *\r\n * @param  {Object}  source     Source object\r\n * @param  {Object}  recipient  Target object\r\n * @return {Object}             Updated target object\r\n */\r\nexport function copy(source, target) {\r\n    $object.each(source, function (key, value) {\r\n        target[key] = value;\r\n    });\r\n    return target;\r\n}\r\n/**\r\n * Checks if value is not empty (undefined or zero-length string).\r\n *\r\n * @param  {Optional<string>}  value  Value to check\r\n * @return {boolean}                  `true` if value is not \"empty\"\r\n */\r\nexport function isNotEmpty(value) {\r\n    return $type.hasValue(value) && (value.toString() !== \"\");\r\n}\r\n/**\r\n * [relativeToValue description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {$type.Optional<number | Percent>}  percent  [description]\r\n * @param  {number}                            full     [description]\r\n * @return {number}                                     [description]\r\n */\r\nexport function relativeToValue(percent, full) {\r\n    if ($type.isNumber(percent)) {\r\n        return percent;\r\n    }\r\n    else if (percent != null && $type.isNumber(percent.value) && $type.isNumber(full)) {\r\n        return full * percent.value;\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\n/**\r\n * [relativeRadiusToValue description]\r\n *\r\n * Differs from relativeToValue so that if a value is negative, it subtracts\r\n * it from full value.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {$type.Optional<number | Percent>}  percent             [description]\r\n * @param  {number}                            full                [description]\r\n * @param  {boolean}                           subtractIfNegative  [description]\r\n * @return {number}                                                [description]\r\n */\r\nexport function relativeRadiusToValue(percent, full, subtractIfNegative) {\r\n    var value;\r\n    if ($type.isNumber(percent)) {\r\n        value = percent;\r\n        if (value < 0) {\r\n            if (subtractIfNegative) {\r\n                value = full + value;\r\n            }\r\n            else {\r\n                value = full - value;\r\n            }\r\n        }\r\n    }\r\n    else if (percent != null && $type.isNumber(percent.value)) {\r\n        value = full * percent.value;\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * [valueToRelative description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param  {number | Percent}  value  [description]\r\n * @param  {number}            full   [description]\r\n * @return {number}                   [description]\r\n */\r\nexport function valueToRelative(value, full) {\r\n    if (value instanceof Percent) {\r\n        return value.value;\r\n    }\r\n    else {\r\n        return value / full;\r\n    }\r\n}\r\n/**\r\n * Returns pixel ratio of the current screen (used on retina displays).\r\n *\r\n * @return {number} Pixel ratio\r\n */\r\nexport function getPixelRatio() {\r\n    var ratio = window.devicePixelRatio || 1;\r\n    return ratio;\r\n}\r\n/**\r\n * ============================================================================\r\n * STRING FORMATTING FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Converts camelCased text to dashed version:\r\n * (\"thisIsString\" > \"this-is-string\")\r\n *\r\n * @param  {string}  str  Input\r\n * @return {string}       Output\r\n */\r\nexport function camelToDashed(str) {\r\n    return str.replace(/\\W+/g, '-').replace(/([a-z\\d])([A-Z])/g, '$1-$2').toLowerCase();\r\n}\r\n/**\r\n * Converts tring to uppercase.\r\n *\r\n * @param  {string}  str  String to convert\r\n * @return {string}       uppercased string\r\n * @todo Maybe make it better\r\n */\r\nexport function capitalize(str) {\r\n    var arr = str.split(\"\");\r\n    arr[0] = arr[0].toUpperCase();\r\n    return arr.join(\"\");\r\n}\r\n/**\r\n * Converts any value into its string representation.\r\n *\r\n * @param  {any}     value  Value\r\n * @return {string}         String represantation of the value\r\n */\r\nexport function stringify(value) {\r\n    return JSON.stringify(value);\r\n}\r\n/**\r\n * Escapes string so it can safely be used in a Regex.\r\n *\r\n * @param  {string}  value  Unsescaped string\r\n * @return {string}         Escaped string\r\n */\r\nexport function escapeForRgex(value) {\r\n    return value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\r\n}\r\n/**\r\n * Splits the text into multiple lines, respecting maximum character count.\r\n * Prioretizes splitting on spaces and punctuation. Falls back on splitting\r\n * mid-word if there's no other option.\r\n *\r\n * @param  {string}    text      Text\r\n * @param  {number}    maxChars  Maximum number of characters per line\r\n * @return {string[]}            An array of split text\r\n */\r\nexport function splitTextByCharCount(text, maxChars, fullWords, rtl) {\r\n    // Maybe the text fits?\r\n    if (text.length <= maxChars) {\r\n        return [text];\r\n    }\r\n    // Init result\r\n    var res = [];\r\n    // Split by words or by charts\r\n    if (fullWords) {\r\n        // Split by words first\r\n        // Split by spacing\r\n        var currentIndex = -1;\r\n        var tmpText = text.replace(/([,;:!?\\\\\\/\\.\\s]+)/g, $strings.PLACEHOLDER + \"$1\" + $strings.PLACEHOLDER);\r\n        var words = tmpText.split($strings.PLACEHOLDER);\r\n        // Process each word\r\n        for (var i = 0; i < words.length; i++) {\r\n            // Get word and symbol count\r\n            var word = words[i];\r\n            var wordLength = word.length;\r\n            // Ignore empty words\r\n            if (wordLength === 0) {\r\n                continue;\r\n            }\r\n            // Check word length\r\n            //if ((wordLength > maxChars) && fullWords !== true) {\r\n            if (wordLength > maxChars) {\r\n                // A single word is longer than allowed symbol count\r\n                // Break it up\r\n                if (rtl) {\r\n                    word = reverseString(word);\r\n                }\r\n                var parts = word.match(new RegExp(\".{1,\" + maxChars + \"}\", \"g\"));\r\n                // TODO is this correct ?\r\n                if (parts) {\r\n                    if (rtl) {\r\n                        for (var x = 0; x < parts.length; x++) {\r\n                            parts[x] = reverseString(parts[x]);\r\n                        }\r\n                        //parts.reverse();\r\n                    }\r\n                    res = res.concat(parts);\r\n                }\r\n            }\r\n            else {\r\n                // Init current line\r\n                if (currentIndex === -1) {\r\n                    res.push(\"\");\r\n                    currentIndex = 0;\r\n                }\r\n                // Check if we need to break into another line\r\n                if (((res[currentIndex].length + wordLength + 1) > maxChars) && res[currentIndex] !== \"\") {\r\n                    res.push(\"\");\r\n                    currentIndex++;\r\n                }\r\n                // Add word\r\n                res[currentIndex] += word;\r\n            }\r\n            // Update index\r\n            currentIndex = res.length - 1;\r\n        }\r\n    }\r\n    else {\r\n        // Splitting by anywhere (living la vida facil)\r\n        var parts = text.match(new RegExp(\".{1,\" + maxChars + \"}\", \"g\"));\r\n        if (parts) {\r\n            if (rtl) {\r\n                for (var x = 0; x < parts.length; x++) {\r\n                    parts[x] = reverseString(parts[x]);\r\n                }\r\n            }\r\n            res = parts;\r\n        }\r\n    }\r\n    // Do we have only one word that does not fit?\r\n    // Since fullWords is set and we can't split the word, we end up with empty\r\n    // set.\r\n    if (res.length == 1 && fullWords && (res[0].length > maxChars)) {\r\n        res = [];\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Truncates the text to certain character count.\r\n *\r\n * Will add ellipsis if the string is truncated. Optionally, can truncate on\r\n * full words only.\r\n *\r\n * For RTL support, pass in the fifth parameter as `true`.\r\n *\r\n * @param  {string}   text       Input text\r\n * @param  {number}   maxChars   Maximum character count of output\r\n * @param  {string}   ellipsis   Ellipsis string, i.e. \"...\"\r\n * @param  {boolean}  fullWords  If `true`, will not break mid-word, unless there's a single word and it does not with into `maxChars`\r\n * @param  {boolean}  rtl        Is this an RTL text?\r\n * @return {string}              Truncated text\r\n */\r\nexport function truncateWithEllipsis(text, maxChars, ellipsis, fullWords, rtl) {\r\n    if (text.length <= maxChars) {\r\n        return text;\r\n    }\r\n    // Calc max chars\r\n    maxChars -= ellipsis.length;\r\n    if (maxChars < 1) {\r\n        maxChars = 1;\r\n        //ellipsis = \"\";\r\n    }\r\n    // Get lines\r\n    var lines = splitTextByCharCount(text, maxChars, fullWords, rtl);\r\n    // Use first line\r\n    return (lines[0] || \"\") + ellipsis;\r\n}\r\n/**\r\n * Removes whitespace from beginning and end of the string.\r\n *\r\n * @param  {string}  str  Input\r\n * @return {string}       Output\r\n */\r\nexport function trim(str) {\r\n    return str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, \"\");\r\n}\r\n;\r\n/**\r\n * Removes whitespace from end of the string.\r\n *\r\n * @param  {string}  str  Input\r\n * @return {string}       Output\r\n */\r\nexport function rtrim(str) {\r\n    return str.replace(/[\\s\\uFEFF\\xA0]+$/g, \"\");\r\n}\r\n;\r\n/**\r\n * Removes whitespace from beginning of the string.\r\n *\r\n * @param  {string}  str  Input\r\n * @return {string}       Output\r\n */\r\nexport function ltrim(str) {\r\n    return str.replace(/^[\\s\\uFEFF\\xA0]+/g, \"\");\r\n}\r\n;\r\n/**\r\n * Reverses string.\r\n *\r\n * @param  {string}  str  Input\r\n * @return {string}       Output\r\n */\r\nexport function reverseString(str) {\r\n    return str.split(\"\").reverse().join(\"\");\r\n}\r\n/**\r\n * Removes quotes from the string.\r\n *\r\n * @param  {string}  str  Input\r\n * @return {string}       Output\r\n */\r\nexport function unquote(str) {\r\n    var res = str.trim();\r\n    res = str.replace(/^'(.*)'$/, \"$1\");\r\n    if (res == str) {\r\n        res = str.replace(/^\"(.*)\"$/, \"$1\");\r\n    }\r\n    return res;\r\n}\r\n/**\r\n * Pads a string with additional characters to certain length.\r\n *\r\n * @param  {any}            value  A numeric value\r\n * @param  {number = 0}     len    Result string length in characters\r\n * @param  {string = \"0\"}   char   A character to use for padding\r\n * @return {string}                Padded value as string\r\n */\r\nexport function padString(value, len, char) {\r\n    if (len === void 0) { len = 0; }\r\n    if (char === void 0) { char = \"0\"; }\r\n    if (typeof value !== \"string\")\r\n        value = value.toString();\r\n    return len > value.length ? Array(len - value.length + 1).join(char) + value : value;\r\n}\r\n/**\r\n * Tries to determine format type.\r\n *\r\n * @ignore Exclude from docs\r\n * @param {string}   format  Format string\r\n * @return {string}          Format type (\"string\" | \"number\" | \"date\" | \"duration\")\r\n */\r\nexport function getFormat(format) {\r\n    // Undefined?\r\n    if (typeof format === \"undefined\")\r\n        return $strings.STRING;\r\n    // Cleanup and lowercase format\r\n    format = format.toLowerCase().replace(/^\\[[^\\]]*\\]/, \"\");\r\n    // Remove style tags\r\n    format = format.replace(/\\[[^\\]]+\\]/, \"\");\r\n    // Trim\r\n    format = format.trim();\r\n    // Check for any explicit format hints (i.e. /Date)\r\n    var hints = format.match(/\\/(date|number|duration)$/);\r\n    if (hints) {\r\n        return hints[1];\r\n    }\r\n    // Check for explicit hints\r\n    if (format === $strings.NUMBER) {\r\n        return $strings.NUMBER;\r\n    }\r\n    if (format === $strings.DATE) {\r\n        return $strings.DATE;\r\n    }\r\n    if (format === $strings.DURATION) {\r\n        return $strings.DURATION;\r\n    }\r\n    // Detect number formatting symbols\r\n    if (format.match(/[#0]/)) {\r\n        return $strings.NUMBER;\r\n    }\r\n    // Detect date formatting symbols\r\n    if (format.match(/[ymwdhnsqaxkzgtei]/)) {\r\n        return $strings.DATE;\r\n    }\r\n    // Nothing? Let's display as string\r\n    return $strings.STRING;\r\n}\r\n/**\r\n * Cleans up format:\r\n * * Strips out formatter hints\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {string}  format  Format\r\n * @return {string}          Cleaned format\r\n */\r\nexport function cleanFormat(format) {\r\n    return format.replace(/\\/(date|number|duration)$/i, \"\");\r\n}\r\n/**\r\n * Strips all tags from the string.\r\n *\r\n * @param  {string}  text  Source string\r\n * @return {string}        String without tags\r\n */\r\nexport function stripTags(text) {\r\n    return text ? text.replace(/<[^>]*>/g, \"\") : text;\r\n}\r\n/**\r\n * Removes new lines and tags from a string.\r\n *\r\n * @param  {string}  text  String to conver\r\n * @return {string}        Converted string\r\n */\r\nexport function plainText(text) {\r\n    return text ? stripTags(text.replace(/[\\n\\r]+/g, \". \")) : text;\r\n}\r\n/**\r\n * ============================================================================\r\n * TYPE CONVERSION FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Converts numeric value into string. Deals with large or small numbers that\r\n * would otherwise use exponents.\r\n *\r\n * @param  {number}  value  Numeric value\r\n * @return {string}         Numeric value as string\r\n */\r\nexport function numberToString(value) {\r\n    // TODO handle Infinity and -Infinity\r\n    if ($type.isNaN(value)) {\r\n        return \"NaN\";\r\n    }\r\n    if (value === Infinity) {\r\n        return \"Infinity\";\r\n    }\r\n    if (value === -Infinity) {\r\n        return \"-Infinity\";\r\n    }\r\n    // Negative 0\r\n    if ((value === 0) && (1 / value === -Infinity)) {\r\n        return \"-0\";\r\n    }\r\n    // Preserve negative and deal with absoute values\r\n    var negative = value < 0;\r\n    value = Math.abs(value);\r\n    // TODO test this\r\n    var parsed = $type.getValue(/^([0-9]+)(?:\\.([0-9]+))?(?:e[\\+\\-]([0-9]+))?$/.exec(\"\" + value));\r\n    var digits = parsed[1];\r\n    var decimals = parsed[2] || \"\";\r\n    var res;\r\n    // Leave the nummber as it is if it does not use exponents\r\n    if (parsed[3] == null) {\r\n        res = (decimals === \"\" ? digits : digits + \".\" + decimals);\r\n    }\r\n    else {\r\n        var exponent = +parsed[3];\r\n        // Deal with decimals\r\n        if (value < 1) {\r\n            var zeros = exponent - 1;\r\n            res = \"0.\" + $string.repeat(\"0\", zeros) + digits + decimals;\r\n            // Deal with integers\r\n        }\r\n        else {\r\n            var zeros = exponent - decimals.length;\r\n            if (zeros === 0) {\r\n                res = digits + decimals;\r\n            }\r\n            else if (zeros < 0) {\r\n                res = digits + decimals.slice(0, zeros) + \".\" + decimals.slice(zeros);\r\n            }\r\n            else {\r\n                res = digits + decimals + $string.repeat(\"0\", zeros);\r\n            }\r\n        }\r\n    }\r\n    return negative ? \"-\" + res : res;\r\n}\r\n/**\r\n * Converts anything to Date object.\r\n *\r\n * @param  {Date | number | string}  value  A value of any type\r\n * @return {Date}                           Date object representing a value\r\n */\r\nexport function anyToDate(value) {\r\n    if ($type.isDate(value)) {\r\n        // TODO maybe don't create a new Date ?\r\n        return new Date(value);\r\n    }\r\n    else if ($type.isNumber(value)) {\r\n        return new Date(value);\r\n    }\r\n    else {\r\n        // Try converting to number (assuming timestamp)\r\n        var num = Number(value);\r\n        if (!$type.isNumber(num)) {\r\n            return new Date(value);\r\n        }\r\n        else {\r\n            return new Date(num);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Tries converting any value to a number.\r\n *\r\n * @param  {any}     value  Source value\r\n * @return {number}         Number\r\n */\r\nexport function anyToNumber(value) {\r\n    if ($type.isDate(value)) {\r\n        return value.getTime();\r\n    }\r\n    else if ($type.isNumber(value)) {\r\n        return value;\r\n    }\r\n    else if ($type.isString(value)) {\r\n        // Try converting to number (assuming timestamp)\r\n        var num = Number(value);\r\n        if (!$type.isNumber(num)) {\r\n            // Failing\r\n            return undefined;\r\n        }\r\n        else {\r\n            return num;\r\n        }\r\n    }\r\n}\r\n/**\r\n * ============================================================================\r\n * DATE-RELATED FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Returns a year day.\r\n *\r\n * @param  {Date}     date  Date\r\n * @param  {boolean}  utc   Assume UTC dates?\r\n * @return {number}         Year day\r\n * @todo Account for UTC\r\n */\r\nexport function getYearDay(date, utc) {\r\n    if (utc === void 0) { utc = false; }\r\n    var first = new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);\r\n    return Math.floor((date.getTime() - first.getTime()) / 86400000) + 1;\r\n}\r\n/**\r\n * Returns week number for a given date.\r\n *\r\n * @param  {Date}     date  Date\r\n * @param  {boolean}  utc   Assume UTC dates?\r\n * @return {number}         Week number\r\n * @todo Account for UTC\r\n */\r\nexport function getWeek(date, utc) {\r\n    if (utc === void 0) { utc = false; }\r\n    var day = getYearDay(date, utc) - 1;\r\n    var week = Math.floor((day - (date.getDay() || 7) + 10) / 7);\r\n    if (week === 0) {\r\n        week = 53;\r\n    }\r\n    else if (week === 53) {\r\n        week = 1;\r\n    }\r\n    return week;\r\n}\r\n/**\r\n * Returns a week number in the month.\r\n *\r\n * @param  {Date}     date  Source Date\r\n * @param  {boolean}  utc   Assume UTC dates?\r\n * @return {number}         Week number in month\r\n */\r\nexport function getMonthWeek(date, utc) {\r\n    if (utc === void 0) { utc = false; }\r\n    var firstWeek = getWeek(new Date(date.getFullYear(), date.getMonth(), 1), utc);\r\n    var currentWeek = getWeek(date, utc);\r\n    if (currentWeek == 1) {\r\n        currentWeek = 53;\r\n    }\r\n    return currentWeek - firstWeek + 1;\r\n}\r\n/**\r\n * Returns a year day out of the given week number.\r\n *\r\n * @param  {number}   week     Week\r\n * @param  {number}   year     Year\r\n * @param  {number}   weekday  Weekday\r\n * @param  {boolean}  utc      Assume UTC dates\r\n * @return {number}            Day in a year\r\n */\r\nexport function getDayFromWeek(week, year, weekday, utc) {\r\n    if (weekday === void 0) { weekday = 1; }\r\n    if (utc === void 0) { utc = false; }\r\n    var date = new Date(year, 0, 4, 0, 0, 0, 0);\r\n    if (utc) {\r\n        date.setUTCFullYear(year);\r\n    }\r\n    var day = week * 7 + weekday - ((date.getDay() || 7) + 3);\r\n    return day;\r\n}\r\n/**\r\n * Returns 12-hour representation out of the 24-hour hours.\r\n *\r\n * @param  {number}  hours  24-hour number\r\n * @return {number}         12-hour number\r\n */\r\nexport function get12Hours(hours, base) {\r\n    if (hours > 12) {\r\n        hours -= 12;\r\n    }\r\n    else if (hours === 0) {\r\n        hours = 12;\r\n    }\r\n    return $type.hasValue(base) ? hours + (base - 1) : hours;\r\n}\r\n/**\r\n * Returns a string name of the tome zone.\r\n *\r\n * @param  {Date}     date     Date object\r\n * @param  {boolean}  long     Should return long (\"Pacific Standard Time\") or short abbreviation (\"PST\")\r\n * @param  {boolean}  savings  Include information if it's in daylight savings mode\r\n * @param  {boolean}  utc      Assume UTC dates\r\n * @return {string}            Time zone name\r\n */\r\nexport function getTimeZone(date, long, savings, utc) {\r\n    if (long === void 0) { long = false; }\r\n    if (savings === void 0) { savings = false; }\r\n    if (utc === void 0) { utc = false; }\r\n    if (utc) {\r\n        return long ? \"Coordinated Universal Time\" : \"UTC\";\r\n    }\r\n    var wotz = date.toLocaleString(\"UTC\");\r\n    var wtz = date.toLocaleString(\"UTC\", { timeZoneName: long ? \"long\" : \"short\" }).substr(wotz.length);\r\n    //wtz = wtz.replace(/[+-]+[0-9]+$/, \"\");\r\n    if (savings === false) {\r\n        wtz = wtz.replace(/ (standard|daylight|summer|winter) /i, \" \");\r\n    }\r\n    return wtz;\r\n}\r\n/**\r\n * ============================================================================\r\n * NUMBER-RELATED FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Returns a random number between `from` and `to`.\r\n *\r\n * @param  {number}  from  From number\r\n * @param  {number}  to    To number\r\n * @return {number}        Random number\r\n */\r\nexport function random(from, to) {\r\n    return Math.floor(Math.random() * to) + from;\r\n}\r\n/**\r\n * Fits the number into specific `min` and `max` bounds.\r\n *\r\n * @param  {number}  value  Input value\r\n * @param  {number}  min    Minimum value\r\n * @param  {number}  max    Maximum value\r\n * @return {number}         Possibly adjusted value\r\n */\r\nexport function fitNumber(value, min, max) {\r\n    if (value > max) {\r\n        return max;\r\n    }\r\n    else if (value < min) {\r\n        return min;\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Fits the number into specific `min` and `max` bounds.\r\n *\r\n * If the value is does not fit withing specified range, it \"wraps\" around the\r\n * values.\r\n *\r\n * For example, if we have input value 10 with min set at 1 and max set at 8,\r\n * the value will not fit. The remainder that does not fit (2) will be added\r\n * to `min`, resulting in 3.\r\n *\r\n * The output of regular `fitNumber()` would return 8 instead.\r\n *\r\n * @param  {number}  value  Input value\r\n * @param  {number}  min    Minimum value\r\n * @param  {number}  max    Maximum value\r\n * @return {number}         Possibly adjusted value\r\n */\r\nexport function fitNumberRelative(value, min, max) {\r\n    var gap = max - min;\r\n    if (value > max) {\r\n        value = min + (value - gap * Math.floor(value / gap));\r\n    }\r\n    else if (value < min) {\r\n        value = min + (value - gap * Math.floor(value / gap));\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * ============================================================================\r\n * SPRITE-RELATED FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Converts SVG element coordinates to coordinates within specific [[Sprite]].\r\n *\r\n * @param  {IPoint}  point   SVG coordinates\r\n * @param  {Sprite}  sprite  Sprite\r\n * @return {IPoint}         Sprite coordinates\r\n */\r\nexport function svgPointToSprite(point, sprite) {\r\n    var x = point.x;\r\n    var y = point.y;\r\n    var sprites = [];\r\n    if (sprite) {\r\n        while ($type.hasValue(sprite.parent)) {\r\n            sprites.push(sprite);\r\n            sprite = sprite.parent;\r\n        }\r\n        sprites.reverse();\r\n        for (var i = 0; i < sprites.length; i++) {\r\n            var sprite_1 = sprites[i];\r\n            var angle = sprite_1.rotation;\r\n            var relativeX = x - sprite_1.pixelX - sprite_1.ex;\r\n            var relativeY = y - sprite_1.pixelY - sprite_1.ey;\r\n            if (sprite_1.dx) {\r\n                x -= sprite_1.dx;\r\n            }\r\n            if (sprite_1.dy) {\r\n                y -= sprite_1.dy;\r\n            }\r\n            x = ($math.cos(-angle) * relativeX - $math.sin(-angle) * relativeY) / sprite_1.scale - sprite_1.pixelPaddingLeft;\r\n            y = ($math.cos(-angle) * relativeY + $math.sin(-angle) * relativeX) / sprite_1.scale - sprite_1.pixelPaddingTop;\r\n        }\r\n    }\r\n    return { x: x, y: y };\r\n}\r\n/**\r\n * Converts coordinates within [[Sprite]] to coordinates relative to the whole\r\n * SVG element.\r\n *\r\n * @param  {IPoint}  point   Sprite coordinates\r\n * @param  {Sprite}  sprite  Sprite\r\n * @return {IPoint}          SVG coordinates\r\n */\r\nexport function spritePointToSvg(point, sprite) {\r\n    var x = point.x;\r\n    var y = point.y;\r\n    if (sprite) {\r\n        while ($type.hasValue(sprite.parent)) {\r\n            var angle = sprite.rotation;\r\n            x += sprite.pixelPaddingLeft + sprite.ex;\r\n            y += sprite.pixelPaddingTop + sprite.ey;\r\n            if (sprite.dx) {\r\n                x += sprite.dx;\r\n            }\r\n            if (sprite.dy) {\r\n                y += sprite.dy;\r\n            }\r\n            var relativeX = sprite.pixelX + ((x * $math.cos(angle) - y * $math.sin(angle))) * sprite.scale;\r\n            var relativeY = sprite.pixelY + ((x * $math.sin(angle) + y * $math.cos(angle))) * sprite.scale;\r\n            x = relativeX;\r\n            y = relativeY;\r\n            sprite = sprite.parent;\r\n        }\r\n    }\r\n    return { x: x, y: y };\r\n}\r\n/**\r\n * Converts coordinates of one sprite to another.\r\n *\r\n * @param  {IPoint}  point   Sprite coordinates\r\n * @param  {Sprite}  sprite  Sprite\r\n * @param  {Sprite}  toSprite  Sprite\r\n * @return {IPoint}  converted coordinates\r\n */\r\nexport function spritePointToSprite(point, sprite, toSprite) {\r\n    return svgPointToSprite(spritePointToSvg(point, sprite), toSprite);\r\n}\r\n/**\r\n * Converts a rectangle expressed in SVG element coordinates to coordinates\r\n * within specific [[Sprite]].\r\n *\r\n * @param  {IRectangle}  rect    SVG rectangle\r\n * @param  {Sprite}      sprite  Sprite\r\n * @return {IRectangle}          Sprite rectangle\r\n */\r\nexport function svgRectToSprite(rect, sprite) {\r\n    var p1 = svgPointToSprite(rect, sprite);\r\n    var p2 = svgPointToSprite({ x: rect.x + rect.width, y: rect.y + rect.height }, sprite);\r\n    return { x: p1.x, y: p1.y, width: p2.x - p1.x, height: p2.y - p1.y };\r\n}\r\n/**\r\n * Converts a rectangle expressed in [[Sprite]] coordinates to SVG coordinates.\r\n *\r\n * @param  {IRectangle}  rect    Sprite rectangle\r\n * @param  {Sprite}      sprite  Sprite\r\n * @return {IRectangle}          SVG rectangle\r\n */\r\nexport function spriteRectToSvg(rect, sprite) {\r\n    var p1 = spritePointToSvg(rect, sprite);\r\n    var p2 = spritePointToSvg({ x: rect.x + rect.width, y: rect.y + rect.height }, sprite);\r\n    return { x: p1.x, y: p1.y, width: p2.x - p1.x, height: p2.y - p1.y };\r\n}\r\n/**\r\n * Converts global document-wide coordinates to coordinates within SVG element.\r\n *\r\n * @param  {IPoint}       point         Global coordinates\r\n * @param  {HTMLElement}  svgContainer  SVG element\r\n * @return {IPoint}                     SVG coordinates\r\n */\r\nexport function documentPointToSvg(point, svgContainer, cssScale) {\r\n    var bbox = svgContainer.getBoundingClientRect();\r\n    if (!$type.isNumber(cssScale)) {\r\n        cssScale = 1;\r\n    }\r\n    return {\r\n        \"x\": (point.x - bbox.left) / cssScale,\r\n        \"y\": (point.y - bbox.top) / cssScale\r\n    };\r\n}\r\n/**\r\n * Converts SVG coordinates to global document-wide coordinates.\r\n *\r\n * @param  {IPoint}       point         SVG coordinates\r\n * @param  {HTMLElement}  svgContainer  SVG element\r\n * @return {IPoint}                     Global coordinates\r\n */\r\nexport function svgPointToDocument(point, svgContainer) {\r\n    var bbox = svgContainer.getBoundingClientRect();\r\n    return {\r\n        \"x\": point.x + bbox.left,\r\n        \"y\": point.y + bbox.top\r\n    };\r\n}\r\n/**\r\n * Converts document-wide global coordinates to coordinates within specific\r\n * [[Sprite]].\r\n *\r\n * @param  {IPoint}  point   Global coordinates\r\n * @param  {Sprite}  sprite  Sprite\r\n * @return {IPoint}          Sprite coordinates\r\n */\r\nexport function documentPointToSprite(point, sprite) {\r\n    if (sprite) {\r\n        var svgPoint = documentPointToSvg(point, $type.getValue(sprite.htmlContainer), sprite.svgContainer.cssScale);\r\n        return svgPointToSprite(svgPoint, sprite);\r\n    }\r\n    else {\r\n        return point;\r\n    }\r\n}\r\n/**\r\n * Converts coordinates within [[Sprite]] to global document coordinates.\r\n *\r\n * @param  {IPoint}  point   Sprite coordinates\r\n * @param  {Sprite}  sprite  Sprite\r\n * @return {IPoint}          Global coordinates\r\n */\r\nexport function spritePointToDocument(point, sprite) {\r\n    if (sprite) {\r\n        var svgPoint = spritePointToSvg(point, sprite);\r\n        return svgPointToDocument(svgPoint, $type.getValue(sprite.htmlContainer));\r\n    }\r\n    else {\r\n        return point;\r\n    }\r\n}\r\n/**\r\n * ============================================================================\r\n * DEPRECATED FUNCTIONS\r\n * @todo Review and remove\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Returns element's width.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {HTMLElement}  element  Element\r\n * @return {number}                Width (px)\r\n * @deprecated Not used anywhere\r\n */\r\nexport function width(element) {\r\n    return element.clientWidth;\r\n}\r\n/**\r\n * Returns element's height.\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {HTMLElement}  element  Element\r\n * @return {number}                Height (px)\r\n * @deprecated Not used anywhere\r\n */\r\nexport function height(element) {\r\n    return element.clientHeight;\r\n}\r\n/**\r\n * Returns number of decimals\r\n *\r\n * @ignore Exclude from docs\r\n * @param  {number}  number  Input number\r\n * @return {number}          Number of decimals\r\n */\r\nexport function decimalPlaces(number) {\r\n    var match = ('' + number).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\r\n    if (!match) {\r\n        return 0;\r\n    }\r\n    return Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));\r\n}\r\nvar urlRegexp = /^([a-zA-Z][a-zA-Z0-9\\+\\.\\-]*:)?(?:(\\/\\/)([^\\@]+\\@)?([^\\/\\?\\#\\:]*)(\\:[0-9]+)?)?([^\\?\\#]*)(\\?[^\\#]*)?(\\#.*)?$/;\r\n/**\r\n * Parses a URL\r\n *\r\n * @ignore Exclude from docs\r\n */\r\n// TODO test this\r\nexport function parseUrl(url) {\r\n    var match = urlRegexp.exec(url);\r\n    return {\r\n        protocol: (match && match[1]) || \"\",\r\n        separator: (match && match[2]) || \"\",\r\n        authority: (match && match[3]) || \"\",\r\n        domain: (match && match[4]) || \"\",\r\n        port: (match && match[5]) || \"\",\r\n        path: (match && match[6]) || \"\",\r\n        query: (match && match[7]) || \"\",\r\n        hash: (match && match[8]) || \"\"\r\n    };\r\n}\r\n/**\r\n * Serializes a Url into a string\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport function serializeUrl(url) {\r\n    return url.protocol + url.separator + url.authority + url.domain + url.port + url.path + url.query + url.hash;\r\n}\r\n/**\r\n * Checks whether a Url is relative or not\r\n *\r\n * @ignore Exclude from docs\r\n */\r\n// TODO is this correct ?\r\nfunction isRelativeUrl(url) {\r\n    return url.protocol === \"\" &&\r\n        url.separator === \"\" &&\r\n        url.authority === \"\" &&\r\n        url.domain === \"\" &&\r\n        url.port === \"\";\r\n}\r\n/**\r\n * Joins together two URLs, resolving relative URLs correctly\r\n *\r\n * @ignore Exclude from docs\r\n */\r\n// TODO test this\r\nexport function joinUrl(left, right) {\r\n    var parsedLeft = parseUrl(left);\r\n    var parsedRight = parseUrl(right);\r\n    if (isRelativeUrl(parsedLeft)) {\r\n        throw new Error(\"Left URL is not absolute\");\r\n    }\r\n    if (isRelativeUrl(parsedRight)) {\r\n        // TODO is this correct ?\r\n        if (parsedRight.path !== \"\") {\r\n            if (parsedRight.path[0] === \"/\") {\r\n                parsedLeft.path = parsedRight.path;\r\n                // TODO is this correct ?\r\n            }\r\n            else {\r\n                var leftPath = parsedLeft.path.split(/\\//);\r\n                var rightPath = parsedRight.path.split(/\\//);\r\n                // TODO is this correct ?\r\n                if (leftPath.length === 0) {\r\n                    if (rightPath.length !== 0) {\r\n                        leftPath.push(\"\");\r\n                    }\r\n                }\r\n                else if (leftPath.length > 1) {\r\n                    leftPath.pop();\r\n                }\r\n                $array.pushAll(leftPath, rightPath);\r\n                parsedLeft.path = leftPath.join(\"/\");\r\n                if (parsedLeft.path !== \"\" && parsedLeft.path[0] !== \"/\") {\r\n                    throw new Error(\"URL path must start with /\");\r\n                }\r\n            }\r\n        }\r\n        // TODO is this correct ?\r\n        parsedLeft.query = parsedRight.query;\r\n        parsedLeft.hash = parsedRight.hash;\r\n        return serializeUrl(parsedLeft);\r\n    }\r\n    else {\r\n        return serializeUrl(parsedRight);\r\n    }\r\n}\r\n//# sourceMappingURL=Utils.js.map","/**\r\n * This module defines a [[Validatable]] class which can be used by all\r\n * non-[[Sprite]] classes to use system beats to revalidate themselves.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObjectEvents } from \"../Base\";\r\nimport { registry } from \"../Registry\";\r\n/**\r\n * This module defines a [[Validatable]] class which can be used by all\r\n * non-[[Sprite]] classes to use system update cycle to revalidate themselves.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nvar Validatable = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Validatable, _super);\r\n    function Validatable() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /**\r\n         * Is invalid and should be revalidated?\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        _this._invalid = false;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Invalidates the element, so that it can re-validate/redraw itself in the\r\n     * next cycle.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Validatable.prototype.invalidate = function () {\r\n        if (this._invalid === false) {\r\n            this._invalid = true;\r\n            registry.events.on(\"exitframe\", this.validate, this);\r\n        }\r\n    };\r\n    /**\r\n     * Validates itself.\r\n     *\r\n     * Most probably the extending class will have an overriding `validate()`\r\n     * method which will do actual work, as well as call this method using\r\n     * `super.validate()`.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Validatable.prototype.validate = function () {\r\n        if (this._invalid === true) {\r\n            this._invalid = false;\r\n            registry.events.off(\"exitframe\", this.validate, this);\r\n        }\r\n    };\r\n    return Validatable;\r\n}(BaseObjectEvents));\r\nexport { Validatable };\r\n//# sourceMappingURL=Validatable.js.map","import { SpriteState } from \"../core/SpriteState\";\r\nimport { Component } from \"../core/Component\";\r\nimport { Scrollbar } from \"../core/elements/Scrollbar\";\r\nimport { Tooltip } from \"../core/elements/Tooltip\";\r\nimport { Series } from \"../charts/series/Series\";\r\nimport { PercentSeries } from \"../charts/series/PercentSeries\";\r\nimport { SankeyDiagram } from \"../charts/types/SankeyDiagram\";\r\nimport { FunnelSeries } from \"../charts/series/FunnelSeries\";\r\nimport { MapSeries } from \"../charts/map/MapSeries\";\r\nimport { FunnelSlice } from \"../charts/elements/FunnelSlice\";\r\nimport { Column } from \"../charts/elements/Column\";\r\nimport { Column3D } from \"../charts/elements/Column3D\";\r\nimport { Slice } from \"../core/elements/Slice\";\r\nimport { Preloader } from \"../core/elements/Preloader\";\r\nimport { Chart } from \"../charts/Chart\";\r\nvar theme = function (object) {\r\n    if (object instanceof SpriteState) {\r\n        object.transitionDuration = 400;\r\n    }\r\n    if (object instanceof Component) {\r\n        object.rangeChangeDuration = 700;\r\n        object.interpolationDuration = 700;\r\n        object.sequencedInterpolation = false;\r\n        if (object instanceof SankeyDiagram) {\r\n            object.sequencedInterpolation = true;\r\n        }\r\n        if (object instanceof FunnelSeries) {\r\n            object.sequencedInterpolation = true;\r\n        }\r\n    }\r\n    if (object instanceof Chart) {\r\n        object.defaultState.transitionDuration = 2000;\r\n        object.hiddenState.transitionDuration = 1000;\r\n    }\r\n    if (object instanceof Tooltip) {\r\n        object.animationDuration = 400;\r\n        object.defaultState.transitionDuration = 400;\r\n        object.hiddenState.transitionDuration = 400;\r\n    }\r\n    if (object instanceof Scrollbar) {\r\n        object.animationDuration = 700;\r\n    }\r\n    if (object instanceof Series) {\r\n        object.defaultState.transitionDuration = 1000;\r\n        object.hiddenState.transitionDuration = 700;\r\n        object.hiddenState.properties.opacity = 1;\r\n        object.showOnInit = true;\r\n    }\r\n    if (object instanceof MapSeries) {\r\n        object.hiddenState.properties.opacity = 0;\r\n    }\r\n    if (object instanceof PercentSeries) {\r\n        object.hiddenState.properties.opacity = 0;\r\n    }\r\n    if (object instanceof FunnelSlice) {\r\n        object.defaultState.transitionDuration = 800;\r\n        object.hiddenState.transitionDuration = 1000;\r\n        object.hiddenState.properties.opacity = 1;\r\n    }\r\n    if (object instanceof Slice) {\r\n        object.defaultState.transitionDuration = 700;\r\n        object.hiddenState.transitionDuration = 1000;\r\n        object.hiddenState.properties.opacity = 1;\r\n    }\r\n    if (object instanceof Preloader) {\r\n        object.hiddenState.transitionDuration = 2000;\r\n    }\r\n    if (object instanceof Column) {\r\n        object.defaultState.transitionDuration = 700;\r\n        object.hiddenState.transitionDuration = 1000;\r\n        object.hiddenState.properties.opacity = 1;\r\n    }\r\n    if (object instanceof Column3D) {\r\n        object.hiddenState.properties.opacity = 0;\r\n    }\r\n};\r\nexport default theme;\r\n//# sourceMappingURL=animated.js.map","/**\r\n * Module: gauge\r\n */\r\n/**\r\n * Elements: types\r\n */\r\nexport { GaugeChartDataItem, GaugeChart } from \"./.internal/charts/types/GaugeChart\";\r\nexport { RadarChartDataItem, RadarChart } from \"./.internal/charts/types/RadarChart\";\r\nexport { XYChartDataItem, XYChart } from \"./.internal/charts/types/XYChart\";\r\nexport { SerialChartDataItem, SerialChart } from \"./.internal/charts/types/SerialChart\";\r\nexport { PieChart3DDataItem, PieChart3D } from \"./.internal/charts/types/PieChart3D\";\r\nexport { PieChartDataItem, PieChart } from \"./.internal/charts/types/PieChart\";\r\nexport { SlicedChart, SlicedChartDataItem } from \"./.internal/charts/types/SlicedChart\";\r\nexport { FlowDiagramDataItem, FlowDiagram } from \"./.internal/charts/types/FlowDiagram\";\r\nexport { SankeyDiagramDataItem, SankeyDiagram } from \"./.internal/charts/types/SankeyDiagram\";\r\nexport { ChordDiagramDataItem, ChordDiagram } from \"./.internal/charts/types/ChordDiagram\";\r\nexport { TreeMapDataItem, TreeMap } from \"./.internal/charts/types/TreeMap\";\r\nexport { XYChart3DDataItem, XYChart3D } from \"./.internal/charts/types/XYChart3D\";\r\n/**\r\n * Elements: charts\r\n */\r\nexport { ChartDataItem, Chart } from \"./.internal/charts/Chart\";\r\nexport { LegendDataItem, Legend, LegendSettings } from \"./.internal/charts/Legend\";\r\nexport { HeatLegend } from \"./.internal/charts/elements/HeatLegend\";\r\n/**\r\n * Elements: series\r\n */\r\nexport { SeriesDataItem, Series } from \"./.internal/charts/series/Series\";\r\nexport { XYSeriesDataItem, XYSeries } from \"./.internal/charts/series/XYSeries\";\r\nexport { LineSeriesDataItem, LineSeries } from \"./.internal/charts/series/LineSeries\";\r\nexport { LineSeriesSegment } from \"./.internal/charts/series/LineSeriesSegment\";\r\nexport { CandlestickSeriesDataItem, CandlestickSeries } from \"./.internal/charts/series/CandlestickSeries\";\r\nexport { OHLCSeriesDataItem, OHLCSeries } from \"./.internal/charts/series/OHLCSeries\";\r\nexport { ColumnSeriesDataItem, ColumnSeries } from \"./.internal/charts/series/ColumnSeries\";\r\nexport { StepLineSeriesDataItem, StepLineSeries } from \"./.internal/charts/series/StepLineSeries\";\r\nexport { RadarSeriesDataItem, RadarSeries } from \"./.internal/charts/series/RadarSeries\";\r\nexport { RadarColumnSeriesDataItem, RadarColumnSeries } from \"./.internal/charts/series/RadarColumnSeries\";\r\nexport { PieSeriesDataItem, PieSeries } from \"./.internal/charts/series/PieSeries\";\r\nexport { FunnelSeries, FunnelSeriesDataItem } from \"./.internal/charts/series/FunnelSeries\";\r\nexport { PyramidSeries, PyramidSeriesDataItem } from \"./.internal/charts/series/PyramidSeries\";\r\nexport { PictorialStackedSeries, PictorialStackedSeriesDataItem } from \"./.internal/charts/series/PictorialStackedSeries\";\r\nexport { PieTick } from \"./.internal/charts/elements/PieTick\";\r\nexport { FunnelSlice } from \"./.internal/charts/elements/FunnelSlice\";\r\nexport { PieSeries3DDataItem, PieSeries3D } from \"./.internal/charts/series/PieSeries3D\";\r\nexport { TreeMapSeriesDataItem, TreeMapSeries } from \"./.internal/charts/series/TreeMapSeries\";\r\nexport { ColumnSeries3DDataItem, ColumnSeries3D } from \"./.internal/charts/series/ColumnSeries3D\";\r\nexport { ConeSeriesDataItem, ConeSeries } from \"./.internal/charts/series/ConeSeries\";\r\nexport { CurvedColumnSeries, CurvedColumnSeriesDataItem } from \"./.internal/charts/series/CurvedColumnSeries\";\r\n/**\r\n * Elements: axes\r\n */\r\nexport { AxisDataItem, Axis } from \"./.internal/charts/axes/Axis\";\r\nexport { Grid } from \"./.internal/charts/axes/Grid\";\r\nexport { AxisTick } from \"./.internal/charts/axes/AxisTick\";\r\nexport { AxisLabel } from \"./.internal/charts/axes/AxisLabel\";\r\nexport { AxisLine } from \"./.internal/charts/axes/AxisLine\";\r\nexport { AxisFill } from \"./.internal/charts/axes/AxisFill\";\r\nexport { AxisRenderer } from \"./.internal/charts/axes/AxisRenderer\";\r\nexport { AxisBreak } from \"./.internal/charts/axes/AxisBreak\";\r\nexport { ValueAxisDataItem, ValueAxis } from \"./.internal/charts/axes/ValueAxis\";\r\nexport { CategoryAxisDataItem, CategoryAxis } from \"./.internal/charts/axes/CategoryAxis\";\r\nexport { CategoryAxisBreak } from \"./.internal/charts/axes/CategoryAxisBreak\";\r\nexport { DateAxisDataItem, DateAxis } from \"./.internal/charts/axes/DateAxis\";\r\nexport { DurationAxisDataItem, DurationAxis } from \"./.internal/charts/axes/DurationAxis\";\r\nexport { DateAxisBreak } from \"./.internal/charts/axes/DateAxisBreak\";\r\nexport { ValueAxisBreak } from \"./.internal/charts/axes/ValueAxisBreak\";\r\nexport { AxisRendererX } from \"./.internal/charts/axes/AxisRendererX\";\r\nexport { AxisRendererY } from \"./.internal/charts/axes/AxisRendererY\";\r\nexport { AxisRendererRadial } from \"./.internal/charts/axes/AxisRendererRadial\";\r\nexport { AxisLabelCircular } from \"./.internal/charts/axes/AxisLabelCircular\";\r\nexport { AxisRendererCircular } from \"./.internal/charts/axes/AxisRendererCircular\";\r\nexport { AxisFillCircular } from \"./.internal/charts/axes/AxisFillCircular\";\r\nexport { GridCircular } from \"./.internal/charts/axes/GridCircular\";\r\nexport { AxisRendererX3D } from \"./.internal/charts/axes/AxisRendererX3D\";\r\nexport { AxisRendererY3D } from \"./.internal/charts/axes/AxisRendererY3D\";\r\n/**\r\n * Elements: elements\r\n */\r\nexport { Tick } from \"./.internal/charts/elements/Tick\";\r\nexport { Bullet } from \"./.internal/charts/elements/Bullet\";\r\nexport { LabelBullet } from \"./.internal/charts/elements/LabelBullet\";\r\nexport { CircleBullet } from \"./.internal/charts/elements/CircleBullet\";\r\nexport { ErrorBullet } from \"./.internal/charts/elements/ErrorBullet\";\r\nexport { XYChartScrollbar } from \"./.internal/charts/elements/XYChartScrollbar\";\r\nexport { ClockHand } from \"./.internal/charts/elements/ClockHand\";\r\nexport { FlowDiagramNode } from \"./.internal/charts/elements/FlowDiagramNode\";\r\nexport { FlowDiagramLink } from \"./.internal/charts/elements/FlowDiagramLink\";\r\nexport { SankeyNode } from \"./.internal/charts/elements/SankeyNode\";\r\nexport { SankeyLink } from \"./.internal/charts/elements/SankeyLink\";\r\nexport { ChordNode } from \"./.internal/charts/elements/ChordNode\";\r\nexport { ChordLink } from \"./.internal/charts/elements/ChordLink\";\r\nexport { NavigationBarDataItem, NavigationBar } from \"./.internal/charts/elements/NavigationBar\";\r\nexport { Column } from \"./.internal/charts/elements/Column\";\r\nexport { Candlestick } from \"./.internal/charts/elements/Candlestick\";\r\nexport { OHLC } from \"./.internal/charts/elements/OHLC\";\r\nexport { RadarColumn } from \"./.internal/charts/elements/RadarColumn\";\r\nexport { Column3D } from \"./.internal/charts/elements/Column3D\";\r\nexport { ConeColumn } from \"./.internal/charts/elements/ConeColumn\";\r\nexport { CurvedColumn } from \"./.internal/charts/elements/CurvedColumn\";\r\n/**\r\n * Elements: cursors\r\n */\r\nexport { XYCursor } from \"./.internal/charts/cursors/XYCursor\";\r\nexport { Cursor } from \"./.internal/charts/cursors/Cursor\";\r\nexport { RadarCursor } from \"./.internal/charts/cursors/RadarCursor\";\r\n//# sourceMappingURL=charts.js.map","/**\r\n * This module houses all core/framework functionality and is required for\r\n * all charting components to work\r\n */\r\n/**\r\n * Elements: core\r\n */\r\nexport { System, system } from \"./.internal/core/System\";\r\nexport { BaseObject, BaseObjectEvents } from \"./.internal/core/Base\";\r\nexport { Component } from \"./.internal/core/Component\";\r\nexport { Container } from \"./.internal/core/Container\";\r\nexport { DataItem } from \"./.internal/core/DataItem\";\r\nexport { Sprite } from \"./.internal/core/Sprite\";\r\nexport { SpriteEventDispatcher } from \"./.internal/core/SpriteEvents\";\r\nexport { SpriteState } from \"./.internal/core/SpriteState\";\r\nexport { registry, Registry } from \"./.internal/core/Registry\";\r\nexport { options } from \"./.internal/core/Options\";\r\n/**\r\n * Elements: data\r\n */\r\nexport { CSVParser } from \"./.internal/core/data/CSVParser\";\r\nexport { DataLoader, dataLoader } from \"./.internal/core/data/DataLoader\";\r\nexport { DataParser } from \"./.internal/core/data/DataParser\";\r\nexport { DataSource } from \"./.internal/core/data/DataSource\";\r\nexport { JSONParser } from \"./.internal/core/data/JSONParser\";\r\nexport { SVGDefaults } from \"./.internal/core/defs/SVGDefaults\";\r\n/**\r\n * Elements: elements\r\n */\r\nexport { Button } from \"./.internal/core/elements/Button\";\r\nexport { Circle } from \"./.internal/core/elements/Circle\";\r\nexport { Ellipse } from \"./.internal/core/elements/Ellipse\";\r\nexport { Image } from \"./.internal/core/elements/Image\";\r\nexport { Label } from \"./.internal/core/elements/Label\";\r\nexport { Line } from \"./.internal/core/elements/Line\";\r\nexport { Popup } from \"./.internal/core/elements/Popup\";\r\nexport { Modal } from \"./.internal/core/elements/Modal\";\r\nexport { PointedRectangle } from \"./.internal/core/elements/PointedRectangle\";\r\nexport { PointedShape } from \"./.internal/core/elements/PointedShape\";\r\nexport { Polyarc } from \"./.internal/core/elements/Polyarc\";\r\nexport { Polygon } from \"./.internal/core/elements/Polygon\";\r\nexport { Polyline } from \"./.internal/core/elements/Polyline\";\r\nexport { Polyspline } from \"./.internal/core/elements/Polyspline\";\r\nexport { Preloader } from \"./.internal/core/elements/Preloader\";\r\nexport { Rectangle } from \"./.internal/core/elements/Rectangle\";\r\nexport { ResizeButton } from \"./.internal/core/elements/ResizeButton\";\r\nexport { RoundedRectangle } from \"./.internal/core/elements/RoundedRectangle\";\r\nexport { Scrollbar } from \"./.internal/core/elements/Scrollbar\";\r\nexport { Slider } from \"./.internal/core/elements/Slider\";\r\nexport { Slice } from \"./.internal/core/elements/Slice\";\r\nexport { TextLink } from \"./.internal/core/elements/TextLink\";\r\nexport { Tooltip } from \"./.internal/core/elements/Tooltip\";\r\nexport { Trapezoid } from \"./.internal/core/elements/Trapezoid\";\r\nexport { Triangle } from \"./.internal/core/elements/Triangle\";\r\nexport { WavedCircle } from \"./.internal/core/elements/WavedCircle\";\r\nexport { WavedLine } from \"./.internal/core/elements/WavedLine\";\r\nexport { WavedRectangle } from \"./.internal/core/elements/WavedRectangle\";\r\nexport { ZoomOutButton } from \"./.internal/core/elements/ZoomOutButton\";\r\nexport { PlayButton } from \"./.internal/core/elements/PlayButton\";\r\n/**\r\n * Elements: 3d\r\n */\r\nexport { Cone } from \"./.internal/core/elements/3d/Cone\";\r\nexport { Rectangle3D } from \"./.internal/core/elements/3d/Rectangle3D\";\r\nexport { Slice3D } from \"./.internal/core/elements/3d/Slice3D\";\r\n/**\r\n * Elements: export\r\n */\r\nexport { Export } from \"./.internal/core/export/Export\";\r\nexport { ExportMenu } from \"./.internal/core/export/ExportMenu\";\r\n/**\r\n * Elements: formatters\r\n */\r\nexport { DateFormatter } from \"./.internal/core/formatters/DateFormatter\";\r\nexport { DurationFormatter } from \"./.internal/core/formatters/DurationFormatter\";\r\nexport { NumberFormatter } from \"./.internal/core/formatters/NumberFormatter\";\r\nexport { TextFormatter, getTextFormatter } from \"./.internal/core/formatters/TextFormatter\";\r\n/**\r\n * Elements: interaction\r\n */\r\nexport { Inertia } from \"./.internal/core/interaction/Inertia\";\r\nexport { Interaction, getInteraction } from \"./.internal/core/interaction/Interaction\";\r\nexport { InteractionKeyboardObject } from \"./.internal/core/interaction/InteractionKeyboardObject\";\r\nexport { InteractionObject } from \"./.internal/core/interaction/InteractionObject\";\r\nexport { InteractionObjectEventDispatcher } from \"./.internal/core/interaction/InteractionObjectEvents\";\r\nexport { MouseCursorStyle } from \"./.internal/core/interaction/Mouse\";\r\n/**\r\n * Elements: rendering\r\n */\r\nexport { AMElement } from \"./.internal/core/rendering/AMElement\";\r\nexport { Group } from \"./.internal/core/rendering/Group\";\r\nexport { Paper } from \"./.internal/core/rendering/Paper\";\r\nexport { Tension, Basis } from \"./.internal/core/rendering/Smoothing\";\r\nexport { SVGContainer } from \"./.internal/core/rendering/SVGContainer\";\r\n/**\r\n * Elements: fills\r\n */\r\nexport { ColorModifier } from \"./.internal/core/rendering/fills/ColorModifier\";\r\nexport { LinearGradient } from \"./.internal/core/rendering/fills/LinearGradient\";\r\nexport { LinearGradientModifier } from \"./.internal/core/rendering/fills/LinearGradientModifier\";\r\nexport { RadialGradientModifier } from \"./.internal/core/rendering/fills/RadialGradientModifier\";\r\nexport { LinePattern } from \"./.internal/core/rendering/fills/LinePattern\";\r\nexport { Pattern } from \"./.internal/core/rendering/fills/Pattern\";\r\nexport { RadialGradient } from \"./.internal/core/rendering/fills/RadialGradient\";\r\nexport { RectPattern } from \"./.internal/core/rendering/fills/RectPattern\";\r\n/**\r\n * Elements: filters\r\n */\r\nexport { ColorizeFilter } from \"./.internal/core/rendering/filters/ColorizeFilter\";\r\nexport { DesaturateFilter } from \"./.internal/core/rendering/filters/DesaturateFilter\";\r\nexport { DropShadowFilter } from \"./.internal/core/rendering/filters/DropShadowFilter\";\r\nexport { BlurFilter } from \"./.internal/core/rendering/filters/BlurFilter\";\r\nexport { Filter } from \"./.internal/core/rendering/filters/Filter\";\r\nexport { FocusFilter } from \"./.internal/core/rendering/filters/FocusFilter\";\r\nexport { LightenFilter } from \"./.internal/core/rendering/filters/LightenFilter\";\r\n/**\r\n * Elements: responsive\r\n */\r\nexport { Responsive } from \"./.internal/core/responsive/Responsive\";\r\n/**\r\n * Elements: utils\r\n */\r\nexport { GlobalAdapter, globalAdapter, Adapter } from \"./.internal/core/utils/Adapter\";\r\nexport { Animation, animate } from \"./.internal/core/utils/Animation\";\r\nexport { nextFrame, readFrame, writeFrame, whenIdle, triggerIdle } from \"./.internal/core/utils/AsyncPending\";\r\nexport { Cache, cache } from \"./.internal/core/utils/Cache\";\r\nexport { Color, color, isColor, castColor } from \"./.internal/core/utils/Color\";\r\nexport { ColorSet } from \"./.internal/core/utils/ColorSet\";\r\nexport { InterfaceColorSet } from \"./.internal/core/utils/InterfaceColorSet\";\r\nexport { DictionaryDisposer, Dictionary, DictionaryTemplate } from \"./.internal/core/utils/Dictionary\";\r\nexport { Disposer, MultiDisposer, MutableValueDisposer, CounterDisposer } from \"./.internal/core/utils/Disposer\";\r\nexport { StyleRule, StyleClass, getElement, addClass, removeClass, blur, focus, outerHTML, isElement, copyAttributes, fixPixelPerfect, ready } from \"./.internal/core/utils/DOM\";\r\nexport { EventDispatcher, TargetedEventDispatcher } from \"./.internal/core/utils/EventDispatcher\";\r\nexport { ListIterator, min, max, join } from \"./.internal/core/utils/Iterator\";\r\nexport { Keyboard, keyboard } from \"./.internal/core/utils/Keyboard\";\r\nexport { Language } from \"./.internal/core/utils/Language\";\r\nexport { IndexedIterable, ListGrouper, ListDisposer, List, ListTemplate } from \"./.internal/core/utils/List\";\r\nexport { Morpher } from \"./.internal/core/utils/Morpher\";\r\nexport { reverse, or } from \"./.internal/core/utils/Order\";\r\nexport { Percent, percent, isPercent } from \"./.internal/core/utils/Percent\";\r\nexport { OrderedList, SortedList, OrderedListTemplate, SortedListTemplate } from \"./.internal/core/utils/SortedList\";\r\nexport { PX, STRING, NUMBER, DATE, DURATION, PLACEHOLDER, PLACEHOLDER2 } from \"./.internal/core/utils/Strings\";\r\nexport { isNaN, checkString, checkBoolean, checkNumber, checkObject, castString, castNumber, isString, isNumber, isObject, isArray } from \"./.internal/core/utils/Type\";\r\nexport { Validatable } from \"./.internal/core/utils/Validatable\";\r\n/**\r\n * Functions: rendering\r\n */\r\nimport * as path from \"./.internal/core/rendering/Path\";\r\nexport { path };\r\n/**\r\n * Functions: utils\r\n */\r\nimport * as colors from \"./.internal/core/utils/Colors\";\r\nexport { colors };\r\nimport * as ease from \"./.internal/core/utils/Ease\";\r\nexport { ease };\r\nimport * as math from \"./.internal/core/utils/Math\";\r\nexport { math };\r\nimport * as array from \"./.internal/core/utils/Array\";\r\nexport { array };\r\nimport * as number from \"./.internal/core/utils/Number\";\r\nexport { number };\r\nimport * as object from \"./.internal/core/utils/Object\";\r\nexport { object };\r\nimport * as string from \"./.internal/core/utils/String\";\r\nexport { string };\r\nimport * as time from \"./.internal/core/utils/Time\";\r\nexport { time };\r\nimport * as utils from \"./.internal/core/utils/Utils\";\r\nexport { utils };\r\nimport * as iter from \"./.internal/core/utils/Iterator\";\r\nexport { iter };\r\nimport * as type from \"./.internal/core/utils/Type\";\r\nexport { type };\r\nexport { create, createFromConfig } from \"./.internal/core/utils/Instance\";\r\nexport { useTheme, unuseTheme, unuseAllThemes } from \"./.internal/core/utils/Instance\";\r\n//# sourceMappingURL=core.js.map","/**\r\n * amCharts 4 locale\r\n *\r\n * Locale: en\r\n * Language: International English\r\n * Author: Martynas Majeris\r\n *\r\n * Follow instructions in [on this page](https://www.amcharts.com/docs/v4/tutorials/creating-translations/) to make corrections or add new translations.\r\n *\r\n * ---\r\n * Edit but leave the header section above this line. You can remove any\r\n * subsequent comment sections.\r\n * ---\r\n *\r\n * Use this file as a template to create translations. Leave the key part in\r\n * English intact. Fill the value with a translation.\r\n *\r\n * Empty string means no translation, so default \"International English\"\r\n * will be used.\r\n *\r\n * If you need the translation to literally be an empty string, use `null`\r\n * instead.\r\n *\r\n * IMPORTANT:\r\n * When translating make good effort to keep the translation length\r\n * at least the same chartcount as the English, especially for short prompts.\r\n *\r\n * Having significantly longer prompts may distort the actual charts.\r\n *\r\n * NOTE:\r\n * Some prompts - like months or weekdays - come in two versions: full and\r\n * shortened.\r\n *\r\n * If there's no official shortened version of these in your language, and it\r\n * would not be possible to invent such short versions that don't seem weird\r\n * to native speakers of that language, fill those with the same as full\r\n * version.\r\n *\r\n * PLACEHOLDERS:\r\n * Some prompts have placeholders like \"%1\". Those will be replaced by actual\r\n * values during translation and should be retained in the translated prompts.\r\n *\r\n * Placeholder positions may be changed to better suit structure of the\r\n * sentence.\r\n *\r\n * For example \"From %1 to %2\", when actually used will replace \"%1\" with an\r\n * actual value representing range start, and \"%2\" will be replaced by end\r\n * value.\r\n *\r\n * E.g. in a Scrollbar for Value axis \"From %1 to %2\" will become\r\n * \"From 100 to 200\". You may translate \"From\" and \"to\", as well as re-arrange\r\n * the order of the prompt itself, but make sure the \"%1\" and \"%2\" remain, in\r\n * places where they will make sense.\r\n *\r\n * Save the file as language_LOCALE, i.e. `en_GB.ts`, `fr_FR.ts`, etc.\r\n */\r\nexport default {\r\n    // Number formatting options.\r\n    // \r\n    // Please check with the local standards which separator is accepted to be\r\n    // used for separating decimals, and which for thousands.\r\n    \"_decimalSeparator\": \".\",\r\n    \"_thousandSeparator\": \",\",\r\n    // Suffixes for numbers\r\n    // When formatting numbers, big or small numers might be reformatted to\r\n    // shorter version, by applying a suffix.\r\n    // \r\n    // For example, 1000000 might become \"1m\".\r\n    // Or 1024 might become \"1KB\" if we're formatting byte numbers.\r\n    // \r\n    // This section defines such suffixes for all such cases.\r\n    \"_big_number_suffix_3\": \"k\",\r\n    \"_big_number_suffix_6\": \"M\",\r\n    \"_big_number_suffix_9\": \"G\",\r\n    \"_big_number_suffix_12\": \"T\",\r\n    \"_big_number_suffix_15\": \"P\",\r\n    \"_big_number_suffix_18\": \"E\",\r\n    \"_big_number_suffix_21\": \"Z\",\r\n    \"_big_number_suffix_24\": \"Y\",\r\n    \"_small_number_suffix_3\": \"m\",\r\n    \"_small_number_suffix_6\": \"μ\",\r\n    \"_small_number_suffix_9\": \"n\",\r\n    \"_small_number_suffix_12\": \"p\",\r\n    \"_small_number_suffix_15\": \"f\",\r\n    \"_small_number_suffix_18\": \"a\",\r\n    \"_small_number_suffix_21\": \"z\",\r\n    \"_small_number_suffix_24\": \"y\",\r\n    \"_byte_suffix_B\": \"B\",\r\n    \"_byte_suffix_KB\": \"KB\",\r\n    \"_byte_suffix_MB\": \"MB\",\r\n    \"_byte_suffix_GB\": \"GB\",\r\n    \"_byte_suffix_TB\": \"TB\",\r\n    \"_byte_suffix_PB\": \"PB\",\r\n    // Default date formats for various periods.\r\n    // \r\n    // This should reflect official or de facto formatting universally accepted\r\n    // in the country translation is being made for\r\n    // Available format codes here:\r\n    // https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/#Format_codes\r\n    // \r\n    // This will be used when formatting date/time for particular granularity,\r\n    // e.g. \"_date_hour\" will be shown whenever we need to show time as hours.\r\n    \"_date_millisecond\": \"mm:ss SSS\",\r\n    \"_date_second\": \"HH:mm:ss\",\r\n    \"_date_minute\": \"HH:mm\",\r\n    \"_date_hour\": \"HH:mm\",\r\n    \"_date_day\": \"MMM dd\",\r\n    \"_date_week\": \"ww\",\r\n    \"_date_month\": \"MMM\",\r\n    \"_date_year\": \"yyyy\",\r\n    // Default duration formats for various base units.\r\n    // \r\n    // This will be used by DurationFormatter to format numeric values into\r\n    // duration.\r\n    // \r\n    // Notice how each duration unit comes in several versions. This is to ensure\r\n    // that each base unit is shown correctly.\r\n    // \r\n    // For example, if we have baseUnit set to \"second\", meaning our duration is\r\n    // in seconds.\r\n    // \r\n    // If we pass in `50` to formatter, it will know that we have just 50 seconds\r\n    // (less than a minute) so it will use format in `\"_duration_second\"` (\"ss\"),\r\n    // and the formatted result will be in like `\"50\"`.\r\n    // \r\n    // If we pass in `70`, which is more than a minute, the formatter will switch\r\n    // to `\"_duration_second_minute\"` (\"mm:ss\"), resulting in \"01:10\" formatted\r\n    // text.\r\n    // \r\n    // Available codes here:\r\n    // https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/#Available_Codes\r\n    \"_duration_millisecond\": \"SSS\",\r\n    \"_duration_millisecond_second\": \"ss.SSS\",\r\n    \"_duration_millisecond_minute\": \"mm:ss SSS\",\r\n    \"_duration_millisecond_hour\": \"hh:mm:ss SSS\",\r\n    \"_duration_millisecond_day\": \"d'd' mm:ss SSS\",\r\n    \"_duration_millisecond_week\": \"d'd' mm:ss SSS\",\r\n    \"_duration_millisecond_month\": \"M'm' dd'd' mm:ss SSS\",\r\n    \"_duration_millisecond_year\": \"y'y' MM'm' dd'd' mm:ss SSS\",\r\n    \"_duration_second\": \"ss\",\r\n    \"_duration_second_minute\": \"mm:ss\",\r\n    \"_duration_second_hour\": \"hh:mm:ss\",\r\n    \"_duration_second_day\": \"d'd' hh:mm:ss\",\r\n    \"_duration_second_week\": \"d'd' hh:mm:ss\",\r\n    \"_duration_second_month\": \"M'm' dd'd' hh:mm:ss\",\r\n    \"_duration_second_year\": \"y'y' MM'm' dd'd' hh:mm:ss\",\r\n    \"_duration_minute\": \"mm\",\r\n    \"_duration_minute_hour\": \"hh:mm\",\r\n    \"_duration_minute_day\": \"d'd' hh:mm\",\r\n    \"_duration_minute_week\": \"d'd' hh:mm\",\r\n    \"_duration_minute_month\": \"M'm' dd'd' hh:mm\",\r\n    \"_duration_minute_year\": \"y'y' MM'm' dd'd' hh:mm\",\r\n    \"_duration_hour\": \"hh'h'\",\r\n    \"_duration_hour_day\": \"d'd' hh'h'\",\r\n    \"_duration_hour_week\": \"d'd' hh'h'\",\r\n    \"_duration_hour_month\": \"M'm' dd'd' hh'h'\",\r\n    \"_duration_hour_year\": \"y'y' MM'm' dd'd' hh'h'\",\r\n    \"_duration_day\": \"d'd'\",\r\n    \"_duration_day_week\": \"d'd'\",\r\n    \"_duration_day_month\": \"M'm' dd'd'\",\r\n    \"_duration_day_year\": \"y'y' MM'm' dd'd'\",\r\n    \"_duration_week\": \"w'w'\",\r\n    \"_duration_week_month\": \"w'w'\",\r\n    \"_duration_week_year\": \"w'w'\",\r\n    \"_duration_month\": \"M'm'\",\r\n    \"_duration_month_year\": \"y'y' MM'm'\",\r\n    \"_duration_year\": \"y'y'\",\r\n    // Era translations\r\n    \"_era_ad\": \"AD\",\r\n    \"_era_bc\": \"BC\",\r\n    // Day part, used in 12-hour formats, e.g. 5 P.M.\r\n    // Please note that these come in 3 variants:\r\n    // * one letter (e.g. \"A\")\r\n    // * two letters (e.g. \"AM\")\r\n    // * two letters with dots (e.g. \"A.M.\")\r\n    // \r\n    // All three need to to be translated even if they are all the same. Some\r\n    // users might use one, some the other.\r\n    \"A\": \"\",\r\n    \"P\": \"\",\r\n    \"AM\": \"\",\r\n    \"PM\": \"\",\r\n    \"A.M.\": \"\",\r\n    \"P.M.\": \"\",\r\n    // Date-related stuff.\r\n    // \r\n    // When translating months, if there's a difference, use the form which is\r\n    // best for a full date, e.g. as you would use it in \"2018 January 1\".\r\n    // \r\n    // Note that May is listed twice. This is because in English May is the same\r\n    // in both long and short forms, while in other languages it may not be the\r\n    // case. Translate \"May\" to full word, while \"May(short)\" to shortened\r\n    // version.\r\n    // \r\n    // Should month names and weekdays be capitalized or not?\r\n    // \r\n    // Rule of thumb is this: if the names should always be capitalized,\r\n    // regardless of name position within date (\"January\", \"21st January 2018\",\r\n    // etc.) use capitalized names. Otherwise enter all lowercase.\r\n    // \r\n    // The date formatter will automatically capitalize names if they are the\r\n    // first (or only) word in resulting date.\r\n    \"January\": \"\",\r\n    \"February\": \"\",\r\n    \"March\": \"\",\r\n    \"April\": \"\",\r\n    \"May\": \"\",\r\n    \"June\": \"\",\r\n    \"July\": \"\",\r\n    \"August\": \"\",\r\n    \"September\": \"\",\r\n    \"October\": \"\",\r\n    \"November\": \"\",\r\n    \"December\": \"\",\r\n    \"Jan\": \"\",\r\n    \"Feb\": \"\",\r\n    \"Mar\": \"\",\r\n    \"Apr\": \"\",\r\n    \"May(short)\": \"May\",\r\n    \"Jun\": \"\",\r\n    \"Jul\": \"\",\r\n    \"Aug\": \"\",\r\n    \"Sep\": \"\",\r\n    \"Oct\": \"\",\r\n    \"Nov\": \"\",\r\n    \"Dec\": \"\",\r\n    // Weekdays.\r\n    \"Sunday\": \"\",\r\n    \"Monday\": \"\",\r\n    \"Tuesday\": \"\",\r\n    \"Wednesday\": \"\",\r\n    \"Thursday\": \"\",\r\n    \"Friday\": \"\",\r\n    \"Saturday\": \"\",\r\n    \"Sun\": \"\",\r\n    \"Mon\": \"\",\r\n    \"Tue\": \"\",\r\n    \"Wed\": \"\",\r\n    \"Thu\": \"\",\r\n    \"Fri\": \"\",\r\n    \"Sat\": \"\",\r\n    // Date ordinal function.\r\n    // \r\n    // This is used when adding number ordinal when formatting days in dates.\r\n    // \r\n    // E.g. \"January 1st\", \"February 2nd\".\r\n    // \r\n    // The function accepts day number, and returns a string to be added to the\r\n    // day, like in default English translation, if we pass in 2, we will receive\r\n    // \"nd\" back.\r\n    \"_dateOrd\": function (day) {\r\n        var res = \"th\";\r\n        if ((day < 11) || (day > 13)) {\r\n            switch (day % 10) {\r\n                case 1:\r\n                    res = \"st\";\r\n                    break;\r\n                case 2:\r\n                    res = \"nd\";\r\n                    break;\r\n                case 3:\r\n                    res = \"rd\";\r\n                    break;\r\n            }\r\n        }\r\n        return res;\r\n    },\r\n    // Various chart controls.\r\n    // Shown as a tooltip on zoom out button.\r\n    \"Zoom Out\": \"\",\r\n    // Timeline buttons\r\n    \"Play\": \"\",\r\n    \"Stop\": \"\",\r\n    // Chart's Legend screen reader title.\r\n    \"Legend\": \"\",\r\n    // Legend's item screen reader indicator.\r\n    \"Click, tap or press ENTER to toggle\": \"\",\r\n    // Shown when the chart is busy loading something.\r\n    \"Loading\": \"\",\r\n    // Shown as the first button in the breadcrumb navigation, e.g.:\r\n    // Home > First level > ...\r\n    \"Home\": \"\",\r\n    // Chart types.\r\n    // Those are used as default screen reader titles for the main chart element\r\n    // unless developer has set some more descriptive title.\r\n    \"Chart\": \"\",\r\n    \"Serial chart\": \"\",\r\n    \"X/Y chart\": \"\",\r\n    \"Pie chart\": \"\",\r\n    \"Gauge chart\": \"\",\r\n    \"Radar chart\": \"\",\r\n    \"Sankey diagram\": \"\",\r\n    \"Flow diagram\": \"\",\r\n    \"Chord diagram\": \"\",\r\n    \"TreeMap chart\": \"\",\r\n    \"Sliced chart\": \"\",\r\n    // Series types.\r\n    // Used to name series by type for screen readers if they do not have their\r\n    // name set.\r\n    \"Series\": \"\",\r\n    \"Candlestick Series\": \"\",\r\n    \"OHLC Series\": \"\",\r\n    \"Column Series\": \"\",\r\n    \"Line Series\": \"\",\r\n    \"Pie Slice Series\": \"\",\r\n    \"Funnel Series\": \"\",\r\n    \"Pyramid Series\": \"\",\r\n    \"X/Y Series\": \"\",\r\n    // Map-related stuff.\r\n    \"Map\": \"\",\r\n    \"Press ENTER to zoom in\": \"\",\r\n    \"Press ENTER to zoom out\": \"\",\r\n    \"Use arrow keys to zoom in and out\": \"\",\r\n    \"Use plus and minus keys on your keyboard to zoom in and out\": \"\",\r\n    // Export-related stuff.\r\n    // These prompts are used in Export menu labels.\r\n    // \r\n    // \"Export\" is the top-level menu item.\r\n    // \r\n    // \"Image\", \"Data\", \"Print\" as second-level indicating type of export\r\n    // operation.\r\n    // \r\n    // Leave actual format untranslated, unless you absolutely know that they\r\n    // would convey more meaning in some other way.\r\n    \"Export\": \"\",\r\n    \"Image\": \"\",\r\n    \"Data\": \"\",\r\n    \"Print\": \"\",\r\n    \"Click, tap or press ENTER to open\": \"\",\r\n    \"Click, tap or press ENTER to print.\": \"\",\r\n    \"Click, tap or press ENTER to export as %1.\": \"\",\r\n    'To save the image, right-click this link and choose \"Save picture as...\"': \"\",\r\n    'To save the image, right-click thumbnail on the left and choose \"Save picture as...\"': \"\",\r\n    \"(Press ESC to close this message)\": \"\",\r\n    \"Image Export Complete\": \"\",\r\n    \"Export operation took longer than expected. Something might have gone wrong.\": \"\",\r\n    \"Saved from\": \"\",\r\n    \"PNG\": \"\",\r\n    \"JPG\": \"\",\r\n    \"GIF\": \"\",\r\n    \"SVG\": \"\",\r\n    \"PDF\": \"\",\r\n    \"JSON\": \"\",\r\n    \"CSV\": \"\",\r\n    \"XLSX\": \"\",\r\n    // Scrollbar-related stuff.\r\n    // \r\n    // Scrollbar is a control which can zoom and pan the axes on the chart.\r\n    // \r\n    // Each scrollbar has two grips: left or right (for horizontal scrollbar) or\r\n    // upper and lower (for vertical one).\r\n    // \r\n    // Prompts change in relation to whether Scrollbar is vertical or horizontal.\r\n    // \r\n    // The final section is used to indicate the current range of selection.\r\n    \"Use TAB to select grip buttons or left and right arrows to change selection\": \"\",\r\n    \"Use left and right arrows to move selection\": \"\",\r\n    \"Use left and right arrows to move left selection\": \"\",\r\n    \"Use left and right arrows to move right selection\": \"\",\r\n    \"Use TAB select grip buttons or up and down arrows to change selection\": \"\",\r\n    \"Use up and down arrows to move selection\": \"\",\r\n    \"Use up and down arrows to move lower selection\": \"\",\r\n    \"Use up and down arrows to move upper selection\": \"\",\r\n    \"From %1 to %2\": \"\",\r\n    \"From %1\": \"\",\r\n    \"To %1\": \"\",\r\n    // Data loader-related.\r\n    \"No parser available for file: %1\": \"\",\r\n    \"Error parsing file: %1\": \"\",\r\n    \"Unable to load file: %1\": \"\",\r\n    \"Invalid date\": \"\",\r\n};\r\n//# sourceMappingURL=en.js.map","export { default } from \"../.internal/themes/animated\";\r\n//# sourceMappingURL=animated.js.map","module.exports = require(\"core-js/library/fn/array/is-array\");","module.exports = require(\"core-js/library/fn/get-iterator\");","module.exports = require(\"core-js/library/fn/json/stringify\");","module.exports = require(\"core-js/library/fn/object/assign\");","module.exports = require(\"core-js/library/fn/object/create\");","module.exports = require(\"core-js/library/fn/object/define-property\");","module.exports = require(\"core-js/library/fn/object/get-own-property-descriptor\");","module.exports = require(\"core-js/library/fn/object/get-own-property-symbols\");","module.exports = require(\"core-js/library/fn/object/get-prototype-of\");","module.exports = require(\"core-js/library/fn/object/keys\");","module.exports = require(\"core-js/library/fn/object/set-prototype-of\");","module.exports = require(\"core-js/library/fn/promise\");","module.exports = require(\"core-js/library/fn/reflect/construct\");","module.exports = require(\"core-js/library/fn/set\");","module.exports = require(\"core-js/library/fn/symbol\");","module.exports = require(\"core-js/library/fn/symbol/iterator\");","var _Array$isArray = require(\"../core-js/array/is-array\");\n\nfunction _arrayWithHoles(arr) {\n  if (_Array$isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","var _Promise = require(\"../core-js/promise\");\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    _Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new _Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","var _Reflect$construct = require(\"../core-js/reflect/construct\");\n\nvar setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(_Reflect$construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    module.exports = _construct = _Reflect$construct;\n  } else {\n    module.exports = _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nmodule.exports = _construct;","var _Object$defineProperty = require(\"../core-js/object/define-property\");\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n\n    _Object$defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","var _Object$defineProperty = require(\"../core-js/object/define-property\");\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    _Object$defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","var _Object$getPrototypeOf = require(\"../core-js/object/get-prototype-of\");\n\nvar _Object$setPrototypeOf = require(\"../core-js/object/set-prototype-of\");\n\nfunction _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = _Object$setPrototypeOf ? _Object$getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || _Object$getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","var _Object$create = require(\"../core-js/object/create\");\n\nvar setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = _Object$create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","var _Object$getOwnPropertyDescriptor = require(\"../core-js/object/get-own-property-descriptor\");\n\nvar _Object$defineProperty = require(\"../core-js/object/define-property\");\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = _Object$defineProperty && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            _Object$defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nmodule.exports = _interopRequireWildcard;","var _getIterator = require(\"../core-js/get-iterator\");\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = _getIterator(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nmodule.exports = _nonIterableRest;","var _Object$getOwnPropertyDescriptor = require(\"../core-js/object/get-own-property-descriptor\");\n\nvar _Object$getOwnPropertySymbols = require(\"../core-js/object/get-own-property-symbols\");\n\nvar _Object$keys = require(\"../core-js/object/keys\");\n\nvar defineProperty = require(\"./defineProperty\");\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    var ownKeys = _Object$keys(source);\n\n    if (typeof _Object$getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(_Object$getOwnPropertySymbols(source).filter(function (sym) {\n        return _Object$getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nmodule.exports = _objectSpread;","var _typeof = require(\"../helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","var _Object$setPrototypeOf = require(\"../core-js/object/set-prototype-of\");\n\nfunction _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = _Object$setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","var _Symbol$iterator = require(\"../core-js/symbol/iterator\");\n\nvar _Symbol = require(\"../core-js/symbol\");\n\nfunction _typeof2(obj) { if (typeof _Symbol === \"function\" && typeof _Symbol$iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof _Symbol === \"function\" && obj.constructor === _Symbol && obj !== _Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof _Symbol === \"function\" && _typeof2(_Symbol$iterator) === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof _Symbol === \"function\" && obj.constructor === _Symbol && obj !== _Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","module.exports = require(\"regenerator-runtime\");\n","import memoize from '@emotion/memoize';\n\nvar reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|default|defer|dir|disabled|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|itemProp|itemScope|itemType|itemID|itemRef|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23\n\nvar index = memoize(function (prop) {\n  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111\n  /* o */\n  && prop.charCodeAt(1) === 110\n  /* n */\n  && prop.charCodeAt(2) < 91;\n}\n/* Z+1 */\n);\n\nexport default index;\n","function memoize(fn) {\n  var cache = {};\n  return function (arg) {\n    if (cache[arg] === undefined) cache[arg] = fn(arg);\n    return cache[arg];\n  };\n}\n\nexport default memoize;\n","var unitlessKeys = {\n  animationIterationCount: 1,\n  borderImageOutset: 1,\n  borderImageSlice: 1,\n  borderImageWidth: 1,\n  boxFlex: 1,\n  boxFlexGroup: 1,\n  boxOrdinalGroup: 1,\n  columnCount: 1,\n  columns: 1,\n  flex: 1,\n  flexGrow: 1,\n  flexPositive: 1,\n  flexShrink: 1,\n  flexNegative: 1,\n  flexOrder: 1,\n  gridRow: 1,\n  gridRowEnd: 1,\n  gridRowSpan: 1,\n  gridRowStart: 1,\n  gridColumn: 1,\n  gridColumnEnd: 1,\n  gridColumnSpan: 1,\n  gridColumnStart: 1,\n  msGridRow: 1,\n  msGridRowSpan: 1,\n  msGridColumn: 1,\n  msGridColumnSpan: 1,\n  fontWeight: 1,\n  lineHeight: 1,\n  opacity: 1,\n  order: 1,\n  orphans: 1,\n  tabSize: 1,\n  widows: 1,\n  zIndex: 1,\n  zoom: 1,\n  WebkitLineClamp: 1,\n  // SVG-related properties\n  fillOpacity: 1,\n  floodOpacity: 1,\n  stopOpacity: 1,\n  strokeDasharray: 1,\n  strokeDashoffset: 1,\n  strokeMiterlimit: 1,\n  strokeOpacity: 1,\n  strokeWidth: 1\n};\n\nexport default unitlessKeys;\n","require('../../modules/es6.array.is-array');\nmodule.exports = require('../../modules/_core').Array.isArray;\n","require('../modules/web.dom.iterable');\nrequire('../modules/es6.string.iterator');\nmodule.exports = require('../modules/core.get-iterator');\n","var core = require('../../modules/_core');\nvar $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });\nmodule.exports = function stringify(it) { // eslint-disable-line no-unused-vars\n  return $JSON.stringify.apply($JSON, arguments);\n};\n","require('../../modules/es6.object.assign');\nmodule.exports = require('../../modules/_core').Object.assign;\n","require('../../modules/es6.object.create');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function create(P, D) {\n  return $Object.create(P, D);\n};\n","require('../../modules/es6.object.define-property');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function defineProperty(it, key, desc) {\n  return $Object.defineProperty(it, key, desc);\n};\n","require('../../modules/es6.object.get-own-property-descriptor');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function getOwnPropertyDescriptor(it, key) {\n  return $Object.getOwnPropertyDescriptor(it, key);\n};\n","require('../../modules/es6.symbol');\nmodule.exports = require('../../modules/_core').Object.getOwnPropertySymbols;\n","require('../../modules/es6.object.get-prototype-of');\nmodule.exports = require('../../modules/_core').Object.getPrototypeOf;\n","require('../../modules/es6.object.keys');\nmodule.exports = require('../../modules/_core').Object.keys;\n","require('../../modules/es6.object.set-prototype-of');\nmodule.exports = require('../../modules/_core').Object.setPrototypeOf;\n","require('../modules/es6.object.to-string');\nrequire('../modules/es6.string.iterator');\nrequire('../modules/web.dom.iterable');\nrequire('../modules/es6.promise');\nrequire('../modules/es7.promise.finally');\nrequire('../modules/es7.promise.try');\nmodule.exports = require('../modules/_core').Promise;\n","require('../../modules/es6.reflect.construct');\nmodule.exports = require('../../modules/_core').Reflect.construct;\n","require('../modules/es6.object.to-string');\nrequire('../modules/es6.string.iterator');\nrequire('../modules/web.dom.iterable');\nrequire('../modules/es6.set');\nrequire('../modules/es7.set.to-json');\nrequire('../modules/es7.set.of');\nrequire('../modules/es7.set.from');\nmodule.exports = require('../modules/_core').Set;\n","require('../../modules/es6.symbol');\nrequire('../../modules/es6.object.to-string');\nrequire('../../modules/es7.symbol.async-iterator');\nrequire('../../modules/es7.symbol.observable');\nmodule.exports = require('../../modules/_core').Symbol;\n","require('../../modules/es6.string.iterator');\nrequire('../../modules/web.dom.iterable');\nmodule.exports = require('../../modules/_wks-ext').f('iterator');\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","module.exports = function () { /* empty */ };\n","module.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","var forOf = require('./_for-of');\n\nmodule.exports = function (iter, ITERATOR) {\n  var result = [];\n  forOf(iter, false, result.push, result, ITERATOR);\n  return result;\n};\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx = require('./_ctx');\nvar IObject = require('./_iobject');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar asc = require('./_array-species-create');\nmodule.exports = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || asc;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IObject(O);\n    var f = ctx(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n","var isObject = require('./_is-object');\nvar isArray = require('./_is-array');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (original) {\n  var C;\n  if (isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n","// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = require('./_array-species-constructor');\n\nmodule.exports = function (original, length) {\n  return new (speciesConstructor(original))(length);\n};\n","'use strict';\nvar aFunction = require('./_a-function');\nvar isObject = require('./_is-object');\nvar invoke = require('./_invoke');\nvar arraySlice = [].slice;\nvar factories = {};\n\nvar construct = function (F, len, args) {\n  if (!(len in factories)) {\n    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';\n    // eslint-disable-next-line no-new-func\n    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');\n  } return factories[len](F, args);\n};\n\nmodule.exports = Function.bind || function bind(that /* , ...args */) {\n  var fn = aFunction(this);\n  var partArgs = arraySlice.call(arguments, 1);\n  var bound = function (/* args... */) {\n    var args = partArgs.concat(arraySlice.call(arguments));\n    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);\n  };\n  if (isObject(fn.prototype)) bound.prototype = fn.prototype;\n  return bound;\n};\n","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","'use strict';\nvar dP = require('./_object-dp').f;\nvar create = require('./_object-create');\nvar redefineAll = require('./_redefine-all');\nvar ctx = require('./_ctx');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar $iterDefine = require('./_iter-define');\nvar step = require('./_iter-step');\nvar setSpecies = require('./_set-species');\nvar DESCRIPTORS = require('./_descriptors');\nvar fastKey = require('./_meta').fastKey;\nvar validate = require('./_validate-collection');\nvar SIZE = DESCRIPTORS ? '_s' : 'size';\n\nvar getEntry = function (that, key) {\n  // fast case\n  var index = fastKey(key);\n  var entry;\n  if (index !== 'F') return that._i[index];\n  // frozen object case\n  for (entry = that._f; entry; entry = entry.n) {\n    if (entry.k == key) return entry;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, NAME, '_i');\n      that._t = NAME;         // collection type\n      that._i = create(null); // index\n      that._f = undefined;    // first entry\n      that._l = undefined;    // last entry\n      that[SIZE] = 0;         // size\n      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.1.3.1 Map.prototype.clear()\n      // 23.2.3.2 Set.prototype.clear()\n      clear: function clear() {\n        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {\n          entry.r = true;\n          if (entry.p) entry.p = entry.p.n = undefined;\n          delete data[entry.i];\n        }\n        that._f = that._l = undefined;\n        that[SIZE] = 0;\n      },\n      // 23.1.3.3 Map.prototype.delete(key)\n      // 23.2.3.4 Set.prototype.delete(value)\n      'delete': function (key) {\n        var that = validate(this, NAME);\n        var entry = getEntry(that, key);\n        if (entry) {\n          var next = entry.n;\n          var prev = entry.p;\n          delete that._i[entry.i];\n          entry.r = true;\n          if (prev) prev.n = next;\n          if (next) next.p = prev;\n          if (that._f == entry) that._f = next;\n          if (that._l == entry) that._l = prev;\n          that[SIZE]--;\n        } return !!entry;\n      },\n      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n      forEach: function forEach(callbackfn /* , that = undefined */) {\n        validate(this, NAME);\n        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\n        var entry;\n        while (entry = entry ? entry.n : this._f) {\n          f(entry.v, entry.k, this);\n          // revert to the last existing entry\n          while (entry && entry.r) entry = entry.p;\n        }\n      },\n      // 23.1.3.7 Map.prototype.has(key)\n      // 23.2.3.7 Set.prototype.has(value)\n      has: function has(key) {\n        return !!getEntry(validate(this, NAME), key);\n      }\n    });\n    if (DESCRIPTORS) dP(C.prototype, 'size', {\n      get: function () {\n        return validate(this, NAME)[SIZE];\n      }\n    });\n    return C;\n  },\n  def: function (that, key, value) {\n    var entry = getEntry(that, key);\n    var prev, index;\n    // change existing entry\n    if (entry) {\n      entry.v = value;\n    // create new entry\n    } else {\n      that._l = entry = {\n        i: index = fastKey(key, true), // <- index\n        k: key,                        // <- key\n        v: value,                      // <- value\n        p: prev = that._l,             // <- previous entry\n        n: undefined,                  // <- next entry\n        r: false                       // <- removed\n      };\n      if (!that._f) that._f = entry;\n      if (prev) prev.n = entry;\n      that[SIZE]++;\n      // add to index\n      if (index !== 'F') that._i[index] = entry;\n    } return that;\n  },\n  getEntry: getEntry,\n  setStrong: function (C, NAME, IS_MAP) {\n    // add .keys, .values, .entries, [@@iterator]\n    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n    $iterDefine(C, NAME, function (iterated, kind) {\n      this._t = validate(iterated, NAME); // target\n      this._k = kind;                     // kind\n      this._l = undefined;                // previous\n    }, function () {\n      var that = this;\n      var kind = that._k;\n      var entry = that._l;\n      // revert to the last existing entry\n      while (entry && entry.r) entry = entry.p;\n      // get next entry\n      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {\n        // or finish the iteration\n        that._t = undefined;\n        return step(1);\n      }\n      // return step by kind\n      if (kind == 'keys') return step(0, entry.k);\n      if (kind == 'values') return step(0, entry.v);\n      return step(0, [entry.k, entry.v]);\n    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);\n\n    // add [@@species], 23.1.2.2, 23.2.2.2\n    setSpecies(NAME);\n  }\n};\n","// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar classof = require('./_classof');\nvar from = require('./_array-from-iterable');\nmodule.exports = function (NAME) {\n  return function toJSON() {\n    if (classof(this) != NAME) throw TypeError(NAME + \"#toJSON isn't generic\");\n    return from(this);\n  };\n};\n","'use strict';\nvar global = require('./_global');\nvar $export = require('./_export');\nvar meta = require('./_meta');\nvar fails = require('./_fails');\nvar hide = require('./_hide');\nvar redefineAll = require('./_redefine-all');\nvar forOf = require('./_for-of');\nvar anInstance = require('./_an-instance');\nvar isObject = require('./_is-object');\nvar setToStringTag = require('./_set-to-string-tag');\nvar dP = require('./_object-dp').f;\nvar each = require('./_array-methods')(0);\nvar DESCRIPTORS = require('./_descriptors');\n\nmodule.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {\n  var Base = global[NAME];\n  var C = Base;\n  var ADDER = IS_MAP ? 'set' : 'add';\n  var proto = C && C.prototype;\n  var O = {};\n  if (!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {\n    new C().entries().next();\n  }))) {\n    // create collection constructor\n    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);\n    redefineAll(C.prototype, methods);\n    meta.NEED = true;\n  } else {\n    C = wrapper(function (target, iterable) {\n      anInstance(target, C, NAME, '_c');\n      target._c = new Base();\n      if (iterable != undefined) forOf(iterable, IS_MAP, target[ADDER], target);\n    });\n    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','), function (KEY) {\n      var IS_ADDER = KEY == 'add' || KEY == 'set';\n      if (KEY in proto && !(IS_WEAK && KEY == 'clear')) hide(C.prototype, KEY, function (a, b) {\n        anInstance(this, C, KEY);\n        if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;\n        var result = this._c[KEY](a === 0 ? 0 : a, b);\n        return IS_ADDER ? this : result;\n      });\n    });\n    IS_WEAK || dP(C.prototype, 'size', {\n      get: function () {\n        return this._c.size;\n      }\n    });\n  }\n\n  setToStringTag(C, NAME);\n\n  O[NAME] = C;\n  $export($export.G + $export.W + $export.F, O);\n\n  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);\n\n  return C;\n};\n","var core = module.exports = { version: '2.6.3' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar ctx = require('./_ctx');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && has(exports, key)) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function (C) {\n      var F = function (a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0: return new C();\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","var ctx = require('./_ctx');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar getIterFn = require('./core.get-iterator-method');\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","// check on default Array iterator\nvar Iterators = require('./_iterators');\nvar ITERATOR = require('./_wks')('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n","var ITERATOR = require('./_wks')('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n","module.exports = {};\n","module.exports = true;\n","var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n","var global = require('./_global');\nvar macrotask = require('./_task').set;\nvar Observer = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar isNode = require('./_cof')(process) == 'process';\n\nmodule.exports = function () {\n  var head, last, notify;\n\n  var flush = function () {\n    var parent, fn;\n    if (isNode && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (isNode) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339\n  } else if (Observer && !(global.navigator && global.navigator.standalone)) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    var promise = Promise.resolve(undefined);\n    notify = function () {\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) last.next = task;\n    if (!head) {\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n","'use strict';\n// 25.4.1.5 NewPromiseCapability(C)\nvar aFunction = require('./_a-function');\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n}\n\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n","'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require('./_fails')(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject');\nvar gOPN = require('./_object-gopn').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n","exports.f = Object.getOwnPropertySymbols;\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","exports.f = {}.propertyIsEnumerable;\n","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n","module.exports = function (exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n","var anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar newPromiseCapability = require('./_new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var hide = require('./_hide');\nmodule.exports = function (target, src, safe) {\n  for (var key in src) {\n    if (safe && target[key]) target[key] = src[key];\n    else hide(target, key, src[key]);\n  } return target;\n};\n","module.exports = require('./_hide');\n","'use strict';\n// https://tc39.github.io/proposal-setmap-offrom/\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar ctx = require('./_ctx');\nvar forOf = require('./_for-of');\n\nmodule.exports = function (COLLECTION) {\n  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {\n    var mapFn = arguments[1];\n    var mapping, A, n, cb;\n    aFunction(this);\n    mapping = mapFn !== undefined;\n    if (mapping) aFunction(mapFn);\n    if (source == undefined) return new this();\n    A = [];\n    if (mapping) {\n      n = 0;\n      cb = ctx(mapFn, arguments[2], 2);\n      forOf(source, false, function (nextItem) {\n        A.push(cb(nextItem, n++));\n      });\n    } else {\n      forOf(source, false, A.push, A);\n    }\n    return new this(A);\n  } });\n};\n","'use strict';\n// https://tc39.github.io/proposal-setmap-offrom/\nvar $export = require('./_export');\n\nmodule.exports = function (COLLECTION) {\n  $export($export.S, COLLECTION, { of: function of() {\n    var length = arguments.length;\n    var A = new Array(length);\n    while (length--) A[length] = arguments[length];\n    return new this(A);\n  } });\n};\n","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n","'use strict';\nvar global = require('./_global');\nvar core = require('./_core');\nvar dP = require('./_object-dp');\nvar DESCRIPTORS = require('./_descriptors');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (KEY) {\n  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","var core = require('./_core');\nvar global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: require('./_library') ? 'pure' : 'global',\n  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n});\n","// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject = require('./_an-object');\nvar aFunction = require('./_a-function');\nvar SPECIES = require('./_wks')('species');\nmodule.exports = function (O, D) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n","var ctx = require('./_ctx');\nvar invoke = require('./_invoke');\nvar html = require('./_html');\nvar cel = require('./_dom-create');\nvar global = require('./_global');\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (require('./_cof')(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","var global = require('./_global');\nvar navigator = global.navigator;\n\nmodule.exports = navigator && navigator.userAgent || '';\n","var isObject = require('./_is-object');\nmodule.exports = function (it, TYPE) {\n  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');\n  return it;\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar LIBRARY = require('./_library');\nvar wksExt = require('./_wks-ext');\nvar defineProperty = require('./_object-dp').f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n","exports.f = require('./_wks');\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n","var anObject = require('./_an-object');\nvar get = require('./core.get-iterator-method');\nmodule.exports = require('./_core').getIterator = function (it) {\n  var iterFn = get(it);\n  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');\n  return anObject(iterFn.call(it));\n};\n","// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)\nvar $export = require('./_export');\n\n$export($export.S, 'Array', { isArray: require('./_is-array') });\n","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./_export');\n\n$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });\n","var $export = require('./_export');\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', { create: require('./_object-create') });\n","var $export = require('./_export');\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });\n","// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\nvar toIObject = require('./_to-iobject');\nvar $getOwnPropertyDescriptor = require('./_object-gopd').f;\n\nrequire('./_object-sap')('getOwnPropertyDescriptor', function () {\n  return function getOwnPropertyDescriptor(it, key) {\n    return $getOwnPropertyDescriptor(toIObject(it), key);\n  };\n});\n","// 19.1.2.9 Object.getPrototypeOf(O)\nvar toObject = require('./_to-object');\nvar $getPrototypeOf = require('./_object-gpo');\n\nrequire('./_object-sap')('getPrototypeOf', function () {\n  return function getPrototypeOf(it) {\n    return $getPrototypeOf(toObject(it));\n  };\n});\n","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n","// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require('./_export');\n$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });\n","'use strict';\nvar LIBRARY = require('./_library');\nvar global = require('./_global');\nvar ctx = require('./_ctx');\nvar classof = require('./_classof');\nvar $export = require('./_export');\nvar isObject = require('./_is-object');\nvar aFunction = require('./_a-function');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar speciesConstructor = require('./_species-constructor');\nvar task = require('./_task').set;\nvar microtask = require('./_microtask')();\nvar newPromiseCapabilityModule = require('./_new-promise-capability');\nvar perform = require('./_perform');\nvar userAgent = require('./_user-agent');\nvar promiseResolve = require('./_promise-resolve');\nvar PROMISE = 'Promise';\nvar TypeError = global.TypeError;\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8 || '';\nvar $Promise = global[PROMISE];\nvar isNode = classof(process) == 'process';\nvar empty = function () { /* empty */ };\nvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n\nvar USE_NATIVE = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function')\n      && promise.then(empty) instanceof FakePromise\n      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n      // we can't detect it synchronously, so just check versions\n      && v8.indexOf('6.6') !== 0\n      && userAgent.indexOf('Chrome/66') === -1;\n  } catch (e) { /* empty */ }\n}();\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (promise, isReject) {\n  if (promise._n) return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function (reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then, exited;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value); // may throw\n            if (domain) {\n              domain.exit();\n              exited = true;\n            }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (e) {\n        if (domain && !exited) domain.exit();\n        reject(e);\n      }\n    };\n    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) onUnhandled(promise);\n  });\n};\nvar onUnhandled = function (promise) {\n  task.call(global, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = perform(function () {\n        if (isNode) {\n          process.emit('unhandledRejection', value, promise);\n        } else if (handler = global.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = global.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if (unhandled && result.e) throw result.v;\n  });\n};\nvar isUnhandled = function (promise) {\n  return promise._h !== 1 && (promise._a || promise._c).length === 0;\n};\nvar onHandleUnhandled = function (promise) {\n  task.call(global, function () {\n    var handler;\n    if (isNode) {\n      process.emit('rejectionHandled', promise);\n    } else if (handler = global.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function (value) {\n  var promise = this;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function (value) {\n  var promise = this;\n  var then;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = require('./_redefine-all')($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) this._a.push(reaction);\n      if (this._s) notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject = ctx($reject, promise, 1);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === $Promise || C === Wrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\nrequire('./_set-to-string-tag')($Promise, PROMISE);\nrequire('./_set-species')(PROMISE);\nWrapper = require('./_core')[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  }\n});\n","// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])\nvar $export = require('./_export');\nvar create = require('./_object-create');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar bind = require('./_bind');\nvar rConstruct = (require('./_global').Reflect || {}).construct;\n\n// MS Edge supports only 2 arguments and argumentsList argument is optional\n// FF Nightly sets third argument as `new.target`, but does not create `this` from it\nvar NEW_TARGET_BUG = fails(function () {\n  function F() { /* empty */ }\n  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);\n});\nvar ARGS_BUG = !fails(function () {\n  rConstruct(function () { /* empty */ });\n});\n\n$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {\n  construct: function construct(Target, args /* , newTarget */) {\n    aFunction(Target);\n    anObject(args);\n    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);\n    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);\n    if (Target == newTarget) {\n      // w/o altered newTarget, optimization for 0-4 arguments\n      switch (args.length) {\n        case 0: return new Target();\n        case 1: return new Target(args[0]);\n        case 2: return new Target(args[0], args[1]);\n        case 3: return new Target(args[0], args[1], args[2]);\n        case 4: return new Target(args[0], args[1], args[2], args[3]);\n      }\n      // w/o altered newTarget, lot of arguments case\n      var $args = [null];\n      $args.push.apply($args, args);\n      return new (bind.apply(Target, $args))();\n    }\n    // with altered newTarget, not support built-in constructors\n    var proto = newTarget.prototype;\n    var instance = create(isObject(proto) ? proto : Object.prototype);\n    var result = Function.apply.call(Target, instance, args);\n    return isObject(result) ? result : instance;\n  }\n});\n","'use strict';\nvar strong = require('./_collection-strong');\nvar validate = require('./_validate-collection');\nvar SET = 'Set';\n\n// 23.2 Set Objects\nmodule.exports = require('./_collection')(SET, function (get) {\n  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.2.3.1 Set.prototype.add(value)\n  add: function add(value) {\n    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);\n  }\n}, strong);\n","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('./_global');\nvar has = require('./_has');\nvar DESCRIPTORS = require('./_descriptors');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar META = require('./_meta').KEY;\nvar $fails = require('./_fails');\nvar shared = require('./_shared');\nvar setToStringTag = require('./_set-to-string-tag');\nvar uid = require('./_uid');\nvar wks = require('./_wks');\nvar wksExt = require('./_wks-ext');\nvar wksDefine = require('./_wks-define');\nvar enumKeys = require('./_enum-keys');\nvar isArray = require('./_is-array');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar createDesc = require('./_property-desc');\nvar _create = require('./_object-create');\nvar gOPNExt = require('./_object-gopn-ext');\nvar $GOPD = require('./_object-gopd');\nvar $DP = require('./_object-dp');\nvar $keys = require('./_object-keys');\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f = $propertyIsEnumerable;\n  require('./_object-gops').f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./_library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n","// https://github.com/tc39/proposal-promise-finally\n'use strict';\nvar $export = require('./_export');\nvar core = require('./_core');\nvar global = require('./_global');\nvar speciesConstructor = require('./_species-constructor');\nvar promiseResolve = require('./_promise-resolve');\n\n$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {\n  var C = speciesConstructor(this, core.Promise || global.Promise);\n  var isFunction = typeof onFinally == 'function';\n  return this.then(\n    isFunction ? function (x) {\n      return promiseResolve(C, onFinally()).then(function () { return x; });\n    } : onFinally,\n    isFunction ? function (e) {\n      return promiseResolve(C, onFinally()).then(function () { throw e; });\n    } : onFinally\n  );\n} });\n","'use strict';\n// https://github.com/tc39/proposal-promise-try\nvar $export = require('./_export');\nvar newPromiseCapability = require('./_new-promise-capability');\nvar perform = require('./_perform');\n\n$export($export.S, 'Promise', { 'try': function (callbackfn) {\n  var promiseCapability = newPromiseCapability.f(this);\n  var result = perform(callbackfn);\n  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);\n  return promiseCapability.promise;\n} });\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from\nrequire('./_set-collection-from')('Set');\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of\nrequire('./_set-collection-of')('Set');\n","// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar $export = require('./_export');\n\n$export($export.P + $export.R, 'Set', { toJSON: require('./_collection-to-json')('Set') });\n","require('./_wks-define')('asyncIterator');\n","require('./_wks-define')('observable');\n","require('./es6.array.iterator');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar TO_STRING_TAG = require('./_wks')('toStringTag');\n\nvar DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +\n  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +\n  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +\n  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +\n  'TextTrackList,TouchList').split(',');\n\nfor (var i = 0; i < DOMIterables.length; i++) {\n  var NAME = DOMIterables[i];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}\n","'use strict';\n\n/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n(function (root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define(factory);\n    } else if (typeof exports === \"object\") {\n        module.exports = factory();\n    } else {\n        root.ResizeSensor = factory();\n    }\n}(typeof window !== 'undefined' ? window : this, function () {\n\n    // Make sure it does not throw in a SSR (Server Side Rendering) situation\n    if (typeof window === \"undefined\") {\n        return null;\n    }\n    // Only used for the dirty checking, so the event callback count is limited to max 1 call per fps per sensor.\n    // In combination with the event based resize sensor this saves cpu time, because the sensor is too fast and\n    // would generate too many unnecessary events.\n    var requestAnimationFrame = window.requestAnimationFrame ||\n        window.mozRequestAnimationFrame ||\n        window.webkitRequestAnimationFrame ||\n        function (fn) {\n            return window.setTimeout(fn, 20);\n        };\n\n    /**\n     * Iterate over each of the provided element(s).\n     *\n     * @param {HTMLElement|HTMLElement[]} elements\n     * @param {Function}                  callback\n     */\n    function forEachElement(elements, callback){\n        var elementsType = Object.prototype.toString.call(elements);\n        var isCollectionTyped = ('[object Array]' === elementsType\n            || ('[object NodeList]' === elementsType)\n            || ('[object HTMLCollection]' === elementsType)\n            || ('[object Object]' === elementsType)\n            || ('undefined' !== typeof jQuery && elements instanceof jQuery) //jquery\n            || ('undefined' !== typeof Elements && elements instanceof Elements) //mootools\n        );\n        var i = 0, j = elements.length;\n        if (isCollectionTyped) {\n            for (; i < j; i++) {\n                callback(elements[i]);\n            }\n        } else {\n            callback(elements);\n        }\n    }\n\n    /**\n    * Get element size\n    * @param {HTMLElement} element\n    * @returns {Object} {width, height}\n    */\n    function getElementSize(element) {\n        if (!element.getBoundingClientRect) {\n            return {\n                width: element.offsetWidth,\n                height: element.offsetHeight\n            }\n        }\n\n        var rect = element.getBoundingClientRect();\n        return {\n            width: Math.round(rect.width),\n            height: Math.round(rect.height)\n        }\n    }\n\n    /**\n     * Class for dimension change detection.\n     *\n     * @param {Element|Element[]|Elements|jQuery} element\n     * @param {Function} callback\n     *\n     * @constructor\n     */\n    var ResizeSensor = function(element, callback) {\n        /**\n         *\n         * @constructor\n         */\n        function EventQueue() {\n            var q = [];\n            this.add = function(ev) {\n                q.push(ev);\n            };\n\n            var i, j;\n            this.call = function(sizeInfo) {\n                for (i = 0, j = q.length; i < j; i++) {\n                    q[i].call(this, sizeInfo);\n                }\n            };\n\n            this.remove = function(ev) {\n                var newQueue = [];\n                for(i = 0, j = q.length; i < j; i++) {\n                    if(q[i] !== ev) newQueue.push(q[i]);\n                }\n                q = newQueue;\n            };\n\n            this.length = function() {\n                return q.length;\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @param {Function}    resized\n         */\n        function attachResizeEvent(element, resized) {\n            if (!element) return;\n            if (element.resizedAttached) {\n                element.resizedAttached.add(resized);\n                return;\n            }\n\n            element.resizedAttached = new EventQueue();\n            element.resizedAttached.add(resized);\n\n            element.resizeSensor = document.createElement('div');\n            element.resizeSensor.dir = 'ltr';\n            element.resizeSensor.className = 'resize-sensor';\n            var style = 'pointer-events: none; position: absolute; left: 0px; top: 0px; right: 0; bottom: 0; ' +\n                'overflow: hidden; z-index: -1; visibility: hidden; max-width: 100%;';\n            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n\n            element.resizeSensor.style.cssText = style;\n            element.resizeSensor.innerHTML =\n                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + '\"></div>' +\n                '</div>' +\n                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\n                '</div>';\n            element.appendChild(element.resizeSensor);\n\n            var computedStyle = window.getComputedStyle(element);\n            var position = computedStyle ? computedStyle.getPropertyValue('position') : null;\n            if ('absolute' !== position && 'relative' !== position && 'fixed' !== position) {\n                element.style.position = 'relative';\n            }\n\n            var expand = element.resizeSensor.childNodes[0];\n            var expandChild = expand.childNodes[0];\n            var shrink = element.resizeSensor.childNodes[1];\n            var dirty, rafId;\n            var size = getElementSize(element);\n            var lastWidth = size.width;\n            var lastHeight = size.height;\n            var initialHiddenCheck = true;\n            var lastAnimationFrame = 0;\n\n            var resetExpandShrink = function () {\n                var width = element.offsetWidth;\n                var height = element.offsetHeight;\n\n                expandChild.style.width = (width + 10) + 'px';\n                expandChild.style.height = (height + 10) + 'px';\n\n                expand.scrollLeft = width + 10;\n                expand.scrollTop = height + 10;\n\n                shrink.scrollLeft = width + 10;\n                shrink.scrollTop = height + 10;\n            };\n\n            var reset = function() {\n                // Check if element is hidden\n                if (initialHiddenCheck) {\n                    var invisible = element.offsetWidth === 0 && element.offsetHeight === 0;\n                    if (invisible) {\n                        // Check in next frame\n                        if (!lastAnimationFrame){\n                            lastAnimationFrame = requestAnimationFrame(function(){\n                                lastAnimationFrame = 0;\n\n                                reset();\n                            });\n                        }\n\n                        return;\n                    } else {\n                        // Stop checking\n                        initialHiddenCheck = false;\n                    }\n                }\n\n                resetExpandShrink();\n            };\n            element.resizeSensor.resetSensor = reset;\n\n            var onResized = function() {\n                rafId = 0;\n\n                if (!dirty) return;\n\n                lastWidth = size.width;\n                lastHeight = size.height;\n\n                if (element.resizedAttached) {\n                    element.resizedAttached.call(size);\n                }\n            };\n\n            var onScroll = function() {\n                size = getElementSize(element);\n                dirty = size.width !== lastWidth || size.height !== lastHeight;\n\n                if (dirty && !rafId) {\n                    rafId = requestAnimationFrame(onResized);\n                }\n\n                reset();\n            };\n\n            var addEvent = function(el, name, cb) {\n                if (el.attachEvent) {\n                    el.attachEvent('on' + name, cb);\n                } else {\n                    el.addEventListener(name, cb);\n                }\n            };\n\n            addEvent(expand, 'scroll', onScroll);\n            addEvent(shrink, 'scroll', onScroll);\n\n            // Fix for custom Elements\n            requestAnimationFrame(reset);\n        }\n\n        forEachElement(element, function(elem){\n            attachResizeEvent(elem, callback);\n        });\n\n        this.detach = function(ev) {\n            ResizeSensor.detach(element, ev);\n        };\n\n        this.reset = function() {\n            element.resizeSensor.resetSensor();\n        };\n    };\n\n    ResizeSensor.reset = function(element) {\n        forEachElement(element, function(elem){\n            elem.resizeSensor.resetSensor();\n        });\n    };\n\n    ResizeSensor.detach = function(element, ev) {\n        forEachElement(element, function(elem){\n            if (!elem) return;\n            if(elem.resizedAttached && typeof ev === \"function\"){\n                elem.resizedAttached.remove(ev);\n                if(elem.resizedAttached.length()) return;\n            }\n            if (elem.resizeSensor) {\n                if (elem.contains(elem.resizeSensor)) {\n                    elem.removeChild(elem.resizeSensor);\n                }\n                delete elem.resizeSensor;\n                delete elem.resizedAttached;\n            }\n        });\n    };\n\n    if (typeof MutationObserver !== \"undefined\") {\n        var observer = new MutationObserver(function (mutations) {\n            for (var i in mutations) {\n                if (mutations.hasOwnProperty(i)) {\n                    var items = mutations[i].addedNodes;\n                    for (var j = 0; j < items.length; j++) {\n                        if (items[j].resizeSensor) {\n                            ResizeSensor.reset(items[j]);\n                        }\n                    }\n                }\n            }\n        });\n\n        document.addEventListener(\"DOMContentLoaded\", function (event) {\n            observer.observe(document.body, {\n                childList: true,\n                subtree: true,\n            });\n        });\n    }\n\n    return ResizeSensor;\n\n}));\n","'use strict';\n\nvar keys = require('object-keys');\nvar hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';\n\nvar toStr = Object.prototype.toString;\nvar concat = Array.prototype.concat;\nvar origDefineProperty = Object.defineProperty;\n\nvar isFunction = function (fn) {\n\treturn typeof fn === 'function' && toStr.call(fn) === '[object Function]';\n};\n\nvar arePropertyDescriptorsSupported = function () {\n\tvar obj = {};\n\ttry {\n\t\torigDefineProperty(obj, 'x', { enumerable: false, value: obj });\n\t\t// eslint-disable-next-line no-unused-vars, no-restricted-syntax\n\t\tfor (var _ in obj) { // jscs:ignore disallowUnusedVariables\n\t\t\treturn false;\n\t\t}\n\t\treturn obj.x === obj;\n\t} catch (e) { /* this is IE 8. */\n\t\treturn false;\n\t}\n};\nvar supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();\n\nvar defineProperty = function (object, name, value, predicate) {\n\tif (name in object && (!isFunction(predicate) || !predicate())) {\n\t\treturn;\n\t}\n\tif (supportsDescriptors) {\n\t\torigDefineProperty(object, name, {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: false,\n\t\t\tvalue: value,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\tobject[name] = value;\n\t}\n};\n\nvar defineProperties = function (object, map) {\n\tvar predicates = arguments.length > 2 ? arguments[2] : {};\n\tvar props = keys(map);\n\tif (hasSymbols) {\n\t\tprops = concat.call(props, Object.getOwnPropertySymbols(map));\n\t}\n\tfor (var i = 0; i < props.length; i += 1) {\n\t\tdefineProperty(object, props[i], map[props[i]], predicates[props[i]]);\n\t}\n};\n\ndefineProperties.supportsDescriptors = !!supportsDescriptors;\n\nmodule.exports = defineProperties;\n","'use strict';\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar slice = Array.prototype.slice;\nvar toStr = Object.prototype.toString;\nvar funcType = '[object Function]';\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.call(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slice.call(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                args.concat(slice.call(arguments))\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        } else {\n            return target.apply(\n                that,\n                args.concat(slice.call(arguments))\n            );\n        }\n    };\n\n    var boundLength = Math.max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs.push('$' + i);\n    }\n\n    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n","'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = Function.prototype.bind || implementation;\n","'use strict';\n\n/* eslint complexity: [2, 17], max-statements: [2, 33] */\nmodule.exports = function hasSymbols() {\n\tif (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }\n\tif (typeof Symbol.iterator === 'symbol') { return true; }\n\n\tvar obj = {};\n\tvar sym = Symbol('test');\n\tvar symObj = Object(sym);\n\tif (typeof sym === 'string') { return false; }\n\n\tif (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }\n\tif (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }\n\n\t// temp disabled per https://github.com/ljharb/object.assign/issues/17\n\t// if (sym instanceof Symbol) { return false; }\n\t// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n\t// if (!(symObj instanceof Symbol)) { return false; }\n\n\t// if (typeof Symbol.prototype.toString !== 'function') { return false; }\n\t// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\tvar symVal = 42;\n\tobj[sym] = symVal;\n\tfor (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax\n\tif (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }\n\n\tif (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }\n\n\tvar syms = Object.getOwnPropertySymbols(obj);\n\tif (syms.length !== 1 || syms[0] !== sym) { return false; }\n\n\tif (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }\n\n\tif (typeof Object.getOwnPropertyDescriptor === 'function') {\n\t\tvar descriptor = Object.getOwnPropertyDescriptor(obj, sym);\n\t\tif (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }\n\t}\n\n\treturn true;\n};\n","'use strict';\n\nvar bind = require('function-bind');\n\nmodule.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);\n","'use strict';\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar REACT_STATICS = {\n    childContextTypes: true,\n    contextTypes: true,\n    defaultProps: true,\n    displayName: true,\n    getDefaultProps: true,\n    getDerivedStateFromProps: true,\n    mixins: true,\n    propTypes: true,\n    type: true\n};\n\nvar KNOWN_STATICS = {\n    name: true,\n    length: true,\n    prototype: true,\n    caller: true,\n    callee: true,\n    arguments: true,\n    arity: true\n};\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = getPrototypeOf && getPrototypeOf(Object);\n\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components\n\n        if (objectPrototype) {\n            var inheritedComponent = getPrototypeOf(sourceComponent);\n            if (inheritedComponent && inheritedComponent !== objectPrototype) {\n                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n            }\n        }\n\n        var keys = getOwnPropertyNames(sourceComponent);\n\n        if (getOwnPropertySymbols) {\n            keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n        }\n\n        for (var i = 0; i < keys.length; ++i) {\n            var key = keys[i];\n            if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {\n                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n                try { // Avoid failures from read-only properties\n                    defineProperty(targetComponent, key, descriptor);\n                } catch (e) {}\n            }\n        }\n\n        return targetComponent;\n    }\n\n    return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;\n","var simpleIsEqual = function simpleIsEqual(a, b) {\n  return a === b;\n};\n\nfunction index (resultFn, isEqual) {\n  if (isEqual === void 0) {\n    isEqual = simpleIsEqual;\n  }\n\n  var lastThis;\n  var lastArgs = [];\n  var lastResult;\n  var calledOnce = false;\n\n  var isNewArgEqualToLast = function isNewArgEqualToLast(newArg, index) {\n    return isEqual(newArg, lastArgs[index]);\n  };\n\n  var result = function result() {\n    for (var _len = arguments.length, newArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n      newArgs[_key] = arguments[_key];\n    }\n\n    if (calledOnce && lastThis === this && newArgs.length === lastArgs.length && newArgs.every(isNewArgEqualToLast)) {\n      return lastResult;\n    }\n\n    lastResult = resultFn.apply(this, newArgs);\n    calledOnce = true;\n    lastThis = this;\n    lastArgs = newArgs;\n    return lastResult;\n  };\n\n  return result;\n}\n\nexport default index;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _set = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/set\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/defineProperty\"));\n\nvar EventEmitter =\n/*#__PURE__*/\nfunction () {\n  function EventEmitter() {\n    (0, _classCallCheck2.default)(this, EventEmitter);\n    (0, _defineProperty2.default)(this, \"listeners\", {});\n  }\n\n  (0, _createClass2.default)(EventEmitter, [{\n    key: \"on\",\n    value: function on(event, cb) {\n      if (!this.listeners[event]) {\n        this.listeners[event] = new _set.default();\n      }\n\n      if (this.listeners[event].has(cb)) {\n        throw new Error(\"The listener already exising in event: \".concat(event));\n      }\n\n      this.listeners[event].add(cb);\n      return this;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(event) {\n      for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        data[_key - 1] = arguments[_key];\n      }\n\n      var listeners = this.listeners[event];\n      var hasListeners = listeners && listeners.size;\n\n      if (!hasListeners) {\n        return false;\n      }\n\n      listeners.forEach(function (cb) {\n        return cb.apply(void 0, data);\n      }); // eslint-disable-line standard/no-callback-literal\n\n      return true;\n    }\n  }, {\n    key: \"off\",\n    value: function off(event, cb) {\n      this.listeners[event].delete(cb);\n      return this;\n    }\n  }]);\n  return EventEmitter;\n}();\n\nexports.default = EventEmitter;","\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs2/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/json/stringify\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/inherits\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/assertThisInitialized\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/defineProperty\"));\n\nvar _url = require(\"url\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _router = _interopRequireWildcard(require(\"./router\"));\n\nvar _utils = require(\"./utils\");\n\n/* global __NEXT_DATA__ */\nfunction isLocal(href) {\n  var url = (0, _url.parse)(href, false, true);\n  var origin = (0, _url.parse)((0, _utils.getLocationOrigin)(), false, true);\n  return !url.host || url.protocol === origin.protocol && url.host === origin.host;\n}\n\nfunction memoizedFormatUrl(formatUrl) {\n  var lastHref = null;\n  var lastAs = null;\n  var lastResult = null;\n  return function (href, as) {\n    if (href === lastHref && as === lastAs) {\n      return lastResult;\n    }\n\n    var result = formatUrl(href, as);\n    lastHref = href;\n    lastAs = as;\n    lastResult = result;\n    return result;\n  };\n}\n\nvar Link =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2.default)(Link, _Component);\n\n  function Link() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Link);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Link)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), \"formatUrls\", memoizedFormatUrl(function (href, asHref) {\n      return {\n        href: href && (0, _typeof2.default)(href) === 'object' ? (0, _url.format)(href) : href,\n        as: asHref && (0, _typeof2.default)(asHref) === 'object' ? (0, _url.format)(asHref) : asHref\n      };\n    }));\n    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), \"linkClicked\", function (e) {\n      var _e$currentTarget = e.currentTarget,\n          nodeName = _e$currentTarget.nodeName,\n          target = _e$currentTarget.target;\n\n      if (nodeName === 'A' && (target && target !== '_self' || e.metaKey || e.ctrlKey || e.shiftKey || e.nativeEvent && e.nativeEvent.which === 2)) {\n        // ignore click for new tab / new window behavior\n        return;\n      }\n\n      var _this$formatUrls = _this.formatUrls(_this.props.href, _this.props.as),\n          href = _this$formatUrls.href,\n          as = _this$formatUrls.as;\n\n      if (!isLocal(href)) {\n        // ignore click if it's outside our scope\n        return;\n      }\n\n      var pathname = window.location.pathname;\n      href = (0, _url.resolve)(pathname, href);\n      as = as ? (0, _url.resolve)(pathname, as) : href;\n      e.preventDefault(); //  avoid scroll for urls with anchor refs\n\n      var scroll = _this.props.scroll;\n\n      if (scroll == null) {\n        scroll = as.indexOf('#') < 0;\n      } // replace state instead of push if prop is present\n\n\n      var replace = _this.props.replace;\n      var changeMethod = replace ? 'replace' : 'push'; // straight up redirect\n\n      _router.default[changeMethod](href, as, {\n        shallow: _this.props.shallow\n      }).then(function (success) {\n        if (!success) return;\n\n        if (scroll) {\n          window.scrollTo(0, 0);\n          document.body.focus();\n        }\n      }).catch(function (err) {\n        if (_this.props.onError) _this.props.onError(err);\n      });\n    });\n    return _this;\n  }\n\n  (0, _createClass2.default)(Link, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.prefetch();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if ((0, _stringify.default)(this.props.href) !== (0, _stringify.default)(prevProps.href)) {\n        this.prefetch();\n      }\n    } // The function is memoized so that no extra lifecycles are needed\n    // as per https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\n\n  }, {\n    key: \"prefetch\",\n    value: function prefetch() {\n      if (!this.props.prefetch) return;\n      if (typeof window === 'undefined') return; // Prefetch the JSON page if asked (only in the client)\n\n      var pathname = window.location.pathname;\n\n      var _this$formatUrls2 = this.formatUrls(this.props.href, this.props.as),\n          parsedHref = _this$formatUrls2.href;\n\n      var href = (0, _url.resolve)(pathname, parsedHref);\n\n      _router.default.prefetch(href);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var children = this.props.children;\n\n      var _this$formatUrls3 = this.formatUrls(this.props.href, this.props.as),\n          href = _this$formatUrls3.href,\n          as = _this$formatUrls3.as; // Deprecated. Warning shown by propType check. If the childen provided is a string (<Link>example</Link>) we wrap it in an <a> tag\n\n\n      if (typeof children === 'string') {\n        children = _react.default.createElement(\"a\", null, children);\n      } // This will return the first child, if multiple are provided it will throw an error\n\n\n      var child = _react.Children.only(children);\n\n      var props = {\n        onClick: function onClick(e) {\n          if (child.props && typeof child.props.onClick === 'function') {\n            child.props.onClick(e);\n          }\n\n          if (!e.defaultPrevented) {\n            _this2.linkClicked(e);\n          }\n        } // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is\n        // defined, we specify the current 'href', so that repetition is not needed by the user\n\n      };\n\n      if (this.props.passHref || child.type === 'a' && !('href' in child.props)) {\n        props.href = as || href;\n      } // Add the ending slash to the paths. So, we can serve the\n      // \"<page>/index.html\" directly.\n\n\n      if (props.href && typeof __NEXT_DATA__ !== 'undefined' && __NEXT_DATA__.nextExport) {\n        props.href = (0, _router._rewriteUrlForNextExport)(props.href);\n      }\n\n      return _react.default.cloneElement(child, props);\n    }\n  }]);\n  return Link;\n}(_react.Component);\n\nif (process.env.NODE_ENV === 'development') {\n  var warn = (0, _utils.execOnce)(console.error); // This module gets removed by webpack.IgnorePlugin\n\n  var exact = require('prop-types-exact');\n\n  Link.propTypes = exact({\n    href: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]).isRequired,\n    as: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),\n    prefetch: _propTypes.default.bool,\n    replace: _propTypes.default.bool,\n    shallow: _propTypes.default.bool,\n    passHref: _propTypes.default.bool,\n    scroll: _propTypes.default.bool,\n    children: _propTypes.default.oneOfType([_propTypes.default.element, function (props, propName) {\n      var value = props[propName];\n\n      if (typeof value === 'string') {\n        warn(\"Warning: You're using a string directly inside <Link>. This usage has been deprecated. Please add an <a> tag as child of <Link>\");\n      }\n\n      return null;\n    }]).isRequired\n  });\n}\n\nvar _default = Link;\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _assign = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/assign\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\n// based on https://github.com/sindresorhus/p-queue (MIT)\n// modified for browser support\nvar Queue =\n/*#__PURE__*/\nfunction () {\n  function Queue() {\n    (0, _classCallCheck2.default)(this, Queue);\n    this._queue = [];\n  }\n\n  (0, _createClass2.default)(Queue, [{\n    key: \"enqueue\",\n    value: function enqueue(run) {\n      this._queue.push(run);\n    }\n  }, {\n    key: \"dequeue\",\n    value: function dequeue() {\n      return this._queue.shift();\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._queue.length;\n    }\n  }]);\n  return Queue;\n}();\n\nvar PQueue =\n/*#__PURE__*/\nfunction () {\n  function PQueue(opts) {\n    (0, _classCallCheck2.default)(this, PQueue);\n    opts = (0, _assign.default)({\n      concurrency: Infinity,\n      queueClass: Queue\n    }, opts);\n\n    if (opts.concurrency < 1) {\n      throw new TypeError('Expected `concurrency` to be a number from 1 and up');\n    }\n\n    this.queue = new opts.queueClass(); // eslint-disable-line new-cap\n\n    this._pendingCount = 0;\n    this._concurrency = opts.concurrency;\n\n    this._resolveEmpty = function () {};\n  }\n\n  (0, _createClass2.default)(PQueue, [{\n    key: \"_next\",\n    value: function _next() {\n      this._pendingCount--;\n\n      if (this.queue.size > 0) {\n        this.queue.dequeue()();\n      } else {\n        this._resolveEmpty();\n      }\n    }\n  }, {\n    key: \"add\",\n    value: function add(fn, opts) {\n      var _this = this;\n\n      return new _promise.default(function (resolve, reject) {\n        var run = function run() {\n          _this._pendingCount++;\n          fn().then(function (val) {\n            resolve(val);\n\n            _this._next();\n          }, function (err) {\n            reject(err);\n\n            _this._next();\n          });\n        };\n\n        if (_this._pendingCount < _this._concurrency) {\n          run();\n        } else {\n          _this.queue.enqueue(run, opts);\n        }\n      });\n    }\n  }, {\n    key: \"onEmpty\",\n    value: function onEmpty() {\n      var _this2 = this;\n\n      return new _promise.default(function (resolve) {\n        var existingResolve = _this2._resolveEmpty;\n\n        _this2._resolveEmpty = function () {\n          existingResolve();\n          resolve();\n        };\n      });\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.queue.size;\n    }\n  }, {\n    key: \"pending\",\n    get: function get() {\n      return this._pendingCount;\n    }\n  }]);\n  return PQueue;\n}();\n\nexports.default = PQueue;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._rewriteUrlForNextExport = _rewriteUrlForNextExport;\nexports.makePublicRouterInstance = makePublicRouterInstance;\nObject.defineProperty(exports, \"withRouter\", {\n  enumerable: true,\n  get: function get() {\n    return _withRouter.default;\n  }\n});\nexports.Router = exports.createRouter = exports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/objectSpread\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/typeof\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/slicedToArray\"));\n\nvar _construct2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/construct\"));\n\nvar _defineProperty = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/define-property\"));\n\nvar _router = _interopRequireDefault(require(\"./router\"));\n\nvar _utils = require(\"../utils\");\n\nvar _withRouter = _interopRequireDefault(require(\"./with-router\"));\n\n/* global window */\nvar SingletonRouter = {\n  router: null,\n  // holds the actual router instance\n  readyCallbacks: [],\n  ready: function ready(cb) {\n    if (this.router) return cb();\n\n    if (typeof window !== 'undefined') {\n      this.readyCallbacks.push(cb);\n    }\n  }\n}; // Create public properties and methods of the router in the SingletonRouter\n\nvar urlPropertyFields = ['pathname', 'route', 'query', 'asPath'];\nvar propertyFields = ['components'];\nvar routerEvents = ['routeChangeStart', 'beforeHistoryChange', 'routeChangeComplete', 'routeChangeError', 'hashChangeStart', 'hashChangeComplete'];\nvar coreMethodFields = ['push', 'replace', 'reload', 'back', 'prefetch', 'beforePopState']; // Events is a static property on the router, the router doesn't have to be initialized to use it\n\nObject.defineProperty(SingletonRouter, 'events', {\n  get: function get() {\n    return _router.default.events;\n  }\n});\npropertyFields.concat(urlPropertyFields).forEach(function (field) {\n  // Here we need to use Object.defineProperty because, we need to return\n  // the property assigned to the actual router\n  // The value might get changed as we change routes and this is the\n  // proper way to access it\n  (0, _defineProperty.default)(SingletonRouter, field, {\n    get: function get() {\n      throwIfNoRouter();\n      return SingletonRouter.router[field];\n    }\n  });\n});\ncoreMethodFields.forEach(function (field) {\n  SingletonRouter[field] = function () {\n    var _SingletonRouter$rout;\n\n    throwIfNoRouter();\n    return (_SingletonRouter$rout = SingletonRouter.router)[field].apply(_SingletonRouter$rout, arguments);\n  };\n});\nrouterEvents.forEach(function (event) {\n  SingletonRouter.ready(function () {\n    _router.default.events.on(event, function () {\n      var eventField = \"on\".concat(event.charAt(0).toUpperCase()).concat(event.substring(1));\n\n      if (SingletonRouter[eventField]) {\n        try {\n          SingletonRouter[eventField].apply(SingletonRouter, arguments);\n        } catch (err) {\n          console.error(\"Error when running the Router event: \".concat(eventField));\n          console.error(\"\".concat(err.message, \"\\n\").concat(err.stack));\n        }\n      }\n    });\n  });\n});\nvar warnAboutRouterOnAppUpdated = (0, _utils.execOnce)(function () {\n  console.warn(\"Router.onAppUpdated is removed - visit https://err.sh/zeit/next.js/no-on-app-updated-hook for more information.\");\n});\nObject.defineProperty(SingletonRouter, 'onAppUpdated', {\n  get: function get() {\n    return null;\n  },\n  set: function set() {\n    warnAboutRouterOnAppUpdated();\n    return null;\n  }\n});\n\nfunction throwIfNoRouter() {\n  if (!SingletonRouter.router) {\n    var message = 'No router instance found.\\n' + 'You should only use \"next/router\" inside the client side of your app.\\n';\n    throw new Error(message);\n  }\n} // Export the SingletonRouter and this is the public API.\n\n\nvar _default = SingletonRouter; // Reexport the withRoute HOC\n\nexports.default = _default;\n\n// INTERNAL APIS\n// -------------\n// (do not use following exports inside the app)\n// Create a router and assign it as the singleton instance.\n// This is used in client side when we are initilizing the app.\n// This should **not** use inside the server.\nvar createRouter = function createRouter() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  SingletonRouter.router = (0, _construct2.default)(_router.default, args);\n  SingletonRouter.readyCallbacks.forEach(function (cb) {\n    return cb();\n  });\n  SingletonRouter.readyCallbacks = [];\n  return SingletonRouter.router;\n}; // Export the actual Router class, which is usually used inside the server\n\n\nexports.createRouter = createRouter;\nvar Router = _router.default;\nexports.Router = Router;\n\nfunction _rewriteUrlForNextExport(url) {\n  var _url$split = url.split('#'),\n      _url$split2 = (0, _slicedToArray2.default)(_url$split, 2),\n      hash = _url$split2[1];\n\n  url = url.replace(/#.*/, '');\n\n  var _url$split3 = url.split('?'),\n      _url$split4 = (0, _slicedToArray2.default)(_url$split3, 2),\n      path = _url$split4[0],\n      qs = _url$split4[1];\n\n  path = path.replace(/\\/$/, '');\n  var newPath = path; // Append a trailing slash if this path does not have an extension\n\n  if (!/\\.[^/]+\\/?$/.test(path)) {\n    newPath = \"\".concat(path, \"/\");\n  }\n\n  if (qs) {\n    newPath = \"\".concat(newPath, \"?\").concat(qs);\n  }\n\n  if (hash) {\n    newPath = \"\".concat(newPath, \"#\").concat(hash);\n  }\n\n  return newPath;\n} // This function is used to create the `withRouter` router instance\n\n\nfunction makePublicRouterInstance(router) {\n  var instance = {};\n\n  for (var _i = 0; _i < urlPropertyFields.length; _i++) {\n    var property = urlPropertyFields[_i];\n\n    if ((0, _typeof2.default)(router[property]) === 'object') {\n      instance[property] = (0, _objectSpread2.default)({}, router[property]); // makes sure query is not stateful\n\n      continue;\n    }\n\n    instance[property] = router[property];\n  } // Events is a static property on the router, the router doesn't have to be initialized to use it\n\n\n  instance.events = _router.default.events;\n  propertyFields.forEach(function (field) {\n    // Here we need to use Object.defineProperty because, we need to return\n    // the property assigned to the actual router\n    // The value might get changed as we change routes and this is the\n    // proper way to access it\n    (0, _defineProperty.default)(instance, field, {\n      get: function get() {\n        return router[field];\n      }\n    });\n  });\n  coreMethodFields.forEach(function (field) {\n    instance[field] = function () {\n      return router[field].apply(router, arguments);\n    };\n  });\n  return instance;\n}","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/slicedToArray\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/typeof\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs2/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/asyncToGenerator\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/objectSpread\"));\n\nvar _set = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/set\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/defineProperty\"));\n\nvar _url2 = require(\"url\");\n\nvar _EventEmitter = _interopRequireDefault(require(\"../EventEmitter\"));\n\nvar _shallowEquals = _interopRequireDefault(require(\"../shallow-equals\"));\n\nvar _pQueue = _interopRequireDefault(require(\"../p-queue\"));\n\nvar _utils = require(\"../utils\");\n\nvar _ = require(\"./\");\n\n/* global __NEXT_DATA__ */\nvar Router =\n/*#__PURE__*/\nfunction () {\n  function Router(_pathname, _query, _as2) {\n    var _this = this;\n\n    var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n        initialProps = _ref.initialProps,\n        pageLoader = _ref.pageLoader,\n        App = _ref.App,\n        Component = _ref.Component,\n        ErrorComponent = _ref.ErrorComponent,\n        err = _ref.err;\n\n    (0, _classCallCheck2.default)(this, Router);\n    (0, _defineProperty2.default)(this, \"onPopState\", function (e) {\n      if (!e.state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        var pathname = _this.pathname,\n            query = _this.query;\n\n        _this.changeState('replaceState', (0, _url2.format)({\n          pathname: pathname,\n          query: query\n        }), (0, _utils.getURL)());\n\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n\n\n      if (!_this._beforePopState(e.state)) {\n        return;\n      }\n\n      var _e$state = e.state,\n          url = _e$state.url,\n          as = _e$state.as,\n          options = _e$state.options;\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (typeof url === 'undefined' || typeof as === 'undefined') {\n          console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/zeit/next.js/popstate-state-empty');\n        }\n      }\n\n      _this.replace(url, as, options);\n    });\n    // represents the current component key\n    this.route = toRoute(_pathname); // set up the component cache (by route keys)\n\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n\n    if (Component !== ErrorComponent) {\n      this.components[this.route] = {\n        Component: Component,\n        props: initialProps,\n        err: err\n      };\n    }\n\n    this.components['/_app'] = {\n      Component: App // Backwards compat for Router.router.events\n      // TODO: Should be remove the following major version as it was never documented\n\n    };\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    this.prefetchQueue = new _pQueue.default({\n      concurrency: 2\n    });\n    this.ErrorComponent = ErrorComponent;\n    this.pathname = _pathname;\n    this.query = _query;\n    this.asPath = _as2;\n    this.subscriptions = new _set.default();\n    this.componentLoadCancel = null;\n\n    this._beforePopState = function () {\n      return true;\n    };\n\n    if (typeof window !== 'undefined') {\n      // in order for `e.state` to work on the `onpopstate` event\n      // we have to register the initial route upon initialization\n      this.changeState('replaceState', (0, _url2.format)({\n        pathname: _pathname,\n        query: _query\n      }), (0, _utils.getURL)());\n      window.addEventListener('popstate', this.onPopState);\n    }\n  }\n\n  (0, _createClass2.default)(Router, [{\n    key: \"update\",\n    value: function update(route, Component) {\n      var data = this.components[route];\n\n      if (!data) {\n        throw new Error(\"Cannot update unavailable route: \".concat(route));\n      }\n\n      var newData = (0, _objectSpread2.default)({}, data, {\n        Component: Component\n      });\n      this.components[route] = newData; // pages/_app.js updated\n\n      if (route === '/_app') {\n        this.notify(this.components[this.route]);\n        return;\n      }\n\n      if (route === this.route) {\n        this.notify(newData);\n      }\n    }\n  }, {\n    key: \"reload\",\n    value: function () {\n      var _reload = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee(route) {\n        var pathname, query, url, as, routeInfo, error;\n        return _regenerator.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                delete this.components[route];\n                this.pageLoader.clearCache(route);\n\n                if (!(route !== this.route)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 4:\n                pathname = this.pathname, query = this.query;\n                url = window.location.href; // This makes sure we only use pathname + query + hash, to mirror `asPath` coming from the server.\n\n                as = window.location.pathname + window.location.search + window.location.hash;\n                Router.events.emit('routeChangeStart', url);\n                _context.next = 10;\n                return this.getRouteInfo(route, pathname, query, as);\n\n              case 10:\n                routeInfo = _context.sent;\n                error = routeInfo.error;\n\n                if (!(error && error.cancelled)) {\n                  _context.next = 14;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 14:\n                this.notify(routeInfo);\n\n                if (!error) {\n                  _context.next = 18;\n                  break;\n                }\n\n                Router.events.emit('routeChangeError', error, url);\n                throw error;\n\n              case 18:\n                Router.events.emit('routeChangeComplete', url);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function reload(_x) {\n        return _reload.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"back\",\n    value: function back() {\n      window.history.back();\n    }\n  }, {\n    key: \"push\",\n    value: function push(url) {\n      var as = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : url;\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.change('pushState', url, as, options);\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(url) {\n      var as = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : url;\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.change('replaceState', url, as, options);\n    }\n  }, {\n    key: \"change\",\n    value: function () {\n      var _change = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee2(method, _url, _as, options) {\n        var url, as, _parse, asPathname, asQuery, _parse2, pathname, query, route, _options$shallow, shallow, routeInfo, _routeInfo, error, hash;\n\n        return _regenerator.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // If url and as provided as an object representation,\n                // we'll format them into the string version here.\n                url = (0, _typeof2.default)(_url) === 'object' ? (0, _url2.format)(_url) : _url;\n                as = (0, _typeof2.default)(_as) === 'object' ? (0, _url2.format)(_as) : _as; // Add the ending slash to the paths. So, we can serve the\n                // \"<page>/index.html\" directly for the SSR page.\n\n                if (__NEXT_DATA__.nextExport) {\n                  as = (0, _._rewriteUrlForNextExport)(as);\n                }\n\n                this.abortComponentLoad(as); // If the url change is only related to a hash change\n                // We should not proceed. We should only change the state.\n\n                if (!this.onlyAHashChange(as)) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                Router.events.emit('hashChangeStart', as);\n                this.changeState(method, url, as);\n                this.scrollToHash(as);\n                Router.events.emit('hashChangeComplete', as);\n                return _context2.abrupt(\"return\", true);\n\n              case 10:\n                _parse = (0, _url2.parse)(as, true), asPathname = _parse.pathname, asQuery = _parse.query;\n                _parse2 = (0, _url2.parse)(url, true), pathname = _parse2.pathname, query = _parse2.query; // If asked to change the current URL we should reload the current page\n                // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n                // We also need to set the method = replaceState always\n                // as this should not go into the history (That's how browsers work)\n\n                if (!this.urlIsNew(asPathname, asQuery)) {\n                  method = 'replaceState';\n                }\n\n                route = toRoute(pathname);\n                _options$shallow = options.shallow, shallow = _options$shallow === void 0 ? false : _options$shallow;\n                routeInfo = null;\n                Router.events.emit('routeChangeStart', as); // If shallow === false and other conditions met, we reuse the\n                // existing routeInfo for this route.\n                // Because of this, getInitialProps would not run.\n\n                if (!(shallow && this.isShallowRoutingPossible(route))) {\n                  _context2.next = 21;\n                  break;\n                }\n\n                routeInfo = this.components[route];\n                _context2.next = 24;\n                break;\n\n              case 21:\n                _context2.next = 23;\n                return this.getRouteInfo(route, pathname, query, as);\n\n              case 23:\n                routeInfo = _context2.sent;\n\n              case 24:\n                _routeInfo = routeInfo, error = _routeInfo.error;\n\n                if (!(error && error.cancelled)) {\n                  _context2.next = 27;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", false);\n\n              case 27:\n                Router.events.emit('beforeHistoryChange', as);\n                this.changeState(method, url, as, options);\n                hash = window.location.hash.substring(1);\n                this.set(route, pathname, query, as, (0, _objectSpread2.default)({}, routeInfo, {\n                  hash: hash\n                }));\n\n                if (!error) {\n                  _context2.next = 34;\n                  break;\n                }\n\n                Router.events.emit('routeChangeError', error, as);\n                throw error;\n\n              case 34:\n                Router.events.emit('routeChangeComplete', as);\n                return _context2.abrupt(\"return\", true);\n\n              case 36:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function change(_x2, _x3, _x4, _x5) {\n        return _change.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"changeState\",\n    value: function changeState(method, url, as) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (typeof window.history === 'undefined') {\n          console.error(\"Warning: window.history is not available.\");\n          return;\n        }\n\n        if (typeof window.history[method] === 'undefined') {\n          console.error(\"Warning: window.history.\".concat(method, \" is not available\"));\n          return;\n        }\n      }\n\n      if (method !== 'pushState' || (0, _utils.getURL)() !== as) {\n        window.history[method]({\n          url: url,\n          as: as,\n          options: options\n        }, null, as);\n      }\n    }\n  }, {\n    key: \"getRouteInfo\",\n    value: function () {\n      var _getRouteInfo = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee3(route, pathname, query, as) {\n        var routeInfo, _routeInfo2, Component, ctx, _Component, _ctx;\n\n        return _regenerator.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                routeInfo = null;\n                _context3.prev = 1;\n                routeInfo = this.components[route];\n\n                if (routeInfo) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                _context3.next = 6;\n                return this.fetchComponent(route, as);\n\n              case 6:\n                _context3.t0 = _context3.sent;\n                routeInfo = {\n                  Component: _context3.t0\n                };\n\n              case 8:\n                _routeInfo2 = routeInfo, Component = _routeInfo2.Component;\n\n                if (!(typeof Component !== 'function')) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                throw new Error(\"The default export is not a React Component in page: \\\"\".concat(pathname, \"\\\"\"));\n\n              case 11:\n                ctx = {\n                  pathname: pathname,\n                  query: query,\n                  asPath: as\n                };\n                _context3.next = 14;\n                return this.getInitialProps(Component, ctx);\n\n              case 14:\n                routeInfo.props = _context3.sent;\n                this.components[route] = routeInfo;\n                _context3.next = 40;\n                break;\n\n              case 18:\n                _context3.prev = 18;\n                _context3.t1 = _context3[\"catch\"](1);\n\n                if (!(_context3.t1.code === 'PAGE_LOAD_ERROR')) {\n                  _context3.next = 24;\n                  break;\n                }\n\n                // If we can't load the page it could be one of following reasons\n                //  1. Page doesn't exists\n                //  2. Page does exist in a different zone\n                //  3. Internal error while loading the page\n                // So, doing a hard reload is the proper way to deal with this.\n                window.location.href = as; // Changing the URL doesn't block executing the current code path.\n                // So, we need to mark it as a cancelled error and stop the routing logic.\n\n                _context3.t1.cancelled = true;\n                return _context3.abrupt(\"return\", {\n                  error: _context3.t1\n                });\n\n              case 24:\n                if (!_context3.t1.cancelled) {\n                  _context3.next = 26;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  error: _context3.t1\n                });\n\n              case 26:\n                _Component = this.ErrorComponent;\n                routeInfo = {\n                  Component: _Component,\n                  err: _context3.t1\n                };\n                _ctx = {\n                  err: _context3.t1,\n                  pathname: pathname,\n                  query: query\n                };\n                _context3.prev = 29;\n                _context3.next = 32;\n                return this.getInitialProps(_Component, _ctx);\n\n              case 32:\n                routeInfo.props = _context3.sent;\n                _context3.next = 39;\n                break;\n\n              case 35:\n                _context3.prev = 35;\n                _context3.t2 = _context3[\"catch\"](29);\n                console.error('Error in error page `getInitialProps`: ', _context3.t2);\n                routeInfo.props = {};\n\n              case 39:\n                routeInfo.error = _context3.t1;\n\n              case 40:\n                return _context3.abrupt(\"return\", routeInfo);\n\n              case 41:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 18], [29, 35]]);\n      }));\n\n      return function getRouteInfo(_x6, _x7, _x8, _x9) {\n        return _getRouteInfo.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"set\",\n    value: function set(route, pathname, query, as, data) {\n      this.route = route;\n      this.pathname = pathname;\n      this.query = query;\n      this.asPath = as;\n      this.notify(data);\n    }\n  }, {\n    key: \"beforePopState\",\n    value: function beforePopState(cb) {\n      this._beforePopState = cb;\n    }\n  }, {\n    key: \"onlyAHashChange\",\n    value: function onlyAHashChange(as) {\n      if (!this.asPath) return false;\n\n      var _this$asPath$split = this.asPath.split('#'),\n          _this$asPath$split2 = (0, _slicedToArray2.default)(_this$asPath$split, 2),\n          oldUrlNoHash = _this$asPath$split2[0],\n          oldHash = _this$asPath$split2[1];\n\n      var _as$split = as.split('#'),\n          _as$split2 = (0, _slicedToArray2.default)(_as$split, 2),\n          newUrlNoHash = _as$split2[0],\n          newHash = _as$split2[1]; // Makes sure we scroll to the provided hash if the url/hash are the same\n\n\n      if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n        return true;\n      } // If the urls are change, there's more than a hash change\n\n\n      if (oldUrlNoHash !== newUrlNoHash) {\n        return false;\n      } // If the hash has changed, then it's a hash only change.\n      // This check is necessary to handle both the enter and\n      // leave hash === '' cases. The identity case falls through\n      // and is treated as a next reload.\n\n\n      return oldHash !== newHash;\n    }\n  }, {\n    key: \"scrollToHash\",\n    value: function scrollToHash(as) {\n      var _as$split3 = as.split('#'),\n          _as$split4 = (0, _slicedToArray2.default)(_as$split3, 2),\n          hash = _as$split4[1]; // Scroll to top if the hash is just `#` with no value\n\n\n      if (hash === '') {\n        window.scrollTo(0, 0);\n        return;\n      } // First we check if the element by id is found\n\n\n      var idEl = document.getElementById(hash);\n\n      if (idEl) {\n        idEl.scrollIntoView();\n        return;\n      } // If there's no element with the id, we check the `name` property\n      // To mirror browsers\n\n\n      var nameEl = document.getElementsByName(hash)[0];\n\n      if (nameEl) {\n        nameEl.scrollIntoView();\n      }\n    }\n  }, {\n    key: \"urlIsNew\",\n    value: function urlIsNew(pathname, query) {\n      return this.pathname !== pathname || !(0, _shallowEquals.default)(query, this.query);\n    }\n  }, {\n    key: \"isShallowRoutingPossible\",\n    value: function isShallowRoutingPossible(route) {\n      return (// If there's cached routeInfo for the route.\n        Boolean(this.components[route]) && // If the route is already rendered on the screen.\n        this.route === route\n      );\n    }\n  }, {\n    key: \"prefetch\",\n    value: function () {\n      var _prefetch = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee4(url) {\n        var _this2 = this;\n\n        var _parse3, pathname, route;\n\n        return _regenerator.default.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(process.env.NODE_ENV === 'development')) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 2:\n                _parse3 = (0, _url2.parse)(url), pathname = _parse3.pathname;\n                route = toRoute(pathname);\n                return _context4.abrupt(\"return\", this.prefetchQueue.add(function () {\n                  return _this2.fetchRoute(route);\n                }));\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function prefetch(_x10) {\n        return _prefetch.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"fetchComponent\",\n    value: function () {\n      var _fetchComponent = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee5(route, as) {\n        var cancelled, cancel, Component, error;\n        return _regenerator.default.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                cancelled = false;\n\n                cancel = this.componentLoadCancel = function () {\n                  cancelled = true;\n                };\n\n                _context5.next = 4;\n                return this.fetchRoute(route);\n\n              case 4:\n                Component = _context5.sent;\n\n                if (!cancelled) {\n                  _context5.next = 9;\n                  break;\n                }\n\n                error = new Error(\"Abort fetching component for route: \\\"\".concat(route, \"\\\"\"));\n                error.cancelled = true;\n                throw error;\n\n              case 9:\n                if (cancel === this.componentLoadCancel) {\n                  this.componentLoadCancel = null;\n                }\n\n                return _context5.abrupt(\"return\", Component);\n\n              case 11:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function fetchComponent(_x11, _x12) {\n        return _fetchComponent.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee6(Component, ctx) {\n        var cancelled, cancel, App, props, err;\n        return _regenerator.default.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                cancelled = false;\n\n                cancel = function cancel() {\n                  cancelled = true;\n                };\n\n                this.componentLoadCancel = cancel;\n                App = this.components['/_app'].Component;\n                _context6.next = 6;\n                return (0, _utils.loadGetInitialProps)(App, {\n                  Component: Component,\n                  router: this,\n                  ctx: ctx\n                });\n\n              case 6:\n                props = _context6.sent;\n\n                if (cancel === this.componentLoadCancel) {\n                  this.componentLoadCancel = null;\n                }\n\n                if (!cancelled) {\n                  _context6.next = 12;\n                  break;\n                }\n\n                err = new Error('Loading initial props cancelled');\n                err.cancelled = true;\n                throw err;\n\n              case 12:\n                return _context6.abrupt(\"return\", props);\n\n              case 13:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function getInitialProps(_x13, _x14) {\n        return _getInitialProps.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"fetchRoute\",\n    value: function () {\n      var _fetchRoute = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee7(route) {\n        return _regenerator.default.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", this.pageLoader.loadPage(route));\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function fetchRoute(_x15) {\n        return _fetchRoute.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"abortComponentLoad\",\n    value: function abortComponentLoad(as) {\n      if (this.componentLoadCancel) {\n        Router.events.emit('routeChangeError', new Error('Route Cancelled'), as);\n        this.componentLoadCancel();\n        this.componentLoadCancel = null;\n      }\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(data) {\n      var App = this.components['/_app'].Component;\n      this.subscriptions.forEach(function (fn) {\n        return fn((0, _objectSpread2.default)({}, data, {\n          App: App\n        }));\n      });\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      var _this3 = this;\n\n      this.subscriptions.add(fn);\n      return function () {\n        return _this3.subscriptions.delete(fn);\n      };\n    }\n  }]);\n  return Router;\n}();\n\nexports.default = Router;\n(0, _defineProperty2.default)(Router, \"events\", new _EventEmitter.default());\n\nfunction toRoute(path) {\n  return path.replace(/\\/$/, '') || '/';\n}","\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime-corejs2/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = withRouter;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/objectSpread\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/defineProperty\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _hoistNonReactStatics = _interopRequireDefault(require(\"hoist-non-react-statics\"));\n\nvar _utils = require(\"../utils\");\n\nfunction withRouter(ComposedComponent) {\n  var displayName = (0, _utils.getDisplayName)(ComposedComponent);\n\n  var WithRouteWrapper =\n  /*#__PURE__*/\n  function (_Component) {\n    (0, _inherits2.default)(WithRouteWrapper, _Component);\n\n    function WithRouteWrapper() {\n      (0, _classCallCheck2.default)(this, WithRouteWrapper);\n      return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(WithRouteWrapper).apply(this, arguments));\n    }\n\n    (0, _createClass2.default)(WithRouteWrapper, [{\n      key: \"render\",\n      value: function render() {\n        var props = (0, _objectSpread2.default)({\n          router: this.context.router\n        }, this.props);\n        return _react.default.createElement(ComposedComponent, props);\n      }\n    }]);\n    return WithRouteWrapper;\n  }(_react.Component);\n\n  (0, _defineProperty2.default)(WithRouteWrapper, \"contextTypes\", {\n    router: _propTypes.default.object\n  });\n  (0, _defineProperty2.default)(WithRouteWrapper, \"displayName\", \"withRouter(\".concat(displayName, \")\"));\n  return (0, _hoistNonReactStatics.default)(WithRouteWrapper, ComposedComponent);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = shallowEquals;\n\nfunction shallowEquals(a, b) {\n  for (var i in a) {\n    if (b[i] !== a[i]) return false;\n  }\n\n  for (var _i in b) {\n    if (b[_i] !== a[_i]) return false;\n  }\n\n  return true;\n}","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.execOnce = execOnce;\nexports.getDisplayName = getDisplayName;\nexports.isResSent = isResSent;\nexports.loadGetInitialProps = loadGetInitialProps;\nexports.getLocationOrigin = getLocationOrigin;\nexports.getURL = getURL;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs2/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/asyncToGenerator\"));\n\nfunction execOnce(fn) {\n  var _this = this;\n\n  var used = false;\n  return function () {\n    if (!used) {\n      used = true;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      fn.apply(_this, args);\n    }\n  };\n}\n\nfunction getDisplayName(Component) {\n  if (typeof Component === 'string') {\n    return Component;\n  }\n\n  return Component.displayName || Component.name || 'Unknown';\n}\n\nfunction isResSent(res) {\n  return res.finished || res.headersSent;\n}\n\nfunction loadGetInitialProps(_x, _x2) {\n  return _loadGetInitialProps.apply(this, arguments);\n}\n\nfunction _loadGetInitialProps() {\n  _loadGetInitialProps = (0, _asyncToGenerator2.default)(\n  /*#__PURE__*/\n  _regenerator.default.mark(function _callee(Component, ctx) {\n    var compName, message, props, _compName, _message;\n\n    return _regenerator.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(process.env.NODE_ENV !== 'production')) {\n              _context.next = 5;\n              break;\n            }\n\n            if (!(Component.prototype && Component.prototype.getInitialProps)) {\n              _context.next = 5;\n              break;\n            }\n\n            compName = getDisplayName(Component);\n            message = \"\\\"\".concat(compName, \".getInitialProps()\\\" is defined as an instance method - visit https://err.sh/zeit/next.js/get-initial-props-as-an-instance-method for more information.\");\n            throw new Error(message);\n\n          case 5:\n            if (Component.getInitialProps) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {});\n\n          case 7:\n            _context.next = 9;\n            return Component.getInitialProps(ctx);\n\n          case 9:\n            props = _context.sent;\n\n            if (!(ctx.res && isResSent(ctx.res))) {\n              _context.next = 12;\n              break;\n            }\n\n            return _context.abrupt(\"return\", props);\n\n          case 12:\n            if (props) {\n              _context.next = 16;\n              break;\n            }\n\n            _compName = getDisplayName(Component);\n            _message = \"\\\"\".concat(_compName, \".getInitialProps()\\\" should resolve to an object. But found \\\"\").concat(props, \"\\\" instead.\");\n            throw new Error(_message);\n\n          case 16:\n            return _context.abrupt(\"return\", props);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _loadGetInitialProps.apply(this, arguments);\n}\n\nfunction getLocationOrigin() {\n  var _window$location = window.location,\n      protocol = _window$location.protocol,\n      hostname = _window$location.hostname,\n      port = _window$location.port;\n  return \"\".concat(protocol, \"//\").concat(hostname).concat(port ? ':' + port : '');\n}\n\nfunction getURL() {\n  var href = window.location.href;\n  var origin = getLocationOrigin();\n  return href.substring(origin.length);\n}","module.exports = require('./dist/lib/link')\n","/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n","module.exports = (__webpack_require__(/*! dll-reference dll_831a3634f66cb1dada0c */ \"dll-reference dll_831a3634f66cb1dada0c\"))(\"./node_modules/object-assign/index.js\");","'use strict';\n\n// modified from https://github.com/es-shims/es5-shim\nvar has = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar slice = Array.prototype.slice;\nvar isArgs = require('./isArguments');\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\nvar hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');\nvar hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');\nvar dontEnums = [\n\t'toString',\n\t'toLocaleString',\n\t'valueOf',\n\t'hasOwnProperty',\n\t'isPrototypeOf',\n\t'propertyIsEnumerable',\n\t'constructor'\n];\nvar equalsConstructorPrototype = function (o) {\n\tvar ctor = o.constructor;\n\treturn ctor && ctor.prototype === o;\n};\nvar excludedKeys = {\n\t$applicationCache: true,\n\t$console: true,\n\t$external: true,\n\t$frame: true,\n\t$frameElement: true,\n\t$frames: true,\n\t$innerHeight: true,\n\t$innerWidth: true,\n\t$outerHeight: true,\n\t$outerWidth: true,\n\t$pageXOffset: true,\n\t$pageYOffset: true,\n\t$parent: true,\n\t$scrollLeft: true,\n\t$scrollTop: true,\n\t$scrollX: true,\n\t$scrollY: true,\n\t$self: true,\n\t$webkitIndexedDB: true,\n\t$webkitStorageInfo: true,\n\t$window: true\n};\nvar hasAutomationEqualityBug = (function () {\n\t/* global window */\n\tif (typeof window === 'undefined') { return false; }\n\tfor (var k in window) {\n\t\ttry {\n\t\t\tif (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {\n\t\t\t\ttry {\n\t\t\t\t\tequalsConstructorPrototype(window[k]);\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}());\nvar equalsConstructorPrototypeIfNotBuggy = function (o) {\n\t/* global window */\n\tif (typeof window === 'undefined' || !hasAutomationEqualityBug) {\n\t\treturn equalsConstructorPrototype(o);\n\t}\n\ttry {\n\t\treturn equalsConstructorPrototype(o);\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\n\nvar keysShim = function keys(object) {\n\tvar isObject = object !== null && typeof object === 'object';\n\tvar isFunction = toStr.call(object) === '[object Function]';\n\tvar isArguments = isArgs(object);\n\tvar isString = isObject && toStr.call(object) === '[object String]';\n\tvar theKeys = [];\n\n\tif (!isObject && !isFunction && !isArguments) {\n\t\tthrow new TypeError('Object.keys called on a non-object');\n\t}\n\n\tvar skipProto = hasProtoEnumBug && isFunction;\n\tif (isString && object.length > 0 && !has.call(object, 0)) {\n\t\tfor (var i = 0; i < object.length; ++i) {\n\t\t\ttheKeys.push(String(i));\n\t\t}\n\t}\n\n\tif (isArguments && object.length > 0) {\n\t\tfor (var j = 0; j < object.length; ++j) {\n\t\t\ttheKeys.push(String(j));\n\t\t}\n\t} else {\n\t\tfor (var name in object) {\n\t\t\tif (!(skipProto && name === 'prototype') && has.call(object, name)) {\n\t\t\t\ttheKeys.push(String(name));\n\t\t\t}\n\t\t}\n\t}\n\n\tif (hasDontEnumBug) {\n\t\tvar skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);\n\n\t\tfor (var k = 0; k < dontEnums.length; ++k) {\n\t\t\tif (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {\n\t\t\t\ttheKeys.push(dontEnums[k]);\n\t\t\t}\n\t\t}\n\t}\n\treturn theKeys;\n};\n\nkeysShim.shim = function shimObjectKeys() {\n\tif (Object.keys) {\n\t\tvar keysWorksWithArguments = (function () {\n\t\t\t// Safari 5.0 bug\n\t\t\treturn (Object.keys(arguments) || '').length === 2;\n\t\t}(1, 2));\n\t\tif (!keysWorksWithArguments) {\n\t\t\tvar originalKeys = Object.keys;\n\t\t\tObject.keys = function keys(object) { // eslint-disable-line func-name-matching\n\t\t\t\tif (isArgs(object)) {\n\t\t\t\t\treturn originalKeys(slice.call(object));\n\t\t\t\t} else {\n\t\t\t\t\treturn originalKeys(object);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} else {\n\t\tObject.keys = keysShim;\n\t}\n\treturn Object.keys || keysShim;\n};\n\nmodule.exports = keysShim;\n","'use strict';\n\nvar toStr = Object.prototype.toString;\n\nmodule.exports = function isArguments(value) {\n\tvar str = toStr.call(value);\n\tvar isArgs = str === '[object Arguments]';\n\tif (!isArgs) {\n\t\tisArgs = str !== '[object Array]' &&\n\t\t\tvalue !== null &&\n\t\t\ttypeof value === 'object' &&\n\t\t\ttypeof value.length === 'number' &&\n\t\t\tvalue.length >= 0 &&\n\t\t\ttoStr.call(value.callee) === '[object Function]';\n\t}\n\treturn isArgs;\n};\n","'use strict';\n\n// modified from https://github.com/es-shims/es6-shim\nvar keys = require('object-keys');\nvar bind = require('function-bind');\nvar canBeObject = function (obj) {\n\treturn typeof obj !== 'undefined' && obj !== null;\n};\nvar hasSymbols = require('has-symbols/shams')();\nvar toObject = Object;\nvar push = bind.call(Function.call, Array.prototype.push);\nvar propIsEnumerable = bind.call(Function.call, Object.prototype.propertyIsEnumerable);\nvar originalGetSymbols = hasSymbols ? Object.getOwnPropertySymbols : null;\n\nmodule.exports = function assign(target, source1) {\n\tif (!canBeObject(target)) { throw new TypeError('target must be an object'); }\n\tvar objTarget = toObject(target);\n\tvar s, source, i, props, syms, value, key;\n\tfor (s = 1; s < arguments.length; ++s) {\n\t\tsource = toObject(arguments[s]);\n\t\tprops = keys(source);\n\t\tvar getSymbols = hasSymbols && (Object.getOwnPropertySymbols || originalGetSymbols);\n\t\tif (getSymbols) {\n\t\t\tsyms = getSymbols(source);\n\t\t\tfor (i = 0; i < syms.length; ++i) {\n\t\t\t\tkey = syms[i];\n\t\t\t\tif (propIsEnumerable(source, key)) {\n\t\t\t\t\tpush(props, key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < props.length; ++i) {\n\t\t\tkey = props[i];\n\t\t\tvalue = source[key];\n\t\t\tif (propIsEnumerable(source, key)) {\n\t\t\t\tobjTarget[key] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn objTarget;\n};\n","'use strict';\n\nvar defineProperties = require('define-properties');\n\nvar implementation = require('./implementation');\nvar getPolyfill = require('./polyfill');\nvar shim = require('./shim');\n\nvar polyfill = getPolyfill();\n\ndefineProperties(polyfill, {\n\tgetPolyfill: getPolyfill,\n\timplementation: implementation,\n\tshim: shim\n});\n\nmodule.exports = polyfill;\n","'use strict';\n\nvar implementation = require('./implementation');\n\nvar lacksProperEnumerationOrder = function () {\n\tif (!Object.assign) {\n\t\treturn false;\n\t}\n\t// v8, specifically in node 4.x, has a bug with incorrect property enumeration order\n\t// note: this does not detect the bug unless there's 20 characters\n\tvar str = 'abcdefghijklmnopqrst';\n\tvar letters = str.split('');\n\tvar map = {};\n\tfor (var i = 0; i < letters.length; ++i) {\n\t\tmap[letters[i]] = letters[i];\n\t}\n\tvar obj = Object.assign({}, map);\n\tvar actual = '';\n\tfor (var k in obj) {\n\t\tactual += k;\n\t}\n\treturn str !== actual;\n};\n\nvar assignHasPendingExceptions = function () {\n\tif (!Object.assign || !Object.preventExtensions) {\n\t\treturn false;\n\t}\n\t// Firefox 37 still has \"pending exception\" logic in its Object.assign implementation,\n\t// which is 72% slower than our shim, and Firefox 40's native implementation.\n\tvar thrower = Object.preventExtensions({ 1: 2 });\n\ttry {\n\t\tObject.assign(thrower, 'xy');\n\t} catch (e) {\n\t\treturn thrower[1] === 'y';\n\t}\n\treturn false;\n};\n\nmodule.exports = function getPolyfill() {\n\tif (!Object.assign) {\n\t\treturn implementation;\n\t}\n\tif (lacksProperEnumerationOrder()) {\n\t\treturn implementation;\n\t}\n\tif (assignHasPendingExceptions()) {\n\t\treturn implementation;\n\t}\n\treturn Object.assign;\n};\n","'use strict';\n\nvar define = require('define-properties');\nvar getPolyfill = require('./polyfill');\n\nmodule.exports = function shimAssign() {\n\tvar polyfill = getPolyfill();\n\tdefine(\n\t\tObject,\n\t\t{ assign: polyfill },\n\t\t{ assign: function () { return Object.assign !== polyfill; } }\n\t);\n\treturn polyfill;\n};\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports['default'] = isPlainObject;\nfunction isPlainObject(x) {\n  return x && (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object' && !Array.isArray(x);\n}\nmodule.exports = exports['default'];\n//# sourceMappingURL=isPlainObject.js.map","Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = forbidExtraProps;\n\nvar _object = require('object.assign');\n\nvar _object2 = _interopRequireDefault(_object);\n\nvar _has = require('has');\n\nvar _has2 = _interopRequireDefault(_has);\n\nvar _isPlainObject = require('./helpers/isPlainObject');\n\nvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar zeroWidthSpace = '\\u200B';\nvar specialProperty = 'prop-types-exact: ' + zeroWidthSpace;\nvar semaphore = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' ? Symbol['for'](specialProperty) : /* istanbul ignore next */specialProperty;\n\nfunction brand(fn) {\n  return (0, _object2['default'])(fn, _defineProperty({}, specialProperty, semaphore));\n}\n\nfunction isBranded(value) {\n  return value && value[specialProperty] === semaphore;\n}\n\nfunction forbidExtraProps(propTypes) {\n  if (!(0, _isPlainObject2['default'])(propTypes)) {\n    throw new TypeError('given propTypes must be an object');\n  }\n  if ((0, _has2['default'])(propTypes, specialProperty) && !isBranded(propTypes[specialProperty])) {\n    throw new TypeError('Against all odds, you created a propType for a prop that uses both the zero-width space and our custom string - which, sadly, conflicts with `prop-types-exact`');\n  }\n\n  return (0, _object2['default'])({}, propTypes, _defineProperty({}, specialProperty, brand(function () {\n    function forbidUnknownProps(props, _, componentName) {\n      var unknownProps = Object.keys(props).filter(function (prop) {\n        return !(0, _has2['default'])(propTypes, prop);\n      });\n      if (unknownProps.length > 0) {\n        return new TypeError(String(componentName) + ': unknown props found: ' + String(unknownProps.join(', ')));\n      }\n      return null;\n    }\n\n    return forbidUnknownProps;\n  }())));\n}\nmodule.exports = exports['default'];\n//# sourceMappingURL=index.js.map","module.exports = (__webpack_require__(/*! dll-reference dll_831a3634f66cb1dada0c */ \"dll-reference dll_831a3634f66cb1dada0c\"))(\"./node_modules/prop-types/checkPropTypes.js\");","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar assign = require('object-assign');\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\nvar checkPropTypes = require('./checkPropTypes');\n\nvar printWarning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\nfunction emptyFunctionThatReturnsNull() {\n  return null;\n}\n\nmodule.exports = function(isValidElement, throwOnDirectAccess) {\n  /* global Symbol */\n  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n  /**\n   * Returns the iterator method function contained on the iterable object.\n   *\n   * Be sure to invoke the function with the iterable as context:\n   *\n   *     var iteratorFn = getIteratorFn(myIterable);\n   *     if (iteratorFn) {\n   *       var iterator = iteratorFn.call(myIterable);\n   *       ...\n   *     }\n   *\n   * @param {?object} maybeIterable\n   * @return {?function}\n   */\n  function getIteratorFn(maybeIterable) {\n    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  /**\n   * Collection of methods that allow declaration and validation of props that are\n   * supplied to React components. Example usage:\n   *\n   *   var Props = require('ReactPropTypes');\n   *   var MyArticle = React.createClass({\n   *     propTypes: {\n   *       // An optional string prop named \"description\".\n   *       description: Props.string,\n   *\n   *       // A required enum prop named \"category\".\n   *       category: Props.oneOf(['News','Photos']).isRequired,\n   *\n   *       // A prop named \"dialog\" that requires an instance of Dialog.\n   *       dialog: Props.instanceOf(Dialog).isRequired\n   *     },\n   *     render: function() { ... }\n   *   });\n   *\n   * A more formal specification of how these methods are used:\n   *\n   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n   *   decl := ReactPropTypes.{type}(.isRequired)?\n   *\n   * Each and every declaration produces a function with the same signature. This\n   * allows the creation of custom validation functions. For example:\n   *\n   *  var MyLink = React.createClass({\n   *    propTypes: {\n   *      // An optional string or URI prop named \"href\".\n   *      href: function(props, propName, componentName) {\n   *        var propValue = props[propName];\n   *        if (propValue != null && typeof propValue !== 'string' &&\n   *            !(propValue instanceof URI)) {\n   *          return new Error(\n   *            'Expected a string or an URI for ' + propName + ' in ' +\n   *            componentName\n   *          );\n   *        }\n   *      }\n   *    },\n   *    render: function() {...}\n   *  });\n   *\n   * @internal\n   */\n\n  var ANONYMOUS = '<<anonymous>>';\n\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n  var ReactPropTypes = {\n    array: createPrimitiveTypeChecker('array'),\n    bool: createPrimitiveTypeChecker('boolean'),\n    func: createPrimitiveTypeChecker('function'),\n    number: createPrimitiveTypeChecker('number'),\n    object: createPrimitiveTypeChecker('object'),\n    string: createPrimitiveTypeChecker('string'),\n    symbol: createPrimitiveTypeChecker('symbol'),\n\n    any: createAnyTypeChecker(),\n    arrayOf: createArrayOfTypeChecker,\n    element: createElementTypeChecker(),\n    instanceOf: createInstanceTypeChecker,\n    node: createNodeChecker(),\n    objectOf: createObjectOfTypeChecker,\n    oneOf: createEnumTypeChecker,\n    oneOfType: createUnionTypeChecker,\n    shape: createShapeTypeChecker,\n    exact: createStrictShapeTypeChecker,\n  };\n\n  /**\n   * inlined Object.is polyfill to avoid requiring consumers ship their own\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n   */\n  /*eslint-disable no-self-compare*/\n  function is(x, y) {\n    // SameValue algorithm\n    if (x === y) {\n      // Steps 1-5, 7-10\n      // Steps 6.b-6.e: +0 != -0\n      return x !== 0 || 1 / x === 1 / y;\n    } else {\n      // Step 6.a: NaN == NaN\n      return x !== x && y !== y;\n    }\n  }\n  /*eslint-enable no-self-compare*/\n\n  /**\n   * We use an Error-like object for backward compatibility as people may call\n   * PropTypes directly and inspect their output. However, we don't use real\n   * Errors anymore. We don't inspect their stack anyway, and creating them\n   * is prohibitively expensive if they are created too often, such as what\n   * happens in oneOfType() for any type before the one that matched.\n   */\n  function PropTypeError(message) {\n    this.message = message;\n    this.stack = '';\n  }\n  // Make `instanceof Error` still work for returned errors.\n  PropTypeError.prototype = Error.prototype;\n\n  function createChainableTypeChecker(validate) {\n    if (process.env.NODE_ENV !== 'production') {\n      var manualPropTypeCallCache = {};\n      var manualPropTypeWarningCount = 0;\n    }\n    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n      componentName = componentName || ANONYMOUS;\n      propFullName = propFullName || propName;\n\n      if (secret !== ReactPropTypesSecret) {\n        if (throwOnDirectAccess) {\n          // New behavior only for users of `prop-types` package\n          var err = new Error(\n            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n            'Use `PropTypes.checkPropTypes()` to call them. ' +\n            'Read more at http://fb.me/use-check-prop-types'\n          );\n          err.name = 'Invariant Violation';\n          throw err;\n        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {\n          // Old behavior for people using React.PropTypes\n          var cacheKey = componentName + ':' + propName;\n          if (\n            !manualPropTypeCallCache[cacheKey] &&\n            // Avoid spamming the console because they are often not actionable except for lib authors\n            manualPropTypeWarningCount < 3\n          ) {\n            printWarning(\n              'You are manually calling a React.PropTypes validation ' +\n              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +\n              'and will throw in the standalone `prop-types` package. ' +\n              'You may be seeing this warning due to a third-party PropTypes ' +\n              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'\n            );\n            manualPropTypeCallCache[cacheKey] = true;\n            manualPropTypeWarningCount++;\n          }\n        }\n      }\n      if (props[propName] == null) {\n        if (isRequired) {\n          if (props[propName] === null) {\n            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n          }\n          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n        }\n        return null;\n      } else {\n        return validate(props, propName, componentName, location, propFullName);\n      }\n    }\n\n    var chainedCheckType = checkType.bind(null, false);\n    chainedCheckType.isRequired = checkType.bind(null, true);\n\n    return chainedCheckType;\n  }\n\n  function createPrimitiveTypeChecker(expectedType) {\n    function validate(props, propName, componentName, location, propFullName, secret) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== expectedType) {\n        // `propValue` being instance of, say, date/regexp, pass the 'object'\n        // check, but we can offer a more precise error message here rather than\n        // 'of type `object`'.\n        var preciseType = getPreciseType(propValue);\n\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createAnyTypeChecker() {\n    return createChainableTypeChecker(emptyFunctionThatReturnsNull);\n  }\n\n  function createArrayOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n      }\n      var propValue = props[propName];\n      if (!Array.isArray(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n      }\n      for (var i = 0; i < propValue.length; i++) {\n        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      if (!isValidElement(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createInstanceTypeChecker(expectedClass) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!(props[propName] instanceof expectedClass)) {\n        var expectedClassName = expectedClass.name || ANONYMOUS;\n        var actualClassName = getClassName(props[propName]);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createEnumTypeChecker(expectedValues) {\n    if (!Array.isArray(expectedValues)) {\n      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOf, expected an instance of array.') : void 0;\n      return emptyFunctionThatReturnsNull;\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      for (var i = 0; i < expectedValues.length; i++) {\n        if (is(propValue, expectedValues[i])) {\n          return null;\n        }\n      }\n\n      var valuesString = JSON.stringify(expectedValues);\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createObjectOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n      }\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n      }\n      for (var key in propValue) {\n        if (propValue.hasOwnProperty(key)) {\n          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n          if (error instanceof Error) {\n            return error;\n          }\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createUnionTypeChecker(arrayOfTypeCheckers) {\n    if (!Array.isArray(arrayOfTypeCheckers)) {\n      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;\n      return emptyFunctionThatReturnsNull;\n    }\n\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n      var checker = arrayOfTypeCheckers[i];\n      if (typeof checker !== 'function') {\n        printWarning(\n          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +\n          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'\n        );\n        return emptyFunctionThatReturnsNull;\n      }\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n        var checker = arrayOfTypeCheckers[i];\n        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {\n          return null;\n        }\n      }\n\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createNodeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!isNode(props[propName])) {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      for (var key in shapeTypes) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          continue;\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createStrictShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      // We need to check all keys in case some are required but missing from\n      // props.\n      var allKeys = assign({}, props[propName], shapeTypes);\n      for (var key in allKeys) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          return new PropTypeError(\n            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +\n            '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') +\n            '\\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')\n          );\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function isNode(propValue) {\n    switch (typeof propValue) {\n      case 'number':\n      case 'string':\n      case 'undefined':\n        return true;\n      case 'boolean':\n        return !propValue;\n      case 'object':\n        if (Array.isArray(propValue)) {\n          return propValue.every(isNode);\n        }\n        if (propValue === null || isValidElement(propValue)) {\n          return true;\n        }\n\n        var iteratorFn = getIteratorFn(propValue);\n        if (iteratorFn) {\n          var iterator = iteratorFn.call(propValue);\n          var step;\n          if (iteratorFn !== propValue.entries) {\n            while (!(step = iterator.next()).done) {\n              if (!isNode(step.value)) {\n                return false;\n              }\n            }\n          } else {\n            // Iterator will provide entry [k,v] tuples rather than values.\n            while (!(step = iterator.next()).done) {\n              var entry = step.value;\n              if (entry) {\n                if (!isNode(entry[1])) {\n                  return false;\n                }\n              }\n            }\n          }\n        } else {\n          return false;\n        }\n\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  function isSymbol(propType, propValue) {\n    // Native Symbol.\n    if (propType === 'symbol') {\n      return true;\n    }\n\n    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n    if (propValue['@@toStringTag'] === 'Symbol') {\n      return true;\n    }\n\n    // Fallback for non-spec compliant Symbols which are polyfilled.\n    if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // Equivalent of `typeof` but with special handling for array and regexp.\n  function getPropType(propValue) {\n    var propType = typeof propValue;\n    if (Array.isArray(propValue)) {\n      return 'array';\n    }\n    if (propValue instanceof RegExp) {\n      // Old webkits (at least until Android 4.0) return 'function' rather than\n      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n      // passes PropTypes.object.\n      return 'object';\n    }\n    if (isSymbol(propType, propValue)) {\n      return 'symbol';\n    }\n    return propType;\n  }\n\n  // This handles more types than `getPropType`. Only used for error messages.\n  // See `createPrimitiveTypeChecker`.\n  function getPreciseType(propValue) {\n    if (typeof propValue === 'undefined' || propValue === null) {\n      return '' + propValue;\n    }\n    var propType = getPropType(propValue);\n    if (propType === 'object') {\n      if (propValue instanceof Date) {\n        return 'date';\n      } else if (propValue instanceof RegExp) {\n        return 'regexp';\n      }\n    }\n    return propType;\n  }\n\n  // Returns a string that is postfixed to a warning about an invalid type.\n  // For example, \"undefined\" or \"of type array\"\n  function getPostfixForTypeWarning(value) {\n    var type = getPreciseType(value);\n    switch (type) {\n      case 'array':\n      case 'object':\n        return 'an ' + type;\n      case 'boolean':\n      case 'date':\n      case 'regexp':\n        return 'a ' + type;\n      default:\n        return type;\n    }\n  }\n\n  // Returns class name of the object, if any.\n  function getClassName(propValue) {\n    if (!propValue.constructor || !propValue.constructor.name) {\n      return ANONYMOUS;\n    }\n    return propValue.constructor.name;\n  }\n\n  ReactPropTypes.checkPropTypes = checkPropTypes;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&\n    Symbol.for &&\n    Symbol.for('react.element')) ||\n    0xeac7;\n\n  var isValidElement = function(object) {\n    return typeof object === 'object' &&\n      object !== null &&\n      object.$$typeof === REACT_ELEMENT_TYPE;\n  };\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","module.exports = (__webpack_require__(/*! dll-reference dll_831a3634f66cb1dada0c */ \"dll-reference dll_831a3634f66cb1dada0c\"))(\"./node_modules/prop-types/lib/ReactPropTypesSecret.js\");","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n","'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n","module.exports = (__webpack_require__(/*! dll-reference dll_831a3634f66cb1dada0c */ \"dll-reference dll_831a3634f66cb1dada0c\"))(\"./node_modules/react-dom/index.js\");","/** @license React v16.7.0\n * react-is.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar hasSymbol = typeof Symbol === 'function' && Symbol.for;\n\nvar REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\nvar REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\nvar REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\nvar REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\nvar REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\nvar REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\nvar REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;\nvar REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;\nvar REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\nvar REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\nvar REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\nvar REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\nvar REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\n\nfunction isValidElementType(type) {\n  return typeof type === 'string' || typeof type === 'function' ||\n  // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);\n}\n\n/**\n * Forked from fbjs/warning:\n * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js\n *\n * Only change is we use console.warn instead of console.error,\n * and do nothing when 'console' is not supported.\n * This really simplifies the code.\n * ---\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar lowPriorityWarning = function () {};\n\n{\n  var printWarning = function (format) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    var argIndex = 0;\n    var message = 'Warning: ' + format.replace(/%s/g, function () {\n      return args[argIndex++];\n    });\n    if (typeof console !== 'undefined') {\n      console.warn(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n\n  lowPriorityWarning = function (condition, format) {\n    if (format === undefined) {\n      throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n    if (!condition) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      printWarning.apply(undefined, [format].concat(args));\n    }\n  };\n}\n\nvar lowPriorityWarning$1 = lowPriorityWarning;\n\nfunction typeOf(object) {\n  if (typeof object === 'object' && object !== null) {\n    var $$typeof = object.$$typeof;\n    switch ($$typeof) {\n      case REACT_ELEMENT_TYPE:\n        var type = object.type;\n\n        switch (type) {\n          case REACT_ASYNC_MODE_TYPE:\n          case REACT_CONCURRENT_MODE_TYPE:\n          case REACT_FRAGMENT_TYPE:\n          case REACT_PROFILER_TYPE:\n          case REACT_STRICT_MODE_TYPE:\n          case REACT_SUSPENSE_TYPE:\n            return type;\n          default:\n            var $$typeofType = type && type.$$typeof;\n\n            switch ($$typeofType) {\n              case REACT_CONTEXT_TYPE:\n              case REACT_FORWARD_REF_TYPE:\n              case REACT_PROVIDER_TYPE:\n                return $$typeofType;\n              default:\n                return $$typeof;\n            }\n        }\n      case REACT_LAZY_TYPE:\n      case REACT_MEMO_TYPE:\n      case REACT_PORTAL_TYPE:\n        return $$typeof;\n    }\n  }\n\n  return undefined;\n}\n\n// AsyncMode is deprecated along with isAsyncMode\nvar AsyncMode = REACT_ASYNC_MODE_TYPE;\nvar ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;\nvar ContextConsumer = REACT_CONTEXT_TYPE;\nvar ContextProvider = REACT_PROVIDER_TYPE;\nvar Element = REACT_ELEMENT_TYPE;\nvar ForwardRef = REACT_FORWARD_REF_TYPE;\nvar Fragment = REACT_FRAGMENT_TYPE;\nvar Lazy = REACT_LAZY_TYPE;\nvar Memo = REACT_MEMO_TYPE;\nvar Portal = REACT_PORTAL_TYPE;\nvar Profiler = REACT_PROFILER_TYPE;\nvar StrictMode = REACT_STRICT_MODE_TYPE;\nvar Suspense = REACT_SUSPENSE_TYPE;\n\nvar hasWarnedAboutDeprecatedIsAsyncMode = false;\n\n// AsyncMode should be deprecated\nfunction isAsyncMode(object) {\n  {\n    if (!hasWarnedAboutDeprecatedIsAsyncMode) {\n      hasWarnedAboutDeprecatedIsAsyncMode = true;\n      lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');\n    }\n  }\n  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;\n}\nfunction isConcurrentMode(object) {\n  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;\n}\nfunction isContextConsumer(object) {\n  return typeOf(object) === REACT_CONTEXT_TYPE;\n}\nfunction isContextProvider(object) {\n  return typeOf(object) === REACT_PROVIDER_TYPE;\n}\nfunction isElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nfunction isForwardRef(object) {\n  return typeOf(object) === REACT_FORWARD_REF_TYPE;\n}\nfunction isFragment(object) {\n  return typeOf(object) === REACT_FRAGMENT_TYPE;\n}\nfunction isLazy(object) {\n  return typeOf(object) === REACT_LAZY_TYPE;\n}\nfunction isMemo(object) {\n  return typeOf(object) === REACT_MEMO_TYPE;\n}\nfunction isPortal(object) {\n  return typeOf(object) === REACT_PORTAL_TYPE;\n}\nfunction isProfiler(object) {\n  return typeOf(object) === REACT_PROFILER_TYPE;\n}\nfunction isStrictMode(object) {\n  return typeOf(object) === REACT_STRICT_MODE_TYPE;\n}\nfunction isSuspense(object) {\n  return typeOf(object) === REACT_SUSPENSE_TYPE;\n}\n\nexports.typeOf = typeOf;\nexports.AsyncMode = AsyncMode;\nexports.ConcurrentMode = ConcurrentMode;\nexports.ContextConsumer = ContextConsumer;\nexports.ContextProvider = ContextProvider;\nexports.Element = Element;\nexports.ForwardRef = ForwardRef;\nexports.Fragment = Fragment;\nexports.Lazy = Lazy;\nexports.Memo = Memo;\nexports.Portal = Portal;\nexports.Profiler = Profiler;\nexports.StrictMode = StrictMode;\nexports.Suspense = Suspense;\nexports.isValidElementType = isValidElementType;\nexports.isAsyncMode = isAsyncMode;\nexports.isConcurrentMode = isConcurrentMode;\nexports.isContextConsumer = isContextConsumer;\nexports.isContextProvider = isContextProvider;\nexports.isElement = isElement;\nexports.isForwardRef = isForwardRef;\nexports.isFragment = isFragment;\nexports.isLazy = isLazy;\nexports.isMemo = isMemo;\nexports.isPortal = isPortal;\nexports.isProfiler = isProfiler;\nexports.isStrictMode = isStrictMode;\nexports.isSuspense = isSuspense;\n  })();\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","module.exports = (__webpack_require__(/*! dll-reference dll_831a3634f66cb1dada0c */ \"dll-reference dll_831a3634f66cb1dada0c\"))(\"./node_modules/react/index.js\");","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n","import Stylis from 'stylis/stylis.min';\nimport _insertRulePlugin from 'stylis-rule-sheet';\nimport React, { cloneElement, createContext, Component, createElement } from 'react';\nimport unitless from '@emotion/unitless';\nimport { isElement, isValidElementType, ForwardRef } from 'react-is';\nimport memoize from 'memoize-one';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport validAttr from '@emotion/is-prop-valid';\n\n// \n\nvar interleave = (function (strings, interpolations) {\n  var result = [strings[0]];\n\n  for (var i = 0, len = interpolations.length; i < len; i += 1) {\n    result.push(interpolations[i], strings[i + 1]);\n  }\n\n  return result;\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar objectWithoutProperties = function (obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n// \nvar isPlainObject = (function (x) {\n  return (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object' && x.constructor === Object;\n});\n\n// \nvar EMPTY_ARRAY = Object.freeze([]);\nvar EMPTY_OBJECT = Object.freeze({});\n\n// \nfunction isFunction(test) {\n  return typeof test === 'function';\n}\n\n// \n\nfunction getComponentName(target) {\n  return (process.env.NODE_ENV !== 'production' ? typeof target === 'string' && target : false) || target.displayName || target.name || 'Component';\n}\n\n// \nfunction isStyledComponent(target) {\n  return target && typeof target.styledComponentId === 'string';\n}\n\n// \n\nvar SC_ATTR = typeof process !== 'undefined' && process.env.SC_ATTR || 'data-styled';\n\nvar SC_VERSION_ATTR = 'data-styled-version';\n\nvar SC_STREAM_ATTR = 'data-styled-streamed';\n\nvar IS_BROWSER = typeof window !== 'undefined' && 'HTMLElement' in window;\n\nvar DISABLE_SPEEDY = typeof SC_DISABLE_SPEEDY === 'boolean' && SC_DISABLE_SPEEDY || process.env.NODE_ENV !== 'production';\n\n// Shared empty execution context when generating static styles\nvar STATIC_EXECUTION_CONTEXT = {};\n\n// \n\n\n/**\n * Parse errors.md and turn it into a simple hash of code: message\n */\nvar ERRORS = process.env.NODE_ENV !== 'production' ? {\n  \"1\": \"Cannot create styled-component for component: %s.\\n\\n\",\n  \"2\": \"Can't collect styles once you've consumed a `ServerStyleSheet`'s styles! `ServerStyleSheet` is a one off instance for each server-side render cycle.\\n\\n- Are you trying to reuse it across renders?\\n- Are you accidentally calling collectStyles twice?\\n\\n\",\n  \"3\": \"Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\\n\\n\",\n  \"4\": \"The `StyleSheetManager` expects a valid target or sheet prop!\\n\\n- Does this error occur on the client and is your target falsy?\\n- Does this error occur on the server and is the sheet falsy?\\n\\n\",\n  \"5\": \"The clone method cannot be used on the client!\\n\\n- Are you running in a client-like environment on the server?\\n- Are you trying to run SSR on the client?\\n\\n\",\n  \"6\": \"Trying to insert a new style tag, but the given Node is unmounted!\\n\\n- Are you using a custom target that isn't mounted?\\n- Does your document not have a valid head element?\\n- Have you accidentally removed a style tag manually?\\n\\n\",\n  \"7\": \"ThemeProvider: Please return an object from your \\\"theme\\\" prop function, e.g.\\n\\n```js\\ntheme={() => ({})}\\n```\\n\\n\",\n  \"8\": \"ThemeProvider: Please make your \\\"theme\\\" prop an object.\\n\\n\",\n  \"9\": \"Missing document `<head>`\\n\\n\",\n  \"10\": \"Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\\n\\n\",\n  \"11\": \"_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\\n\\n\",\n  \"12\": \"It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\\\`\\\\` helper (see https://www.styled-components.com/docs/api#css), which ensures the styles are injected correctly.\\n\\n\",\n  \"13\": \"%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\\n\"\n} : {};\n\n/**\n * super basic version of sprintf\n */\nfunction format() {\n  var a = arguments.length <= 0 ? undefined : arguments[0];\n  var b = [];\n\n  for (var c = 1, len = arguments.length; c < len; c += 1) {\n    b.push(arguments.length <= c ? undefined : arguments[c]);\n  }\n\n  b.forEach(function (d) {\n    a = a.replace(/%[a-z]/, d);\n  });\n\n  return a;\n}\n\n/**\n * Create an error file out of errors.md for development and a simple web link to the full errors\n * in production mode.\n */\n\nvar StyledComponentsError = function (_Error) {\n  inherits(StyledComponentsError, _Error);\n\n  function StyledComponentsError(code) {\n    classCallCheck(this, StyledComponentsError);\n\n    for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      interpolations[_key - 1] = arguments[_key];\n    }\n\n    if (process.env.NODE_ENV === 'production') {\n      var _this = possibleConstructorReturn(this, _Error.call(this, 'An error occurred. See https://github.com/styled-components/styled-components/blob/master/src/utils/errors.md#' + code + ' for more information. ' + (interpolations ? 'Additional arguments: ' + interpolations.join(', ') : '')));\n    } else {\n      var _this = possibleConstructorReturn(this, _Error.call(this, format.apply(undefined, [ERRORS[code]].concat(interpolations)).trim()));\n    }\n    return possibleConstructorReturn(_this);\n  }\n\n  return StyledComponentsError;\n}(Error);\n\n// \nvar SC_COMPONENT_ID = /^[^\\S\\n]*?\\/\\* sc-component-id:\\s*(\\S+)\\s+\\*\\//gm;\n\nvar extractComps = (function (maybeCSS) {\n  var css = '' + (maybeCSS || ''); // Definitely a string, and a clone\n  var existingComponents = [];\n  css.replace(SC_COMPONENT_ID, function (match, componentId, matchIndex) {\n    existingComponents.push({ componentId: componentId, matchIndex: matchIndex });\n    return match;\n  });\n  return existingComponents.map(function (_ref, i) {\n    var componentId = _ref.componentId,\n        matchIndex = _ref.matchIndex;\n\n    var nextComp = existingComponents[i + 1];\n    var cssFromDOM = nextComp ? css.slice(matchIndex, nextComp.matchIndex) : css.slice(matchIndex);\n    return { componentId: componentId, cssFromDOM: cssFromDOM };\n  });\n});\n\n// \n\nvar COMMENT_REGEX = /^\\s*\\/\\/.*$/gm;\n\n// NOTE: This stylis instance is only used to split rules from SSR'd style tags\nvar stylisSplitter = new Stylis({\n  global: false,\n  cascade: true,\n  keyframe: false,\n  prefix: false,\n  compress: false,\n  semicolon: true\n});\n\nvar stylis = new Stylis({\n  global: false,\n  cascade: true,\n  keyframe: false,\n  prefix: true,\n  compress: false,\n  semicolon: false // NOTE: This means \"autocomplete missing semicolons\"\n});\n\n// Wrap `insertRulePlugin to build a list of rules,\n// and then make our own plugin to return the rules. This\n// makes it easier to hook into the existing SSR architecture\n\nvar parsingRules = [];\n\n// eslint-disable-next-line consistent-return\nvar returnRulesPlugin = function returnRulesPlugin(context) {\n  if (context === -2) {\n    var parsedRules = parsingRules;\n    parsingRules = [];\n    return parsedRules;\n  }\n};\n\nvar parseRulesPlugin = _insertRulePlugin(function (rule) {\n  parsingRules.push(rule);\n});\n\nvar _componentId = void 0;\nvar _selector = void 0;\nvar _selectorRegexp = void 0;\n\nvar selfReferenceReplacer = function selfReferenceReplacer(match, offset, string) {\n  if (\n  // the first self-ref is always untouched\n  offset > 0 &&\n  // there should be at least two self-refs to do a replacement (.b > .b)\n  string.slice(0, offset).indexOf(_selector) !== -1 &&\n  // no consecutive self refs (.b.b); that is a precedence boost and treated differently\n  string.slice(offset - _selector.length, offset) !== _selector) {\n    return '.' + _componentId;\n  }\n\n  return match;\n};\n\n/**\n * When writing a style like\n *\n * & + & {\n *   color: red;\n * }\n *\n * The second ampersand should be a reference to the static component class. stylis\n * has no knowledge of static class so we have to intelligently replace the base selector.\n */\nvar selfReferenceReplacementPlugin = function selfReferenceReplacementPlugin(context, _, selectors) {\n  if (context === 2 && selectors.length && selectors[0].lastIndexOf(_selector) > 0) {\n    // eslint-disable-next-line no-param-reassign\n    selectors[0] = selectors[0].replace(_selectorRegexp, selfReferenceReplacer);\n  }\n};\n\nstylis.use([selfReferenceReplacementPlugin, parseRulesPlugin, returnRulesPlugin]);\nstylisSplitter.use([parseRulesPlugin, returnRulesPlugin]);\n\nvar splitByRules = function splitByRules(css) {\n  return stylisSplitter('', css);\n};\n\nfunction stringifyRules(rules, selector, prefix) {\n  var componentId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '&';\n\n  var flatCSS = rules.join('').replace(COMMENT_REGEX, ''); // replace JS comments\n\n  var cssStr = selector && prefix ? prefix + ' ' + selector + ' { ' + flatCSS + ' }' : flatCSS;\n\n  // stylis has no concept of state to be passed to plugins\n  // but since JS is single=threaded, we can rely on that to ensure\n  // these properties stay in sync with the current stylis run\n  _componentId = componentId;\n  _selector = selector;\n  _selectorRegexp = new RegExp('\\\\' + _selector + '\\\\b', 'g');\n\n  return stylis(prefix || !selector ? '' : selector, cssStr);\n}\n\n// \n/* eslint-disable camelcase, no-undef */\n\nvar getNonce = (function () {\n  return typeof __webpack_nonce__ !== 'undefined' ? __webpack_nonce__ : null;\n});\n\n// \n/* These are helpers for the StyleTags to keep track of the injected\n * rule names for each (component) ID that they're keeping track of.\n * They're crucial for detecting whether a name has already been\n * injected.\n * (This excludes rehydrated names) */\n\n/* adds a new ID:name pairing to a names dictionary */\nvar addNameForId = function addNameForId(names, id, name) {\n  if (name) {\n    // eslint-disable-next-line no-param-reassign\n    var namesForId = names[id] || (names[id] = Object.create(null));\n    namesForId[name] = true;\n  }\n};\n\n/* resets an ID entirely by overwriting it in the dictionary */\nvar resetIdNames = function resetIdNames(names, id) {\n  // eslint-disable-next-line no-param-reassign\n  names[id] = Object.create(null);\n};\n\n/* factory for a names dictionary checking the existance of an ID:name pairing */\nvar hasNameForId = function hasNameForId(names) {\n  return function (id, name) {\n    return names[id] !== undefined && names[id][name];\n  };\n};\n\n/* stringifies names for the html/element output */\nvar stringifyNames = function stringifyNames(names) {\n  var str = '';\n  // eslint-disable-next-line guard-for-in\n  for (var id in names) {\n    str += Object.keys(names[id]).join(' ') + ' ';\n  }\n  return str.trim();\n};\n\n/* clones the nested names dictionary */\nvar cloneNames = function cloneNames(names) {\n  var clone = Object.create(null);\n  // eslint-disable-next-line guard-for-in\n  for (var id in names) {\n    clone[id] = _extends({}, names[id]);\n  }\n  return clone;\n};\n\n// \n\n/* These are helpers that deal with the insertRule (aka speedy) API\n * They are used in the StyleTags and specifically the speedy tag\n */\n\n/* retrieve a sheet for a given style tag */\nvar sheetForTag = function sheetForTag(tag) {\n  // $FlowFixMe\n  if (tag.sheet) return tag.sheet;\n\n  /* Firefox quirk requires us to step through all stylesheets to find one owned by the given tag */\n  var size = document.styleSheets.length;\n  for (var i = 0; i < size; i += 1) {\n    var sheet = document.styleSheets[i];\n    // $FlowFixMe\n    if (sheet.ownerNode === tag) return sheet;\n  }\n\n  /* we should always be able to find a tag */\n  throw new StyledComponentsError(10);\n};\n\n/* insert a rule safely and return whether it was actually injected */\nvar safeInsertRule = function safeInsertRule(sheet, cssRule, index) {\n  /* abort early if cssRule string is falsy */\n  if (!cssRule) return false;\n\n  var maxIndex = sheet.cssRules.length;\n\n  try {\n    /* use insertRule and cap passed index with maxIndex (no of cssRules) */\n    sheet.insertRule(cssRule, index <= maxIndex ? index : maxIndex);\n  } catch (err) {\n    /* any error indicates an invalid rule */\n    return false;\n  }\n\n  return true;\n};\n\n/* deletes `size` rules starting from `removalIndex` */\nvar deleteRules = function deleteRules(sheet, removalIndex, size) {\n  var lowerBound = removalIndex - size;\n  for (var i = removalIndex; i > lowerBound; i -= 1) {\n    sheet.deleteRule(i);\n  }\n};\n\n// \n\n/* this marker separates component styles and is important for rehydration */\nvar makeTextMarker = function makeTextMarker(id) {\n  return '\\n/* sc-component-id: ' + id + ' */\\n';\n};\n\n/* add up all numbers in array up until and including the index */\nvar addUpUntilIndex = function addUpUntilIndex(sizes, index) {\n  var totalUpToIndex = 0;\n  for (var i = 0; i <= index; i += 1) {\n    totalUpToIndex += sizes[i];\n  }\n\n  return totalUpToIndex;\n};\n\n/* create a new style tag after lastEl */\nvar makeStyleTag = function makeStyleTag(target, tagEl, insertBefore) {\n  var el = document.createElement('style');\n  el.setAttribute(SC_ATTR, '');\n  el.setAttribute(SC_VERSION_ATTR, \"4.1.3\");\n\n  var nonce = getNonce();\n  if (nonce) {\n    el.setAttribute('nonce', nonce);\n  }\n\n  /* Work around insertRule quirk in EdgeHTML */\n  el.appendChild(document.createTextNode(''));\n\n  if (target && !tagEl) {\n    /* Append to target when no previous element was passed */\n    target.appendChild(el);\n  } else {\n    if (!tagEl || !target || !tagEl.parentNode) {\n      throw new StyledComponentsError(6);\n    }\n\n    /* Insert new style tag after the previous one */\n    tagEl.parentNode.insertBefore(el, insertBefore ? tagEl : tagEl.nextSibling);\n  }\n\n  return el;\n};\n\n/* takes a css factory function and outputs an html styled tag factory */\nvar wrapAsHtmlTag = function wrapAsHtmlTag(css, names) {\n  return function (additionalAttrs) {\n    var nonce = getNonce();\n    var attrs = [nonce && 'nonce=\"' + nonce + '\"', SC_ATTR + '=\"' + stringifyNames(names) + '\"', SC_VERSION_ATTR + '=\"' + \"4.1.3\" + '\"', additionalAttrs];\n\n    var htmlAttr = attrs.filter(Boolean).join(' ');\n    return '<style ' + htmlAttr + '>' + css() + '</style>';\n  };\n};\n\n/* takes a css factory function and outputs an element factory */\nvar wrapAsElement = function wrapAsElement(css, names) {\n  return function () {\n    var _props;\n\n    var props = (_props = {}, _props[SC_ATTR] = stringifyNames(names), _props[SC_VERSION_ATTR] = \"4.1.3\", _props);\n\n    var nonce = getNonce();\n    if (nonce) {\n      // $FlowFixMe\n      props.nonce = nonce;\n    }\n\n    // eslint-disable-next-line react/no-danger\n    return React.createElement('style', _extends({}, props, { dangerouslySetInnerHTML: { __html: css() } }));\n  };\n};\n\nvar getIdsFromMarkersFactory = function getIdsFromMarkersFactory(markers) {\n  return function () {\n    return Object.keys(markers);\n  };\n};\n\n/* speedy tags utilise insertRule */\nvar makeSpeedyTag = function makeSpeedyTag(el, getImportRuleTag) {\n  var names = Object.create(null);\n  var markers = Object.create(null);\n  var sizes = [];\n\n  var extractImport = getImportRuleTag !== undefined;\n  /* indicates whether getImportRuleTag was called */\n  var usedImportRuleTag = false;\n\n  var insertMarker = function insertMarker(id) {\n    var prev = markers[id];\n    if (prev !== undefined) {\n      return prev;\n    }\n\n    markers[id] = sizes.length;\n    sizes.push(0);\n    resetIdNames(names, id);\n\n    return markers[id];\n  };\n\n  var insertRules = function insertRules(id, cssRules, name) {\n    var marker = insertMarker(id);\n    var sheet = sheetForTag(el);\n    var insertIndex = addUpUntilIndex(sizes, marker);\n\n    var injectedRules = 0;\n    var importRules = [];\n    var cssRulesSize = cssRules.length;\n\n    for (var i = 0; i < cssRulesSize; i += 1) {\n      var cssRule = cssRules[i];\n      var mayHaveImport = extractImport; /* @import rules are reordered to appear first */\n      if (mayHaveImport && cssRule.indexOf('@import') !== -1) {\n        importRules.push(cssRule);\n      } else if (safeInsertRule(sheet, cssRule, insertIndex + injectedRules)) {\n        mayHaveImport = false;\n        injectedRules += 1;\n      }\n    }\n\n    if (extractImport && importRules.length > 0) {\n      usedImportRuleTag = true;\n      // $FlowFixMe\n      getImportRuleTag().insertRules(id + '-import', importRules);\n    }\n\n    sizes[marker] += injectedRules; /* add up no of injected rules */\n    addNameForId(names, id, name);\n  };\n\n  var removeRules = function removeRules(id) {\n    var marker = markers[id];\n    if (marker === undefined) return;\n\n    var size = sizes[marker];\n    var sheet = sheetForTag(el);\n    var removalIndex = addUpUntilIndex(sizes, marker) - 1;\n    deleteRules(sheet, removalIndex, size);\n    sizes[marker] = 0;\n    resetIdNames(names, id);\n\n    if (extractImport && usedImportRuleTag) {\n      // $FlowFixMe\n      getImportRuleTag().removeRules(id + '-import');\n    }\n  };\n\n  var css = function css() {\n    var _sheetForTag = sheetForTag(el),\n        cssRules = _sheetForTag.cssRules;\n\n    var str = '';\n\n    // eslint-disable-next-line guard-for-in\n    for (var id in markers) {\n      str += makeTextMarker(id);\n      var marker = markers[id];\n      var end = addUpUntilIndex(sizes, marker);\n      var size = sizes[marker];\n      for (var i = end - size; i < end; i += 1) {\n        var rule = cssRules[i];\n        if (rule !== undefined) {\n          str += rule.cssText;\n        }\n      }\n    }\n\n    return str;\n  };\n\n  return {\n    clone: function clone() {\n      throw new StyledComponentsError(5);\n    },\n\n    css: css,\n    getIds: getIdsFromMarkersFactory(markers),\n    hasNameForId: hasNameForId(names),\n    insertMarker: insertMarker,\n    insertRules: insertRules,\n    removeRules: removeRules,\n    sealed: false,\n    styleTag: el,\n    toElement: wrapAsElement(css, names),\n    toHTML: wrapAsHtmlTag(css, names)\n  };\n};\n\nvar makeTextNode = function makeTextNode(id) {\n  return document.createTextNode(makeTextMarker(id));\n};\n\nvar makeBrowserTag = function makeBrowserTag(el, getImportRuleTag) {\n  var names = Object.create(null);\n  var markers = Object.create(null);\n\n  var extractImport = getImportRuleTag !== undefined;\n\n  /* indicates whether getImportRuleTag was called */\n  var usedImportRuleTag = false;\n\n  var insertMarker = function insertMarker(id) {\n    var prev = markers[id];\n    if (prev !== undefined) {\n      return prev;\n    }\n\n    markers[id] = makeTextNode(id);\n    el.appendChild(markers[id]);\n    names[id] = Object.create(null);\n\n    return markers[id];\n  };\n\n  var insertRules = function insertRules(id, cssRules, name) {\n    var marker = insertMarker(id);\n    var importRules = [];\n    var cssRulesSize = cssRules.length;\n\n    for (var i = 0; i < cssRulesSize; i += 1) {\n      var rule = cssRules[i];\n      var mayHaveImport = extractImport;\n      if (mayHaveImport && rule.indexOf('@import') !== -1) {\n        importRules.push(rule);\n      } else {\n        mayHaveImport = false;\n        var separator = i === cssRulesSize - 1 ? '' : ' ';\n        marker.appendData('' + rule + separator);\n      }\n    }\n\n    addNameForId(names, id, name);\n\n    if (extractImport && importRules.length > 0) {\n      usedImportRuleTag = true;\n      // $FlowFixMe\n      getImportRuleTag().insertRules(id + '-import', importRules);\n    }\n  };\n\n  var removeRules = function removeRules(id) {\n    var marker = markers[id];\n    if (marker === undefined) return;\n\n    /* create new empty text node and replace the current one */\n    var newMarker = makeTextNode(id);\n    el.replaceChild(newMarker, marker);\n    markers[id] = newMarker;\n    resetIdNames(names, id);\n\n    if (extractImport && usedImportRuleTag) {\n      // $FlowFixMe\n      getImportRuleTag().removeRules(id + '-import');\n    }\n  };\n\n  var css = function css() {\n    var str = '';\n\n    // eslint-disable-next-line guard-for-in\n    for (var id in markers) {\n      str += markers[id].data;\n    }\n\n    return str;\n  };\n\n  return {\n    clone: function clone() {\n      throw new StyledComponentsError(5);\n    },\n\n    css: css,\n    getIds: getIdsFromMarkersFactory(markers),\n    hasNameForId: hasNameForId(names),\n    insertMarker: insertMarker,\n    insertRules: insertRules,\n    removeRules: removeRules,\n    sealed: false,\n    styleTag: el,\n    toElement: wrapAsElement(css, names),\n    toHTML: wrapAsHtmlTag(css, names)\n  };\n};\n\nvar makeServerTag = function makeServerTag(namesArg, markersArg) {\n  var names = namesArg === undefined ? Object.create(null) : namesArg;\n  var markers = markersArg === undefined ? Object.create(null) : markersArg;\n\n  var insertMarker = function insertMarker(id) {\n    var prev = markers[id];\n    if (prev !== undefined) {\n      return prev;\n    }\n\n    return markers[id] = [''];\n  };\n\n  var insertRules = function insertRules(id, cssRules, name) {\n    var marker = insertMarker(id);\n    marker[0] += cssRules.join(' ');\n    addNameForId(names, id, name);\n  };\n\n  var removeRules = function removeRules(id) {\n    var marker = markers[id];\n    if (marker === undefined) return;\n    marker[0] = '';\n    resetIdNames(names, id);\n  };\n\n  var css = function css() {\n    var str = '';\n    // eslint-disable-next-line guard-for-in\n    for (var id in markers) {\n      var cssForId = markers[id][0];\n      if (cssForId) {\n        str += makeTextMarker(id) + cssForId;\n      }\n    }\n    return str;\n  };\n\n  var clone = function clone() {\n    var namesClone = cloneNames(names);\n    var markersClone = Object.create(null);\n\n    // eslint-disable-next-line guard-for-in\n    for (var id in markers) {\n      markersClone[id] = [markers[id][0]];\n    }\n\n    return makeServerTag(namesClone, markersClone);\n  };\n\n  var tag = {\n    clone: clone,\n    css: css,\n    getIds: getIdsFromMarkersFactory(markers),\n    hasNameForId: hasNameForId(names),\n    insertMarker: insertMarker,\n    insertRules: insertRules,\n    removeRules: removeRules,\n    sealed: false,\n    styleTag: null,\n    toElement: wrapAsElement(css, names),\n    toHTML: wrapAsHtmlTag(css, names)\n  };\n\n  return tag;\n};\n\nvar makeTag = function makeTag(target, tagEl, forceServer, insertBefore, getImportRuleTag) {\n  if (IS_BROWSER && !forceServer) {\n    var el = makeStyleTag(target, tagEl, insertBefore);\n\n    if (DISABLE_SPEEDY) {\n      return makeBrowserTag(el, getImportRuleTag);\n    } else {\n      return makeSpeedyTag(el, getImportRuleTag);\n    }\n  }\n\n  return makeServerTag();\n};\n\nvar rehydrate = function rehydrate(tag, els, extracted) {\n  /* add all extracted components to the new tag */\n  for (var i = 0, len = extracted.length; i < len; i += 1) {\n    var _extracted$i = extracted[i],\n        componentId = _extracted$i.componentId,\n        cssFromDOM = _extracted$i.cssFromDOM;\n\n    var cssRules = splitByRules(cssFromDOM);\n    tag.insertRules(componentId, cssRules);\n  }\n\n  /* remove old HTMLStyleElements, since they have been rehydrated */\n  for (var _i = 0, _len = els.length; _i < _len; _i += 1) {\n    var el = els[_i];\n    if (el.parentNode) {\n      el.parentNode.removeChild(el);\n    }\n  }\n};\n\n// \n\nvar SPLIT_REGEX = /\\s+/;\n\n/* determine the maximum number of components before tags are sharded */\nvar MAX_SIZE = void 0;\nif (IS_BROWSER) {\n  /* in speedy mode we can keep a lot more rules in a sheet before a slowdown can be expected */\n  MAX_SIZE = DISABLE_SPEEDY ? 40 : 1000;\n} else {\n  /* for servers we do not need to shard at all */\n  MAX_SIZE = -1;\n}\n\nvar sheetRunningId = 0;\nvar master = void 0;\n\nvar StyleSheet = function () {\n\n  /* a map from ids to tags */\n\n  /* deferred rules for a given id */\n\n  /* this is used for not reinjecting rules via hasNameForId() */\n\n  /* when rules for an id are removed using remove() we have to ignore rehydratedNames for it */\n\n  /* a list of tags belonging to this StyleSheet */\n\n  /* a tag for import rules */\n\n  /* current capacity until a new tag must be created */\n\n  /* children (aka clones) of this StyleSheet inheriting all and future injections */\n\n  function StyleSheet() {\n    var _this = this;\n\n    var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : IS_BROWSER ? document.head : null;\n    var forceServer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    classCallCheck(this, StyleSheet);\n\n    this.getImportRuleTag = function () {\n      var importRuleTag = _this.importRuleTag;\n\n      if (importRuleTag !== undefined) {\n        return importRuleTag;\n      }\n\n      var firstTag = _this.tags[0];\n      var insertBefore = true;\n\n      return _this.importRuleTag = makeTag(_this.target, firstTag ? firstTag.styleTag : null, _this.forceServer, insertBefore);\n    };\n\n    sheetRunningId += 1;\n    this.id = sheetRunningId;\n    this.forceServer = forceServer;\n    this.target = forceServer ? null : target;\n    this.tagMap = {};\n    this.deferred = {};\n    this.rehydratedNames = {};\n    this.ignoreRehydratedNames = {};\n    this.tags = [];\n    this.capacity = 1;\n    this.clones = [];\n  }\n\n  /* rehydrate all SSR'd style tags */\n\n\n  StyleSheet.prototype.rehydrate = function rehydrate$$1() {\n    if (!IS_BROWSER || this.forceServer) return this;\n\n    var els = [];\n    var extracted = [];\n    var isStreamed = false;\n\n    /* retrieve all of our SSR style elements from the DOM */\n    var nodes = document.querySelectorAll('style[' + SC_ATTR + '][' + SC_VERSION_ATTR + '=\"' + \"4.1.3\" + '\"]');\n\n    var nodesSize = nodes.length;\n\n    /* abort rehydration if no previous style tags were found */\n    if (!nodesSize) return this;\n\n    for (var i = 0; i < nodesSize; i += 1) {\n      var el = nodes[i];\n\n      /* check if style tag is a streamed tag */\n      if (!isStreamed) isStreamed = !!el.getAttribute(SC_STREAM_ATTR);\n\n      /* retrieve all component names */\n      var elNames = (el.getAttribute(SC_ATTR) || '').trim().split(SPLIT_REGEX);\n      var elNamesSize = elNames.length;\n      for (var j = 0, name; j < elNamesSize; j += 1) {\n        name = elNames[j];\n        /* add rehydrated name to sheet to avoid re-adding styles */\n        this.rehydratedNames[name] = true;\n      }\n\n      /* extract all components and their CSS */\n      extracted.push.apply(extracted, extractComps(el.textContent));\n\n      /* store original HTMLStyleElement */\n      els.push(el);\n    }\n\n    /* abort rehydration if nothing was extracted */\n    var extractedSize = extracted.length;\n    if (!extractedSize) return this;\n\n    /* create a tag to be used for rehydration */\n    var tag = this.makeTag(null);\n\n    rehydrate(tag, els, extracted);\n\n    /* reset capacity and adjust MAX_SIZE by the initial size of the rehydration */\n    this.capacity = Math.max(1, MAX_SIZE - extractedSize);\n    this.tags.push(tag);\n\n    /* retrieve all component ids */\n    for (var _j = 0; _j < extractedSize; _j += 1) {\n      this.tagMap[extracted[_j].componentId] = tag;\n    }\n\n    return this;\n  };\n\n  /* retrieve a \"master\" instance of StyleSheet which is typically used when no other is available\n   * The master StyleSheet is targeted by createGlobalStyle, keyframes, and components outside of any\n    * StyleSheetManager's context */\n\n\n  /* reset the internal \"master\" instance */\n  StyleSheet.reset = function reset() {\n    var forceServer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    master = new StyleSheet(undefined, forceServer).rehydrate();\n  };\n\n  /* adds \"children\" to the StyleSheet that inherit all of the parents' rules\n   * while their own rules do not affect the parent */\n\n\n  StyleSheet.prototype.clone = function clone() {\n    var sheet = new StyleSheet(this.target, this.forceServer);\n\n    /* add to clone array */\n    this.clones.push(sheet);\n\n    /* clone all tags */\n    sheet.tags = this.tags.map(function (tag) {\n      var ids = tag.getIds();\n      var newTag = tag.clone();\n\n      /* reconstruct tagMap */\n      for (var i = 0; i < ids.length; i += 1) {\n        sheet.tagMap[ids[i]] = newTag;\n      }\n\n      return newTag;\n    });\n\n    /* clone other maps */\n    sheet.rehydratedNames = _extends({}, this.rehydratedNames);\n    sheet.deferred = _extends({}, this.deferred);\n\n    return sheet;\n  };\n\n  /* force StyleSheet to create a new tag on the next injection */\n\n\n  StyleSheet.prototype.sealAllTags = function sealAllTags() {\n    this.capacity = 1;\n\n    this.tags.forEach(function (tag) {\n      // eslint-disable-next-line no-param-reassign\n      tag.sealed = true;\n    });\n  };\n\n  StyleSheet.prototype.makeTag = function makeTag$$1(tag) {\n    var lastEl = tag ? tag.styleTag : null;\n    var insertBefore = false;\n\n    return makeTag(this.target, lastEl, this.forceServer, insertBefore, this.getImportRuleTag);\n  };\n\n  /* get a tag for a given componentId, assign the componentId to one, or shard */\n  StyleSheet.prototype.getTagForId = function getTagForId(id) {\n    /* simply return a tag, when the componentId was already assigned one */\n    var prev = this.tagMap[id];\n    if (prev !== undefined && !prev.sealed) {\n      return prev;\n    }\n\n    var tag = this.tags[this.tags.length - 1];\n\n    /* shard (create a new tag) if the tag is exhausted (See MAX_SIZE) */\n    this.capacity -= 1;\n\n    if (this.capacity === 0) {\n      this.capacity = MAX_SIZE;\n      tag = this.makeTag(tag);\n      this.tags.push(tag);\n    }\n\n    return this.tagMap[id] = tag;\n  };\n\n  /* mainly for createGlobalStyle to check for its id */\n\n\n  StyleSheet.prototype.hasId = function hasId(id) {\n    return this.tagMap[id] !== undefined;\n  };\n\n  /* caching layer checking id+name to already have a corresponding tag and injected rules */\n\n\n  StyleSheet.prototype.hasNameForId = function hasNameForId(id, name) {\n    /* exception for rehydrated names which are checked separately */\n    if (this.ignoreRehydratedNames[id] === undefined && this.rehydratedNames[name]) {\n      return true;\n    }\n\n    var tag = this.tagMap[id];\n    return tag !== undefined && tag.hasNameForId(id, name);\n  };\n\n  /* registers a componentId and registers it on its tag */\n\n\n  StyleSheet.prototype.deferredInject = function deferredInject(id, cssRules) {\n    /* don't inject when the id is already registered */\n    if (this.tagMap[id] !== undefined) return;\n\n    var clones = this.clones;\n\n    for (var i = 0; i < clones.length; i += 1) {\n      clones[i].deferredInject(id, cssRules);\n    }\n\n    this.getTagForId(id).insertMarker(id);\n    this.deferred[id] = cssRules;\n  };\n\n  /* injects rules for a given id with a name that will need to be cached */\n\n\n  StyleSheet.prototype.inject = function inject(id, cssRules, name) {\n    var clones = this.clones;\n\n\n    for (var i = 0; i < clones.length; i += 1) {\n      clones[i].inject(id, cssRules, name);\n    }\n\n    var tag = this.getTagForId(id);\n\n    /* add deferred rules for component */\n    if (this.deferred[id] !== undefined) {\n      // Combine passed cssRules with previously deferred CSS rules\n      // NOTE: We cannot mutate the deferred array itself as all clones\n      // do the same (see clones[i].inject)\n      var rules = this.deferred[id].concat(cssRules);\n      tag.insertRules(id, rules, name);\n\n      this.deferred[id] = undefined;\n    } else {\n      tag.insertRules(id, cssRules, name);\n    }\n  };\n\n  /* removes all rules for a given id, which doesn't remove its marker but resets it */\n\n\n  StyleSheet.prototype.remove = function remove(id) {\n    var tag = this.tagMap[id];\n    if (tag === undefined) return;\n\n    var clones = this.clones;\n\n    for (var i = 0; i < clones.length; i += 1) {\n      clones[i].remove(id);\n    }\n\n    /* remove all rules from the tag */\n    tag.removeRules(id);\n\n    /* ignore possible rehydrated names */\n    this.ignoreRehydratedNames[id] = true;\n\n    /* delete possible deferred rules */\n    this.deferred[id] = undefined;\n  };\n\n  StyleSheet.prototype.toHTML = function toHTML() {\n    return this.tags.map(function (tag) {\n      return tag.toHTML();\n    }).join('');\n  };\n\n  StyleSheet.prototype.toReactElements = function toReactElements() {\n    var id = this.id;\n\n\n    return this.tags.map(function (tag, i) {\n      var key = 'sc-' + id + '-' + i;\n      return cloneElement(tag.toElement(), { key: key });\n    });\n  };\n\n  createClass(StyleSheet, null, [{\n    key: 'master',\n    get: function get$$1() {\n      return master || (master = new StyleSheet().rehydrate());\n    }\n\n    /* NOTE: This is just for backwards-compatibility with jest-styled-components */\n\n  }, {\n    key: 'instance',\n    get: function get$$1() {\n      return StyleSheet.master;\n    }\n  }]);\n  return StyleSheet;\n}();\n\n// \n\nvar Keyframes = function () {\n  function Keyframes(name, rules) {\n    var _this = this;\n\n    classCallCheck(this, Keyframes);\n\n    this.inject = function (styleSheet) {\n      if (!styleSheet.hasNameForId(_this.id, _this.name)) {\n        styleSheet.inject(_this.id, _this.rules, _this.name);\n      }\n    };\n\n    this.toString = function () {\n      throw new StyledComponentsError(12, String(_this.name));\n    };\n\n    this.name = name;\n    this.rules = rules;\n\n    this.id = 'sc-keyframes-' + name;\n  }\n\n  Keyframes.prototype.getName = function getName() {\n    return this.name;\n  };\n\n  return Keyframes;\n}();\n\n// \n\n/**\n * inlined version of\n * https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/hyphenateStyleName.js\n */\n\nvar uppercasePattern = /([A-Z])/g;\nvar msPattern = /^ms-/;\n\n/**\n * Hyphenates a camelcased CSS property name, for example:\n *\n *   > hyphenateStyleName('backgroundColor')\n *   < \"background-color\"\n *   > hyphenateStyleName('MozTransition')\n *   < \"-moz-transition\"\n *   > hyphenateStyleName('msTransition')\n *   < \"-ms-transition\"\n *\n * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix\n * is converted to `-ms-`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction hyphenateStyleName(string) {\n  return string.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');\n}\n\n// \n\n// Taken from https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react-dom/src/shared/dangerousStyleValue.js\nfunction addUnitIfNeeded(name, value) {\n  // https://github.com/amilajack/eslint-plugin-flowtype-errors/issues/133\n  // $FlowFixMe\n  if (value == null || typeof value === 'boolean' || value === '') {\n    return '';\n  }\n\n  if (typeof value === 'number' && value !== 0 && !(name in unitless)) {\n    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers\n  }\n\n  return String(value).trim();\n}\n\n// \n\n/**\n * It's falsish not falsy because 0 is allowed.\n */\nvar isFalsish = function isFalsish(chunk) {\n  return chunk === undefined || chunk === null || chunk === false || chunk === '';\n};\n\nvar objToCss = function objToCss(obj, prevKey) {\n  var css = Object.keys(obj).filter(function (key) {\n    return !isFalsish(obj[key]);\n  }).map(function (key) {\n    if (isPlainObject(obj[key])) return objToCss(obj[key], key);\n    return hyphenateStyleName(key) + ': ' + addUnitIfNeeded(key, obj[key]) + ';';\n  }).join(' ');\n  return prevKey ? prevKey + ' {\\n  ' + css + '\\n}' : css;\n};\n\nfunction flatten(chunk, executionContext, styleSheet) {\n  if (Array.isArray(chunk)) {\n    var ruleSet = [];\n\n    for (var i = 0, len = chunk.length, result; i < len; i += 1) {\n      result = flatten(chunk[i], executionContext, styleSheet);\n\n      if (result === null) continue;else if (Array.isArray(result)) ruleSet.push.apply(ruleSet, result);else ruleSet.push(result);\n    }\n\n    return ruleSet;\n  }\n\n  if (isFalsish(chunk)) {\n    return null;\n  }\n\n  /* Handle other components */\n  if (isStyledComponent(chunk)) {\n    return '.' + chunk.styledComponentId;\n  }\n\n  /* Either execute or defer the function */\n  if (isFunction(chunk)) {\n    if (executionContext) {\n      var shouldThrow = false;\n\n      try {\n        // eslint-disable-next-line new-cap\n        if (isElement(new chunk(executionContext))) {\n          shouldThrow = true;\n        }\n      } catch (e) {\n        /* */\n      }\n\n      if (shouldThrow) {\n        throw new StyledComponentsError(13, getComponentName(chunk));\n      }\n\n      return flatten(chunk(executionContext), executionContext, styleSheet);\n    } else return chunk;\n  }\n\n  if (chunk instanceof Keyframes) {\n    if (styleSheet) {\n      chunk.inject(styleSheet);\n      return chunk.getName();\n    } else return chunk;\n  }\n\n  /* Handle objects */\n  return isPlainObject(chunk) ? objToCss(chunk) : chunk.toString();\n}\n\n// \n\nfunction css(styles) {\n  for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    interpolations[_key - 1] = arguments[_key];\n  }\n\n  if (isFunction(styles) || isPlainObject(styles)) {\n    // $FlowFixMe\n    return flatten(interleave(EMPTY_ARRAY, [styles].concat(interpolations)));\n  }\n\n  // $FlowFixMe\n  return flatten(interleave(styles, interpolations));\n}\n\n// \n\nfunction constructWithOptions(componentConstructor, tag) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EMPTY_OBJECT;\n\n  if (!isValidElementType(tag)) {\n    throw new StyledComponentsError(1, String(tag));\n  }\n\n  /* This is callable directly as a template function */\n  // $FlowFixMe: Not typed to avoid destructuring arguments\n  var templateFunction = function templateFunction() {\n    return componentConstructor(tag, options, css.apply(undefined, arguments));\n  };\n\n  /* If config methods are called, wrap up a new template function and merge options */\n  templateFunction.withConfig = function (config) {\n    return constructWithOptions(componentConstructor, tag, _extends({}, options, config));\n  };\n\n  /* Modify/inject new props at runtime */\n  templateFunction.attrs = function (attrs) {\n    return constructWithOptions(componentConstructor, tag, _extends({}, options, {\n      attrs: Array.prototype.concat(options.attrs, attrs).filter(Boolean)\n    }));\n  };\n\n  return templateFunction;\n}\n\n// \n// Source: https://github.com/garycourt/murmurhash-js/blob/master/murmurhash2_gc.js\nfunction murmurhash(c) {\n  for (var e = c.length | 0, a = e | 0, d = 0, b; e >= 4;) {\n    b = c.charCodeAt(d) & 255 | (c.charCodeAt(++d) & 255) << 8 | (c.charCodeAt(++d) & 255) << 16 | (c.charCodeAt(++d) & 255) << 24, b = 1540483477 * (b & 65535) + ((1540483477 * (b >>> 16) & 65535) << 16), b ^= b >>> 24, b = 1540483477 * (b & 65535) + ((1540483477 * (b >>> 16) & 65535) << 16), a = 1540483477 * (a & 65535) + ((1540483477 * (a >>> 16) & 65535) << 16) ^ b, e -= 4, ++d;\n  }\n  switch (e) {\n    case 3:\n      a ^= (c.charCodeAt(d + 2) & 255) << 16;\n    case 2:\n      a ^= (c.charCodeAt(d + 1) & 255) << 8;\n    case 1:\n      a ^= c.charCodeAt(d) & 255, a = 1540483477 * (a & 65535) + ((1540483477 * (a >>> 16) & 65535) << 16);\n  }\n  a ^= a >>> 13;\n  a = 1540483477 * (a & 65535) + ((1540483477 * (a >>> 16) & 65535) << 16);\n  return (a ^ a >>> 15) >>> 0;\n}\n\n// \n/* eslint-disable no-bitwise */\n\n/* This is the \"capacity\" of our alphabet i.e. 2x26 for all letters plus their capitalised\n * counterparts */\nvar charsLength = 52;\n\n/* start at 75 for 'a' until 'z' (25) and then start at 65 for capitalised letters */\nvar getAlphabeticChar = function getAlphabeticChar(code) {\n  return String.fromCharCode(code + (code > 25 ? 39 : 97));\n};\n\n/* input a number, usually a hash and convert it to base-52 */\nfunction generateAlphabeticName(code) {\n  var name = '';\n  var x = void 0;\n\n  /* get a char and divide by alphabet-length */\n  for (x = code; x > charsLength; x = Math.floor(x / charsLength)) {\n    name = getAlphabeticChar(x % charsLength) + name;\n  }\n\n  return getAlphabeticChar(x % charsLength) + name;\n}\n\n// \n\nfunction hasFunctionObjectKey(obj) {\n  // eslint-disable-next-line guard-for-in, no-restricted-syntax\n  for (var key in obj) {\n    if (isFunction(obj[key])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction isStaticRules(rules, attrs) {\n  for (var i = 0; i < rules.length; i += 1) {\n    var rule = rules[i];\n\n    // recursive case\n    if (Array.isArray(rule) && !isStaticRules(rule, attrs)) {\n      return false;\n    } else if (isFunction(rule) && !isStyledComponent(rule)) {\n      // functions are allowed to be static if they're just being\n      // used to get the classname of a nested styled component\n      return false;\n    }\n  }\n\n  if (attrs.some(function (x) {\n    return isFunction(x) || hasFunctionObjectKey(x);\n  })) return false;\n\n  return true;\n}\n\n// \n\nvar isHMREnabled = process.env.NODE_ENV !== 'production' && typeof module !== 'undefined' && module.hot;\n\n/* combines hashStr (murmurhash) and nameGenerator for convenience */\nvar hasher = function hasher(str) {\n  return generateAlphabeticName(murmurhash(str));\n};\n\n/*\n ComponentStyle is all the CSS-specific stuff, not\n the React-specific stuff.\n */\n\nvar ComponentStyle = function () {\n  function ComponentStyle(rules, attrs, componentId) {\n    classCallCheck(this, ComponentStyle);\n\n    this.rules = rules;\n    this.isStatic = !isHMREnabled && isStaticRules(rules, attrs);\n    this.componentId = componentId;\n\n    if (!StyleSheet.master.hasId(componentId)) {\n      StyleSheet.master.deferredInject(componentId, []);\n    }\n  }\n\n  /*\n     * Flattens a rule set into valid CSS\n     * Hashes it, wraps the whole chunk in a .hash1234 {}\n     * Returns the hash to be injected on render()\n     * */\n\n\n  ComponentStyle.prototype.generateAndInjectStyles = function generateAndInjectStyles(executionContext, styleSheet) {\n    var isStatic = this.isStatic,\n        componentId = this.componentId,\n        lastClassName = this.lastClassName;\n\n    if (IS_BROWSER && isStatic && typeof lastClassName === 'string' && styleSheet.hasNameForId(componentId, lastClassName)) {\n      return lastClassName;\n    }\n\n    var flatCSS = flatten(this.rules, executionContext, styleSheet);\n    var name = hasher(this.componentId + flatCSS.join(''));\n    if (!styleSheet.hasNameForId(componentId, name)) {\n      styleSheet.inject(this.componentId, stringifyRules(flatCSS, '.' + name, undefined, componentId), name);\n    }\n\n    this.lastClassName = name;\n    return name;\n  };\n\n  ComponentStyle.generateName = function generateName(str) {\n    return hasher(str);\n  };\n\n  return ComponentStyle;\n}();\n\n// \n\nvar LIMIT = 200;\n\nvar createWarnTooManyClasses = (function (displayName) {\n  var generatedClasses = {};\n  var warningSeen = false;\n\n  return function (className) {\n    if (!warningSeen) {\n      generatedClasses[className] = true;\n      if (Object.keys(generatedClasses).length >= LIMIT) {\n        // Unable to find latestRule in test environment.\n        /* eslint-disable no-console, prefer-template */\n        console.warn('Over ' + LIMIT + ' classes were generated for component ' + displayName + '. \\n' + 'Consider using the attrs method, together with a style object for frequently changed styles.\\n' + 'Example:\\n' + '  const Component = styled.div.attrs({\\n' + '    style: ({ background }) => ({\\n' + '      background,\\n' + '    }),\\n' + '  })`width: 100%;`\\n\\n' + '  <Component />');\n        warningSeen = true;\n        generatedClasses = {};\n      }\n    }\n  };\n});\n\n// \n\nvar determineTheme = (function (props, fallbackTheme) {\n  var defaultProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EMPTY_OBJECT;\n\n  // Props should take precedence over ThemeProvider, which should take precedence over\n  // defaultProps, but React automatically puts defaultProps on props.\n\n  /* eslint-disable react/prop-types, flowtype-errors/show-errors */\n  var isDefaultTheme = defaultProps ? props.theme === defaultProps.theme : false;\n  var theme = props.theme && !isDefaultTheme ? props.theme : fallbackTheme || defaultProps.theme;\n  /* eslint-enable */\n\n  return theme;\n});\n\n// \nvar escapeRegex = /[[\\].#*$><+~=|^:(),\"'`-]+/g;\nvar dashesAtEnds = /(^-|-$)/g;\n\n/**\n * TODO: Explore using CSS.escape when it becomes more available\n * in evergreen browsers.\n */\nfunction escape(str) {\n  return str\n  // Replace all possible CSS selectors\n  .replace(escapeRegex, '-')\n\n  // Remove extraneous hyphens at the start and end\n  .replace(dashesAtEnds, '');\n}\n\n// \n\nfunction isTag(target) {\n  return typeof target === 'string' && (process.env.NODE_ENV !== 'production' ? target.charAt(0) === target.charAt(0).toLowerCase() : true);\n}\n\n// \n\nfunction generateDisplayName(target) {\n  // $FlowFixMe\n  return isTag(target) ? 'styled.' + target : 'Styled(' + getComponentName(target) + ')';\n}\n\nvar _TYPE_STATICS;\n\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDerivedStateFromProps: true,\n  propTypes: true,\n  type: true\n};\n\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\n\nvar TYPE_STATICS = (_TYPE_STATICS = {}, _TYPE_STATICS[ForwardRef] = {\n  $$typeof: true,\n  render: true\n}, _TYPE_STATICS);\n\nvar defineProperty$1 = Object.defineProperty,\n    getOwnPropertyNames = Object.getOwnPropertyNames,\n    _Object$getOwnPropert = Object.getOwnPropertySymbols,\n    getOwnPropertySymbols = _Object$getOwnPropert === undefined ? function () {\n  return [];\n} : _Object$getOwnPropert,\n    getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor,\n    getPrototypeOf = Object.getPrototypeOf,\n    objectPrototype = Object.prototype;\nvar arrayPrototype = Array.prototype;\n\n\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n\n    var inheritedComponent = getPrototypeOf(sourceComponent);\n\n    if (inheritedComponent && inheritedComponent !== objectPrototype) {\n      hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n    }\n\n    var keys = arrayPrototype.concat(getOwnPropertyNames(sourceComponent),\n    // $FlowFixMe\n    getOwnPropertySymbols(sourceComponent));\n\n    var targetStatics = TYPE_STATICS[targetComponent.$$typeof] || REACT_STATICS;\n\n    var sourceStatics = TYPE_STATICS[sourceComponent.$$typeof] || REACT_STATICS;\n\n    var i = keys.length;\n    var descriptor = void 0;\n    var key = void 0;\n\n    // eslint-disable-next-line no-plusplus\n    while (i--) {\n      key = keys[i];\n\n      if (\n      // $FlowFixMe\n      !KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) &&\n      // $FlowFixMe\n      !(targetStatics && targetStatics[key])) {\n        descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        if (descriptor) {\n          try {\n            // Avoid failures from read-only properties\n            defineProperty$1(targetComponent, key, descriptor);\n          } catch (e) {\n            /* fail silently */\n          }\n        }\n      }\n    }\n\n    return targetComponent;\n  }\n\n  return targetComponent;\n}\n\n// \nfunction isDerivedReactComponent(fn) {\n  return !!(fn && fn.prototype && fn.prototype.isReactComponent);\n}\n\n// \n// Helper to call a given function, only once\nvar once = (function (cb) {\n  var called = false;\n\n  return function () {\n    if (!called) {\n      called = true;\n      cb.apply(undefined, arguments);\n    }\n  };\n});\n\n// \n\nvar ThemeContext = createContext();\n\nvar ThemeConsumer = ThemeContext.Consumer;\n\n/**\n * Provide a theme to an entire react component tree via context\n */\n\nvar ThemeProvider = function (_Component) {\n  inherits(ThemeProvider, _Component);\n\n  function ThemeProvider(props) {\n    classCallCheck(this, ThemeProvider);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.getContext = memoize(_this.getContext.bind(_this));\n    _this.renderInner = _this.renderInner.bind(_this);\n    return _this;\n  }\n\n  ThemeProvider.prototype.render = function render() {\n    if (!this.props.children) return null;\n\n    return React.createElement(\n      ThemeContext.Consumer,\n      null,\n      this.renderInner\n    );\n  };\n\n  ThemeProvider.prototype.renderInner = function renderInner(outerTheme) {\n    var context = this.getContext(this.props.theme, outerTheme);\n\n    return React.createElement(\n      ThemeContext.Provider,\n      { value: context },\n      React.Children.only(this.props.children)\n    );\n  };\n\n  /**\n   * Get the theme from the props, supporting both (outerTheme) => {}\n   * as well as object notation\n   */\n\n\n  ThemeProvider.prototype.getTheme = function getTheme(theme, outerTheme) {\n    if (isFunction(theme)) {\n      var mergedTheme = theme(outerTheme);\n\n      if (process.env.NODE_ENV !== 'production' && (mergedTheme === null || Array.isArray(mergedTheme) || (typeof mergedTheme === 'undefined' ? 'undefined' : _typeof(mergedTheme)) !== 'object')) {\n        throw new StyledComponentsError(7);\n      }\n\n      return mergedTheme;\n    }\n\n    if (theme === null || Array.isArray(theme) || (typeof theme === 'undefined' ? 'undefined' : _typeof(theme)) !== 'object') {\n      throw new StyledComponentsError(8);\n    }\n\n    return _extends({}, outerTheme, theme);\n  };\n\n  ThemeProvider.prototype.getContext = function getContext(theme, outerTheme) {\n    return this.getTheme(theme, outerTheme);\n  };\n\n  return ThemeProvider;\n}(Component);\n\n// \n\nvar ServerStyleSheet = function () {\n  function ServerStyleSheet() {\n    classCallCheck(this, ServerStyleSheet);\n\n    /* The master sheet might be reset, so keep a reference here */\n    this.masterSheet = StyleSheet.master;\n    this.instance = this.masterSheet.clone();\n    this.sealed = false;\n  }\n\n  /**\n   * Mark the ServerStyleSheet as being fully emitted and manually GC it from the\n   * StyleSheet singleton.\n   */\n\n\n  ServerStyleSheet.prototype.seal = function seal() {\n    if (!this.sealed) {\n      /* Remove sealed StyleSheets from the master sheet */\n      var index = this.masterSheet.clones.indexOf(this.instance);\n      this.masterSheet.clones.splice(index, 1);\n      this.sealed = true;\n    }\n  };\n\n  ServerStyleSheet.prototype.collectStyles = function collectStyles(children) {\n    if (this.sealed) {\n      throw new StyledComponentsError(2);\n    }\n\n    return React.createElement(\n      StyleSheetManager,\n      { sheet: this.instance },\n      children\n    );\n  };\n\n  ServerStyleSheet.prototype.getStyleTags = function getStyleTags() {\n    this.seal();\n    return this.instance.toHTML();\n  };\n\n  ServerStyleSheet.prototype.getStyleElement = function getStyleElement() {\n    this.seal();\n    return this.instance.toReactElements();\n  };\n\n  ServerStyleSheet.prototype.interleaveWithNodeStream = function interleaveWithNodeStream(readableStream) {\n    var _this = this;\n\n    {\n      throw new StyledComponentsError(3);\n    }\n\n    /* the tag index keeps track of which tags have already been emitted */\n    var instance = this.instance;\n\n    var instanceTagIndex = 0;\n\n    var streamAttr = SC_STREAM_ATTR + '=\"true\"';\n\n    var transformer = new stream.Transform({\n      transform: function appendStyleChunks(chunk, /* encoding */_, callback) {\n        var tags = instance.tags;\n\n        var html = '';\n\n        /* retrieve html for each new style tag */\n        for (; instanceTagIndex < tags.length; instanceTagIndex += 1) {\n          var tag = tags[instanceTagIndex];\n          html += tag.toHTML(streamAttr);\n        }\n\n        /* force our StyleSheets to emit entirely new tags */\n        instance.sealAllTags();\n\n        /* prepend style html to chunk */\n        this.push(html + chunk);\n        callback();\n      }\n    });\n\n    readableStream.on('end', function () {\n      return _this.seal();\n    });\n    readableStream.on('error', function (err) {\n      _this.seal();\n\n      // forward the error to the transform stream\n      transformer.emit('error', err);\n    });\n\n    return readableStream.pipe(transformer);\n  };\n\n  return ServerStyleSheet;\n}();\n\n// \n\nvar StyleSheetContext = createContext();\n\nvar StyleSheetConsumer = StyleSheetContext.Consumer;\n\nvar StyleSheetManager = function (_Component) {\n  inherits(StyleSheetManager, _Component);\n\n  function StyleSheetManager(props) {\n    classCallCheck(this, StyleSheetManager);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.getContext = memoize(_this.getContext);\n    return _this;\n  }\n\n  StyleSheetManager.prototype.getContext = function getContext(sheet, target) {\n    if (sheet) {\n      return sheet;\n    } else if (target) {\n      return new StyleSheet(target);\n    } else {\n      throw new StyledComponentsError(4);\n    }\n  };\n\n  StyleSheetManager.prototype.render = function render() {\n    var _props = this.props,\n        children = _props.children,\n        sheet = _props.sheet,\n        target = _props.target;\n\n\n    return React.createElement(\n      StyleSheetContext.Provider,\n      { value: this.getContext(sheet, target) },\n      process.env.NODE_ENV !== 'production' ? React.Children.only(children) : children\n    );\n  };\n\n  return StyleSheetManager;\n}(Component);\nprocess.env.NODE_ENV !== \"production\" ? StyleSheetManager.propTypes = {\n  sheet: PropTypes.oneOfType([PropTypes.instanceOf(StyleSheet), PropTypes.instanceOf(ServerStyleSheet)]),\n\n  target: PropTypes.shape({\n    appendChild: PropTypes.func.isRequired\n  })\n} : void 0;\n\n// \n\nvar didWarnAboutClassNameUsage = new Set();\n\nvar classNameUsageCheckInjector = (function (target) {\n  var elementClassName = '';\n\n  var targetCDM = target.componentDidMount;\n\n  // eslint-disable-next-line no-param-reassign\n  target.componentDidMount = function componentDidMount() {\n    if (typeof targetCDM === 'function') {\n      targetCDM.call(this);\n    }\n\n    var forwardTarget = this.props.forwardedComponent.target;\n\n    if (target.props && target.props.suppressClassNameWarning || target.attrs && target.attrs.suppressClassNameWarning || didWarnAboutClassNameUsage.has(forwardTarget)) {\n      return;\n    }\n\n    didWarnAboutClassNameUsage.add(forwardTarget);\n\n    var classNames = elementClassName.replace(/ +/g, ' ').trim().split(' ');\n    // eslint-disable-next-line react/no-find-dom-node\n    var node = ReactDOM.findDOMNode(this);\n    var selector = classNames.map(function (s) {\n      return '.' + s;\n    }).join('');\n\n    if (node && node.nodeType === 1 && !classNames.every(function (className) {\n      return node.classList && node.classList.contains(className);\n    }) && !node.querySelector(selector)) {\n      console.warn('It looks like you\\'ve wrapped styled() around your React component (' + getComponentName(forwardTarget) + '), but the className prop is not being passed down to a child. No styles will be rendered unless className is composed within your React component.');\n    }\n  };\n\n  var prevRenderInner = target.renderInner;\n\n  // eslint-disable-next-line no-param-reassign\n  target.renderInner = function renderInner() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var element = prevRenderInner.apply(this, args);\n\n    elementClassName = element.props.className;\n\n    return element;\n  };\n});\n\n// \n\nvar identifiers = {};\n\n/* We depend on components having unique IDs */\nfunction generateId(_ComponentStyle, _displayName, parentComponentId) {\n  var displayName = typeof _displayName !== 'string' ? 'sc' : escape(_displayName);\n\n  /**\n   * This ensures uniqueness if two components happen to share\n   * the same displayName.\n   */\n  var nr = (identifiers[displayName] || 0) + 1;\n  identifiers[displayName] = nr;\n\n  var componentId = displayName + '-' + _ComponentStyle.generateName(displayName + nr);\n\n  return parentComponentId ? parentComponentId + '-' + componentId : componentId;\n}\n\n// $FlowFixMe\n\nvar StyledComponent = function (_Component) {\n  inherits(StyledComponent, _Component);\n\n  function StyledComponent() {\n    classCallCheck(this, StyledComponent);\n\n    var _this = possibleConstructorReturn(this, _Component.call(this));\n\n    _this.attrs = {};\n\n    _this.renderOuter = _this.renderOuter.bind(_this);\n    _this.renderInner = _this.renderInner.bind(_this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      _this.warnInnerRef = once(function (displayName) {\n        return (\n          // eslint-disable-next-line no-console\n          console.warn('The \"innerRef\" API has been removed in styled-components v4 in favor of React 16 ref forwarding, use \"ref\" instead like a typical component. \"innerRef\" was detected on component \"' + displayName + '\".')\n        );\n      });\n\n      _this.warnAttrsFnObjectKeyDeprecated = once(function (key, displayName) {\n        return (\n          // eslint-disable-next-line no-console\n          console.warn('Functions as object-form attrs({}) keys are now deprecated and will be removed in a future version of styled-components. Switch to the new attrs(props => ({})) syntax instead for easier and more powerful composition. The attrs key in question is \"' + key + '\" on component \"' + displayName + '\".')\n        );\n      });\n\n      _this.warnNonStyledComponentAttrsObjectKey = once(function (key, displayName) {\n        return (\n          // eslint-disable-next-line no-console\n          console.warn('It looks like you\\'ve used a non styled-component as the value for the \"' + key + '\" prop in an object-form attrs constructor of \"' + displayName + '\".\\n' + 'You should use the new function-form attrs constructor which avoids this issue: attrs(props => ({ yourStuff }))\\n' + \"To continue using the deprecated object syntax, you'll need to wrap your component prop in a function to make it available inside the styled component (you'll still get the deprecation warning though.)\\n\" + ('For example, { ' + key + ': () => InnerComponent } instead of { ' + key + ': InnerComponent }'))\n        );\n      });\n    }\n\n    if (process.env.NODE_ENV !== 'production' && IS_BROWSER) {\n      classNameUsageCheckInjector(_this);\n    }\n    return _this;\n  }\n\n  StyledComponent.prototype.render = function render() {\n    return React.createElement(\n      StyleSheetConsumer,\n      null,\n      this.renderOuter\n    );\n  };\n\n  StyledComponent.prototype.renderOuter = function renderOuter() {\n    var styleSheet = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : StyleSheet.master;\n\n    this.styleSheet = styleSheet;\n\n    // No need to subscribe a static component to theme changes, it won't change anything\n    if (this.props.forwardedComponent.componentStyle.isStatic) return this.renderInner();\n\n    return React.createElement(\n      ThemeConsumer,\n      null,\n      this.renderInner\n    );\n  };\n\n  StyledComponent.prototype.renderInner = function renderInner(theme) {\n    var _props$forwardedCompo = this.props.forwardedComponent,\n        componentStyle = _props$forwardedCompo.componentStyle,\n        defaultProps = _props$forwardedCompo.defaultProps,\n        displayName = _props$forwardedCompo.displayName,\n        foldedComponentIds = _props$forwardedCompo.foldedComponentIds,\n        styledComponentId = _props$forwardedCompo.styledComponentId,\n        target = _props$forwardedCompo.target;\n\n\n    var generatedClassName = void 0;\n    if (componentStyle.isStatic) {\n      generatedClassName = this.generateAndInjectStyles(EMPTY_OBJECT, this.props);\n    } else if (theme !== undefined) {\n      generatedClassName = this.generateAndInjectStyles(determineTheme(this.props, theme, defaultProps), this.props);\n    } else {\n      generatedClassName = this.generateAndInjectStyles(this.props.theme || EMPTY_OBJECT, this.props);\n    }\n\n    var elementToBeCreated = this.props.as || this.attrs.as || target;\n    var isTargetTag = isTag(elementToBeCreated);\n\n    var propsForElement = {};\n    var computedProps = _extends({}, this.attrs, this.props);\n\n    var key = void 0;\n    // eslint-disable-next-line guard-for-in\n    for (key in computedProps) {\n      if (process.env.NODE_ENV !== 'production' && key === 'innerRef' && isTargetTag) {\n        this.warnInnerRef(displayName);\n      }\n\n      if (key === 'forwardedComponent' || key === 'as') continue;else if (key === 'forwardedRef') propsForElement.ref = computedProps[key];else if (!isTargetTag || validAttr(key)) {\n        // Don't pass through non HTML tags through to HTML elements\n        propsForElement[key] = computedProps[key];\n      }\n    }\n\n    if (this.props.style && this.attrs.style) {\n      propsForElement.style = _extends({}, this.attrs.style, this.props.style);\n    }\n\n    propsForElement.className = Array.prototype.concat(foldedComponentIds, this.props.className, styledComponentId, this.attrs.className, generatedClassName).filter(Boolean).join(' ');\n\n    return createElement(elementToBeCreated, propsForElement);\n  };\n\n  StyledComponent.prototype.buildExecutionContext = function buildExecutionContext(theme, props, attrs) {\n    var _this2 = this;\n\n    var context = _extends({}, props, { theme: theme });\n\n    if (!attrs.length) return context;\n\n    this.attrs = {};\n\n    attrs.forEach(function (attrDef) {\n      var resolvedAttrDef = attrDef;\n      var attrDefWasFn = false;\n      var attr = void 0;\n      var key = void 0;\n\n      if (isFunction(resolvedAttrDef)) {\n        // $FlowFixMe\n        resolvedAttrDef = resolvedAttrDef(context);\n        attrDefWasFn = true;\n      }\n\n      /* eslint-disable guard-for-in */\n      // $FlowFixMe\n      for (key in resolvedAttrDef) {\n        attr = resolvedAttrDef[key];\n\n        if (!attrDefWasFn) {\n          if (isFunction(attr) && !isDerivedReactComponent(attr) && !isStyledComponent(attr)) {\n            if (process.env.NODE_ENV !== 'production') {\n              _this2.warnAttrsFnObjectKeyDeprecated(key, props.forwardedComponent.displayName);\n            }\n\n            attr = attr(context);\n\n            if (process.env.NODE_ENV !== 'production' && React.isValidElement(attr)) {\n              _this2.warnNonStyledComponentAttrsObjectKey(key, props.forwardedComponent.displayName);\n            }\n          }\n        }\n\n        _this2.attrs[key] = attr;\n        context[key] = attr;\n      }\n      /* eslint-enable */\n    });\n\n    return context;\n  };\n\n  StyledComponent.prototype.generateAndInjectStyles = function generateAndInjectStyles(theme, props) {\n    var _props$forwardedCompo2 = props.forwardedComponent,\n        attrs = _props$forwardedCompo2.attrs,\n        componentStyle = _props$forwardedCompo2.componentStyle,\n        warnTooManyClasses = _props$forwardedCompo2.warnTooManyClasses;\n\n    // statically styled-components don't need to build an execution context object,\n    // and shouldn't be increasing the number of class names\n\n    if (componentStyle.isStatic && !attrs.length) {\n      return componentStyle.generateAndInjectStyles(EMPTY_OBJECT, this.styleSheet);\n    }\n\n    var className = componentStyle.generateAndInjectStyles(this.buildExecutionContext(theme, props, attrs), this.styleSheet);\n\n    if (process.env.NODE_ENV !== 'production' && warnTooManyClasses) warnTooManyClasses(className);\n\n    return className;\n  };\n\n  return StyledComponent;\n}(Component);\n\nfunction createStyledComponent(target, options, rules) {\n  var isTargetStyledComp = isStyledComponent(target);\n  var isClass = !isTag(target);\n\n  var _options$displayName = options.displayName,\n      displayName = _options$displayName === undefined ? generateDisplayName(target) : _options$displayName,\n      _options$componentId = options.componentId,\n      componentId = _options$componentId === undefined ? generateId(ComponentStyle, options.displayName, options.parentComponentId) : _options$componentId,\n      _options$ParentCompon = options.ParentComponent,\n      ParentComponent = _options$ParentCompon === undefined ? StyledComponent : _options$ParentCompon,\n      _options$attrs = options.attrs,\n      attrs = _options$attrs === undefined ? EMPTY_ARRAY : _options$attrs;\n\n\n  var styledComponentId = options.displayName && options.componentId ? escape(options.displayName) + '-' + options.componentId : options.componentId || componentId;\n\n  // fold the underlying StyledComponent attrs up (implicit extend)\n  var finalAttrs =\n  // $FlowFixMe\n  isTargetStyledComp && target.attrs ? Array.prototype.concat(target.attrs, attrs).filter(Boolean) : attrs;\n\n  var componentStyle = new ComponentStyle(isTargetStyledComp ? // fold the underlying StyledComponent rules up (implicit extend)\n  // $FlowFixMe\n  target.componentStyle.rules.concat(rules) : rules, finalAttrs, styledComponentId);\n\n  /**\n   * forwardRef creates a new interim component, which we'll take advantage of\n   * instead of extending ParentComponent to create _another_ interim class\n   */\n  var WrappedStyledComponent = React.forwardRef(function (props, ref) {\n    return React.createElement(ParentComponent, _extends({}, props, { forwardedComponent: WrappedStyledComponent, forwardedRef: ref }));\n  });\n\n  // $FlowFixMe\n  WrappedStyledComponent.attrs = finalAttrs;\n  // $FlowFixMe\n  WrappedStyledComponent.componentStyle = componentStyle;\n  WrappedStyledComponent.displayName = displayName;\n\n  // $FlowFixMe\n  WrappedStyledComponent.foldedComponentIds = isTargetStyledComp ? // $FlowFixMe\n  Array.prototype.concat(target.foldedComponentIds, target.styledComponentId) : EMPTY_ARRAY;\n\n  // $FlowFixMe\n  WrappedStyledComponent.styledComponentId = styledComponentId;\n\n  // fold the underlying StyledComponent target up since we folded the styles\n  // $FlowFixMe\n  WrappedStyledComponent.target = isTargetStyledComp ? target.target : target;\n\n  // $FlowFixMe\n  WrappedStyledComponent.withComponent = function withComponent(tag) {\n    var previousComponentId = options.componentId,\n        optionsToCopy = objectWithoutProperties(options, ['componentId']);\n\n\n    var newComponentId = previousComponentId && previousComponentId + '-' + (isTag(tag) ? tag : escape(getComponentName(tag)));\n\n    var newOptions = _extends({}, optionsToCopy, {\n      attrs: finalAttrs,\n      componentId: newComponentId,\n      ParentComponent: ParentComponent\n    });\n\n    return createStyledComponent(tag, newOptions, rules);\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    // $FlowFixMe\n    WrappedStyledComponent.warnTooManyClasses = createWarnTooManyClasses(displayName);\n  }\n\n  // $FlowFixMe\n  WrappedStyledComponent.toString = function () {\n    return '.' + WrappedStyledComponent.styledComponentId;\n  };\n\n  if (isClass) {\n    hoistNonReactStatics(WrappedStyledComponent, target, {\n      // all SC-specific things should not be hoisted\n      attrs: true,\n      componentStyle: true,\n      displayName: true,\n      foldedComponentIds: true,\n      styledComponentId: true,\n      target: true,\n      withComponent: true\n    });\n  }\n\n  return WrappedStyledComponent;\n}\n\n// \n// Thanks to ReactDOMFactories for this handy list!\n\nvar domElements = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr',\n\n// SVG\n'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];\n\n// \n\nvar styled = function styled(tag) {\n  return constructWithOptions(createStyledComponent, tag);\n};\n\n// Shorthands for all valid HTML Elements\ndomElements.forEach(function (domElement) {\n  styled[domElement] = styled(domElement);\n});\n\n// \n\nvar GlobalStyle = function () {\n  function GlobalStyle(rules, componentId) {\n    classCallCheck(this, GlobalStyle);\n\n    this.rules = rules;\n    this.componentId = componentId;\n    this.isStatic = isStaticRules(rules, EMPTY_ARRAY);\n\n    if (!StyleSheet.master.hasId(componentId)) {\n      StyleSheet.master.deferredInject(componentId, []);\n    }\n  }\n\n  GlobalStyle.prototype.createStyles = function createStyles(executionContext, styleSheet) {\n    var flatCSS = flatten(this.rules, executionContext, styleSheet);\n    var css = stringifyRules(flatCSS, '');\n\n    styleSheet.inject(this.componentId, css);\n  };\n\n  GlobalStyle.prototype.removeStyles = function removeStyles(styleSheet) {\n    var componentId = this.componentId;\n\n    if (styleSheet.hasId(componentId)) {\n      styleSheet.remove(componentId);\n    }\n  };\n\n  // TODO: overwrite in-place instead of remove+create?\n\n\n  GlobalStyle.prototype.renderStyles = function renderStyles(executionContext, styleSheet) {\n    this.removeStyles(styleSheet);\n    this.createStyles(executionContext, styleSheet);\n  };\n\n  return GlobalStyle;\n}();\n\n// \n\n// place our cache into shared context so it'll persist between HMRs\nif (IS_BROWSER) {\n  window.scCGSHMRCache = {};\n}\n\nfunction createGlobalStyle(strings) {\n  for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    interpolations[_key - 1] = arguments[_key];\n  }\n\n  var rules = css.apply(undefined, [strings].concat(interpolations));\n  var id = 'sc-global-' + murmurhash(JSON.stringify(rules));\n  var style = new GlobalStyle(rules, id);\n\n  var GlobalStyleComponent = function (_React$Component) {\n    inherits(GlobalStyleComponent, _React$Component);\n\n    function GlobalStyleComponent() {\n      classCallCheck(this, GlobalStyleComponent);\n\n      var _this = possibleConstructorReturn(this, _React$Component.call(this));\n\n      var _this$constructor = _this.constructor,\n          globalStyle = _this$constructor.globalStyle,\n          styledComponentId = _this$constructor.styledComponentId;\n\n\n      if (IS_BROWSER) {\n        window.scCGSHMRCache[styledComponentId] = (window.scCGSHMRCache[styledComponentId] || 0) + 1;\n      }\n\n      /**\n       * This fixes HMR compatibility. Don't ask me why, but this combination of\n       * caching the closure variables via statics and then persisting the statics in\n       * state works across HMR where no other combination did. ¯\\_(ツ)_/¯\n       */\n      _this.state = {\n        globalStyle: globalStyle,\n        styledComponentId: styledComponentId\n      };\n      return _this;\n    }\n\n    GlobalStyleComponent.prototype.componentWillUnmount = function componentWillUnmount() {\n      if (window.scCGSHMRCache[this.state.styledComponentId]) {\n        window.scCGSHMRCache[this.state.styledComponentId] -= 1;\n      }\n      /**\n       * Depending on the order \"render\" is called this can cause the styles to be lost\n       * until the next render pass of the remaining instance, which may\n       * not be immediate.\n       */\n      if (window.scCGSHMRCache[this.state.styledComponentId] === 0) {\n        this.state.globalStyle.removeStyles(this.styleSheet);\n      }\n    };\n\n    GlobalStyleComponent.prototype.render = function render() {\n      var _this2 = this;\n\n      if (process.env.NODE_ENV !== 'production' && React.Children.count(this.props.children)) {\n        // eslint-disable-next-line no-console\n        console.warn('The global style component ' + this.state.styledComponentId + ' was given child JSX. createGlobalStyle does not render children.');\n      }\n\n      return React.createElement(\n        StyleSheetConsumer,\n        null,\n        function (styleSheet) {\n          _this2.styleSheet = styleSheet || StyleSheet.master;\n\n          var globalStyle = _this2.state.globalStyle;\n\n\n          if (globalStyle.isStatic) {\n            globalStyle.renderStyles(STATIC_EXECUTION_CONTEXT, _this2.styleSheet);\n\n            return null;\n          } else {\n            return React.createElement(\n              ThemeConsumer,\n              null,\n              function (theme) {\n                // $FlowFixMe\n                var defaultProps = _this2.constructor.defaultProps;\n\n\n                var context = _extends({}, _this2.props);\n\n                if (typeof theme !== 'undefined') {\n                  context.theme = determineTheme(_this2.props, theme, defaultProps);\n                }\n\n                globalStyle.renderStyles(context, _this2.styleSheet);\n\n                return null;\n              }\n            );\n          }\n        }\n      );\n    };\n\n    return GlobalStyleComponent;\n  }(React.Component);\n\n  GlobalStyleComponent.globalStyle = style;\n  GlobalStyleComponent.styledComponentId = id;\n\n\n  return GlobalStyleComponent;\n}\n\n// \n\nvar replaceWhitespace = function replaceWhitespace(str) {\n  return str.replace(/\\s|\\\\n/g, '');\n};\n\nfunction keyframes(strings) {\n  /* Warning if you've used keyframes on React Native */\n  if (process.env.NODE_ENV !== 'production' && typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    console.warn('`keyframes` cannot be used on ReactNative, only on the web. To do animation in ReactNative please use Animated.');\n  }\n\n  for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    interpolations[_key - 1] = arguments[_key];\n  }\n\n  var rules = css.apply(undefined, [strings].concat(interpolations));\n\n  var name = generateAlphabeticName(murmurhash(replaceWhitespace(JSON.stringify(rules))));\n\n  return new Keyframes(name, stringifyRules(rules, name, '@keyframes'));\n}\n\n// \n\nvar withTheme = (function (Component$$1) {\n  var WithTheme = React.forwardRef(function (props, ref) {\n    return React.createElement(\n      ThemeConsumer,\n      null,\n      function (theme) {\n        // $FlowFixMe\n        var defaultProps = Component$$1.defaultProps;\n\n        var themeProp = determineTheme(props, theme, defaultProps);\n\n        if (process.env.NODE_ENV !== 'production' && themeProp === undefined) {\n          // eslint-disable-next-line no-console\n          console.warn('[withTheme] You are not using a ThemeProvider nor passing a theme prop or a theme in defaultProps in component class \"' + getComponentName(Component$$1) + '\"');\n        }\n\n        return React.createElement(Component$$1, _extends({}, props, { theme: themeProp, ref: ref }));\n      }\n    );\n  });\n\n  hoistNonReactStatics(WithTheme, Component$$1);\n\n  WithTheme.displayName = 'WithTheme(' + getComponentName(Component$$1) + ')';\n\n  return WithTheme;\n});\n\n// \n\n/* eslint-disable */\nvar __DO_NOT_USE_OR_YOU_WILL_BE_HAUNTED_BY_SPOOKY_GHOSTS = {\n  StyleSheet: StyleSheet\n};\n\n// \n\n/* Warning if you've imported this file on React Native */\nif (process.env.NODE_ENV !== 'production' && typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n  // eslint-disable-next-line no-console\n  console.warn(\"It looks like you've imported 'styled-components' on React Native.\\n\" + \"Perhaps you're looking to import 'styled-components/native'?\\n\" + 'Read more about this at https://www.styled-components.com/docs/basics#react-native');\n}\n\n/* Warning if there are several instances of styled-components */\nif (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test' && typeof window !== 'undefined' && typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Node.js') === -1 && navigator.userAgent.indexOf('jsdom') === -1) {\n  window['__styled-components-init__'] = window['__styled-components-init__'] || 0;\n\n  if (window['__styled-components-init__'] === 1) {\n    // eslint-disable-next-line no-console\n    console.warn(\"It looks like there are several instances of 'styled-components' initialized in this application. \" + 'This may cause dynamic styles not rendering properly, errors happening during rehydration process ' + 'and makes your application bigger without a good reason.\\n\\n' + 'See https://s-c.sh/2BAXzed for more info.');\n  }\n\n  window['__styled-components-init__'] += 1;\n}\n\n//\n\nexport default styled;\nexport { css, keyframes, createGlobalStyle, isStyledComponent, ThemeConsumer, ThemeContext, ThemeProvider, withTheme, ServerStyleSheet, StyleSheetManager, __DO_NOT_USE_OR_YOU_WILL_BE_HAUNTED_BY_SPOOKY_GHOSTS };\n//# sourceMappingURL=styled-components.browser.esm.js.map\n","(function (factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? (module['exports'] = factory()) :\n\t\ttypeof define === 'function' && define['amd'] ? define(factory()) :\n\t\t\t(window['stylisRuleSheet'] = factory())\n}(function () {\n\n\t'use strict'\n\n\treturn function (insertRule) {\n\t\tvar delimiter = '/*|*/'\n\t\tvar needle = delimiter+'}'\n\n\t\tfunction toSheet (block) {\n\t\t\tif (block)\n\t\t\t\ttry {\n\t\t\t\t\tinsertRule(block + '}')\n\t\t\t\t} catch (e) {}\n\t\t}\n\n\t\treturn function ruleSheet (context, content, selectors, parents, line, column, length, ns, depth, at) {\n\t\t\tswitch (context) {\n\t\t\t\t// property\n\t\t\t\tcase 1:\n\t\t\t\t\t// @import\n\t\t\t\t\tif (depth === 0 && content.charCodeAt(0) === 64)\n\t\t\t\t\t\treturn insertRule(content+';'), ''\n\t\t\t\t\tbreak\n\t\t\t\t// selector\n\t\t\t\tcase 2:\n\t\t\t\t\tif (ns === 0)\n\t\t\t\t\t\treturn content + delimiter\n\t\t\t\t\tbreak\n\t\t\t\t// at-rule\n\t\t\t\tcase 3:\n\t\t\t\t\tswitch (ns) {\n\t\t\t\t\t\t// @font-face, @page\n\t\t\t\t\t\tcase 102:\n\t\t\t\t\t\tcase 112:\n\t\t\t\t\t\t\treturn insertRule(selectors[0]+content), ''\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn content + (at === 0 ? delimiter : '')\n\t\t\t\t\t}\n\t\t\t\tcase -2:\n\t\t\t\t\tcontent.split(needle).forEach(toSheet)\n\t\t\t}\n\t\t}\n\t}\n}))\n","!function(e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e(null):\"function\"==typeof define&&define.amd?define(e(null)):window.stylis=e(null)}(function e(a){\"use strict\";var c=/^\\0+/g,r=/[\\0\\r\\f]/g,s=/: */g,t=/zoo|gra/,i=/([,: ])(transform)/g,f=/,+\\s*(?![^(]*[)])/g,n=/ +\\s*(?![^(]*[)])/g,l=/ *[\\0] */g,o=/,\\r+?/g,h=/([\\t\\r\\n ])*\\f?&/g,u=/:global\\(((?:[^\\(\\)\\[\\]]*|\\[.*\\]|\\([^\\(\\)]*\\))*)\\)/g,d=/\\W+/g,b=/@(k\\w+)\\s*(\\S*)\\s*/,k=/::(place)/g,p=/:(read-only)/g,g=/\\s+(?=[{\\];=:>])/g,A=/([[}=:>])\\s+/g,C=/(\\{[^{]+?);(?=\\})/g,w=/\\s{2,}/g,v=/([^\\(])(:+) */g,m=/[svh]\\w+-[tblr]{2}/,x=/\\(\\s*(.*)\\s*\\)/g,$=/([\\s\\S]*?);/g,y=/-self|flex-/g,O=/[^]*?(:[rp][el]a[\\w-]+)[^]*/,j=/stretch|:\\s*\\w+\\-(?:conte|avail)/,z=/([^-])(image-set\\()/,F=\"-webkit-\",N=\"-moz-\",S=\"-ms-\",B=59,W=125,q=123,D=40,E=41,G=91,H=93,I=10,J=13,K=9,L=64,M=32,P=38,Q=45,R=95,T=42,U=44,V=58,X=39,Y=34,Z=47,_=62,ee=43,ae=126,ce=0,re=12,se=11,te=107,ie=109,fe=115,ne=112,le=111,oe=105,he=99,ue=100,de=112,be=1,ke=1,pe=0,ge=1,Ae=1,Ce=1,we=0,ve=0,me=0,xe=[],$e=[],ye=0,Oe=null,je=-2,ze=-1,Fe=0,Ne=1,Se=2,Be=3,We=0,qe=1,De=\"\",Ee=\"\",Ge=\"\";function He(e,a,s,t,i){for(var f,n,o=0,h=0,u=0,d=0,g=0,A=0,C=0,w=0,m=0,$=0,y=0,O=0,j=0,z=0,R=0,we=0,$e=0,Oe=0,je=0,ze=s.length,Je=ze-1,Re=\"\",Te=\"\",Ue=\"\",Ve=\"\",Xe=\"\",Ye=\"\";R<ze;){if(C=s.charCodeAt(R),R===Je)if(h+d+u+o!==0){if(0!==h)C=h===Z?I:Z;d=u=o=0,ze++,Je++}if(h+d+u+o===0){if(R===Je){if(we>0)Te=Te.replace(r,\"\");if(Te.trim().length>0){switch(C){case M:case K:case B:case J:case I:break;default:Te+=s.charAt(R)}C=B}}if(1===$e)switch(C){case q:case W:case B:case Y:case X:case D:case E:case U:$e=0;case K:case J:case I:case M:break;default:for($e=0,je=R,g=C,R--,C=B;je<ze;)switch(s.charCodeAt(je++)){case I:case J:case B:++R,C=g,je=ze;break;case V:if(we>0)++R,C=g;case q:je=ze}}switch(C){case q:for(g=(Te=Te.trim()).charCodeAt(0),y=1,je=++R;R<ze;){switch(C=s.charCodeAt(R)){case q:y++;break;case W:y--;break;case Z:switch(A=s.charCodeAt(R+1)){case T:case Z:R=Qe(A,R,Je,s)}break;case G:C++;case D:C++;case Y:case X:for(;R++<Je&&s.charCodeAt(R)!==C;);}if(0===y)break;R++}if(Ue=s.substring(je,R),g===ce)g=(Te=Te.replace(c,\"\").trim()).charCodeAt(0);switch(g){case L:if(we>0)Te=Te.replace(r,\"\");switch(A=Te.charCodeAt(1)){case ue:case ie:case fe:case Q:f=a;break;default:f=xe}if(je=(Ue=He(a,f,Ue,A,i+1)).length,me>0&&0===je)je=Te.length;if(ye>0)if(f=Ie(xe,Te,Oe),n=Pe(Be,Ue,f,a,ke,be,je,A,i,t),Te=f.join(\"\"),void 0!==n)if(0===(je=(Ue=n.trim()).length))A=0,Ue=\"\";if(je>0)switch(A){case fe:Te=Te.replace(x,Me);case ue:case ie:case Q:Ue=Te+\"{\"+Ue+\"}\";break;case te:if(Ue=(Te=Te.replace(b,\"$1 $2\"+(qe>0?De:\"\")))+\"{\"+Ue+\"}\",1===Ae||2===Ae&&Le(\"@\"+Ue,3))Ue=\"@\"+F+Ue+\"@\"+Ue;else Ue=\"@\"+Ue;break;default:if(Ue=Te+Ue,t===de)Ve+=Ue,Ue=\"\"}else Ue=\"\";break;default:Ue=He(a,Ie(a,Te,Oe),Ue,t,i+1)}Xe+=Ue,O=0,$e=0,z=0,we=0,Oe=0,j=0,Te=\"\",Ue=\"\",C=s.charCodeAt(++R);break;case W:case B:if((je=(Te=(we>0?Te.replace(r,\"\"):Te).trim()).length)>1){if(0===z)if((g=Te.charCodeAt(0))===Q||g>96&&g<123)je=(Te=Te.replace(\" \",\":\")).length;if(ye>0)if(void 0!==(n=Pe(Ne,Te,a,e,ke,be,Ve.length,t,i,t)))if(0===(je=(Te=n.trim()).length))Te=\"\\0\\0\";switch(g=Te.charCodeAt(0),A=Te.charCodeAt(1),g){case ce:break;case L:if(A===oe||A===he){Ye+=Te+s.charAt(R);break}default:if(Te.charCodeAt(je-1)===V)break;Ve+=Ke(Te,g,A,Te.charCodeAt(2))}}O=0,$e=0,z=0,we=0,Oe=0,Te=\"\",C=s.charCodeAt(++R)}}switch(C){case J:case I:if(h+d+u+o+ve===0)switch($){case E:case X:case Y:case L:case ae:case _:case T:case ee:case Z:case Q:case V:case U:case B:case q:case W:break;default:if(z>0)$e=1}if(h===Z)h=0;else if(ge+O===0&&t!==te&&Te.length>0)we=1,Te+=\"\\0\";if(ye*We>0)Pe(Fe,Te,a,e,ke,be,Ve.length,t,i,t);be=1,ke++;break;case B:case W:if(h+d+u+o===0){be++;break}default:switch(be++,Re=s.charAt(R),C){case K:case M:if(d+o+h===0)switch(w){case U:case V:case K:case M:Re=\"\";break;default:if(C!==M)Re=\" \"}break;case ce:Re=\"\\\\0\";break;case re:Re=\"\\\\f\";break;case se:Re=\"\\\\v\";break;case P:if(d+h+o===0&&ge>0)Oe=1,we=1,Re=\"\\f\"+Re;break;case 108:if(d+h+o+pe===0&&z>0)switch(R-z){case 2:if(w===ne&&s.charCodeAt(R-3)===V)pe=w;case 8:if(m===le)pe=m}break;case V:if(d+h+o===0)z=R;break;case U:if(h+u+d+o===0)we=1,Re+=\"\\r\";break;case Y:case X:if(0===h)d=d===C?0:0===d?C:d;break;case G:if(d+h+u===0)o++;break;case H:if(d+h+u===0)o--;break;case E:if(d+h+o===0)u--;break;case D:if(d+h+o===0){if(0===O)switch(2*w+3*m){case 533:break;default:y=0,O=1}u++}break;case L:if(h+u+d+o+z+j===0)j=1;break;case T:case Z:if(d+o+u>0)break;switch(h){case 0:switch(2*C+3*s.charCodeAt(R+1)){case 235:h=Z;break;case 220:je=R,h=T}break;case T:if(C===Z&&w===T&&je+2!==R){if(33===s.charCodeAt(je+2))Ve+=s.substring(je,R+1);Re=\"\",h=0}}}if(0===h){if(ge+d+o+j===0&&t!==te&&C!==B)switch(C){case U:case ae:case _:case ee:case E:case D:if(0===O){switch(w){case K:case M:case I:case J:Re+=\"\\0\";break;default:Re=\"\\0\"+Re+(C===U?\"\":\"\\0\")}we=1}else switch(C){case D:if(z+7===R&&108===w)z=0;O=++y;break;case E:if(0==(O=--y))we=1,Re+=\"\\0\"}break;case K:case M:switch(w){case ce:case q:case W:case B:case U:case re:case K:case M:case I:case J:break;default:if(0===O)we=1,Re+=\"\\0\"}}if(Te+=Re,C!==M&&C!==K)$=C}}m=w,w=C,R++}if(je=Ve.length,me>0)if(0===je&&0===Xe.length&&0===a[0].length==false)if(t!==ie||1===a.length&&(ge>0?Ee:Ge)===a[0])je=a.join(\",\").length+2;if(je>0){if(f=0===ge&&t!==te?function(e){for(var a,c,s=0,t=e.length,i=Array(t);s<t;++s){for(var f=e[s].split(l),n=\"\",o=0,h=0,u=0,d=0,b=f.length;o<b;++o){if(0===(h=(c=f[o]).length)&&b>1)continue;if(u=n.charCodeAt(n.length-1),d=c.charCodeAt(0),a=\"\",0!==o)switch(u){case T:case ae:case _:case ee:case M:case D:break;default:a=\" \"}switch(d){case P:c=a+Ee;case ae:case _:case ee:case M:case E:case D:break;case G:c=a+c+Ee;break;case V:switch(2*c.charCodeAt(1)+3*c.charCodeAt(2)){case 530:if(Ce>0){c=a+c.substring(8,h-1);break}default:if(o<1||f[o-1].length<1)c=a+Ee+c}break;case U:a=\"\";default:if(h>1&&c.indexOf(\":\")>0)c=a+c.replace(v,\"$1\"+Ee+\"$2\");else c=a+c+Ee}n+=c}i[s]=n.replace(r,\"\").trim()}return i}(a):a,ye>0)if(void 0!==(n=Pe(Se,Ve,f,e,ke,be,je,t,i,t))&&0===(Ve=n).length)return Ye+Ve+Xe;if(Ve=f.join(\",\")+\"{\"+Ve+\"}\",Ae*pe!=0){if(2===Ae&&!Le(Ve,2))pe=0;switch(pe){case le:Ve=Ve.replace(p,\":\"+N+\"$1\")+Ve;break;case ne:Ve=Ve.replace(k,\"::\"+F+\"input-$1\")+Ve.replace(k,\"::\"+N+\"$1\")+Ve.replace(k,\":\"+S+\"input-$1\")+Ve}pe=0}}return Ye+Ve+Xe}function Ie(e,a,c){var r=a.trim().split(o),s=r,t=r.length,i=e.length;switch(i){case 0:case 1:for(var f=0,n=0===i?\"\":e[0]+\" \";f<t;++f)s[f]=Je(n,s[f],c,i).trim();break;default:f=0;var l=0;for(s=[];f<t;++f)for(var h=0;h<i;++h)s[l++]=Je(e[h]+\" \",r[f],c,i).trim()}return s}function Je(e,a,c,r){var s=a,t=s.charCodeAt(0);if(t<33)t=(s=s.trim()).charCodeAt(0);switch(t){case P:switch(ge+r){case 0:case 1:if(0===e.trim().length)break;default:return s.replace(h,\"$1\"+e.trim())}break;case V:switch(s.charCodeAt(1)){case 103:if(Ce>0&&ge>0)return s.replace(u,\"$1\").replace(h,\"$1\"+Ge);break;default:return e.trim()+s.replace(h,\"$1\"+e.trim())}default:if(c*ge>0&&s.indexOf(\"\\f\")>0)return s.replace(h,(e.charCodeAt(0)===V?\"\":\"$1\")+e.trim())}return e+s}function Ke(e,a,c,r){var l,o=0,h=e+\";\",u=2*a+3*c+4*r;if(944===u)return function(e){var a=e.length,c=e.indexOf(\":\",9)+1,r=e.substring(0,c).trim(),s=e.substring(c,a-1).trim();switch(e.charCodeAt(9)*qe){case 0:break;case Q:if(110!==e.charCodeAt(10))break;default:for(var t=s.split((s=\"\",f)),i=0,c=0,a=t.length;i<a;c=0,++i){for(var l=t[i],o=l.split(n);l=o[c];){var h=l.charCodeAt(0);if(1===qe&&(h>L&&h<90||h>96&&h<123||h===R||h===Q&&l.charCodeAt(1)!==Q))switch(isNaN(parseFloat(l))+(-1!==l.indexOf(\"(\"))){case 1:switch(l){case\"infinite\":case\"alternate\":case\"backwards\":case\"running\":case\"normal\":case\"forwards\":case\"both\":case\"none\":case\"linear\":case\"ease\":case\"ease-in\":case\"ease-out\":case\"ease-in-out\":case\"paused\":case\"reverse\":case\"alternate-reverse\":case\"inherit\":case\"initial\":case\"unset\":case\"step-start\":case\"step-end\":break;default:l+=De}}o[c++]=l}s+=(0===i?\"\":\",\")+o.join(\" \")}}if(s=r+s+\";\",1===Ae||2===Ae&&Le(s,1))return F+s+s;return s}(h);else if(0===Ae||2===Ae&&!Le(h,1))return h;switch(u){case 1015:return 97===h.charCodeAt(10)?F+h+h:h;case 951:return 116===h.charCodeAt(3)?F+h+h:h;case 963:return 110===h.charCodeAt(5)?F+h+h:h;case 1009:if(100!==h.charCodeAt(4))break;case 969:case 942:return F+h+h;case 978:return F+h+N+h+h;case 1019:case 983:return F+h+N+h+S+h+h;case 883:if(h.charCodeAt(8)===Q)return F+h+h;if(h.indexOf(\"image-set(\",11)>0)return h.replace(z,\"$1\"+F+\"$2\")+h;return h;case 932:if(h.charCodeAt(4)===Q)switch(h.charCodeAt(5)){case 103:return F+\"box-\"+h.replace(\"-grow\",\"\")+F+h+S+h.replace(\"grow\",\"positive\")+h;case 115:return F+h+S+h.replace(\"shrink\",\"negative\")+h;case 98:return F+h+S+h.replace(\"basis\",\"preferred-size\")+h}return F+h+S+h+h;case 964:return F+h+S+\"flex-\"+h+h;case 1023:if(99!==h.charCodeAt(8))break;return l=h.substring(h.indexOf(\":\",15)).replace(\"flex-\",\"\").replace(\"space-between\",\"justify\"),F+\"box-pack\"+l+F+h+S+\"flex-pack\"+l+h;case 1005:return t.test(h)?h.replace(s,\":\"+F)+h.replace(s,\":\"+N)+h:h;case 1e3:switch(o=(l=h.substring(13).trim()).indexOf(\"-\")+1,l.charCodeAt(0)+l.charCodeAt(o)){case 226:l=h.replace(m,\"tb\");break;case 232:l=h.replace(m,\"tb-rl\");break;case 220:l=h.replace(m,\"lr\");break;default:return h}return F+h+S+l+h;case 1017:if(-1===h.indexOf(\"sticky\",9))return h;case 975:switch(o=(h=e).length-10,u=(l=(33===h.charCodeAt(o)?h.substring(0,o):h).substring(e.indexOf(\":\",7)+1).trim()).charCodeAt(0)+(0|l.charCodeAt(7))){case 203:if(l.charCodeAt(8)<111)break;case 115:h=h.replace(l,F+l)+\";\"+h;break;case 207:case 102:h=h.replace(l,F+(u>102?\"inline-\":\"\")+\"box\")+\";\"+h.replace(l,F+l)+\";\"+h.replace(l,S+l+\"box\")+\";\"+h}return h+\";\";case 938:if(h.charCodeAt(5)===Q)switch(h.charCodeAt(6)){case 105:return l=h.replace(\"-items\",\"\"),F+h+F+\"box-\"+l+S+\"flex-\"+l+h;case 115:return F+h+S+\"flex-item-\"+h.replace(y,\"\")+h;default:return F+h+S+\"flex-line-pack\"+h.replace(\"align-content\",\"\").replace(y,\"\")+h}break;case 973:case 989:if(h.charCodeAt(3)!==Q||122===h.charCodeAt(4))break;case 931:case 953:if(true===j.test(e))if(115===(l=e.substring(e.indexOf(\":\")+1)).charCodeAt(0))return Ke(e.replace(\"stretch\",\"fill-available\"),a,c,r).replace(\":fill-available\",\":stretch\");else return h.replace(l,F+l)+h.replace(l,N+l.replace(\"fill-\",\"\"))+h;break;case 962:if(h=F+h+(102===h.charCodeAt(5)?S+h:\"\")+h,c+r===211&&105===h.charCodeAt(13)&&h.indexOf(\"transform\",10)>0)return h.substring(0,h.indexOf(\";\",27)+1).replace(i,\"$1\"+F+\"$2\")+h}return h}function Le(e,a){var c=e.indexOf(1===a?\":\":\"{\"),r=e.substring(0,3!==a?c:10),s=e.substring(c+1,e.length-1);return Oe(2!==a?r:r.replace(O,\"$1\"),s,a)}function Me(e,a){var c=Ke(a,a.charCodeAt(0),a.charCodeAt(1),a.charCodeAt(2));return c!==a+\";\"?c.replace($,\" or ($1)\").substring(4):\"(\"+a+\")\"}function Pe(e,a,c,r,s,t,i,f,n,l){for(var o,h=0,u=a;h<ye;++h)switch(o=$e[h].call(Te,e,u,c,r,s,t,i,f,n,l)){case void 0:case false:case true:case null:break;default:u=o}switch(u){case void 0:case false:case true:case null:case a:break;default:return u}}function Qe(e,a,c,r){for(var s=a+1;s<c;++s)switch(r.charCodeAt(s)){case Z:if(e===T)if(r.charCodeAt(s-1)===T&&a+2!==s)return s+1;break;case I:if(e===Z)return s+1}return s}function Re(e){for(var a in e){var c=e[a];switch(a){case\"keyframe\":qe=0|c;break;case\"global\":Ce=0|c;break;case\"cascade\":ge=0|c;break;case\"compress\":we=0|c;break;case\"semicolon\":ve=0|c;break;case\"preserve\":me=0|c;break;case\"prefix\":if(Oe=null,!c)Ae=0;else if(\"function\"!=typeof c)Ae=1;else Ae=2,Oe=c}}return Re}function Te(a,c){if(void 0!==this&&this.constructor===Te)return e(a);var s=a,t=s.charCodeAt(0);if(t<33)t=(s=s.trim()).charCodeAt(0);if(qe>0)De=s.replace(d,t===G?\"\":\"-\");if(t=1,1===ge)Ge=s;else Ee=s;var i,f=[Ge];if(ye>0)if(void 0!==(i=Pe(ze,c,f,f,ke,be,0,0,0,0))&&\"string\"==typeof i)c=i;var n=He(xe,f,c,0,0);if(ye>0)if(void 0!==(i=Pe(je,n,f,f,ke,be,n.length,0,0,0))&&\"string\"!=typeof(n=i))t=0;return De=\"\",Ge=\"\",Ee=\"\",pe=0,ke=1,be=1,we*t==0?n:n.replace(r,\"\").replace(g,\"\").replace(A,\"$1\").replace(C,\"$1\").replace(w,\" \")}if(Te.use=function e(a){switch(a){case void 0:case null:ye=$e.length=0;break;default:switch(a.constructor){case Array:for(var c=0,r=a.length;c<r;++c)e(a[c]);break;case Function:$e[ye++]=a;break;case Boolean:We=0|!!a}}return e},Te.set=Re,void 0!==a)Re(a);return Te});\n//# sourceMappingURL=stylis.min.js.map","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar punycode = require('punycode');\nvar util = require('./util');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n","'use strict';\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n","module.exports = (__webpack_require__(/*! dll-reference dll_831a3634f66cb1dada0c */ \"dll-reference dll_831a3634f66cb1dada0c\"))(\"./node_modules/webpack/buildin/global.js\");","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","module.exports = function(module) {\r\n\tif (!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif (!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n","import React, { Component } from \"react\";\nimport Link from \"next/link\";\nimport styled from \"styled-components\";\nimport XYZ from \"../components/XY\";\n\nconst BackBtn = styled.button`\n  width: 250px;\n  font-size: 2rem;\n  background: seashell;\n  font-weight: bold;\n  text-decoration: none;\n  border-radius: 10px;\n  border: 2px solid #333;\n  margin-bottom: 25px;\n`;\n\nconst ChartXY = props => (\n  <div>\n    <Link href=\"/\">\n      <BackBtn>Back</BackBtn>\n    </Link>\n    <h1>Example XY Chart</h1>\n    <XYZ paddingRight={55} />\n  </div>\n);\n\nexport default ChartXY;\n","module.exports = dll_831a3634f66cb1dada0c;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AA1DA;AACA;AA4DA;;;;;;;;;;;;ACprkivvplvaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjizxjxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClthpnRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzjrjbtxjjlFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACptJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzjvttndA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClzjtvbv2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClhxxmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClnxpotzevqznGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzgjghrazbxnkzhlvixnnnvzdxzhxGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC5LA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChhhzotlhztx5BA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC3EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrrlrtGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACtgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC3NA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC1GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC7LA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrtLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACppylkCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC/mvlrqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC7ZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC5IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxhtxhHA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrjbrjWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvlTA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnrNA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChxLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvrfvnLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnpbvprbvpzvocpvngxrrrrvnpcztMA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC1FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrgBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC1DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxvnhCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC7DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC7EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzhpXA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;ACDA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpBA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACdA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACRA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjDA;AACA;;;;;;;;;;;;ACDA;AACA;AACA;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AACA;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AACA;;;;;;;;;;;;ACDA;AACA;;;;;;;;;;;;ACDA;AACA;;;;;;;;;;;;ACDA;AACA;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AACA;AACA;;;;;;;;;;;;ACFA;AACA;AACA;AACA;;;;;;;;;;;;ACHA;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACtnBA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AACA;AACA;AACA;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AACA;AACA;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACLA;AACA;AACA;AACA;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACPA;AACA;;;;;;;;;;;;ACDA;AACA;AACA;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AACA;AACA;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrBA;AACA;AACA;;;;;;;;;;;;ACFA;;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AACA;AACA;AACA;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACRA;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AACA;AACA;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;;;;;;;;;;;;ACHA;AACA;AACA;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACRA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC7RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChzOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACXA;AACA;;;;;;;;;;;;ACDA;AACA;;;;;;;;;;;;ACDA;AACA;AACA;AACA;;;;;;;;;;;;ACHA;;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA,azDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrhrjzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACpaA;AACA;AACA;;;;;;;;;;;;;ACphhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACbvLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAIA;;;;;;;;;;;;AC3BA;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpFA;AACA;AACA;AACA;;;;;;;;;;;;ACHA;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClOA;AACA;AACA,aAEA;AACA;AACA;;;;;;;;;;;;ACNA;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACphtx8EA;AACA;AACA,WACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC/CA;AACA;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACztBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACfA;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AAEA;AACA;AAUA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AACA;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;;;;A","sourceRoot":""}